OBJECT Codeunit 14000821 Bill of Lading Management
{
  OBJECT-PROPERTIES
  {
    Date=06/15/21;
    Time=[ 6:37:50 AM];
    Modified=Yes;
    Version List=SE0.62,ASN,3178,TPZ3202;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Shipping@1000000000 : Codeunit 14000701;
      Text001@1001 : TextConst 'ENU=Create New Bill of Lading for remaining Documents?';
      Text004@1004 : TextConst 'ENU=Bill of Lading %1.';
      Text007@1007 : TextConst 'ENU=Level is 99.';
      Text008@1008 : TextConst 'ENU=Package %1.';
      Text009@1009 : TextConst 'ENU=Shipment %1';
      Text010@1010 : TextConst 'ENU=%1 cannot be blank.';
      Text011@1011 : TextConst 'ENU=%1 %2 (Sales Order %3)';
      Text012@1012 : TextConst 'ENU=Level not required for ASN.';
      Text013@1013 : TextConst 'ENU=" %1 should not be used."';
      Text014@1014 : TextConst 'ENU=Tare %1.';
      Text015@1015 : TextConst 'ENU="%1 cannot be blank. "';
      Text016@1016 : TextConst 'ENU=There are no sales orders to distribute the shipping charge on.';
      Text017@1017 : TextConst 'ENU="Posted Documents already exist on Bill of Lading. "';
      Text018@1018 : TextConst 'ENU=Do you want to split the cost on the remaining Sales Orders?';
      Text019@1019 : TextConst 'ENU="Sales Orders have no remaining amount to distribute "';
      Text020@1020 : TextConst 'ENU=There are no sales orders to remove the shipping charge from.';
      Text021@1021 : TextConst 'ENU=Do you want to remove the cost on the remaining Sales Orders?';
      Text022@1022 : TextConst 'ENU=Mask %1 has too many C Digits.';
      Text023@1023 : TextConst 'ENU=Manufacturer Identification cannot be blank.';
      Text024@1024 : TextConst 'ENU=Manufacturer Identification must be %1 digits.';
      Text025@1025 : TextConst 'ENU=Manufacturer Identification must be digits only.';
      Text026@1026 : TextConst 'ENU=The Number must be %1 characters or less.';
      Text027@1027 : TextConst 'ENU=Number %1 must only contain digits.';
      Text028@1028 : TextConst 'ENU=Check Digit must be last in %1.';
      Text029@1029 : TextConst 'ENU=Mask %1 is illegal.';
      Text030@1030 : TextConst 'ENU=Weight cannot be blank.';
      Text031@1031 : TextConst 'ENU=%1 is not a legal Printing Mask for %2';
      Text032@1240030000 : TextConst 'ENU=Prioritized ASN Summary is not setup properly in Packing Rule %1.';
      PostedPackageLineTmp@1240020003 : TEMPORARY Record 14000705;
      AllowCommodityInfoLines@1240020000 : Boolean;
      Text033@1240020001 : TextConst 'ENU=A FedEx Bill of Lading has already been generated.';
      Text50000@1000000001 : TextConst 'ENU=To post Bill of Lading No. %1, you must first post the shipment for %2. Bill of Lading Line %3';
      ZeroASN@1240020002 : Boolean;
      NonShippedItemFound@1240020004 : Boolean;
      DuplicateItemASN@1240020005 : Boolean;
      OverrideASNSummary@1240020006 : Boolean;
      DuplicateItemOverrideSummary@1240020007 : Boolean;
      ZeroShippedLineNo@1240020008 : Integer;
      LicensePlateLineTemp@1000000002 : TEMPORARY Record 23044506;
      TempIWXLPHdr@1000000003 : TEMPORARY Record 23044505;

    PROCEDURE CloseBillOfLading@2(VAR CurrentBillOfLading@1000000000 : Record 14000822;Selection@1000000005 : Integer);
    VAR
      BillOfLading@1000000001 : Record 14000822;
      BillOfLadingLine@1000000002 : Record 14000823;
      BillOfLadingLine2@1240030000 : Record 14000823;
      BillOfLadingInfoLine@1240020000 : Record 14000827;
      PackingRule@1000000006 : Record 14000715;
      SalesLine@1000000007 : Record 37;
      SalesHeader@1000000004 : Record 36;
      TextErrorDistribute@1000000003 : TextConst 'ENU=You must Enter shipping charge and click Distribute Shipping Charge before Releasing this document %1';
    BEGIN
      WITH CurrentBillOfLading DO BEGIN
        TESTFIELD(Posted,FALSE);

        BillOfLadingLine.RESET;
        BillOfLadingLine.SETRANGE("Bill of Lading No.","No.");
        BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::"Bill of Lading");
        IF BillOfLadingLine.FIND('-') THEN BEGIN
          BillOfLading.GET(BillOfLadingLine."No.");
          BillOfLading.TESTFIELD(Released,TRUE);
        END;

        PackingRule.GetPackingRule("Ship-to Type","Ship-to No.","Ship-to Code");
        CheckRequiredFields(PackingRule,CurrentBillOfLading);

        //TM BEG 070915 - avoid system removing unposted so from bol when user release bol.
        PackingRule."Release Bill of Lading Action" := 3;
        //TM END 070915

        BillOfLadingLine.RESET;
        BillOfLadingLine.SETRANGE("Bill of Lading No.","No.");
        BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
        IF BillOfLadingLine.FIND('-') THEN BEGIN
          IF PackingRule."Release Bill of Lading Action" >
             PackingRule."Release Bill of Lading Action"::Ask
          THEN
            Selection := PackingRule."Release Bill of Lading Action";

          IF Selection = 0 THEN
            IF CONFIRM(Text001) THEN
              Selection := 1
            ELSE
              Selection := 2;

          CASE Selection OF
            1:
              BEGIN
                CLEAR(BillOfLading);
                BillOfLading.INSERT(TRUE);
                BillOfLading.Description := Description;
                BillOfLading."Ship-to No." := "Ship-to No.";
                BillOfLading."Ship-to Code" := "Ship-to Code";
                BillOfLading.MODIFY(TRUE);

                REPEAT
                  BillOfLadingLine2 := BillOfLadingLine;
                  BillOfLadingLine.DELETE(TRUE);
                  BillOfLadingLine2."Bill of Lading No." := BillOfLading."No.";
                  BillOfLadingLine2.INSERT(TRUE);
                UNTIL BillOfLadingLine.NEXT = 0;
              END;
            2:
              BEGIN
                REPEAT
                  BillOfLadingLine.DELETE(TRUE);
                UNTIL BillOfLadingLine.NEXT = 0;
              END;
            //TM BEG 070915
             3:
               BEGIN
               END;
            //TM END 070915
            ELSE
              EXIT;
          END;
        END;

        BillOfLadingLine.RESET;
        BillOfLadingLine.SETRANGE("Bill of Lading No.","No.");

        //TM BEG 070915
        //BillOfLadingLine.SETFILTER(Type, '<>%1', BillOfLadingLine.Type::Order);
        //BillOfLadingLine.MODIFYALL(Closed,TRUE,TRUE); ORIGINAL CODES
        IF BillOfLadingLine.FINDSET THEN
        REPEAT
          //<TPZ1518>
          IF (BillOfLadingLine.Type=BillOfLadingLine.Type::Order) AND (NOT "Cost On Documents") THEN BEGIN
              SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
              SalesHeader.SETRANGE("No.",BillOfLadingLine."Source ID");
              SalesHeader.SETFILTER("Shipping Payment Type",'%1|%2', SalesHeader."Shipping Payment Type"::Prepaid,SalesHeader."Shipping Payment Type"::Consignee);
              IF SalesHeader.FINDFIRST THEN BEGIN
                 SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
                 SalesLine.SETRANGE("Document No.",SalesHeader."No.");
                 SalesLine.SETRANGE("Shipping Charge",TRUE);
                 IF NOT SalesLine.FINDFIRST THEN
                    ERROR(TextErrorDistribute,"No.");
              END;
          END;
          //<TPZ1518>

          BillOfLadingLine.SuspendTestReleased(TRUE);
          BillOfLadingLine.VALIDATE(Closed, TRUE);
          BillOfLadingLine.MODIFY(TRUE);
        UNTIL BillOfLadingLine.NEXT = 0;
        //TM END 070915


        "Calculation Weight" := GetWeight;
        "Calculation Volume" := GetVolume;
        // XXX Missing Dimension Handling
        "Calculation Value" := GetValue;
        "Calculation Insured Value" := GetInsuredValue;
        IF "Packing Date" = 0D THEN
          "Packing Date" := WORKDATE;
        IF "Pickup Date" = 0D THEN
          "Pickup Date" := WORKDATE;

        IF ("VICS Bill of Lading No." = '') AND PackingRule."Create VICS BOL No. on Close" THEN
          CreateVicsBOLNo(CurrentBillOfLading);

        BillOfLadingLine.RESET;
        BillOfLadingLine.SETCURRENTKEY(Type,"No.");
        BillOfLadingLine.SETRANGE(Type,BillOfLadingLine2.Type::"Bill of Lading");
        BillOfLadingLine.SETRANGE("No.","No.");
        BillOfLadingLine.SETRANGE("Source Type",DATABASE::"Bill of Lading");
        BillOfLadingLine.SETRANGE("Source Subtype",0);
        BillOfLadingLine.SETRANGE("Source ID","No.");
        IF BillOfLadingLine.FIND('-') THEN
          REPEAT
            BillOfLadingLine2 := BillOfLadingLine;
            BillOfLadingLine2.Type := BillOfLadingLine2.Type::"Bill of Lading (Released)";
            BillOfLadingLine2."External Tracking No." := CurrentBillOfLading."External Tracking No.";
            BillOfLadingLine2.Weight := "Calculation Weight";
            BillOfLadingLine2.Volume := "Calculation Volume";
            BillOfLadingLine2.Value := "Calculation Value";
            BillOfLadingLine2.MODIFY(TRUE);
          UNTIL BillOfLadingLine.NEXT = 0;

        Released := TRUE;
        MODIFY;

        CreateBillOfLadingInfoLines(CurrentBillOfLading,FALSE);

        UpdateSummaryLines(CurrentBillOfLading);

        IF AllowCommodityInfoLines THEN
          CreateCommodityInfoLines(CurrentBillOfLading);
      END;
    END;

    PROCEDURE OpenBillOfLading@3(VAR CurrentBillOfLading@1000000000 : Record 14000822);
    VAR
      BillOfLadingLine@1000000001 : Record 14000823;
      BillOfLadingLine2@1240030000 : Record 14000823;
      BillOfLading@1240030001 : Record 14000822;
    BEGIN
      WITH CurrentBillOfLading DO BEGIN
        TESTFIELD("Summary Released",FALSE);
        TESTFIELD(Posted,FALSE);
        TESTFIELD("Shipping Bill Verified",FALSE);
        TESTFIELD("Manifest No.",'');

        BillOfLadingLine.RESET;
        BillOfLadingLine.SETCURRENTKEY(Type,"No.");
        BillOfLadingLine.SETRANGE(Type,BillOfLadingLine2.Type::"Bill of Lading (Released)");
        BillOfLadingLine.SETRANGE("No.","No.");
        BillOfLadingLine.SETRANGE("Source Type",DATABASE::"Bill of Lading");
        BillOfLadingLine.SETRANGE("Source Subtype",0);
        BillOfLadingLine.SETRANGE("Source ID","No.");
        IF BillOfLadingLine.FIND('-') THEN
          REPEAT
            BillOfLading.GET(BillOfLadingLine."Bill of Lading No.");
            BillOfLading.TESTFIELD(Released,FALSE);

            BillOfLadingLine2 := BillOfLadingLine;
            BillOfLadingLine2.Type := BillOfLadingLine2.Type::"Bill of Lading";
            BillOfLadingLine2."External Tracking No." := '';
            BillOfLadingLine2.Weight := 0;
            BillOfLadingLine2.Volume := 0;
            BillOfLadingLine2.Value := 0;
            BillOfLadingLine2.MODIFY(TRUE);
          UNTIL BillOfLadingLine.NEXT = 0;

        Released := FALSE;
        MODIFY;

        BillOfLadingLine.RESET;
        BillOfLadingLine.SETRANGE("Bill of Lading No.","No.");
        BillOfLadingLine.MODIFYALL(Closed,FALSE,TRUE);
      END;
    END;

    PROCEDURE CloseBOLSummary@12(VAR CurrentBillOfLading@1000000000 : Record 14000822);
    BEGIN
      WITH CurrentBillOfLading DO BEGIN
        TESTFIELD(Released);
        IF EDIPostBeforeSendASNCheck(CurrentBillOfLading) = FALSE THEN
          TESTFIELD(Posted,FALSE);

        "Summary Released" := TRUE;
        MODIFY;
      END;
    END;

    PROCEDURE OpenBOLSummary@11(VAR CurrentBillOfLading@1000000000 : Record 14000822);
    BEGIN
      WITH CurrentBillOfLading DO BEGIN
        TESTFIELD(Posted,FALSE);
        TESTFIELD("Shipping Bill Verified",FALSE);
      //  TESTFIELD("EDI ASN Generated",FALSE);

        "Summary Released" := FALSE;
        MODIFY;
      END;
    END;

    PROCEDURE PostBillOfLading@14(VAR CurrentBillOfLading@1000000000 : Record 14000822;ASNSend@1240020002 : Boolean);
    VAR
      PackingRule@1240020000 : Record 14000715;
      SalesSetup@1240020004 : Record 311;
      EMailMgt@1240020003 : Codeunit 14000903;
      BypassASNSendOnBOLPosting@1240020001 : Boolean;
      BillOfLadingInfoLine@1000000001 : Record 14000827;
      BillOfLadingLine@1000000002 : Record 14000823;
    BEGIN
      WITH CurrentBillOfLading DO BEGIN
        TESTFIELD(Released);
        TESTFIELD("Summary Released");
        TESTFIELD(Posted,FALSE);

        IF PackingRule.GetPackingRule("Ship-to Type","Ship-to No.","Ship-to Code") THEN
          BypassASNSendOnBOLPosting := PackingRule."Allow BOL Post Before ASN Send"
        ELSE
          BypassASNSendOnBOLPosting := FALSE;

        //TM BEG 070915
        BillOfLadingLine.SETRANGE("Bill of Lading No.", "No.");
        BillOfLadingLine.MODIFYALL(Closed, TRUE);
        //TM END 070915
        IF "EDI ASN" THEN BEGIN
          IF ASNSend THEN BEGIN
            IF BypassASNSendOnBOLPosting = FALSE THEN BEGIN
               IF "EDI BSN" THEN
                  TESTFIELD("EDI BSN Generated")
                ELSE
                 TESTFIELD("EDI ASN Generated");
            END;
          END ELSE BEGIN
            IF BypassASNSendOnBOLPosting = FALSE THEN BEGIN
             IF "EDI BSN" THEN
                TESTFIELD("EDI BSN Generated")
              ELSE
               TESTFIELD("EDI ASN Generated");
            END;
          END;
        END;

        Posted := TRUE;
        MODIFY;
      END;

      SalesSetup.GET;
      IF SalesSetup."Enable E-Mail" THEN
        EMailMgt.SendBillOfLadingNotification(CurrentBillOfLading,FALSE,FALSE);
    END;

    PROCEDURE UnPostBillOfLading@20(VAR CurrentBillOfLading@1240030000 : Record 14000822);
    BEGIN
      WITH CurrentBillOfLading DO BEGIN
        TESTFIELD(Released);
        TESTFIELD("Summary Released");
        TESTFIELD(Posted);

        Posted := FALSE;
        MODIFY;
      END;
    END;

    PROCEDURE ModifyPostedBillOfLading@15(CurrentBillOfLading@1000000000 : Record 14000822);
    VAR
      BillOfLading@1000000001 : Record 14000822;
    BEGIN
      WITH CurrentBillOfLading DO BEGIN
        BillOfLading.GET("No.");
        BillOfLading."E-Mail Notification Handled" := "E-Mail Notification Handled";
        BillOfLading.MODIFY;
      END;
    END;

    PROCEDURE UpdateSummaryLines@1(CurrentBillOfLading@1000000000 : Record 14000822);
    VAR
      PackingRule@1000000003 : Record 14000715;
    BEGIN
      WITH CurrentBillOfLading DO BEGIN
        TESTFIELD(Posted,FALSE);
        TESTFIELD("Summary Released",FALSE);
      //  TESTFIELD("EDI ASN Generated",FALSE);

        PackingRule.GetPackingRule("Ship-to Type","Ship-to No.","Ship-to Code");

        IF PackingRule."ASN Summary Type" > 0 THEN BEGIN
          IF PackingRule."ASN Requires Non-Shipped Items" THEN BEGIN
            PostedPackageLineTmp.RESET;
            PostedPackageLineTmp.DELETEALL;
            GetZeroShipmentLines(CurrentBillOfLading);
          END;
        END;

        UpdateStdSummaryLines(CurrentBillOfLading,FALSE);

        IF PackingRule."BOL Summary from Pack. Summary" THEN
          UpdateStdSummaryLines(CurrentBillOfLading,TRUE);

        IF PackingRule."ASN Summary Type" > 0 THEN BEGIN
          DuplicateItemASN := PackingRule."ASN Line Data Not Summarized";
          UpdateASNSummaryLines(CurrentBillOfLading);
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateStdSummaryLines@4(CurrentBillOfLading@1000000000 : Record 14000822;FromPackageSummary@1240030001 : Boolean);
    VAR
      BOLSumLine@1000000001 : Record 14000825;
      BOLSumLine2@1000000002 : Record 14000825;
      BOLSumLine3@1240030002 : Record 14000825;
      BillOfLadingLine@1000000003 : Record 14000823;
      SalesShipmentHeader@1000000004 : Record 110;
      PostedPackage@1000000005 : Record 14000704;
      PackingControl@1240030000 : Record 14000717;
      BillOfLading@1240030003 : Record 14000822;
      LastOrderNo@1000000006 : Code[20];
      LastShipmentNo@1000000007 : Code[20];
      LevelParent@1000000008 : ARRAY [100] OF Integer;
      BOLSumLineLevel@1000000009 : Integer;
      LevelPackageNo@1000000010 : ARRAY [5] OF Code[20];
      LevelLineNo@1000000011 : ARRAY [5] OF Integer;
      Package@1000000012 : Record 14000701;
      SalesHeader@1000000013 : Record 36;
      LicensePlateHeader@1000000014 : Record 23044505;
    BEGIN
      IF NOT FromPackageSummary THEN BEGIN
        BOLSumLine.RESET;
        BOLSumLine.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
        BOLSumLine.DELETEALL;
      END;

      BOLSumLine.INIT;
      BOLSumLine."Bill of Lading No." := CurrentBillOfLading."No.";
      IF FromPackageSummary THEN
        BOLSumLine."Bill of Lading Type" := BOLSumLine."Bill of Lading Type"::"Package Summary"
      ELSE
        BOLSumLine."Bill of Lading Type" := BOLSumLine."Bill of Lading Type"::Standard;
      BOLSumLine."Line No." := 1;
      BOLSumLine."Parent Line No." := 0;
      BOLSumLine.Level := 1;
      BOLSumLine.Type := BOLSumLine.Type::"Bill of Lading";
      BOLSumLine."No." := CurrentBillOfLading."No.";
      BOLSumLine.Description := CurrentBillOfLading.Description;
      BOLSumLine."Type Description" :=
        STRSUBSTNO(Text004,CurrentBillOfLading."No.");
      BOLSumLine."External Tracking No." := CurrentBillOfLading."External Tracking No.";
      BOLSumLine.INSERT;

      LevelParent[BOLSumLine.Level] := BOLSumLine."Line No.";
      LastOrderNo := '';
      LastShipmentNo := 'X Y Z';

      BillOfLadingLine.RESET;
      BillOfLadingLine.SETCURRENTKEY(
        "Bill of Lading No.","Source Type","Source Subtype","Source ID",Type);
      BillOfLadingLine.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
      BillOfLadingLine.SETFILTER("No.",'<>%1','');
      IF BillOfLadingLine.FIND('-') THEN
        REPEAT
          IF (BillOfLadingLine."Source ID" <> LastOrderNo) AND
             (BillOfLadingLine.Type <> BillOfLadingLine.Type::"Bill of Lading (Released)")
          THEN BEGIN
            BOLSumLine.INIT;
            BOLSumLine."Line No." := BOLSumLine."Line No." + 1;
            BOLSumLine.Level := 2;
            BOLSumLine."Parent Line No." :=
             LevelParent[BOLSumLine.Level - 1];
            BOLSumLine.Type := BOLSumLine.Type::Order;
            BOLSumLine."No." := BillOfLadingLine."Source ID";
            BOLSumLine.Description := '';
            BOLSumLine."Type Description" :=
              PackingControl.FormatSource(
                BillOfLadingLine."Source Type",BillOfLadingLine."Source Subtype",
                BillOfLadingLine."Source ID");
            BOLSumLine."Source Type" := BillOfLadingLine."Source Type";
            BOLSumLine."Source Subtype" := BillOfLadingLine."Source Subtype";
            BOLSumLine."Source ID" := BillOfLadingLine."Source ID";
            BOLSumLine."Posted Source ID" := BillOfLadingLine."Posted Source ID";
            BOLSumLine.INSERT;

            LevelParent[BOLSumLine.Level] := BOLSumLine."Line No.";
            LastOrderNo := BillOfLadingLine."Source ID";
            LastShipmentNo := 'X Y Z';
          END;

          IF (BillOfLadingLine."No." <> LastShipmentNo) AND
             (BillOfLadingLine.Type <> BillOfLadingLine.Type::"Bill of Lading (Released)")
          THEN BEGIN
            IF NOT SalesShipmentHeader.GET(BillOfLadingLine."Posted Source ID") THEN
              CLEAR(SalesShipmentHeader);

            BOLSumLine.INIT;
            BOLSumLine."Line No." := BOLSumLine."Line No." + 1;
            BOLSumLine.Level := 3;
            BOLSumLine."Parent Line No." :=
              LevelParent[BOLSumLine.Level - 1];
            BOLSumLine.Type := BOLSumLine.Type::Shipment;
            BOLSumLine."No." := BillOfLadingLine."Source ID";
            BOLSumLine.Description := '';
            BOLSumLine."Type Description" :=
              PackingControl.FormatPostedSource(
                BillOfLadingLine."Source Type",BillOfLadingLine."Source Subtype",
                BillOfLadingLine."Posted Source ID");
            BOLSumLine."Source Type" := BillOfLadingLine."Source Type";
            BOLSumLine."Source Subtype" := BillOfLadingLine."Source Subtype";
            BOLSumLine."Source ID" := BillOfLadingLine."Source ID";
            BOLSumLine."Posted Source ID" := BillOfLadingLine."Posted Source ID";
            IF SalesShipmentHeader."External Document No." <> '' THEN
              BOLSumLine."External Document No." :=
                SalesShipmentHeader."External Document No."
            ELSE
              IF BillOfLadingLine.Type = BillOfLadingLine.Type::Package THEN BEGIN
                PostedPackage.GET(BillOfLadingLine."No.");
                BOLSumLine."External Document No." :=
                  PostedPackage."External Document No.";
              END;
            BOLSumLine.INSERT;

            LevelParent[BOLSumLine.Level] := BOLSumLine."Line No.";
            LastShipmentNo := BillOfLadingLine."Posted Source ID";
          END;

          CASE BillOfLadingLine.Type OF
            BillOfLadingLine.Type::"Sales Shipment (Posted)",
            BillOfLadingLine.Type::"Purchase Credit Memo (Posted)",
            BillOfLadingLine.Type::"Return Shipment (Posted)",
            BillOfLadingLine.Type::"Transfer Shipment (Posted)":
              BEGIN
                PostedPackage.RESET;
                PostedPackage.SETCURRENTKEY("Source Type","Source Subtype","Posted Source ID");
                PostedPackage.SETRANGE("Source Type",BillOfLadingLine."Source Type");
                PostedPackage.SETRANGE("Posted Source ID",BillOfLadingLine."Posted Source ID");
                IF PostedPackage.FIND('-') THEN
                  REPEAT
                    PostedPackage.CALCFIELDS("Exist in Other Package");
                    IF PostedPackage."Original Package No." <> '' THEN
                      PostedPackage.CALCFIELDS("Original Exist in Other Pack.")
                    ELSE
                      PostedPackage."Original Exist in Other Pack." := FALSE;
                    IF NOT PostedPackage."Exist in Other Package" AND
                       NOT PostedPackage."Original Exist in Other Pack."
                    THEN
                      UpdateStdRecursePackage(
                        BOLSumLine,LevelParent,PostedPackage,4,
                        PostedPackage."UCC No.",
                        PostedPackage."UCC No. (Print)",
                        PostedPackage."RF-ID (Hex)",
                        SalesShipmentHeader."External Document No.",LevelPackageNo,LevelLineNo);
                  UNTIL PostedPackage.NEXT = 0;
                //-->>3202
                GetLPTrackingNo(BillOfLadingLine."Posted Source ID");
                IF TempIWXLPHdr.FINDSET THEN
                  REPEAT
                    UpdateStdRecurseLP(
                      BOLSumLine,LevelParent,4,
                      PostedPackage."UCC No.",
                      PostedPackage."UCC No. (Print)",
                      PostedPackage."RF-ID (Hex)",
                      SalesShipmentHeader."External Document No.",SalesShipmentHeader."No.",LevelPackageNo,LevelLineNo);
                  UNTIL TempIWXLPHdr.NEXT = 0;
                  //<<--3202
              END;
            //-->gg
            BillOfLadingLine.Type::Order:
              BEGIN
                Package.RESET;
                Package.SETCURRENTKEY("Source Type","Source Subtype","Posted Source ID");
                Package.SETRANGE("Source Type",BillOfLadingLine."Source Type");
                //PostedPackage.SETRANGE("Posted Source ID",BillOfLadingLine."Posted Source ID");
                Package.SETRANGE("Source ID",BillOfLadingLine."Source ID");
                IF Package.FIND('-') THEN
                  REPEAT
                    IF SalesHeader.GET(BillOfLadingLine."Source Subtype",BillOfLadingLine."Source ID") THEN;
                    Package.CALCFIELDS("Exist in Other Package");
                    IF Package."Original Package No." <> '' THEN
                      Package.CALCFIELDS("Original Exist in Other Pack.")
                    ELSE
                      Package."Original Exist in Other Pack." := FALSE;
                    IF NOT Package."Exist in Other Package" AND
                       NOT Package."Original Exist in Other Pack."
                    THEN
                      UpdateStdRecurseUnPostedPackage(
                        BOLSumLine,LevelParent,Package,4,
                        Package."UCC No.",
                        Package."UCC No. (Print)",
                        Package."RF-ID (Hex)",
                        Package."External Document No.",LevelPackageNo,LevelLineNo);
                  UNTIL Package.NEXT = 0;
              END;

            //<--gg
            BillOfLadingLine.Type::Package:
              BEGIN
                PostedPackage.GET(BillOfLadingLine."No.");
                IF SalesShipmentHeader."External Document No." <> '' THEN
                  UpdateStdRecursePackage(
                    BOLSumLine,LevelParent,PostedPackage,4,
                    PostedPackage."UCC No.",
                    PostedPackage."UCC No. (Print)",
                    PostedPackage."RF-ID (Hex)",
                    SalesShipmentHeader."External Document No.",LevelPackageNo,LevelLineNo)
                ELSE
                  UpdateStdRecursePackage(
                    BOLSumLine,LevelParent,PostedPackage,4,
                    PostedPackage."UCC No.",
                    PostedPackage."UCC No. (Print)",
                    PostedPackage."RF-ID (Hex)",
                    PostedPackage."External Document No.",LevelPackageNo,LevelLineNo);
              END;
            BillOfLadingLine.Type::"Bill of Lading (Released)":
              BEGIN
                BillOfLading.GET(BillOfLadingLine."Source ID");

                BOLSumLine2.RESET;
                BOLSumLine2.SETCURRENTKEY("Bill of Lading No.","Bill of Lading Type");
                BOLSumLine2.SETRANGE("Bill of Lading No.",BillOfLading."No.");
                BOLSumLine2.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type");
                IF BOLSumLine2.FIND('-') THEN BEGIN
                  REPEAT
                    BOLSumLine3 := BOLSumLine2;
                    BOLSumLine3."Bill of Lading No." := CurrentBillOfLading."No.";
                    BOLSumLine3."Line No." := BOLSumLine3."Line No." + BOLSumLine."Line No.";
                    IF BOLSumLine3.Level = 1 THEN
                      BOLSumLine3."Parent Line No." := 1
                    ELSE
                      BOLSumLine3."Parent Line No." :=
                        BOLSumLine3."Parent Line No." + BOLSumLine."Line No.";
                    BOLSumLine3.Level := BOLSumLine3.Level + 1;
                    IF BOLSumLine3."First Level Line No." <> 0 THEN
                      BOLSumLine3."First Level Line No." :=
                        BOLSumLine3."First Level Line No." + BOLSumLine."Line No.";
                    IF BOLSumLine3."Second Level Line No." <> 0 THEN
                      BOLSumLine3."Second Level Line No." :=
                        BOLSumLine3."Second Level Line No." + BOLSumLine."Line No.";
                    IF BOLSumLine3."Third Level Line No." <> 0 THEN
                      BOLSumLine3."Third Level Line No." :=
                        BOLSumLine3."Third Level Line No." + BOLSumLine."Line No.";
                    IF BOLSumLine3."Fourth Level Line No." <> 0 THEN
                      BOLSumLine3."Fourth Level Line No." :=
                        BOLSumLine3."Fourth Level Line No." + BOLSumLine."Line No.";
                    IF BOLSumLine3."Fifth Level Line No." <> 0 THEN
                      BOLSumLine3."Fifth Level Line No." :=
                        BOLSumLine3."Fifth Level Line No." + BOLSumLine."Line No.";
                    BOLSumLine3."Bill of Lading in BOL" := TRUE;
                    BOLSumLine3.INSERT;
                  UNTIL BOLSumLine2.NEXT = 0;

                  BOLSumLine."Line No." := BOLSumLine3."Line No.";
                END;
              END;
          END;
        UNTIL BillOfLadingLine.NEXT = 0;

      BOLSumLine.RESET;
      BOLSumLine.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
      IF FromPackageSummary THEN
        BOLSumLine.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type"::"Package Summary")
      ELSE
        BOLSumLine.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type"::Standard);
      FOR BOLSumLineLevel := 3 DOWNTO 1 DO BEGIN
        BOLSumLine.SETRANGE(Level,BOLSumLineLevel);
        IF BOLSumLine.FIND('-') THEN
          REPEAT
            IF NOT BOLSumLine."Bill of Lading in BOL" THEN BEGIN
              BOLSumLine.Weight := 0;
              BOLSumLine.Volume := 0;
              BOLSumLine.Value := 0;

              BOLSumLine2.RESET;
              BOLSumLine2.SETCURRENTKEY("Bill of Lading No.","Bill of Lading Type","Parent Line No.");
              BOLSumLine2.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
              BOLSumLine2.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type");
              BOLSumLine2.SETRANGE("Parent Line No.",BOLSumLine."Line No.");
              IF BOLSumLine2.FIND('-') THEN
                REPEAT
                  BOLSumLine.Weight := BOLSumLine.Weight + BOLSumLine2.Weight;
                  BOLSumLine.Volume := BOLSumLine.Volume + BOLSumLine2.Volume;
                  BOLSumLine.Value := BOLSumLine.Value + BOLSumLine2.Value;
                  BOLSumLine."Package Line Quantity" :=
                    BOLSumLine."Package Line Quantity" + BOLSumLine2."Package Line Quantity";
                  BOLSumLine."Package Line Quantity (Base)" :=
                    BOLSumLine."Package Line Quantity (Base)" +
                    BOLSumLine2."Package Line Quantity (Base)";
                  BOLSumLine."No. of Packages with Packages" :=
                    BOLSumLine."No. of Packages with Packages" +
                    BOLSumLine2."No. of Packages with Packages";
                  BOLSumLine."No. of Packages with Items" :=
                    BOLSumLine."No. of Packages with Items" +
                    BOLSumLine2."No. of Packages with Items";
                UNTIL BOLSumLine2.NEXT = 0;

              BOLSumLine.MODIFY;
            END;
          UNTIL BOLSumLine.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateStdRecursePackage@6(VAR BOLSumLine@1000000000 : Record 14000825;VAR LevelParent@1000000001 : ARRAY [100] OF Integer;CurrentPostedPackage@1000000002 : Record 14000704;CurrentLevel@1000000003 : Integer;ParentUCC128No@1000000004 : Code[30];ParentUCC128NoPrint@1000000005 : Code[30];ParentRFID@1240030000 : Code[50];ParentExternalDocNo@1000000006 : Code[35];LevelPackageNo@1000000007 : ARRAY [5] OF Code[20];LevelLineNo@1000000008 : ARRAY [5] OF Integer);
    VAR
      PostedPackage@1000000011 : Record 14000704;
      PostedPackageLine@1000000012 : Record 14000705;
      ItemUnitOfMeasure@1000000013 : Record 5404;
      BOLSumLinePackage@1000000014 : Record 14000825;
      PackageSummaryLine@1240030001 : Record 14000964;
      PackageNoToShow@1000000009 : Code[20];
      i@1000000010 : Integer;
    BEGIN
      IF CurrentLevel >= 99 THEN
        ERROR(Text007);

      IF CurrentPostedPackage."Original Package No." <> '' THEN
        PackageNoToShow := CurrentPostedPackage."Original Package No."
      ELSE
        PackageNoToShow := CurrentPostedPackage."No.";

      BOLSumLine.INIT;
      BOLSumLine."Line No." := BOLSumLine."Line No." + 1;
      BOLSumLine.Level := CurrentLevel;
      BOLSumLine."Parent Line No." := LevelParent[BOLSumLine.Level - 1];
      BOLSumLine.Type := BOLSumLine.Type::Package;
      BOLSumLine."No." := PackageNoToShow;
      BOLSumLine.Description := CurrentPostedPackage.Description;
      BOLSumLine."Type Description" := STRSUBSTNO(Text008,PackageNoToShow);
      BOLSumLine."Source Type" := CurrentPostedPackage."Source Type";
      BOLSumLine."Source Subtype" := CurrentPostedPackage."Source Subtype";
      BOLSumLine."Source ID" := CurrentPostedPackage."Source ID";
      BOLSumLine."Posted Source ID" := CurrentPostedPackage."Posted Source ID";
      BOLSumLine."Package No." := PackageNoToShow;
      IF CurrentLevel <= ARRAYLEN(LevelPackageNo) THEN BEGIN
        LevelPackageNo[CurrentLevel - 3] := PackageNoToShow;
        LevelLineNo[CurrentLevel - 3] := BOLSumLine."Line No.";
      END;
      SetLevelFields(BOLSumLine,LevelPackageNo,LevelLineNo);
      BOLSumLine."External Tracking No." := CurrentPostedPackage."External Tracking No.";
      BOLSumLine.Weight := CurrentPostedPackage."Calculation Weight";
      BOLSumLine.Volume := CurrentPostedPackage."Calculation Volume";
      BOLSumLine.Value := CurrentPostedPackage."Calculation Value";
      BOLSumLine."Multi Document" := CurrentPostedPackage."Multi Document Package";

      IF CurrentPostedPackage."UCC No." <> '' THEN BEGIN
        ParentUCC128No := CurrentPostedPackage."UCC No.";
        ParentUCC128NoPrint := CurrentPostedPackage."UCC No. (Print)";
        ParentRFID := CurrentPostedPackage."RF-ID (Hex)";
      END;
      BOLSumLine."UCC No." := ParentUCC128No;
      BOLSumLine."UCC No. (Print)" := ParentUCC128NoPrint;
      BOLSumLine."RF-ID (Hex)" := ParentRFID;
      IF CurrentPostedPackage."External Document No." <> '' THEN
        ParentExternalDocNo := CurrentPostedPackage."External Document No.";
      BOLSumLine."External Document No." := ParentExternalDocNo;
      PostedPackageLine.RESET;
      PostedPackageLine.SETRANGE("Package No.",CurrentPostedPackage."No.");
      PostedPackageLine.SETRANGE(Type,PostedPackageLine.Type::Package);
      PostedPackageLine.SETFILTER("No.",'<>%1','');
      IF PostedPackageLine.FIND('-') THEN BEGIN
        PostedPackageLine.SETFILTER(Type,'<>%1',PostedPackageLine.Type::Package);
        BOLSumLine."Package Contains Only Packages" := NOT PostedPackageLine.FIND('-');
      END ELSE
        BOLSumLine."Package Contains Only Packages" := FALSE;
      BOLSumLine.INSERT;
      BOLSumLinePackage := BOLSumLine;

      LevelParent[BOLSumLine.Level] := BOLSumLine."Line No.";

      CASE BOLSumLine."Bill of Lading Type" OF
        BOLSumLine."Bill of Lading Type"::Standard:
          BEGIN
            PostedPackageLine.RESET;
            PostedPackageLine.SETRANGE("Package No.",CurrentPostedPackage."No.");
            PostedPackageLine.SETFILTER(
              Type,'<>%1&<>%2',PostedPackageLine.Type::Package,PostedPackageLine.Type::" ");
            PostedPackageLine.SETFILTER(Quantity,'<>0');
            IF PostedPackageLine.FIND('-') THEN BEGIN
              BOLSumLinePackage."No. of Packages with Items" := 1;
              NonShippedItemFound := FALSE;
              IF ZeroASN THEN BEGIN
                PostedPackageLineTmp.RESET;
                PostedPackageLineTmp.SETRANGE("Package No.",PostedPackageLine."Package No.");
                IF PostedPackageLineTmp.FIND('-') THEN
                  NonShippedItemFound := TRUE
                ELSE
                  NonShippedItemFound := FALSE;
              END;

              REPEAT
                BOLSumLine."Line No." := BOLSumLine."Line No." + 1;
                BOLSumLine.Level := CurrentLevel + 1;
                BOLSumLine."Parent Line No." := LevelParent[BOLSumLine.Level - 1];
                BOLSumLine.Type := BOLSumLine.Type::Item;
                BOLSumLine."No." := PostedPackageLine."No.";
                BOLSumLine.Description := PostedPackageLine.Description;
                IF (PostedPackageLine.Quantity < PostedPackageLine."Quantity (Base)") AND
                   (PostedPackageLine.Type = PostedPackageLine.Type::Item)
                THEN BEGIN
                  ItemUnitOfMeasure.RESET;
                  ItemUnitOfMeasure.SETRANGE("Item No.",PostedPackageLine."No.");
                  ItemUnitOfMeasure.SETRANGE("Qty. per Unit of Measure",1);
                  IF NOT ItemUnitOfMeasure.FIND('-') THEN
                    CLEAR(ItemUnitOfMeasure);

                  BOLSumLine."Type Description" :=
                    STRSUBSTNO(
                      '%1 %2 %3 %4 %5 (%6 %7).',PostedPackageLine.Type,PostedPackageLine."No.",
                      PostedPackageLine.Description,PostedPackageLine.Quantity,
                      PostedPackageLine."Unit of Measure Code",PostedPackageLine."Quantity (Base)",
                      ItemUnitOfMeasure.Code);
                END ELSE
                  BOLSumLine."Type Description" :=
                    STRSUBSTNO(
                      '%1 %2 %3 %4 %5.',PostedPackageLine.Type,PostedPackageLine."No.",
                      PostedPackageLine.Description,PostedPackageLine.Quantity,
                      PostedPackageLine."Unit of Measure Code");
                BOLSumLine."Source Type" := CurrentPostedPackage."Source Type";
                BOLSumLine."Source Subtype" := CurrentPostedPackage."Source Subtype";
                BOLSumLine."Source ID" := CurrentPostedPackage."Source ID";
                BOLSumLine."Posted Source ID" := CurrentPostedPackage."Posted Source ID";
                SetLevelFields(BOLSumLine,LevelPackageNo,LevelLineNo);
                BOLSumLine."UCC No." := ParentUCC128No;
                BOLSumLine."UCC No. (Print)" := ParentUCC128NoPrint;
                BOLSumLine."RF-ID (Hex)" := ParentRFID;
                BOLSumLine."External Document No." := ParentExternalDocNo;
                BOLSumLine."Package No." := PackageNoToShow;
                BOLSumLine."Package Line Line No." := PostedPackageLine."Line No.";
                BOLSumLine."Package Line Type" := PostedPackageLine.Type;
                BOLSumLine."Package Line No." := PostedPackageLine."No.";
                BOLSumLine."Package Line Variant Code" := PostedPackageLine."Variant Code";
                BOLSumLine."Package Line Unit of Measure" :=
                  PostedPackageLine."Unit of Measure Code";
                BOLSumLine."Package Line Quantity" := PostedPackageLine.Quantity;
                BOLSumLine."Package Line Quantity (Base)" := PostedPackageLine."Quantity (Base)";
                BOLSumLine."Multi Package Line Quantity" := PostedPackageLine."Multi Document Quantity";
                BOLSumLine."Multi Package Line Qty. (Base)" :=
                  PostedPackageLine."Multi Document Qty. (Base)";
                BOLSumLine."Multi Document" := CurrentPostedPackage."Multi Document Package";
                BOLSumLine."Item UPC/EAN Number" := PostedPackageLine."Item UPC/EAN Number";
                BOLSumLine."Item UPC/EAN Number (Print)" :=
                  PostedPackageLine."Item UPC/EAN Number (Print)";
                BOLSumLine."Std. Pack UPC/EAN Number" := PostedPackageLine."Std. Pack UPC/EAN Number";
                BOLSumLine."Std. Pack UPC/EAN No. (Print)" :=
                  PostedPackageLine."Std. Pack UPC/EAN No. (Print)";
                BOLSumLine."One Unit of Measure Code" := ItemUnitOfMeasure.Code;
                BOLSumLine.INSERT;

                BOLSumLinePackage."Package Line Quantity" :=
                  BOLSumLinePackage."Package Line Quantity" + BOLSumLine."Package Line Quantity";
                BOLSumLinePackage."Package Line Quantity (Base)" :=
                  BOLSumLinePackage."Package Line Quantity (Base)" +
                  BOLSumLine."Package Line Quantity (Base)";
              UNTIL PostedPackageLine.NEXT = 0;
             IF NonShippedItemFound THEN
               InsertNonShippedItem(
                 BOLSumLine,LevelParent,CurrentPostedPackage,PostedPackageLineTmp,CurrentLevel,
                 ParentUCC128No,ParentUCC128NoPrint,ParentRFID,ParentExternalDocNo,LevelPackageNo,
                 LevelLineNo);
            END;
          END;
        BOLSumLine."Bill of Lading Type"::"Package Summary":
          BEGIN
            PackageSummaryLine.RESET;
            PackageSummaryLine.SETRANGE("Package No.",CurrentPostedPackage."No.");
            PackageSummaryLine.SETFILTER(Type,'<>%1',PackageSummaryLine.Type::Package);
            IF CurrentPostedPackage."Multi Document Package" THEN
              PackageSummaryLine.SETFILTER(Quantity,'<>0');
            IF PackageSummaryLine.FIND('-') THEN BEGIN
              BOLSumLinePackage."No. of Packages with Items" := 1;

              REPEAT
                BOLSumLine."Line No." := BOLSumLine."Line No." + 1;
                BOLSumLine.Level := CurrentLevel + 1;
                BOLSumLine."Parent Line No." := LevelParent[BOLSumLine.Level - 1];
                BOLSumLine.Type := BOLSumLine.Type::Item;
                BOLSumLine."No." := PackageSummaryLine."No.";
                BOLSumLine.Description := PackageSummaryLine.Description;
                IF (PackageSummaryLine.Quantity < PackageSummaryLine."Quantity (Base)") AND
                   (PackageSummaryLine.Type = PackageSummaryLine.Type::Item)
                THEN BEGIN
                  ItemUnitOfMeasure.RESET;
                  ItemUnitOfMeasure.SETRANGE("Item No.",PackageSummaryLine."No.");
                  ItemUnitOfMeasure.SETRANGE("Qty. per Unit of Measure",1);
                  IF NOT ItemUnitOfMeasure.FIND('-') THEN
                    CLEAR(ItemUnitOfMeasure);

                  BOLSumLine."Type Description" :=
                    STRSUBSTNO(
                      '%1 %2 %3 %4 %5 (%6 %7).',PackageSummaryLine.Type,PackageSummaryLine."No.",
                      PackageSummaryLine.Description,PackageSummaryLine.Quantity,
                      PackageSummaryLine."Unit of Measure Code",PackageSummaryLine."Quantity (Base)",
                      ItemUnitOfMeasure.Code);
                END ELSE
                  BOLSumLine."Type Description" :=
                    STRSUBSTNO(
                      '%1 %2 %3 %4 %5.',PackageSummaryLine.Type,PackageSummaryLine."No.",
                      PackageSummaryLine.Description,PackageSummaryLine.Quantity,
                      PackageSummaryLine."Unit of Measure Code");
                BOLSumLine."Source Type" := CurrentPostedPackage."Source Type";
                BOLSumLine."Source Subtype" := CurrentPostedPackage."Source Subtype";
                BOLSumLine."Source ID" := CurrentPostedPackage."Source ID";
                BOLSumLine."Posted Source ID" := CurrentPostedPackage."Posted Source ID";
                SetLevelFields(BOLSumLine,LevelPackageNo,LevelLineNo);
                BOLSumLine."UCC No." := ParentUCC128No;
                BOLSumLine."UCC No. (Print)" := ParentUCC128NoPrint;
                BOLSumLine."RF-ID (Hex)" := ParentRFID;
                BOLSumLine."External Document No." := ParentExternalDocNo;
                BOLSumLine."Package No." := PackageNoToShow;
                BOLSumLine."Package Line Line No." := PackageSummaryLine."Line No.";
                BOLSumLine."Package Line Type" := PackageSummaryLine.Type;
                BOLSumLine."Package Line No." := PackageSummaryLine."No.";
                BOLSumLine."Package Line Variant Code" := PackageSummaryLine."Variant Code";
                BOLSumLine."Package Line Unit of Measure" :=
                  PackageSummaryLine."Unit of Measure Code";
                BOLSumLine."Package Line Quantity" := PackageSummaryLine.Quantity;
                BOLSumLine."Package Line Quantity (Base)" := PackageSummaryLine."Quantity (Base)";
                BOLSumLine."Multi Package Line Quantity" := PackageSummaryLine."Multi Document Quantity";
                BOLSumLine."Multi Package Line Qty. (Base)" :=
                  PackageSummaryLine."Multi Document Qty. (Base)";
                BOLSumLine."Multi Document" := CurrentPostedPackage."Multi Document Package";
                BOLSumLine."Item UPC/EAN Number" := PackageSummaryLine."Item UPC/EAN Number";
                BOLSumLine."Item UPC/EAN Number (Print)" :=
                  PackageSummaryLine."Item UPC/EAN Number (Print)";
                BOLSumLine."Std. Pack UPC/EAN Number" := PackageSummaryLine."Std. Pack UPC/EAN Number";
                BOLSumLine."Std. Pack UPC/EAN No. (Print)" :=
                  PackageSummaryLine."Std. Pack UPC/EAN No. (Print)";
                BOLSumLine."One Unit of Measure Code" := ItemUnitOfMeasure.Code;
                BOLSumLine.INSERT;

                BOLSumLinePackage."Package Line Quantity" :=
                  BOLSumLinePackage."Package Line Quantity" + BOLSumLine."Package Line Quantity";
                BOLSumLinePackage."Package Line Quantity (Base)" :=
                  BOLSumLinePackage."Package Line Quantity (Base)" +
                  BOLSumLine."Package Line Quantity (Base)";
              UNTIL PackageSummaryLine.NEXT = 0;
            END;
          END;
      END;

      PostedPackageLine.RESET;
      PostedPackageLine.SETRANGE("Package No.",CurrentPostedPackage."No.");
      PostedPackageLine.SETRANGE(Type,PostedPackageLine.Type::Package);
      IF CurrentPostedPackage."Multi Document Package" THEN
        PostedPackageLine.SETFILTER(Quantity,'<>0');
      IF PostedPackageLine.FIND('-') THEN BEGIN
        BOLSumLinePackage."No. of Packages with Packages" := 1;

        REPEAT
          IF PostedPackageLine."No." <> '' THEN BEGIN
            IF CurrentPostedPackage."Multi Document Package" THEN
              PostedPackage.GET(PostedPackageLine."No." + '-' + BOLSumLine."Source ID")
            ELSE
              PostedPackage.GET(PostedPackageLine."No.");
            UpdateStdRecursePackage(
              BOLSumLine,LevelParent,PostedPackage,CurrentLevel + 1,
              ParentUCC128No,ParentUCC128NoPrint,ParentRFID,
              ParentExternalDocNo,LevelPackageNo,LevelLineNo);

            BOLSumLinePackage."No. of Packages with Items" :=
              BOLSumLinePackage."No. of Packages with Items" +
              BOLSumLine."No. of Packages with Items";
            BOLSumLinePackage."No. of Packages with Packages" :=
              BOLSumLinePackage."No. of Packages with Packages" +
              BOLSumLine."No. of Packages with Packages";
            BOLSumLinePackage."Package Line Quantity" :=
              BOLSumLinePackage."Package Line Quantity" + BOLSumLine."Package Line Quantity";
            BOLSumLinePackage."Package Line Quantity (Base)" :=
              BOLSumLinePackage."Package Line Quantity (Base)" +
              BOLSumLine."Package Line Quantity (Base)";
          END;
        UNTIL PostedPackageLine.NEXT = 0;
      END;

      BOLSumLinePackage.MODIFY;
      BOLSumLine."Package Line Quantity" := BOLSumLinePackage."Package Line Quantity";
      BOLSumLine."Package Line Quantity (Base)" := BOLSumLinePackage."Package Line Quantity (Base)";
      BOLSumLine."No. of Packages with Packages" := BOLSumLinePackage."No. of Packages with Packages";
      BOLSumLine."No. of Packages with Items" := BOLSumLinePackage."No. of Packages with Items";
    END;

    PROCEDURE UpdateASNSummaryLines@5(CurrentBillOfLading@1000000000 : Record 14000822);
    VAR
      PackingRule@1000000003 : Record 14000715;
    BEGIN
      WITH CurrentBillOfLading DO BEGIN
        TESTFIELD("Summary Released",FALSE);

        TESTFIELD("Ship-to No.");
        PackingRule.GetPackingRule("Ship-to Type","Ship-to No.","Ship-to Code");
        PackingRule.TESTFIELD("ASN Summary Type");

        OverrideASNSummary := FALSE;
        IF SetASNSummary(CurrentBillOfLading) THEN BEGIN
          PackingRule.TESTFIELD("Override ASN Summary Type");
          PackingRule."ASN Summary Type" := PackingRule."Override ASN Summary Type";
          DuplicateItemOverrideSummary := PackingRule."Override Line Data Not Summed";
        END;

        CASE PackingRule."ASN Summary Type" OF
          PackingRule."ASN Summary Type"::"Shipment-Order-Item":
            UpdateASNSummaryItem(CurrentBillOfLading,PackingRule,'ASN');
          PackingRule."ASN Summary Type"::"Shipment-Order-Package-Item":
            UpdateASNSummaryPackageItem(CurrentBillOfLading,PackingRule,'ASN');
          PackingRule."ASN Summary Type"::"Shipment-Order-Tare-Package-Item":
            UpdateASNSummaryTarePackItem(CurrentBillOfLading,PackingRule,'ASN');
          PackingRule."ASN Summary Type"::"Shipment-Order-Item-Package":
            UpdateASNSummaryItemPackage(CurrentBillOfLading,PackingRule,'ASN');
          PackingRule."ASN Summary Type"::"Shipment-Package-Order-Item":
            UpdateASNSummaryPackOrderItem(CurrentBillOfLading,PackingRule,'ASN');
          PackingRule."ASN Summary Type"::Prioritized:
            UpdateASNSummaryPrioritized(CurrentBillOfLading,PackingRule,'ASN');
          PackingRule."ASN Summary Type"::"Custom 1":
            UpdateASNSummaryCustom1(CurrentBillOfLading,PackingRule,'ASN');
          PackingRule."ASN Summary Type"::"Custom 2":
            UpdateASNSummaryCustom2(CurrentBillOfLading,PackingRule,'ASN');
          PackingRule."ASN Summary Type"::"Custom 3":
            UpdateASNSummaryCustom3(CurrentBillOfLading,PackingRule,'ASN');
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateASNSummaryItem@10(CurrentBillOfLading@1000000000 : Record 14000822;PackingRule@1000000001 : Record 14000715;TypeCode@1000000002 : Code[10]) : Boolean;
    VAR
      BOLSumLine@1000000003 : Record 14000825;
      BOLSumLine2@1000000004 : Record 14000825;
      BOLSumLinePackage@1000000005 : Record 14000825;
      LastExternalDocNo@1000000006 : Code[35];
      LastOrderNo@1000000011 : Code[20];
      LineNo@1000000007 : Integer;
      LevelParent@1000000008 : ARRAY [100] OF Integer;
      LevelParentAdv@1240030000 : ARRAY [100] OF Integer;
      BOLSumLineLevel@1000000009 : Integer;
      ProblemsFound@1000000010 : Boolean;
    BEGIN
      BOLSumLine.RESET;
      IF PackingRule."ASN with PO per Document" THEN
        BOLSumLine.SETCURRENTKEY(
          "Bill of Lading No.","Bill of Lading Type","External Document No.",
          "Source Type","Source Subtype","Source ID")
      ELSE
        BOLSumLine.SETCURRENTKEY(
          "Bill of Lading No.","Bill of Lading Type","External Document No.");
      BOLSumLine.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
      IF PackingRule."ASN Summary from Pack. Summary" THEN
        BOLSumLine.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type"::"Package Summary")
      ELSE
        BOLSumLine.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type"::Standard);
      BOLSumLine.SETRANGE(Type,BOLSumLine.Type::Shipment,BOLSumLine.Type::Item);
      IF BOLSumLine.FIND('-') THEN BEGIN
        BOLSumLine2.RESET;
        BOLSumLine2.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
        BOLSumLine2.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type"::"ASN (EDI)");
        BOLSumLine2.DELETEALL;

        LineNo := 1;
        CLEAR(LevelParent);
        LastExternalDocNo := 'X Y Z';
        LastOrderNo := 'X Y Z';
        ProblemsFound := FALSE;

        BOLSumLine2.GET(CurrentBillOfLading."No.",BOLSumLine."Bill of Lading Type",1);
        BOLSumLine2."Bill of Lading No." := BOLSumLine2."Bill of Lading No.";
        BOLSumLine2."Bill of Lading Type" := BOLSumLine."Bill of Lading Type"::"ASN (EDI)";
        BOLSumLine2."Line No." := LineNo;
        BOLSumLine2."Parent Line No." := 0;
        BOLSumLine2.Level := 1;
        BOLSumLine2.Type := BOLSumLine2.Type::"Bill of Lading";
        BOLSumLine2."No." := CurrentBillOfLading."No.";
        BOLSumLine2."Type Description" :=
          STRSUBSTNO(Text009,BOLSumLine2."Bill of Lading No.");
        BOLSumLine2."EDI Level ID" := BOLSumLine2."Bill of Lading No.";
        UpdateAdvLineNo(BOLSumLine2,PackingRule,LevelParentAdv);

        BOLSumLine2.INSERT;
        LevelParent[BOLSumLine2.Level] := BOLSumLine2."Line No.";

        REPEAT
          CASE BOLSumLine.Type OF
            BOLSumLine.Type::Shipment:
              BEGIN
                IF BOLSumLine."External Document No." = '' THEN BEGIN
                  BOLSumLine."ASN Comment" :=
                    STRSUBSTNO(
                      Text010,
                      BOLSumLine.FIELDNAME("External Document No."));
                  BOLSumLine.MODIFY;

                  ProblemsFound := TRUE;
                END;
              END;

            BOLSumLine.Type::Item:
              BEGIN
                IF (LastExternalDocNo <> BOLSumLine."External Document No.") OR
                   (PackingRule."ASN with PO per Document" AND
                    (LastOrderNo <> BOLSumLine."Source ID"))
                THEN BEGIN
                  BOLSumLine2 := BOLSumLine;
                  BOLSumLine2."Bill of Lading Type" := BOLSumLine."Bill of Lading Type"::"ASN (EDI)";
                  LineNo := LineNo + 1;
                  BOLSumLine2."Line No." := LineNo;
                  BOLSumLine2.Level := 2;
                  BOLSumLine2."Parent Line No." := LevelParent[BOLSumLine2.Level - 1];
                  BOLSumLine2.Type := BOLSumLine2.Type::"Purchase Order";
                  BOLSumLine2."No." := BOLSumLine2."External Document No.";
                  IF PackingRule."ASN with PO per Document" THEN
                    BOLSumLine2."Type Description" :=
                      STRSUBSTNO(
                        Text011,
                        BOLSumLine2.Type,BOLSumLine2."External Document No.",
                        BOLSumLine2."Source ID")
                  ELSE
                    BOLSumLine2."Type Description" :=
                      STRSUBSTNO(
                        '%1 %2',
                        BOLSumLine2.Type,BOLSumLine2."External Document No.");
                  BOLSumLine2."EDI Level ID" := BOLSumLine2."External Document No.";

                  BOLSumLine2.Description := '';
                  BOLSumLine2."Package No." := '';
                  BOLSumLine2."Package Line Line No." := 0;
                  BOLSumLine2."Package Line Type" := 0;
                  BOLSumLine2."Package Line No." := '';
                  BOLSumLine2."Package Line Variant Code" := '';
                  BOLSumLine2."Package Line Unit of Measure" := '';
                  BOLSumLine2."Package Line Quantity" := 0;
                  BOLSumLine2."Package Line Quantity (Base)" := 0;
                  BOLSumLine2."UCC No." := '';
                  BOLSumLine2."UCC No. (Print)" := '';
                  BOLSumLine2."RF-ID (Hex)" := '';
                  BOLSumLine2."External Tracking No." := '';
                  BOLSumLine2."First Level Package No." := '';
                  BOLSumLine2."Second Level Package No." := '';
                  BOLSumLine2."First Level Line No." := 0;
                  BOLSumLine2."Second Level Line No." := 0;
                  BOLSumLine2."No. of Packages with Packages" := 0;
                  BOLSumLine2."No. of Packages with Items" := 0;
                  UpdateAdvLineNo(BOLSumLine2,PackingRule,LevelParentAdv);

                  BOLSumLine2.INSERT;

                  LevelParent[BOLSumLine2.Level] := BOLSumLine2."Line No.";
                  LastExternalDocNo := BOLSumLine2."External Document No.";
                  LastOrderNo := BOLSumLine."Source ID";
                END;

                BOLSumLine2 := BOLSumLine;
                BOLSumLine2."Bill of Lading Type" := BOLSumLine."Bill of Lading Type"::"ASN (EDI)";
                LineNo := LineNo + 1;
                BOLSumLine2."Line No." := LineNo;
                BOLSumLine2.Level := 3;
                BOLSumLine2."Parent Line No." := LevelParent[BOLSumLine2.Level - 1];
                BOLSumLine2."EDI Level ID" := BOLSumLine."Item UPC/EAN Number";
                BOLSumLine2."UCC No." :=
                  BOLSumLinePackage."UCC No.";
                BOLSumLine2."UCC No. (Print)" :=
                  BOLSumLinePackage."UCC No. (Print)";
                BOLSumLine2."RF-ID (Hex)" :=
                  BOLSumLinePackage."RF-ID (Hex)";
                BOLSumLine2."External Tracking No." :=
                  BOLSumLinePackage."External Tracking No.";
                BOLSumLine2."First Level Package No." :=
                  BOLSumLinePackage."First Level Package No.";
                BOLSumLine2."First Level Line No." :=
                  BOLSumLinePackage."First Level Line No.";
                BOLSumLine2."Second Level Package No." := '';
                BOLSumLine2."Second Level Line No." := 0;
                UpdateAdvLineNo(BOLSumLine2,PackingRule,LevelParentAdv);

                BOLSumLine2.INSERT;
                LevelParent[BOLSumLine2.Level] := BOLSumLine2."Line No.";
              END;
          END;
        UNTIL BOLSumLine.NEXT = 0;
      END;

      BOLSumLine.RESET;
      BOLSumLine.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
      BOLSumLine.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type"::"ASN (EDI)");
      FOR BOLSumLineLevel := 2 DOWNTO 1 DO BEGIN
        BOLSumLine.SETRANGE(Level,BOLSumLineLevel);
        IF BOLSumLine.FIND('-') THEN
          REPEAT
            BOLSumLine.Weight := 0;
            BOLSumLine.Volume := 0;
            BOLSumLine.Value := 0;
            BOLSumLine."Package Line Quantity" := 0;
            BOLSumLine."Package Line Quantity (Base)" := 0;
            BOLSumLine."No. of Packages with Packages" := 0;
            BOLSumLine."No. of Packages with Items" := 0;

            BOLSumLine2.RESET;
            BOLSumLine2.SETCURRENTKEY("Bill of Lading No.","Bill of Lading Type","Parent Line No.");
            BOLSumLine2.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
            BOLSumLine2.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type");
            BOLSumLine2.SETRANGE("Parent Line No.",BOLSumLine."Line No.");
            IF BOLSumLine2.FIND('-') THEN
              REPEAT
                BOLSumLine.Weight := BOLSumLine.Weight + BOLSumLine2.Weight;
                BOLSumLine.Volume := BOLSumLine.Volume + BOLSumLine2.Volume;
                BOLSumLine.Value := BOLSumLine.Value + BOLSumLine2.Value;
                BOLSumLine."Package Line Quantity" :=
                  BOLSumLine."Package Line Quantity" + BOLSumLine2."Package Line Quantity";
                BOLSumLine."Package Line Quantity (Base)" :=
                  BOLSumLine."Package Line Quantity (Base)" +
                  BOLSumLine2."Package Line Quantity (Base)";
              UNTIL BOLSumLine2.NEXT = 0;

            BOLSumLine.MODIFY;
          UNTIL BOLSumLine.NEXT = 0;
      END;

      EXIT(ProblemsFound);
    END;

    LOCAL PROCEDURE UpdateASNSummaryPackageItem@7(CurrentBillOfLading@1000000000 : Record 14000822;PackingRule@1000000001 : Record 14000715;TypeCode@1000000002 : Code[10]) : Boolean;
    VAR
      BOLSumLine@1000000003 : Record 14000825;
      BOLSumLine2@1000000004 : Record 14000825;
      BOLSumLinePackage@1000000005 : Record 14000825;
      LastExternalDocNo@1000000006 : Code[35];
      LastOrderNo@1000000012 : Code[20];
      LastPackageNo@1000000007 : Code[20];
      LineNo@1000000008 : Integer;
      LevelParent@1000000009 : ARRAY [100] OF Integer;
      LevelParentAdv@1240030000 : ARRAY [100] OF Integer;
      BOLSumLineLevel@1000000010 : Integer;
      ProblemsFound@1000000011 : Boolean;
      InsertPackage@1240020000 : Boolean;
    BEGIN
      IF OverrideASNSummary THEN BEGIN
        IF DuplicateItemOverrideSummary THEN BEGIN
          UpdateASNSummaryPackageItemDup(CurrentBillOfLading,PackingRule,'ASN');
          EXIT;
        END;
      END ELSE BEGIN
        IF DuplicateItemASN THEN BEGIN
          UpdateASNSummaryPackageItemDup(CurrentBillOfLading,PackingRule,'ASN');
          EXIT;
        END;
      END;

      BOLSumLine.RESET;
      IF PackingRule."ASN with PO per Document" THEN
        BOLSumLine.SETCURRENTKEY(
          "Bill of Lading No.","Bill of Lading Type","External Document No.",
          "Source Type","Source Subtype","Source ID")
      ELSE
        BOLSumLine.SETCURRENTKEY(
          "Bill of Lading No.","Bill of Lading Type","External Document No.");
      BOLSumLine.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
      IF PackingRule."ASN Summary from Pack. Summary" THEN
        BOLSumLine.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type"::"Package Summary")
      ELSE
        BOLSumLine.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type"::Standard);
      BOLSumLine.SETRANGE(Type,BOLSumLine.Type::Shipment,BOLSumLine.Type::Item);
      IF BOLSumLine.FIND('-') THEN BEGIN
        BOLSumLine2.RESET;
        BOLSumLine2.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
        BOLSumLine2.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type"::"ASN (EDI)");
        BOLSumLine2.DELETEALL;

        LineNo := 1;
        CLEAR(LevelParent);
        LastExternalDocNo := 'X Y Z';
        LastOrderNo := 'X Y Z';
        LastPackageNo := 'X Y Z';
        ProblemsFound := FALSE;

        BOLSumLine2.GET(CurrentBillOfLading."No.",BOLSumLine."Bill of Lading Type",1);
        BOLSumLine2."Bill of Lading No." := BOLSumLine2."Bill of Lading No.";
        BOLSumLine2."Bill of Lading Type" := BOLSumLine."Bill of Lading Type"::"ASN (EDI)";
        BOLSumLine2."Line No." := LineNo;
        BOLSumLine2."Parent Line No." := 0;
        BOLSumLine2.Level := 1;
        BOLSumLine2.Type := BOLSumLine2.Type::"Bill of Lading";
        BOLSumLine2."No." := CurrentBillOfLading."No.";
        BOLSumLine2."Type Description" :=
          STRSUBSTNO(Text009,BOLSumLine2."Bill of Lading No.");
        BOLSumLine2."EDI Level ID" := CurrentBillOfLading."No.";
        IF OverrideASNSummary THEN BEGIN
          BOLSumLine2."Override ASN Summary" := TRUE;
          BOLSumLine2."Override ASN Summary Type" := PackingRule."ASN Summary Type";
        END;
        UpdateAdvLineNo(BOLSumLine2,PackingRule,LevelParentAdv);

        BOLSumLine2.INSERT;
        LevelParent[BOLSumLine2.Level] := BOLSumLine2."Line No.";

        REPEAT
          CASE BOLSumLine.Type OF
            BOLSumLine.Type::Shipment:
              BEGIN
                IF BOLSumLine."External Document No." = '' THEN BEGIN
                  BOLSumLine."ASN Comment" :=
                    STRSUBSTNO(
                      Text010,
                      BOLSumLine.FIELDNAME("External Document No."));
                  BOLSumLine.MODIFY;

                  ProblemsFound := TRUE;
                END;
              END;

            BOLSumLine.Type::Package:
              BEGIN
                IF BOLSumLine.Level = 4 THEN BEGIN
                  IF (BOLSumLine."UCC No." = '') AND PackingRule."ASN Require UCC No." THEN BEGIN
                    BOLSumLine."ASN Comment" :=
                      STRSUBSTNO(
                        Text010,
                        BOLSumLine.FIELDNAME("UCC No."));
                    BOLSumLine.MODIFY;

                    ProblemsFound := TRUE;
                  END;
                END ELSE BEGIN
                  BOLSumLine."ASN Comment" := Text012;
                  IF (BOLSumLine."UCC No." <> '') AND PackingRule."ASN Require UCC No." THEN
                    BOLSumLine."ASN Comment" :=
                      BOLSumLine."ASN Comment" +
                      STRSUBSTNO(
                        Text013,
                        BOLSumLine.FIELDNAME("UCC No."));
                  BOLSumLine.MODIFY;

                  ProblemsFound := TRUE;
                END;
              END;

            BOLSumLine.Type::Item:
              BEGIN
                IF (LastExternalDocNo <> BOLSumLine."External Document No.") OR
                   (PackingRule."ASN with PO per Document" AND
                    (LastOrderNo <> BOLSumLine."Source ID"))
                THEN BEGIN
                  BOLSumLine2 := BOLSumLine;
                  BOLSumLine2."Bill of Lading Type" := BOLSumLine."Bill of Lading Type"::"ASN (EDI)";
                  LineNo := LineNo + 1;
                  BOLSumLine2."Line No." := LineNo;
                  BOLSumLine2.Level := 2;
                  BOLSumLine2."Parent Line No." := LevelParent[BOLSumLine2.Level - 1];
                  BOLSumLine2.Type := BOLSumLine2.Type::"Purchase Order";
                  BOLSumLine2."No." := BOLSumLine2."External Document No.";
                  IF PackingRule."ASN with PO per Document" THEN
                    BOLSumLine2."Type Description" :=
                      STRSUBSTNO(
                        Text011,
                        BOLSumLine2.Type,BOLSumLine2."External Document No.",
                        BOLSumLine2."Source ID")
                  ELSE
                    BOLSumLine2."Type Description" :=
                      STRSUBSTNO(
                        '%1 %2',
                        BOLSumLine2.Type,BOLSumLine2."External Document No.");
                  BOLSumLine2."EDI Level ID" := BOLSumLine2."External Document No.";

                  BOLSumLine2.Description := '';
                  BOLSumLine2."Package No." := '';
                  BOLSumLine2."Package Line Line No." := 0;
                  BOLSumLine2."Package Line Type" := 0;
                  BOLSumLine2."Package Line No." := '';
                  BOLSumLine2."Package Line Variant Code" := '';
                  BOLSumLine2."Package Line Unit of Measure" := '';
                  BOLSumLine2."Package Line Quantity" := 0;
                  BOLSumLine2."Package Line Quantity (Base)" := 0;
                  BOLSumLine2."UCC No." := '';
                  BOLSumLine2."UCC No. (Print)" := '';
                  BOLSumLine2."RF-ID (Hex)" := '';
                  BOLSumLine2."External Tracking No." := '';
                  BOLSumLine2."First Level Package No." := '';
                  BOLSumLine2."Second Level Package No." := '';
                  BOLSumLine2."First Level Line No." := 0;
                  BOLSumLine2."Second Level Line No." := 0;
                  BOLSumLine2."No. of Packages with Packages" := 0;
                  BOLSumLine2."No. of Packages with Items" := 0;
                  UpdateAdvLineNo(BOLSumLine2,PackingRule,LevelParentAdv);

                  BOLSumLine2.INSERT;

                  LevelParent[BOLSumLine2.Level] := BOLSumLine2."Line No.";
                  LastExternalDocNo := BOLSumLine2."External Document No.";
                  LastOrderNo := BOLSumLine."Source ID";
                END;

                InsertPackage := FALSE;
                IF PackingRule."Package Loop Per Item" THEN
                  InsertPackage := TRUE
                ELSE BEGIN
                  IF LastPackageNo <> BOLSumLine."First Level Package No." THEN
                    InsertPackage := TRUE;
                END;
                IF InsertPackage THEN BEGIN
                  BOLSumLinePackage.GET(
                    CurrentBillOfLading."No.",BOLSumLine."Bill of Lading Type",
                    BOLSumLine."First Level Line No.");
                  BOLSumLinePackage."Bill of Lading Type" := BOLSumLine."Bill of Lading Type"::"ASN (EDI)";
                  LineNo := LineNo + 1;
                  BOLSumLinePackage."Line No." := LineNo;
                  BOLSumLinePackage.Level := 3;
                  BOLSumLinePackage."Parent Line No." := LevelParent[BOLSumLinePackage.Level - 1];
                  BOLSumLinePackage."First Level Line No." := BOLSumLinePackage."Line No.";
                  BOLSumLinePackage."EDI Level ID" := BOLSumLine."UCC No.";
                  BOLSumLinePackage."No. of Packages with Packages" := 0;
                  BOLSumLinePackage."No. of Packages with Items" := 1;
                  UpdateAdvLineNo(BOLSumLinePackage,PackingRule,LevelParentAdv);

                  BOLSumLinePackage.INSERT;

                  LevelParent[BOLSumLinePackage.Level] :=
                    BOLSumLinePackage."Line No.";
                  LastPackageNo := BOLSumLine."First Level Package No.";
                END;

                BOLSumLine2 := BOLSumLine;
                BOLSumLine2."Bill of Lading Type" := BOLSumLine."Bill of Lading Type"::"ASN (EDI)";
                LineNo := LineNo + 1;
                BOLSumLine2."Line No." := LineNo;
                BOLSumLine2.Level := 4;
                BOLSumLine2."Parent Line No." := LevelParent[BOLSumLine2.Level - 1];
                BOLSumLine2."EDI Level ID" := BOLSumLine."Item UPC/EAN Number";
                BOLSumLine2."UCC No." :=
                  BOLSumLinePackage."UCC No.";
                BOLSumLine2."UCC No. (Print)" :=
                  BOLSumLinePackage."UCC No. (Print)";
                BOLSumLine2."RF-ID (Hex)" :=
                  BOLSumLinePackage."RF-ID (Hex)";
                BOLSumLine2."External Tracking No." :=
                  BOLSumLinePackage."External Tracking No.";
                BOLSumLine2."First Level Package No." :=
                  BOLSumLinePackage."First Level Package No.";
                BOLSumLine2."First Level Line No." :=
                  BOLSumLinePackage."First Level Line No.";
                BOLSumLine2."Second Level Package No." := '';
                BOLSumLine2."Second Level Line No." := 0;
                UpdateAdvLineNo(BOLSumLine2,PackingRule,LevelParentAdv);

                BOLSumLine2.INSERT;
                LevelParent[BOLSumLine2.Level] := BOLSumLine2."Line No.";
              END;
          END;
        UNTIL BOLSumLine.NEXT = 0;
      END;

      BOLSumLine.RESET;
      BOLSumLine.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
      BOLSumLine.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type"::"ASN (EDI)");
      FOR BOLSumLineLevel := 2 DOWNTO 1 DO BEGIN
        BOLSumLine.SETRANGE(Level,BOLSumLineLevel);
        IF BOLSumLine.FIND('-') THEN
          REPEAT
            BOLSumLine.Weight := 0;
            BOLSumLine.Volume := 0;
            BOLSumLine.Value := 0;
            BOLSumLine."Package Line Quantity" := 0;
            BOLSumLine."Package Line Quantity (Base)" := 0;
            BOLSumLine."No. of Packages with Packages" := 0;
            BOLSumLine."No. of Packages with Items" := 0;

            BOLSumLine2.RESET;
            BOLSumLine2.SETCURRENTKEY("Bill of Lading No.","Bill of Lading Type","Parent Line No.");
            BOLSumLine2.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
            BOLSumLine2.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type");
            BOLSumLine2.SETRANGE("Parent Line No.",BOLSumLine."Line No.");
            IF BOLSumLine2.FIND('-') THEN
              REPEAT
                BOLSumLine.Weight := BOLSumLine.Weight + BOLSumLine2.Weight;
                BOLSumLine.Volume := BOLSumLine.Volume + BOLSumLine2.Volume;
                BOLSumLine.Value := BOLSumLine.Value + BOLSumLine2.Value;
                BOLSumLine."Package Line Quantity" :=
                  BOLSumLine."Package Line Quantity" + BOLSumLine2."Package Line Quantity";
                BOLSumLine."Package Line Quantity (Base)" :=
                  BOLSumLine."Package Line Quantity (Base)" +
                  BOLSumLine2."Package Line Quantity (Base)";
                BOLSumLine."No. of Packages with Items" :=
                  BOLSumLine."No. of Packages with Items" +
                  BOLSumLine2."No. of Packages with Items";
              UNTIL BOLSumLine2.NEXT = 0;

            BOLSumLine.MODIFY;
          UNTIL BOLSumLine.NEXT = 0;
      END;

      EXIT(ProblemsFound);
    END;

    LOCAL PROCEDURE UpdateASNSummaryTarePackItem@8(CurrentBillOfLading@1000000000 : Record 14000822;PackingRule@1000000001 : Record 14000715;TypeCode@1000000002 : Code[10]) : Boolean;
    VAR
      BOLSumLine@1000000003 : Record 14000825;
      BOLSumLine2@1000000004 : Record 14000825;
      BOLSumLineTare@1000000005 : Record 14000825;
      BOLSumLinePackage@1000000006 : Record 14000825;
      LastExternalDocNo@1000000007 : Code[35];
      LastOrderNo@1000000015 : Code[20];
      LastTareNo@1000000008 : Code[20];
      LastPackageNo@1000000009 : Code[20];
      LineNo@1000000010 : Integer;
      LevelParent@1000000011 : ARRAY [100] OF Integer;
      LevelParentAdv@1240030000 : ARRAY [100] OF Integer;
      BOLSumLineLevel@1000000012 : Integer;
      ProblemsFound@1000000013 : Boolean;
      ASNCommentText@1000000014 : Text[250];
    BEGIN
      BOLSumLine.RESET;
      IF PackingRule."ASN with PO per Document" THEN
        BOLSumLine.SETCURRENTKEY(
          "Bill of Lading No.","Bill of Lading Type","External Document No.",
          "Source Type","Source Subtype","Source ID")
      ELSE
        BOLSumLine.SETCURRENTKEY(
          "Bill of Lading No.","Bill of Lading Type","External Document No.");
      BOLSumLine.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
      IF PackingRule."ASN Summary from Pack. Summary" THEN
        BOLSumLine.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type"::"Package Summary")
      ELSE
        BOLSumLine.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type"::Standard);
      BOLSumLine.SETFILTER(Type,'%1|%2',BOLSumLine.Type::Shipment,BOLSumLine.Type::Item);
      IF BOLSumLine.FIND('-') THEN BEGIN
        BOLSumLine2.RESET;
        BOLSumLine2.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
        BOLSumLine2.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type"::"ASN (EDI)");
        BOLSumLine2.DELETEALL;

        LineNo := 1;
        CLEAR(LevelParent);
        LastExternalDocNo := 'X Y Z';
        LastOrderNo := 'X Y Z';
        LastTareNo := 'X Y Z';
        LastPackageNo := 'X Y Z';
        ProblemsFound := FALSE;

        BOLSumLine2.GET(CurrentBillOfLading."No.",BOLSumLine."Bill of Lading Type",1);
        BOLSumLine2."Bill of Lading No." := BOLSumLine2."Bill of Lading No.";
        BOLSumLine2."Bill of Lading Type" := BOLSumLine."Bill of Lading Type"::"ASN (EDI)";
        BOLSumLine2."Line No." := LineNo;
        BOLSumLine2."Parent Line No." := 0;
        BOLSumLine2.Level := 1;
        BOLSumLine2.Type := BOLSumLine2.Type::"Bill of Lading";
        BOLSumLine2."No." := CurrentBillOfLading."No.";
        BOLSumLine2."Type Description" :=
          STRSUBSTNO(Text009,BOLSumLine2."Bill of Lading No.");
        BOLSumLine2."EDI Level ID" := CurrentBillOfLading."No.";
        IF OverrideASNSummary THEN BEGIN
          BOLSumLine2."Override ASN Summary" := TRUE;
          BOLSumLine2."Override ASN Summary Type" := PackingRule."ASN Summary Type";
        END;
        UpdateAdvLineNo(BOLSumLine2,PackingRule,LevelParentAdv);

        BOLSumLine2.INSERT;
        LevelParent[BOLSumLine2.Level] := BOLSumLine2."Line No.";

        REPEAT
          CASE BOLSumLine.Type OF
            BOLSumLine.Type::Shipment:
              BEGIN
                IF BOLSumLine."External Document No." = '' THEN BEGIN
                  BOLSumLine."ASN Comment" :=
                    STRSUBSTNO(
                      Text010,
                      BOLSumLine.FIELDNAME("External Document No."));
                  BOLSumLine.MODIFY;

                  ProblemsFound := TRUE;
                END;
              END;
            BOLSumLine.Type::Item:
              BEGIN
                IF (LastExternalDocNo <> BOLSumLine."External Document No.") OR
                   (PackingRule."ASN with PO per Document" AND
                    (LastOrderNo <> BOLSumLine."Source ID"))
                THEN BEGIN
                  BOLSumLine2 := BOLSumLine;
                  BOLSumLine2."Bill of Lading Type" := BOLSumLine."Bill of Lading Type"::"ASN (EDI)";
                  LineNo := LineNo + 1;
                  BOLSumLine2."Line No." := LineNo;
                  BOLSumLine2.Level := 2;
                  BOLSumLine2."Parent Line No." := LevelParent[BOLSumLine2.Level - 1];
                  BOLSumLine2.Type := BOLSumLine2.Type::"Purchase Order";
                  BOLSumLine2."No." := BOLSumLine2."External Document No.";
                  IF PackingRule."ASN with PO per Document" THEN
                    BOLSumLine2."Type Description" :=
                      STRSUBSTNO(
                        Text011,
                        BOLSumLine2.Type,BOLSumLine2."External Document No.",
                        BOLSumLine2."Source ID")
                  ELSE
                    BOLSumLine2."Type Description" :=
                      STRSUBSTNO(
                        '%1 %2',
                        BOLSumLine2.Type,BOLSumLine2."External Document No.");
                  BOLSumLine2."EDI Level ID" := BOLSumLine2."External Document No.";

                  BOLSumLine2.Description := '';
                  BOLSumLine2."Package No." := '';
                  BOLSumLine2."Package Line Line No." := 0;
                  BOLSumLine2."Package Line Type" := 0;
                  BOLSumLine2."Package Line No." := '';
                  BOLSumLine2."Package Line Variant Code" := '';
                  BOLSumLine2."Package Line Unit of Measure" := '';
                  BOLSumLine2."Package Line Quantity" := 0;
                  BOLSumLine2."Package Line Quantity (Base)" := 0;
                  BOLSumLine2."UCC No." := '';
                  BOLSumLine2."UCC No. (Print)" := '';
                  BOLSumLine2."RF-ID (Hex)" := '';
                  BOLSumLine2."External Tracking No." := '';
                  BOLSumLine2."First Level Package No." := '';
                  BOLSumLine2."Second Level Package No." := '';
                  BOLSumLine2."First Level Line No." := 0;
                  BOLSumLine2."Second Level Line No." := 0;
                  BOLSumLine2."No. of Packages with Packages" := 0;
                  BOLSumLine2."No. of Packages with Items" := 0;
                  IF OverrideASNSummary THEN BEGIN
                    BOLSumLine2."Override ASN Summary" := TRUE;
                    BOLSumLine2."Override ASN Summary Type" := PackingRule."ASN Summary Type";
                  END;
                  UpdateAdvLineNo(BOLSumLine2,PackingRule,LevelParentAdv);

                  BOLSumLine2.INSERT;

                  LevelParent[BOLSumLine2.Level] := BOLSumLine2."Line No.";
                  LastExternalDocNo := BOLSumLine2."External Document No.";
                  LastOrderNo := BOLSumLine."Source ID";
                  LastTareNo := 'X Y Z';
                  LastPackageNo := 'X Y Z';
                END;

                IF ((LastTareNo <> '') AND
                    ((LastTareNo <> BOLSumLine."First Level Package No.") OR
                     (LastPackageNo <> BOLSumLine."Second Level Package No."))) OR
                   ((LastTareNo = '') AND
                    (LastPackageNo <> BOLSumLine."First Level Package No."))
                THEN BEGIN
                  BOLSumLine2.GET(
                    CurrentBillOfLading."No.",BOLSumLine."Bill of Lading Type",
                    BOLSumLine."First Level Line No.");
                  IF BOLSumLine2."Package Contains Only Packages" THEN BEGIN
                    IF LastTareNo <> BOLSumLine2."First Level Package No." THEN BEGIN
                      ASNCommentText := '';
                      IF (BOLSumLine2."UCC No." = '') AND PackingRule."ASN Require UCC No." THEN
                        ASNCommentText :=
                          ASNCommentText +
                          STRSUBSTNO(Text010,
                          BOLSumLine2.FIELDNAME("UCC No."));
                      IF BOLSumLine2."External Document No." = '' THEN
                        ASNCommentText :=
                          ASNCommentText +
                          STRSUBSTNO(Text010,
                          BOLSumLine2.FIELDNAME("External Document No."));
                      IF ASNCommentText <> '' THEN BEGIN
                        BOLSumLine2."ASN Comment" := ASNCommentText;
                        BOLSumLine2.MODIFY;

                        ProblemsFound := TRUE;
                      END;

                      BOLSumLineTare := BOLSumLine2;
                      BOLSumLineTare."Bill of Lading Type" := BOLSumLine."Bill of Lading Type"::"ASN (EDI)";
                      LineNo := LineNo + 1;
                      BOLSumLineTare."Line No." := LineNo;
                      BOLSumLineTare.Type := BOLSumLineTare.Type::Tare;
                      BOLSumLineTare.Level := 3;
                      BOLSumLineTare."Parent Line No." := LevelParent[BOLSumLineTare.Level - 1];
                      BOLSumLineTare."First Level Line No." := BOLSumLineTare."Line No.";
                      BOLSumLineTare."Type Description" :=
                        STRSUBSTNO(Text014,BOLSumLineTare."No.");
                      BOLSumLineTare."EDI Level ID" := BOLSumLine."UCC No.";
                      BOLSumLineTare."No. of Packages with Packages" := 1;
                      BOLSumLineTare."No. of Packages with Items" := 0;
                      IF OverrideASNSummary THEN BEGIN
                        BOLSumLineTare."Override ASN Summary" := TRUE;
                        BOLSumLineTare."Override ASN Summary Type" := PackingRule."ASN Summary Type";
                      END;
                      UpdateAdvLineNo(BOLSumLineTare,PackingRule,LevelParentAdv);

                      BOLSumLineTare.INSERT;

                      LevelParent[BOLSumLineTare.Level] := BOLSumLineTare."Line No.";
                      LastTareNo := BOLSumLineTare."No.";
                    END;

                    BOLSumLine2.GET(
                      CurrentBillOfLading."No.",BOLSumLine."Bill of Lading Type",
                      BOLSumLine."Second Level Line No.");
                    ASNCommentText := '';
                    IF LastTareNo <> '' THEN BEGIN
                    END ELSE BEGIN
                      IF (BOLSumLine2."UCC No." = '') AND PackingRule."ASN Require UCC No." THEN
                        ASNCommentText :=
                          ASNCommentText +
                          STRSUBSTNO(Text015,
                          BOLSumLine2.FIELDNAME("UCC No."));
                    END;

                    IF BOLSumLine2."External Document No." = '' THEN
                      ASNCommentText :=
                        ASNCommentText +
                        STRSUBSTNO(Text010,
                        BOLSumLine2.FIELDNAME("External Document No."));
                    IF ASNCommentText <> '' THEN BEGIN
                      BOLSumLine2."ASN Comment" := ASNCommentText;
                      BOLSumLine2.MODIFY;

                      ProblemsFound := TRUE;
                    END;

                    BOLSumLinePackage := BOLSumLine2;
                    BOLSumLinePackage."Bill of Lading Type" := BOLSumLine."Bill of Lading Type"::"ASN (EDI)";
                    LineNo := LineNo + 1;
                    BOLSumLinePackage."Line No." := LineNo;
                    BOLSumLinePackage.Level := 4;
                    BOLSumLinePackage."Parent Line No." := LevelParent[BOLSumLinePackage.Level - 1];
                    BOLSumLinePackage."First Level Line No." := BOLSumLineTare."Line No.";
                    BOLSumLinePackage."Second Level Line No." := BOLSumLinePackage."Line No.";
                    BOLSumLinePackage."EDI Level ID" := BOLSumLinePackage."UCC No.";
                    BOLSumLinePackage."No. of Packages with Packages" := 0;
                    BOLSumLinePackage."No. of Packages with Items" := 1;
                    IF OverrideASNSummary THEN BEGIN
                      BOLSumLinePackage."Override ASN Summary" := TRUE;
                      BOLSumLinePackage."Override ASN Summary Type" := PackingRule."ASN Summary Type";
                    END;
                    UpdateAdvLineNo(BOLSumLinePackage,PackingRule,LevelParentAdv);

                    BOLSumLinePackage.INSERT;

                    IF BOLSumLineTare."No." <> '' THEN BEGIN
                      BOLSumLineTare."No. of Packages with Items" :=
                        BOLSumLineTare."No. of Packages with Items" +
                        BOLSumLinePackage."No. of Packages with Items";
                      BOLSumLineTare.MODIFY;
                    END;

                    LevelParent[BOLSumLinePackage.Level] := BOLSumLinePackage."Line No.";
                    LastPackageNo := BOLSumLinePackage."No.";
                  END ELSE BEGIN
                    CLEAR(BOLSumLineTare);
                    LastTareNo := '';

                    ASNCommentText := '';
                    IF (BOLSumLine2."UCC No." = '') AND PackingRule."ASN Require UCC No." THEN
                      ASNCommentText :=
                        ASNCommentText +
                        STRSUBSTNO(Text010,
                        BOLSumLine2.FIELDNAME("UCC No."));
                    IF BOLSumLine2."External Document No." = '' THEN
                      ASNCommentText :=
                        ASNCommentText +
                        STRSUBSTNO(Text010,
                        BOLSumLine2.FIELDNAME("External Document No."));
                    IF ASNCommentText <> '' THEN BEGIN
                      BOLSumLine2."ASN Comment" := ASNCommentText;
                      BOLSumLine2.MODIFY;

                      ProblemsFound := TRUE;
                    END;

                    BOLSumLinePackage := BOLSumLine2;
                    BOLSumLinePackage."Bill of Lading Type" := BOLSumLine."Bill of Lading Type"::"ASN (EDI)";
                    LineNo := LineNo + 1;
                    BOLSumLinePackage."Line No." := LineNo;
                    BOLSumLinePackage.Level := 3;
                    BOLSumLinePackage."Parent Line No." := LevelParent[BOLSumLinePackage.Level - 1];
                    BOLSumLinePackage."First Level Line No." := BOLSumLinePackage."Line No.";
                    BOLSumLinePackage."EDI Level ID" := BOLSumLinePackage."UCC No.";
                    BOLSumLinePackage."No. of Packages with Packages" := 0;
                    BOLSumLinePackage."No. of Packages with Items" := 1;
                    IF OverrideASNSummary THEN BEGIN
                      BOLSumLinePackage."Override ASN Summary" := TRUE;
                      BOLSumLinePackage."Override ASN Summary Type" := PackingRule."ASN Summary Type";
                    END;
                    UpdateAdvLineNo(BOLSumLinePackage,PackingRule,LevelParentAdv);

                    BOLSumLinePackage.INSERT;

                    LevelParent[BOLSumLinePackage.Level] := BOLSumLinePackage."Line No.";
                    LastPackageNo := BOLSumLinePackage."No.";
                  END;
                END;

                BOLSumLine2 := BOLSumLine;
                BOLSumLine2."Bill of Lading Type" := BOLSumLine."Bill of Lading Type"::"ASN (EDI)";
                LineNo := LineNo + 1;
                BOLSumLine2."Line No." := LineNo;
                BOLSumLine2.Level := BOLSumLinePackage.Level + 1;
                BOLSumLine2."Parent Line No." := LevelParent[BOLSumLine2.Level - 1];
                BOLSumLine2."EDI Level ID" := BOLSumLine."Item UPC/EAN Number";
                BOLSumLine2."UCC No." :=
                  BOLSumLinePackage."UCC No.";
                BOLSumLine2."UCC No. (Print)" :=
                  BOLSumLinePackage."UCC No. (Print)";
                BOLSumLine2."RF-ID (Hex)" :=
                  BOLSumLinePackage."RF-ID (Hex)";
                BOLSumLine2."External Tracking No." :=
                  BOLSumLinePackage."External Tracking No.";

                BOLSumLine2."First Level Package No." :=
                  BOLSumLinePackage."First Level Package No.";
                BOLSumLine2."First Level Line No." :=
                  BOLSumLinePackage."First Level Line No.";
                BOLSumLine2."Second Level Package No." :=
                  BOLSumLinePackage."Second Level Package No.";
                BOLSumLine2."Second Level Line No." :=
                  BOLSumLinePackage."First Level Line No.";
                IF OverrideASNSummary THEN BEGIN
                  BOLSumLinePackage."Override ASN Summary" := TRUE;
                  BOLSumLinePackage."Override ASN Summary Type" := PackingRule."ASN Summary Type";
                END;
                UpdateAdvLineNo(BOLSumLine2,PackingRule,LevelParentAdv);

                BOLSumLine2.INSERT;
                LevelParent[BOLSumLine2.Level] := BOLSumLine2."Line No.";
              END;
          END;
        UNTIL BOLSumLine.NEXT = 0;
      END;

      BOLSumLine.RESET;
      BOLSumLine.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
      BOLSumLine.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type"::"ASN (EDI)");
      FOR BOLSumLineLevel := 2 DOWNTO 1 DO BEGIN
        BOLSumLine.SETRANGE(Level,BOLSumLineLevel);
        IF BOLSumLine.FIND('-') THEN
          REPEAT
            BOLSumLine.Weight := 0;
            BOLSumLine.Volume := 0;
            BOLSumLine.Value := 0;
            BOLSumLine."Package Line Quantity" := 0;
            BOLSumLine."Package Line Quantity (Base)" := 0;
            BOLSumLine."No. of Packages with Packages" := 0;
            BOLSumLine."No. of Packages with Items" := 0;

            BOLSumLine2.RESET;
            BOLSumLine2.SETCURRENTKEY("Bill of Lading No.","Bill of Lading Type","Parent Line No.");
            BOLSumLine2.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
            BOLSumLine2.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type");
            BOLSumLine2.SETRANGE("Parent Line No.",BOLSumLine."Line No.");
            IF BOLSumLine2.FIND('-') THEN
              REPEAT
                BOLSumLine.Weight := BOLSumLine.Weight + BOLSumLine2.Weight;
                BOLSumLine.Volume := BOLSumLine.Volume + BOLSumLine2.Volume;
                BOLSumLine.Value := BOLSumLine.Value + BOLSumLine2.Value;
                BOLSumLine."Package Line Quantity" :=
                  BOLSumLine."Package Line Quantity" + BOLSumLine2."Package Line Quantity";
                BOLSumLine."Package Line Quantity (Base)" :=
                  BOLSumLine."Package Line Quantity (Base)" +
                  BOLSumLine2."Package Line Quantity (Base)";
                BOLSumLine."No. of Packages with Packages" :=
                  BOLSumLine."No. of Packages with Packages" +
                  BOLSumLine2."No. of Packages with Packages";
                BOLSumLine."No. of Packages with Items" :=
                  BOLSumLine."No. of Packages with Items" +
                  BOLSumLine2."No. of Packages with Items";
              UNTIL BOLSumLine2.NEXT = 0;

            BOLSumLine.MODIFY;
          UNTIL BOLSumLine.NEXT = 0;
      END;

      EXIT(ProblemsFound);
    END;

    LOCAL PROCEDURE UpdateASNSummaryItemPackage@9(CurrentBillOfLading@1000000000 : Record 14000822;PackingRule@1000000001 : Record 14000715;TypeCode@1000000002 : Code[10]) : Boolean;
    VAR
      BOLSumLine@1000000003 : Record 14000825;
      BOLSumLine2@1000000004 : Record 14000825;
      BOLSumLineItem@1000000005 : Record 14000825;
      LastExternalDocNo@1000000006 : Code[35];
      LastOrderNo@1000000015 : Code[20];
      LastItemNo@1000000007 : Code[20];
      LastItemVariant@1000000008 : Code[20];
      LastPackageNo@1000000009 : Code[20];
      LineNo@1000000010 : Integer;
      LevelParent@1000000011 : ARRAY [100] OF Integer;
      LevelParentAdv@1240030000 : ARRAY [100] OF Integer;
      BOLSumLineLevel@1000000012 : Integer;
      ProblemsFound@1000000013 : Boolean;
    BEGIN
      IF OverrideASNSummary THEN BEGIN
        IF DuplicateItemOverrideSummary THEN BEGIN
          UpdateASNSummaryItemPackageDup(CurrentBillOfLading,PackingRule,'ASN');
          EXIT;
        END;
      END ELSE BEGIN
        IF DuplicateItemASN THEN BEGIN
          UpdateASNSummaryItemPackageDup(CurrentBillOfLading,PackingRule,'ASN');
          EXIT;
        END;
      END;

      BOLSumLine.RESET;
      IF PackingRule."ASN with PO per Document" THEN
        BOLSumLine.SETCURRENTKEY(
          "Bill of Lading No.","Bill of Lading Type","External Document No.",
          "Source Type","Source Subtype","Source ID",
          Type,"No.","Package Line Variant Code")
      ELSE
        BOLSumLine.SETCURRENTKEY(
          "Bill of Lading No.","Bill of Lading Type","External Document No.",
          Type,"No.","Package Line Variant Code");
      BOLSumLine.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
      IF PackingRule."ASN Summary from Pack. Summary" THEN
        BOLSumLine.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type"::"Package Summary")
      ELSE
        BOLSumLine.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type"::Standard);
      BOLSumLine.SETRANGE(Type,BOLSumLine.Type::Shipment,BOLSumLine.Type::Item);
      IF BOLSumLine.FIND('-') THEN BEGIN
        BOLSumLine2.RESET;
        BOLSumLine2.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
        BOLSumLine2.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type"::"ASN (EDI)");
        BOLSumLine2.DELETEALL;

        LineNo := 1;
        CLEAR(LevelParent);
        CLEAR(LevelParentAdv);
        LastExternalDocNo := 'X Y Z';
        LastOrderNo := 'X Y Z';
        LastItemNo := 'X Y Z';
        LastItemVariant := 'X Y Z';
        LastPackageNo := 'X Y Z';
        ProblemsFound := FALSE;

        BOLSumLine2.GET(CurrentBillOfLading."No.",BOLSumLine."Bill of Lading Type",1);
        BOLSumLine2."Bill of Lading No." := BOLSumLine2."Bill of Lading No.";
        BOLSumLine2."Bill of Lading Type" := BOLSumLine."Bill of Lading Type"::"ASN (EDI)";
        BOLSumLine2."Line No." := LineNo;
        BOLSumLine2."Parent Line No." := 0;
        BOLSumLine2.Level := 1;
        BOLSumLine2.Type := BOLSumLine2.Type::"Bill of Lading";
        BOLSumLine2."No." := CurrentBillOfLading."No.";
        BOLSumLine2."Type Description" :=
          STRSUBSTNO(Text009,BOLSumLine2."Bill of Lading No.");
        BOLSumLine2."EDI Level ID" := CurrentBillOfLading."No.";
        IF OverrideASNSummary THEN BEGIN
          BOLSumLine2."Override ASN Summary" := TRUE;
          BOLSumLine2."Override ASN Summary Type" := PackingRule."ASN Summary Type";
        END;
        UpdateAdvLineNo(BOLSumLine2,PackingRule,LevelParentAdv);

        BOLSumLine2.INSERT;
        LevelParent[BOLSumLine2.Level] := BOLSumLine2."Line No.";

        REPEAT
          CASE BOLSumLine.Type OF
            BOLSumLine.Type::Shipment:
              BEGIN
                IF BOLSumLine."External Document No." = '' THEN BEGIN
                  BOLSumLine."ASN Comment" :=
                    STRSUBSTNO(
                      Text010,
                      BOLSumLine.FIELDNAME("External Document No."));
                  BOLSumLine.MODIFY;

                  ProblemsFound := TRUE;
                END;
              END;
            BOLSumLine.Type::Item:
              BEGIN
                IF (LastExternalDocNo <> BOLSumLine."External Document No.") OR
                   (PackingRule."ASN with PO per Document" AND
                    (LastOrderNo <> BOLSumLine."Source ID"))
                THEN BEGIN
                  IF BOLSumLine."External Document No." = '' THEN BEGIN
                    BOLSumLine."ASN Comment" :=
                      STRSUBSTNO(
                        Text010,
                        BOLSumLine.FIELDNAME("External Document No."));
                    BOLSumLine.MODIFY;
                  END;
                  BOLSumLine2 := BOLSumLine;
                  BOLSumLine2."Bill of Lading Type" := BOLSumLine."Bill of Lading Type"::"ASN (EDI)";
                  LineNo := LineNo + 1;
                  BOLSumLine2."Line No." := LineNo;
                  BOLSumLine2.Level := 2;
                  BOLSumLine2."Parent Line No." := LevelParent[BOLSumLine2.Level - 1];
                  BOLSumLine2.Type := BOLSumLine2.Type::"Purchase Order";
                  BOLSumLine2."No." := BOLSumLine2."External Document No.";
                  IF PackingRule."ASN with PO per Document" THEN
                    BOLSumLine2."Type Description" :=
                      STRSUBSTNO(
                        Text011,
                        BOLSumLine2.Type,BOLSumLine2."External Document No.",
                        BOLSumLine2."Source ID")
                  ELSE
                    BOLSumLine2."Type Description" :=
                      STRSUBSTNO(
                        '%1 %2',
                        BOLSumLine2.Type,BOLSumLine2."External Document No.");
                  BOLSumLine2."EDI Level ID" := BOLSumLine2."External Document No.";

                  BOLSumLine2.Description := '';
                  BOLSumLine2."Package No." := '';
                  BOLSumLine2."Package Line Line No." := 0;
                  BOLSumLine2."Package Line Type" := 0;
                  BOLSumLine2."Package Line No." := '';
                  BOLSumLine2."Package Line Variant Code" := '';
                  BOLSumLine2."Package Line Unit of Measure" := '';
                  BOLSumLine2."Package Line Quantity" := 0;
                  BOLSumLine2."Package Line Quantity (Base)" := 0;
                  BOLSumLine2."UCC No." := '';
                  BOLSumLine2."UCC No. (Print)" := '';
                  BOLSumLine2."RF-ID (Hex)" := '';
                  BOLSumLine2."External Tracking No." := '';
                  BOLSumLine2."First Level Package No." := '';
                  BOLSumLine2."Second Level Package No." := '';
                  BOLSumLine2."First Level Line No." := 0;
                  BOLSumLine2."Second Level Line No." := 0;
                  IF OverrideASNSummary THEN BEGIN
                    BOLSumLine2."Override ASN Summary" := TRUE;
                    BOLSumLine2."Override ASN Summary Type" := PackingRule."ASN Summary Type";
                  END;
                  UpdateAdvLineNo(BOLSumLine2,PackingRule,LevelParentAdv);

                  BOLSumLine2.INSERT;

                  LevelParent[BOLSumLine2.Level] := BOLSumLine2."Line No.";
                END;

                IF (LastItemNo <> BOLSumLine."Package Line No.") OR
                   (LastItemVariant <> BOLSumLine."Package Line Variant Code") OR
                   (LastExternalDocNo <> BOLSumLine."External Document No.") OR
                   (PackingRule."ASN with PO per Document" AND
                    (LastOrderNo <> BOLSumLine."Source ID"))
                THEN BEGIN
                  IF BOLSumLineItem."No." <> '' THEN
                    BOLSumLineItem.MODIFY;

                  BOLSumLine2 := BOLSumLine;
                  BOLSumLine2."Bill of Lading Type" := BOLSumLine."Bill of Lading Type"::"ASN (EDI)";
                  LineNo := LineNo + 1;
                  BOLSumLine2."Line No." := LineNo;
                  BOLSumLine2.Level := 3;
                  BOLSumLine2."Parent Line No." := LevelParent[BOLSumLine2.Level - 1];
                  BOLSumLine2.Type := BOLSumLine2.Type::"Item (ASN)";
                  BOLSumLine2."Type Description" :=
                    STRSUBSTNO('%1 %2',BOLSumLine.Type,BOLSumLine."No.");
                  BOLSumLine2."EDI Level ID" := BOLSumLine."Item UPC/EAN Number";

                  BOLSumLine2.Description := '';
                  BOLSumLine2."Package No." := '';
                  BOLSumLine2."Package Line Line No." := 0;
                  BOLSumLine2."Package Line Type" := 0;
                  BOLSumLine2."Package Line No." := '';
                  BOLSumLine2."Package Line Variant Code" := '';
                  BOLSumLine2."Package Line Unit of Measure" := '';
                  BOLSumLine2."Package Line Quantity" := 0;
                  BOLSumLine2."Package Line Quantity (Base)" := 0;
                  BOLSumLine2."UCC No." := '';
                  BOLSumLine2."UCC No. (Print)" := '';
                  BOLSumLine2."RF-ID (Hex)" := '';
                  BOLSumLine2."External Tracking No." := '';
                  BOLSumLine2."First Level Package No." := '';
                  BOLSumLine2."Second Level Package No." := '';
                  BOLSumLine2."First Level Line No." := 0;
                  BOLSumLine2."Second Level Line No." := 0;
                  BOLSumLine2.Weight := 0;
                  BOLSumLine2.Volume := 0;
                  BOLSumLine2.Value := 0;
                  BOLSumLine2."No. of Packages with Packages" := 0;
                  BOLSumLine2."No. of Packages with Items" := 0;
                  IF OverrideASNSummary THEN BEGIN
                    BOLSumLine2."Override ASN Summary" := TRUE;
                    BOLSumLine2."Override ASN Summary Type" := PackingRule."ASN Summary Type";
                  END;
                  UpdateAdvLineNo(BOLSumLine2,PackingRule,LevelParentAdv);

                  BOLSumLine2.INSERT;
                  BOLSumLineItem := BOLSumLine2;

                  LevelParent[BOLSumLine2.Level] := BOLSumLine2."Line No.";
                END;

                BOLSumLine2.GET(
                  BOLSumLine."Bill of Lading No.",BOLSumLine."Bill of Lading Type",
                  BOLSumLine."First Level Line No.");
                IF (BOLSumLine2."UCC No." = '') AND PackingRule."ASN Require UCC No." THEN BEGIN
                  BOLSumLine2."ASN Comment" :=
                    STRSUBSTNO(
                      Text010,
                      BOLSumLine2.FIELDNAME("UCC No."));
                  BOLSumLine2.MODIFY;
                END;
                BOLSumLine2."Bill of Lading Type" := BOLSumLine."Bill of Lading Type"::"ASN (EDI)";
                LineNo := LineNo + 1;
                BOLSumLine2."Line No." := LineNo;
                BOLSumLine2.Level := 4;
                BOLSumLine2."Parent Line No." := LevelParent[BOLSumLine2.Level - 1];
                IF BOLSumLine."Package Line Quantity" <
                   BOLSumLine."Package Line Quantity (Base)"
                THEN BEGIN
                  BOLSumLine2."Type Description" :=
                    STRSUBSTNO(
                      '%1 %2 (%3 %4 (%5 %6)).',
                      BOLSumLine2.Type,BOLSumLine2."No.",
                      BOLSumLine."Package Line Quantity",
                      BOLSumLine."Package Line Unit of Measure",
                      BOLSumLine."Package Line Quantity (Base)",
                      BOLSumLine."One Unit of Measure Code");
                END ELSE
                  BOLSumLine2."Type Description" :=
                    STRSUBSTNO(
                      '%1 %2 (%3 %4).',
                      BOLSumLine2.Type,BOLSumLine2."No.",
                      BOLSumLine."Package Line Quantity",
                      BOLSumLine."Package Line Unit of Measure");
                BOLSumLine2."EDI Level ID" := BOLSumLine."UCC No.";
                BOLSumLine2.Type := BOLSumLine2.Type::"Package (Item)";
                BOLSumLine2."Package Line Line No." := BOLSumLine."Package Line Line No.";
                BOLSumLine2."Package Line Type" := BOLSumLine."Package Line Type" ;
                BOLSumLine2."Package Line No." := BOLSumLine."Package Line No.";
                BOLSumLine2."Package Line Variant Code" := BOLSumLine."Package Line Variant Code";
                BOLSumLine2."Package Line Unit of Measure" :=
                  BOLSumLine."Package Line Unit of Measure";
                BOLSumLine2."Package Line Quantity" := BOLSumLine."Package Line Quantity";
                BOLSumLine2."Package Line Quantity (Base)" :=
                  BOLSumLine."Package Line Quantity (Base)";
                BOLSumLine2."Item UPC/EAN Number" := BOLSumLine."Item UPC/EAN Number";
                BOLSumLine2."Item UPC/EAN Number (Print)" := BOLSumLine."Item UPC/EAN Number (Print)";
                BOLSumLine2."Std. Pack UPC/EAN Number" := BOLSumLine."Std. Pack UPC/EAN Number";
                BOLSumLine2."Std. Pack UPC/EAN No. (Print)" :=
                  BOLSumLine."Std. Pack UPC/EAN No. (Print)";

                BOLSumLine2."No. of Packages with Packages" := 0;
                BOLSumLine2."No. of Packages with Items" := 1;
                IF OverrideASNSummary THEN BEGIN
                  BOLSumLine2."Override ASN Summary" := TRUE;
                  BOLSumLine2."Override ASN Summary Type" := PackingRule."ASN Summary Type";
                END;
                UpdateAdvLineNo(BOLSumLine2,PackingRule,LevelParentAdv);

                BOLSumLine2.INSERT;

                // Update Item Line
                IF BOLSumLineItem."Package Line Quantity" = 0 THEN
                  BOLSumLineItem."Package Line Unit of Measure" :=
                    BOLSumLine2."Package Line Unit of Measure"
                ELSE
                  IF BOLSumLineItem."Package Line Unit of Measure" <>
                     BOLSumLine2."Package Line Unit of Measure"
                  THEN BEGIN
                    BOLSumLineItem."Package Line Unit of Measure" := '';
                    BOLSumLineItem."Package Line Quantity" :=
                      BOLSumLineItem."Package Line Quantity (Base)";
                  END;
                IF BOLSumLineItem."Package Line Unit of Measure" <> '' THEN
                  BOLSumLineItem."Package Line Quantity" :=
                    BOLSumLineItem."Package Line Quantity" + BOLSumLine2."Package Line Quantity"
                ELSE
                  BOLSumLineItem."Package Line Quantity" :=
                    BOLSumLineItem."Package Line Quantity" + BOLSumLine2."Package Line Quantity (Base)";
                BOLSumLineItem."Package Line Quantity (Base)" :=
                  BOLSumLineItem."Package Line Quantity (Base)" +
                  BOLSumLine2."Package Line Quantity (Base)";
                BOLSumLineItem.Weight := BOLSumLineItem.Weight + BOLSumLine2.Weight;
                BOLSumLineItem.Volume := BOLSumLineItem.Volume + BOLSumLine2.Volume;
                BOLSumLineItem.Value := BOLSumLineItem.Value + BOLSumLine2.Value;
                BOLSumLineItem."No. of Packages with Items" :=
                  BOLSumLineItem."No. of Packages with Items" +
                  BOLSumLine2."No. of Packages with Items";
                LastExternalDocNo := BOLSumLine."External Document No.";
                LastOrderNo := BOLSumLine."Source ID";
                LastItemNo := BOLSumLine."Package Line No.";
                LastItemVariant := BOLSumLine."Package Line Variant Code";
              END;
          END;
        UNTIL BOLSumLine.NEXT = 0;

        IF BOLSumLineItem."No." <> '' THEN
          BOLSumLineItem.MODIFY;
      END;

      BOLSumLine.RESET;
      BOLSumLine.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
      BOLSumLine.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type"::"ASN (EDI)");
      FOR BOLSumLineLevel := 2 DOWNTO 1 DO BEGIN
        BOLSumLine.SETRANGE(Level,BOLSumLineLevel);
        IF BOLSumLine.FIND('-') THEN
          REPEAT
            BOLSumLine.Weight := 0;
            BOLSumLine.Volume := 0;
            BOLSumLine.Value := 0;
            BOLSumLine."Package Line Quantity" := 0;
            BOLSumLine."Package Line Quantity (Base)" := 0;
            BOLSumLine."No. of Packages with Packages" := 0;
            BOLSumLine."No. of Packages with Items" := 0;

            BOLSumLine2.RESET;
            BOLSumLine2.SETCURRENTKEY("Bill of Lading No.","Bill of Lading Type","Parent Line No.");
            BOLSumLine2.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
            BOLSumLine2.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type");
            BOLSumLine2.SETRANGE("Parent Line No.",BOLSumLine."Line No.");
            IF BOLSumLine2.FIND('-') THEN
              REPEAT
                BOLSumLine.Weight := BOLSumLine.Weight + BOLSumLine2.Weight;
                BOLSumLine.Volume := BOLSumLine.Volume + BOLSumLine2.Volume;
                BOLSumLine.Value := BOLSumLine.Value + BOLSumLine2.Value;
                BOLSumLine."Package Line Quantity" :=
                  BOLSumLine."Package Line Quantity" + BOLSumLine2."Package Line Quantity";
                BOLSumLine."Package Line Quantity (Base)" :=
                  BOLSumLine."Package Line Quantity (Base)" +
                  BOLSumLine2."Package Line Quantity (Base)";
                BOLSumLine."No. of Packages with Items" :=
                  BOLSumLine."No. of Packages with Items" +
                  BOLSumLine2."No. of Packages with Items";
              UNTIL BOLSumLine2.NEXT = 0;

            BOLSumLine.MODIFY;
          UNTIL BOLSumLine.NEXT = 0;
      END;

      EXIT(ProblemsFound);
    END;

    LOCAL PROCEDURE UpdateASNSummaryPackOrderItem@18(CurrentBillOfLading@1000000000 : Record 14000822;PackingRule@1000000001 : Record 14000715;TypeCode@1000000002 : Code[10]) : Boolean;
    VAR
      BOLSumLine@1000000003 : Record 14000825;
      BOLSumLine2@1000000004 : Record 14000825;
      BOLSumLinePackage@1000000005 : Record 14000825;
      LastPackageNo@1000000006 : Code[20];
      LineNo@1000000007 : Integer;
      LevelParent@1000000008 : ARRAY [100] OF Integer;
      LevelParentAdv@1240030000 : ARRAY [100] OF Integer;
      BOLSumLineLevel@1000000009 : Integer;
      ProblemsFound@1000000010 : Boolean;
    BEGIN
      BOLSumLine.RESET;
      BOLSumLine.SETCURRENTKEY("Bill of Lading No.","Bill of Lading Type","First Level Package No.");
      BOLSumLine.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
      IF PackingRule."ASN Summary from Pack. Summary" THEN
        BOLSumLine.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type"::"Package Summary")
      ELSE
        BOLSumLine.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type"::Standard);
      BOLSumLine.SETRANGE(Type,BOLSumLine.Type::Shipment,BOLSumLine.Type::Item);
      IF BOLSumLine.FIND('-') THEN BEGIN
        BOLSumLine2.RESET;
        BOLSumLine2.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
        BOLSumLine2.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type"::"ASN (EDI)");
        BOLSumLine2.DELETEALL;

        LineNo := 1;
        CLEAR(LevelParent);
        LastPackageNo := 'X Y Z';
        ProblemsFound := FALSE;

        BOLSumLine2.GET(CurrentBillOfLading."No.",BOLSumLine."Bill of Lading Type",1);
        BOLSumLine2."Bill of Lading No." := BOLSumLine2."Bill of Lading No.";
        BOLSumLine2."Bill of Lading Type" := BOLSumLine."Bill of Lading Type"::"ASN (EDI)";
        BOLSumLine2."Line No." := LineNo;
        BOLSumLine2."Parent Line No." := 0;
        BOLSumLine2.Level := 1;
        BOLSumLine2.Type := BOLSumLine2.Type::"Bill of Lading";
        BOLSumLine2."No." := CurrentBillOfLading."No.";
        BOLSumLine2."Type Description" :=
          STRSUBSTNO(Text009,BOLSumLine2."Bill of Lading No.");
        BOLSumLine2."EDI Level ID" := CurrentBillOfLading."No.";
        IF OverrideASNSummary THEN BEGIN
          BOLSumLine2."Override ASN Summary" := TRUE;
          BOLSumLine2."Override ASN Summary Type" := PackingRule."ASN Summary Type";
        END;
        UpdateAdvLineNo(BOLSumLine2,PackingRule,LevelParentAdv);

        BOLSumLine2.INSERT;
        LevelParent[BOLSumLine2.Level] := BOLSumLine2."Line No.";

        REPEAT
          CASE BOLSumLine.Type OF
            BOLSumLine.Type::Shipment:
              BEGIN
                IF BOLSumLine."External Document No." = '' THEN BEGIN
                  BOLSumLine."ASN Comment" :=
                    STRSUBSTNO(
                      Text010,
                      BOLSumLine.FIELDNAME("External Document No."));
                  BOLSumLine.MODIFY;

                  ProblemsFound := TRUE;
                END;
              END;

            BOLSumLine.Type::Package:
              BEGIN
                IF BOLSumLine.Level = 4 THEN BEGIN
                  IF (BOLSumLine."UCC No." = '') AND PackingRule."ASN Require UCC No." THEN BEGIN
                    BOLSumLine."ASN Comment" :=
                      STRSUBSTNO(
                        Text010,
                        BOLSumLine.FIELDNAME("UCC No."));
                    BOLSumLine.MODIFY;

                    ProblemsFound := TRUE;
                  END;
                END ELSE BEGIN
                  BOLSumLine."ASN Comment" := Text012;
                  IF (BOLSumLine."UCC No." <> '') AND PackingRule."ASN Require UCC No." THEN
                    BOLSumLine."ASN Comment" :=
                      BOLSumLine."ASN Comment" +
                      STRSUBSTNO(
                        Text013,
                        BOLSumLine.FIELDNAME("UCC No."));
                  BOLSumLine.MODIFY;

                  ProblemsFound := TRUE;
                END;
              END;

            BOLSumLine.Type::Item:
              BEGIN
                IF LastPackageNo <> BOLSumLine."First Level Package No." THEN BEGIN
                  BOLSumLinePackage.GET(
                    CurrentBillOfLading."No.",BOLSumLine."Bill of Lading Type",
                    BOLSumLine."First Level Line No.");
                  BOLSumLinePackage."Bill of Lading Type" := BOLSumLine."Bill of Lading Type"::"ASN (EDI)";
                  LineNo := LineNo + 1;
                  BOLSumLinePackage."Line No." := LineNo;
                  BOLSumLinePackage.Level := 2;
                  BOLSumLinePackage."Parent Line No." := LevelParent[BOLSumLinePackage.Level - 1];
                  BOLSumLinePackage."First Level Line No." := BOLSumLinePackage."Line No.";
                  BOLSumLinePackage."EDI Level ID" := BOLSumLine."UCC No.";
                  BOLSumLinePackage."No. of Packages with Packages" := 0;
                  BOLSumLinePackage."No. of Packages with Items" := 1;
                  IF OverrideASNSummary THEN BEGIN
                    BOLSumLinePackage."Override ASN Summary" := TRUE;
                    BOLSumLinePackage."Override ASN Summary Type" := PackingRule."ASN Summary Type";
                  END;
                  UpdateAdvLineNo(BOLSumLinePackage,PackingRule,LevelParentAdv);

                  BOLSumLinePackage.INSERT;

                  LevelParent[BOLSumLinePackage.Level] :=
                    BOLSumLinePackage."Line No.";
                  LastPackageNo := BOLSumLine."First Level Package No.";

                  // Purchase Order
                  BOLSumLine2 := BOLSumLinePackage;
                  BOLSumLine2."Bill of Lading Type" := BOLSumLine."Bill of Lading Type"::"ASN (EDI)";
                  LineNo := LineNo + 1;
                  BOLSumLine2."Line No." := LineNo;
                  BOLSumLine2.Level := 3;
                  BOLSumLine2."Parent Line No." := LevelParent[BOLSumLine2.Level - 1];
                  BOLSumLine2.Type := BOLSumLine2.Type::"Purchase Order";
                  BOLSumLine2."No." := BOLSumLine2."External Document No.";
                  BOLSumLine2."Type Description" :=
                    STRSUBSTNO(
                      '%1 %2',
                      BOLSumLine2.Type,BOLSumLine2."External Document No.");
                  BOLSumLine2."EDI Level ID" := BOLSumLine2."External Document No.";
                  BOLSumLine2."No. of Packages with Packages" := 0;
                  BOLSumLine2."No. of Packages with Items" := 1;
                  UpdateAdvLineNo(BOLSumLine2,PackingRule,LevelParentAdv);

                  BOLSumLine2.INSERT;
                  LevelParent[BOLSumLine2.Level] :=
                    BOLSumLine2."Line No.";
                END;

                BOLSumLine2 := BOLSumLine;
                BOLSumLine2."Bill of Lading Type" := BOLSumLine."Bill of Lading Type"::"ASN (EDI)";
                LineNo := LineNo + 1;
                BOLSumLine2."Line No." := LineNo;
                BOLSumLine2.Level := 4;
                BOLSumLine2."Parent Line No." :=
                  LevelParent[BOLSumLine2.Level - 1];
                BOLSumLine2."EDI Level ID" :=
                  BOLSumLine."Item UPC/EAN Number";
                BOLSumLine2."UCC No." :=
                  BOLSumLinePackage."UCC No.";
                BOLSumLine2."UCC No. (Print)" :=
                  BOLSumLinePackage."UCC No. (Print)";
                BOLSumLine2."RF-ID (Hex)" :=
                  BOLSumLinePackage."RF-ID (Hex)";
                BOLSumLine2."External Tracking No." :=
                  BOLSumLinePackage."External Tracking No.";
                BOLSumLine2."First Level Package No." :=
                  BOLSumLinePackage."First Level Package No.";
                BOLSumLine2."First Level Line No." :=
                  BOLSumLinePackage."First Level Line No.";
                BOLSumLine2."Second Level Package No." := '';
                BOLSumLine2."Second Level Line No." := 0;
                IF OverrideASNSummary THEN BEGIN
                  BOLSumLine2."Override ASN Summary" := TRUE;
                  BOLSumLine2."Override ASN Summary Type" := PackingRule."ASN Summary Type";
                END;
                UpdateAdvLineNo(BOLSumLine2,PackingRule,LevelParentAdv);

                BOLSumLine2.INSERT;
                LevelParent[BOLSumLine2.Level] := BOLSumLine2."Line No.";
              END;
          END;
        UNTIL BOLSumLine.NEXT = 0;
      END;

      BOLSumLine.RESET;
      BOLSumLine.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
      BOLSumLine.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type"::"ASN (EDI)");
      FOR BOLSumLineLevel := 1 DOWNTO 1 DO BEGIN
        BOLSumLine.SETRANGE(Level,BOLSumLineLevel);
        IF BOLSumLine.FIND('-') THEN
          REPEAT
            BOLSumLine.Weight := 0;
            BOLSumLine.Volume := 0;
            BOLSumLine.Value := 0;
            BOLSumLine."Package Line Quantity" := 0;
            BOLSumLine."Package Line Quantity (Base)" := 0;
            BOLSumLine."No. of Packages with Packages" := 0;
            BOLSumLine."No. of Packages with Items" := 0;

            BOLSumLine2.RESET;
            BOLSumLine2.SETCURRENTKEY("Bill of Lading No.","Bill of Lading Type","Parent Line No.");
            BOLSumLine2.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
            BOLSumLine2.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type");
            BOLSumLine2.SETRANGE("Parent Line No.",BOLSumLine."Line No.");
            IF BOLSumLine2.FIND('-') THEN
              REPEAT
                BOLSumLine.Weight := BOLSumLine.Weight + BOLSumLine2.Weight;
                BOLSumLine.Volume := BOLSumLine.Volume + BOLSumLine2.Volume;
                BOLSumLine.Value := BOLSumLine.Value + BOLSumLine2.Value;
                BOLSumLine."Package Line Quantity" :=
                  BOLSumLine."Package Line Quantity" + BOLSumLine2."Package Line Quantity";
                BOLSumLine."Package Line Quantity (Base)" :=
                  BOLSumLine."Package Line Quantity (Base)" +
                  BOLSumLine2."Package Line Quantity (Base)";
                BOLSumLine."No. of Packages with Items" :=
                  BOLSumLine."No. of Packages with Items" +
                  BOLSumLine2."No. of Packages with Items";
              UNTIL BOLSumLine2.NEXT = 0;

            BOLSumLine.MODIFY;
          UNTIL BOLSumLine.NEXT = 0;
      END;

      EXIT(ProblemsFound);
    END;

    LOCAL PROCEDURE UpdateASNSummaryPrioritized@1240030001(CurrentBillOfLading@1000000000 : Record 14000822;PackingRule@1000000001 : Record 14000715;TypeCode@1000000002 : Code[10]) : Boolean;
    VAR
      BOLSumLine@1000000003 : Record 14000825;
      BOLSumLine2@1000000004 : Record 14000825;
      BOLSumLineTare@1000000005 : Record 14000825;
      BOLSumLinePackage@1000000006 : Record 14000825;
      BOLSortingTmp@1240030001 : TEMPORARY Record 14000828;
      LastOrderNo@1000000015 : Code[20];
      LastVariantCode@1240030007 : Code[20];
      LastType@1240030010 : Integer;
      LastUOM@1240030011 : Code[20];
      LastQuantity@1240030012 : Decimal;
      LastLevelNo@1240030008 : ARRAY [10] OF Code[20];
      LineNo@1000000010 : Integer;
      LevelParent@1000000011 : ARRAY [100] OF Integer;
      LevelParentAdv@1240030000 : ARRAY [100] OF Integer;
      BOLSumLineLevel@1000000012 : Integer;
      ProblemsFound@1000000013 : Boolean;
      ASNCommentText@1000000014 : Text[250];
      CurrentLevel@1240030002 : Integer;
      CurrentType@1240030006 : Integer;
      CurrentCode@1240030004 : Code[35];
      CurrentCode2@1240030005 : Code[20];
      i@1240030003 : Integer;
      j@1240030009 : Integer;
      LevelOne@1240020000 : ' ,Order,Tare,Package,Item';
      UseOUMAndQtyinPrior@1240020001 : Boolean;
    BEGIN
      IF OverrideASNSummary THEN BEGIN
        PackingRule.TESTFIELD("Prioritized Level 1 (Override)");
        PackingRule.TESTFIELD("Prioritized Level 2 (Override)");
        PackingRule.TESTFIELD("Prioritized Level 3 (Override)");
        PackingRule.TESTFIELD("Prioritized Level 4 (Override)");
        IF (PackingRule."Prioritized Level 1" = PackingRule."Prioritized Level 2 (Override)") OR
           (PackingRule."Prioritized Level 1" = PackingRule."Prioritized Level 3 (Override)") OR
           (PackingRule."Prioritized Level 1" = PackingRule."Prioritized Level 4 (Override)") OR
           (PackingRule."Prioritized Level 2" = PackingRule."Prioritized Level 3 (Override)") OR
           (PackingRule."Prioritized Level 2" = PackingRule."Prioritized Level 4 (Override)") OR
           (PackingRule."Prioritized Level 3" = PackingRule."Prioritized Level 4 (Override)")
        THEN
          ERROR(Text032,PackingRule.Code);
      END ELSE BEGIN
        PackingRule.TESTFIELD("Prioritized Level 1");
        PackingRule.TESTFIELD("Prioritized Level 2");
        PackingRule.TESTFIELD("Prioritized Level 3");
        PackingRule.TESTFIELD("Prioritized Level 4");
        IF (PackingRule."Prioritized Level 1" = PackingRule."Prioritized Level 2") OR
           (PackingRule."Prioritized Level 1" = PackingRule."Prioritized Level 3") OR
           (PackingRule."Prioritized Level 1" = PackingRule."Prioritized Level 4") OR
           (PackingRule."Prioritized Level 2" = PackingRule."Prioritized Level 3") OR
           (PackingRule."Prioritized Level 2" = PackingRule."Prioritized Level 4") OR
           (PackingRule."Prioritized Level 3" = PackingRule."Prioritized Level 4")
        THEN
          ERROR(Text032,PackingRule.Code);
      END;
      BOLSumLine.RESET;
      IF PackingRule."ASN with PO per Document" THEN
        BOLSumLine.SETCURRENTKEY(
          "Bill of Lading No.","Bill of Lading Type","External Document No.",
          "Source Type","Source Subtype","Source ID")
      ELSE
        BOLSumLine.SETCURRENTKEY(
          "Bill of Lading No.","Bill of Lading Type","External Document No.");
      BOLSumLine.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
      IF PackingRule."ASN Summary from Pack. Summary" THEN
        BOLSumLine.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type"::"Package Summary")
      ELSE
        BOLSumLine.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type"::Standard);
      BOLSumLine.SETRANGE(Type,BOLSumLine.Type::Item);
      IF BOLSumLine.FIND('-') THEN BEGIN
        REPEAT
          BOLSortingTmp.INIT;
          BOLSortingTmp."Line No." := BOLSumLine."Line No.";

          FOR i := 1 TO 4 DO BEGIN
            CASE i OF
              1:
                BEGIN
                  IF OverrideASNSummary THEN
                    CurrentLevel := PackingRule."Prioritized Level 1 (Override)"
                  ELSE
                    CurrentLevel := PackingRule."Prioritized Level 1";
                END;
              2:
                BEGIN
                  IF OverrideASNSummary THEN
                    CurrentLevel := PackingRule."Prioritized Level 2 (Override)"
                  ELSE
                    CurrentLevel := PackingRule."Prioritized Level 2"
                END;
              3:
                BEGIN
                  IF OverrideASNSummary THEN
                    CurrentLevel := PackingRule."Prioritized Level 3 (Override)"
                  ELSE
                    CurrentLevel := PackingRule."Prioritized Level 3";
                END;
              4:
                BEGIN
                  IF OverrideASNSummary THEN
                    CurrentLevel := PackingRule."Prioritized Level 4 (Override)"
                  ELSE
                    CurrentLevel := PackingRule."Prioritized Level 4";
                END;
            END;

            CurrentType := 0;
            CurrentCode := '';
            CurrentCode2 := '';
            IF OverrideASNSummary THEN
              LevelOne := PackingRule."Prioritized Level 1 (Override)"
            ELSE
              LevelOne := PackingRule."Prioritized Level 1";
            CASE CurrentLevel OF
              LevelOne::Order:
                BEGIN
                  CurrentCode := BOLSumLine."External Document No.";
                  IF PackingRule."ASN with PO per Document" THEN BEGIN
                    CurrentType := BOLSumLine."Source Subtype";
                    CurrentCode2 := BOLSumLine."Source ID";
                  END;
                END;
              LevelOne::Tare:
                IF BOLSumLine."Second Level Package No." <> '' THEN
                  CurrentCode := BOLSumLine."First Level Package No."
                ELSE
                  CurrentCode := '';
              LevelOne::Package:
                IF BOLSumLine."Second Level Package No." <> '' THEN
                  CurrentCode := BOLSumLine."Second Level Package No."
                ELSE
                  CurrentCode := BOLSumLine."First Level Package No.";
              LevelOne::Item:
                BEGIN
                  CurrentType := BOLSumLine."Package Line Type";
                  CurrentCode := BOLSumLine."Package Line No.";
                  CurrentCode2 := BOLSumLine."Package Line Variant Code";
                END;
            END;

            CASE i OF
              1:
                BEGIN
                  BOLSortingTmp."Level 1 Type" := CurrentType;
                  BOLSortingTmp."Level 1 Code" := CurrentCode;
                  BOLSortingTmp."Level 1 Code 2" := CurrentCode2;
                END;
              2:
                BEGIN
                  BOLSortingTmp."Level 2 Type" := CurrentType;
                  BOLSortingTmp."Level 2 Code" := CurrentCode;
                  BOLSortingTmp."Level 2 Code 2" := CurrentCode2;
                END;
              3:
                BEGIN
                  BOLSortingTmp."Level 3 Type" := CurrentType;
                  BOLSortingTmp."Level 3 Code" := CurrentCode;
                  BOLSortingTmp."Level 3 Code 2" := CurrentCode2;
                END;
              4:
                BEGIN
                  BOLSortingTmp."Level 4 Type" := CurrentType;
                  BOLSortingTmp."Level 4 Code" := CurrentCode;
                  BOLSortingTmp."Level 4 Code 2" := CurrentCode2;
                END;
            END;
          END;

          BOLSortingTmp.INSERT;
        UNTIL BOLSumLine.NEXT = 0;

        i := 1;
        BOLSortingTmp.RESET;
        BOLSortingTmp.SETCURRENTKEY("Level 1 Type","Level 1 Code","Level 1 Code 2");
        IF BOLSortingTmp.FIND('-') THEN
          REPEAT
            i := i + 1;
            BOLSumLine.GET(
              BOLSumLine."Bill of Lading No.",BOLSumLine."Bill of Lading Type",
              BOLSortingTmp."Line No.");
            BOLSumLine."Prioritized Sorting" := i;
            BOLSumLine.MODIFY;
          UNTIL BOLSortingTmp.NEXT = 0;
      END;

      BOLSumLine.RESET;
      BOLSumLine.SETCURRENTKEY("Bill of Lading No.","Bill of Lading Type","Prioritized Sorting");
      BOLSumLine.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
      IF PackingRule."ASN Summary from Pack. Summary" THEN
        BOLSumLine.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type"::"Package Summary")
      ELSE
        BOLSumLine.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type"::Standard);
      BOLSumLine.SETFILTER(Type,'%1|%2',BOLSumLine.Type::Shipment,BOLSumLine.Type::Item);
      IF BOLSumLine.FIND('-') THEN BEGIN
        BOLSumLine2.RESET;
        BOLSumLine2.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
        BOLSumLine2.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type"::"ASN (EDI)");
        BOLSumLine2.DELETEALL;

        LineNo := 1;
        CLEAR(LevelParent);
        LastOrderNo := 'X Y Z';
        LastVariantCode := 'X Y Z';
        LastType := -1;
        LastUOM := 'X Y Z';
        LastQuantity := -1;
        FOR i := 1 TO ARRAYLEN(LastLevelNo) DO
          LastLevelNo[i] := 'X Y Z';
        ProblemsFound := FALSE;

        BOLSumLine2.GET(CurrentBillOfLading."No.",BOLSumLine."Bill of Lading Type",1);
        BOLSumLine2."Bill of Lading No." := BOLSumLine2."Bill of Lading No.";
        BOLSumLine2."Bill of Lading Type" := BOLSumLine."Bill of Lading Type"::"ASN (EDI)";
        BOLSumLine2."Line No." := LineNo;
        BOLSumLine2."Parent Line No." := 0;
        BOLSumLine2.Level := 1;
        BOLSumLine2.Type := BOLSumLine2.Type::"Bill of Lading";
        BOLSumLine2."No." := CurrentBillOfLading."No.";
        BOLSumLine2."Type Description" :=
          STRSUBSTNO(Text009,BOLSumLine2."Bill of Lading No.");
        BOLSumLine2."EDI Level ID" := CurrentBillOfLading."No.";
        IF OverrideASNSummary THEN BEGIN
          BOLSumLine2."Override ASN Summary" := TRUE;
          BOLSumLine2."Override ASN Summary Type" := PackingRule."ASN Summary Type";
        END;
        UpdateAdvLineNo(BOLSumLine2,PackingRule,LevelParentAdv);

        BOLSumLine2.INSERT;
        LevelParent[BOLSumLine2.Level] := BOLSumLine2."Line No.";

        REPEAT
          CASE BOLSumLine.Type OF
            BOLSumLine.Type::Shipment:
              BEGIN
                IF BOLSumLine."External Document No." = '' THEN BEGIN
                  BOLSumLine."ASN Comment" :=
                    STRSUBSTNO(
                      Text010,
                      BOLSumLine.FIELDNAME("External Document No."));
                  BOLSumLine.MODIFY;

                  ProblemsFound := TRUE;
                END;
              END;
            BOLSumLine.Type::Item:
              BEGIN
                FOR i := 1 TO 4 DO BEGIN
                  CASE i OF
                    1:
                      BEGIN
                        IF OverrideASNSummary THEN
                          CurrentLevel := PackingRule."Prioritized Level 1 (Override)"
                        ELSE
                          CurrentLevel := PackingRule."Prioritized Level 1";
                      END;
                    2:
                      BEGIN
                        IF OverrideASNSummary THEN
                          CurrentLevel := PackingRule."Prioritized Level 2 (Override)"
                        ELSE
                          CurrentLevel := PackingRule."Prioritized Level 2";
                      END;
                    3:
                      BEGIN
                        IF OverrideASNSummary THEN
                          CurrentLevel := PackingRule."Prioritized Level 3 (Override)"
                        ELSE
                          CurrentLevel := PackingRule."Prioritized Level 3";
                      END;
                    4:
                      BEGIN
                        IF OverrideASNSummary THEN
                          CurrentLevel := PackingRule."Prioritized Level 4 (Override)"
                        ELSE
                          CurrentLevel := PackingRule."Prioritized Level 4";
                      END;
                  END;
                  IF OverrideASNSummary THEN BEGIN
                    LevelOne := PackingRule."Prioritized Level 1 (Override)";
                    UseOUMAndQtyinPrior := PackingRule."Use UOM and Qty. in Prior.";
                  END ELSE BEGIN
                    LevelOne := PackingRule."Prioritized Level 1";
                    UseOUMAndQtyinPrior := PackingRule."Use UOM and Qty. in Prior.";
                  END;
                  CASE CurrentLevel OF
                    LevelOne::Order:
                      BEGIN
                        IF (LastLevelNo[i] <> BOLSumLine."External Document No.") OR
                           (PackingRule."ASN with PO per Document" AND
                            (LastOrderNo <> BOLSumLine."Source ID"))
                        THEN BEGIN
                          BOLSumLine2 := BOLSumLine;
                          BOLSumLine2."Bill of Lading Type" := BOLSumLine."Bill of Lading Type"::"ASN (EDI)";
                          LineNo := LineNo + 1;
                          BOLSumLine2."Line No." := LineNo;
                          BOLSumLine2.Level := i + 1;
                          BOLSumLine2."Parent Line No." := LevelParent[BOLSumLine2.Level - 1];
                          BOLSumLine2.Type := BOLSumLine2.Type::"Purchase Order";
                          BOLSumLine2."No." := BOLSumLine2."External Document No.";
                          IF PackingRule."ASN with PO per Document" THEN
                            BOLSumLine2."Type Description" :=
                              STRSUBSTNO(
                                Text011,
                                BOLSumLine2.Type,BOLSumLine2."External Document No.",
                                BOLSumLine2."Source ID")
                          ELSE
                            BOLSumLine2."Type Description" :=
                              STRSUBSTNO(
                                '%1 %2',
                                BOLSumLine2.Type,BOLSumLine2."External Document No.");
                          BOLSumLine2."EDI Level ID" := BOLSumLine2."External Document No.";

                          BOLSumLine2.Description := '';
                          BOLSumLine2."Package No." := '';
                          BOLSumLine2."Package Line Line No." := 0;
                          BOLSumLine2."Package Line Type" := 0;
                          BOLSumLine2."Package Line No." := '';
                          BOLSumLine2."Package Line Variant Code" := '';
                          BOLSumLine2."Package Line Unit of Measure" := '';
                          BOLSumLine2."Package Line Quantity" := 0;
                          BOLSumLine2."Package Line Quantity (Base)" := 0;
                          BOLSumLine2."UCC No." := '';
                          BOLSumLine2."UCC No. (Print)" := '';
                          BOLSumLine2."RF-ID (Hex)" := '';
                          BOLSumLine2."External Tracking No." := '';
                          BOLSumLine2."First Level Package No." := '';
                          BOLSumLine2."Second Level Package No." := '';
                          BOLSumLine2."First Level Line No." := 0;
                          BOLSumLine2."Second Level Line No." := 0;
                          BOLSumLine2."No. of Packages with Packages" := 0;
                          BOLSumLine2."No. of Packages with Items" := 0;
                          IF OverrideASNSummary THEN BEGIN
                            BOLSumLine2."Override ASN Summary" := TRUE;
                            BOLSumLine2."Override ASN Summary Type" := PackingRule."ASN Summary Type";
                          END;
                          UpdateAdvLineNo(BOLSumLine2,PackingRule,LevelParentAdv);

                          BOLSumLine2.INSERT;

                          LevelParent[BOLSumLine2.Level] := BOLSumLine2."Line No.";
                          LastLevelNo[i] := BOLSumLine2."External Document No.";
                          LastOrderNo := BOLSumLine."Source ID";
                          FOR j := i + 1 TO ARRAYLEN(LastLevelNo) DO
                            LastLevelNo[j] := 'X Y Z';
                        END;
                      END;
                    LevelOne::Tare:
                      BEGIN
                        IF LastLevelNo[i] <> BOLSumLine."First Level Package No." THEN BEGIN
                          BOLSumLine2.GET(
                            CurrentBillOfLading."No.",BOLSumLine."Bill of Lading Type",
                            BOLSumLine."First Level Line No.");
                          ASNCommentText := '';
                          IF (BOLSumLine2."UCC No." = '') AND PackingRule."ASN Require UCC No." THEN
                            ASNCommentText :=
                              ASNCommentText +
                              STRSUBSTNO(Text010,
                              BOLSumLine2.FIELDNAME("UCC No."));
                          IF BOLSumLine2."External Document No." = '' THEN
                            ASNCommentText :=
                              ASNCommentText +
                              STRSUBSTNO(Text010,
                              BOLSumLine2.FIELDNAME("External Document No."));
                          IF ASNCommentText <> '' THEN BEGIN
                            BOLSumLine2."ASN Comment" := ASNCommentText;
                            BOLSumLine2.MODIFY;

                            ProblemsFound := TRUE;
                          END;

                          BOLSumLineTare := BOLSumLine2;
                          BOLSumLineTare."Bill of Lading Type" :=
                            BOLSumLine."Bill of Lading Type"::"ASN (EDI)";
                          LineNo := LineNo + 1;
                          BOLSumLineTare."Line No." := LineNo;
                          BOLSumLineTare.Type := BOLSumLineTare.Type::Tare;
                          BOLSumLineTare.Level := i + 1;
                          BOLSumLineTare."Parent Line No." := LevelParent[BOLSumLineTare.Level - 1];
                          BOLSumLineTare."First Level Line No." := BOLSumLineTare."Line No.";
                          BOLSumLineTare."Type Description" :=
                            STRSUBSTNO(Text014,BOLSumLineTare."No.");
                          BOLSumLineTare."EDI Level ID" := BOLSumLineTare."UCC No.";
                          BOLSumLineTare."No. of Packages with Packages" := 1;
                          BOLSumLineTare."No. of Packages with Items" := 0;
                          UpdateAdvLineNo(BOLSumLineTare,PackingRule,LevelParentAdv);

                          BOLSumLineTare.INSERT;

                          LevelParent[BOLSumLineTare.Level] := BOLSumLineTare."Line No.";
                          LastLevelNo[i] := BOLSumLineTare."No.";
                          FOR j := i + 1 TO ARRAYLEN(LastLevelNo) DO
                            LastLevelNo[j] := 'X Y Z';
                        END;
                      END;
                    LevelOne::Package:
                      BEGIN
                        IF LastLevelNo[i] <> BOLSumLine."Second Level Package No." THEN BEGIN
                          BOLSumLine2.GET(
                            CurrentBillOfLading."No.",BOLSumLine."Bill of Lading Type",
                            BOLSumLine."Second Level Line No.");
                          ASNCommentText := '';
                          IF (BOLSumLine2."UCC No." = '') AND PackingRule."ASN Require UCC No." THEN
                            ASNCommentText :=
                              ASNCommentText +
                              STRSUBSTNO(Text015,BOLSumLine2.FIELDNAME("UCC No."));
                          IF BOLSumLine2."External Document No." = '' THEN
                            ASNCommentText :=
                              ASNCommentText +
                              STRSUBSTNO(Text010,
                          BOLSumLine2.FIELDNAME("External Document No."));
                          IF ASNCommentText <> '' THEN BEGIN
                            BOLSumLine2."ASN Comment" := ASNCommentText;
                            BOLSumLine2.MODIFY;

                            ProblemsFound := TRUE;
                          END;

                          BOLSumLinePackage := BOLSumLine2;
                          BOLSumLinePackage."Bill of Lading Type" := BOLSumLine."Bill of Lading Type"::"ASN (EDI)";
                          LineNo := LineNo + 1;
                          BOLSumLinePackage."Line No." := LineNo;
                          BOLSumLinePackage.Level := i + 1;
                          BOLSumLinePackage."Parent Line No." := LevelParent[BOLSumLinePackage.Level - 1];
                          BOLSumLinePackage."First Level Line No." := BOLSumLineTare."Line No.";
                          BOLSumLinePackage."Second Level Line No." := BOLSumLinePackage."Line No.";
                          BOLSumLinePackage."EDI Level ID" := BOLSumLinePackage."UCC No.";
                          BOLSumLinePackage."No. of Packages with Packages" := 0;
                          BOLSumLinePackage."No. of Packages with Items" := 1;
                          IF OverrideASNSummary THEN BEGIN
                            BOLSumLinePackage."Override ASN Summary" := TRUE;
                            BOLSumLinePackage."Override ASN Summary Type" := PackingRule."ASN Summary Type";
                          END;
                          UpdateAdvLineNo(BOLSumLinePackage,PackingRule,LevelParentAdv);

                          BOLSumLinePackage.INSERT;

                          LevelParent[BOLSumLinePackage.Level] := BOLSumLinePackage."Line No.";
                          LastLevelNo[i] := BOLSumLinePackage."No.";
                          FOR j := i + 1 TO ARRAYLEN(LastLevelNo) DO
                            LastLevelNo[j] := 'X Y Z';
                        END;
                      END;
                    LevelOne::Item:
                      BEGIN
                        IF (LastType <> BOLSumLine.Type) OR
                           (LastLevelNo[i] <> BOLSumLine."No.") OR
                           (LastVariantCode <> BOLSumLine."Package Line Variant Code") OR
                           (UseOUMAndQtyinPrior AND
                            ((LastUOM <> BOLSumLine."Package Line Unit of Measure") OR
                             (LastQuantity <> BOLSumLine."Package Line Quantity")))
                        THEN BEGIN
                          BOLSumLine2 := BOLSumLine;
                          BOLSumLine2."Bill of Lading Type" := BOLSumLine."Bill of Lading Type"::"ASN (EDI)";
                          LineNo := LineNo + 1;
                          BOLSumLine2."Line No." := LineNo;
                          BOLSumLine2.Level := i + 1;
                          BOLSumLine2."Parent Line No." := LevelParent[BOLSumLine2.Level - 1];
                          BOLSumLine2."EDI Level ID" := BOLSumLine."Item UPC/EAN Number";
                          BOLSumLine2."UCC No." :=
                            BOLSumLinePackage."UCC No.";
                          BOLSumLine2."UCC No. (Print)" :=
                            BOLSumLinePackage."UCC No. (Print)";
                          BOLSumLine2."RF-ID (Hex)" :=
                            BOLSumLinePackage."RF-ID (Hex)";
                          BOLSumLine2."External Tracking No." :=
                            BOLSumLinePackage."External Tracking No.";

                          BOLSumLine2."First Level Package No." :=
                            BOLSumLinePackage."First Level Package No.";
                          BOLSumLine2."First Level Line No." :=
                            BOLSumLinePackage."First Level Line No.";
                          BOLSumLine2."Second Level Package No." :=
                            BOLSumLinePackage."Second Level Package No.";
                          BOLSumLine2."Second Level Line No." :=
                            BOLSumLinePackage."First Level Line No.";
                          IF OverrideASNSummary THEN BEGIN
                            BOLSumLinePackage."Override ASN Summary" := TRUE;
                            BOLSumLinePackage."Override ASN Summary Type" := PackingRule."ASN Summary Type";
                          END;
                          UpdateAdvLineNo(BOLSumLine2,PackingRule,LevelParentAdv);

                          BOLSumLine2.INSERT;

                          LevelParent[BOLSumLine2.Level] := BOLSumLine2."Line No.";
                          LastType := BOLSumLine.Type;
                          LastLevelNo[i] := BOLSumLine."No.";
                          LastVariantCode := BOLSumLine."Package Line Variant Code";
                          LastUOM := BOLSumLine."Package Line Unit of Measure";
                          LastQuantity := BOLSumLine."Package Line Quantity";
                          FOR j := i + 1 TO ARRAYLEN(LastLevelNo) DO
                            LastLevelNo[j] := 'X Y Z';
                        END;
                      END;
                  END;
                END;
              END;
          END;
        UNTIL BOLSumLine.NEXT = 0;
      END;

      BOLSumLine.RESET;
      BOLSumLine.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
      BOLSumLine.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type"::"ASN (EDI)");
      FOR BOLSumLineLevel := 4 DOWNTO 1 DO BEGIN
        BOLSumLine.SETRANGE(Level,BOLSumLineLevel);
        IF BOLSumLine.FIND('-') THEN
          REPEAT
            BOLSumLine.Weight := 0;
            BOLSumLine.Volume := 0;
            BOLSumLine.Value := 0;
            BOLSumLine."Summarized Quantity" := 0;
            BOLSumLine."Summarized Quantity (Base)" := 0;
            BOLSumLine."No. of Packages with Packages" := 0;
            BOLSumLine."No. of Packages with Items" := 0;

            BOLSumLine2.RESET;
            BOLSumLine2.SETCURRENTKEY("Bill of Lading No.","Bill of Lading Type","Parent Line No.");
            BOLSumLine2.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
            BOLSumLine2.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type");
            BOLSumLine2.SETRANGE("Parent Line No.",BOLSumLine."Line No.");
            IF BOLSumLine2.FIND('-') THEN
              REPEAT
                BOLSumLine.Weight := BOLSumLine.Weight + BOLSumLine2.Weight;
                BOLSumLine.Volume := BOLSumLine.Volume + BOLSumLine2.Volume;
                BOLSumLine.Value := BOLSumLine.Value + BOLSumLine2.Value;
                IF BOLSumLineLevel = 4 THEN BEGIN
                  BOLSumLine."Summarized Quantity" :=
                    BOLSumLine."Summarized Quantity" + BOLSumLine2."Package Line Quantity";
                  BOLSumLine."Summarized Quantity (Base)" :=
                    BOLSumLine."Summarized Quantity (Base)" + BOLSumLine2."Package Line Quantity (Base)";
                END ELSE BEGIN
                  BOLSumLine."Summarized Quantity" :=
                    BOLSumLine."Summarized Quantity" + BOLSumLine2."Summarized Quantity";
                  BOLSumLine."Summarized Quantity (Base)" :=
                    BOLSumLine."Summarized Quantity (Base)" + BOLSumLine2."Summarized Quantity (Base)";
                END;
                BOLSumLine."No. of Packages with Packages" :=
                  BOLSumLine."No. of Packages with Packages" +
                  BOLSumLine2."No. of Packages with Packages";
                BOLSumLine."No. of Packages with Items" :=
                  BOLSumLine."No. of Packages with Items" +
                  BOLSumLine2."No. of Packages with Items";
              UNTIL BOLSumLine2.NEXT = 0;

            BOLSumLine.MODIFY;
          UNTIL BOLSumLine.NEXT = 0;
      END;

      EXIT(ProblemsFound);
    END;

    LOCAL PROCEDURE UpdateASNSummaryCustom1@22(CurrentBillOfLading@1240030000 : Record 14000822;PackingRule@1240030001 : Record 14000715;TypeCode@1240030002 : Code[10]) : Boolean;
    BEGIN
    END;

    LOCAL PROCEDURE UpdateASNSummaryCustom2@23(CurrentBillOfLading@1240030000 : Record 14000822;PackingRule@1240030001 : Record 14000715;TypeCode@1240030002 : Code[10]) : Boolean;
    BEGIN
    END;

    LOCAL PROCEDURE UpdateASNSummaryCustom3@24(CurrentBillOfLading@1240030000 : Record 14000822;PackingRule@1240030001 : Record 14000715;TypeCode@1240030002 : Code[10]) : Boolean;
    BEGIN
    END;

    LOCAL PROCEDURE UpdateASNSummaryPackageItemDup@1240020006(CurrentBillOfLading@1000000000 : Record 14000822;PackingRule@1000000001 : Record 14000715;TypeCode@1000000002 : Code[10]) : Boolean;
    VAR
      BOLSumLine@1000000003 : Record 14000825;
      BOLSumLine2@1000000004 : Record 14000825;
      BOLSumLinePackage@1000000005 : Record 14000825;
      SalesShipmentLine@1240020003 : Record 111;
      SalesShipmentLineTmp@1240020000 : TEMPORARY Record 111;
      SalesShipmentLineTmp2@1240020001 : TEMPORARY Record 111;
      SalesShipmentLineTmp3@1240020002 : TEMPORARY Record 111;
      LastExternalDocNo@1000000006 : Code[35];
      LastOrderNo@1000000012 : Code[20];
      LastPackageNo@1000000007 : Code[20];
      LineNo@1000000008 : Integer;
      LevelParent@1000000009 : ARRAY [100] OF Integer;
      LevelParentAdv@1240030000 : ARRAY [100] OF Integer;
      BOLSumLineLevel@1000000010 : Integer;
      ProblemsFound@1000000011 : Boolean;
      Finished@1240020004 : Boolean;
      NewQty@1240020005 : Decimal;
      OutstandingLineQty@1240020007 : Decimal;
      OutstandingLineQtyBase@1240020016 : Decimal;
      RemainingPackageQty@1240020008 : Decimal;
      LineQuantity@1240020009 : Decimal;
      LineQuantityBase@1240020010 : Decimal;
      PackageQuantity@1240020011 : Decimal;
      PackageQuantityBase@1240020012 : Decimal;
      LineQuantity2@1240020013 : Decimal;
      LineQuantity2Base@1240020014 : Decimal;
      LineQuantityBase2@1240020017 : Decimal;
      NewQtyBase@1240020018 : Decimal;
      CurrLineNo@1240020015 : Integer;
      DuplicateItem@1240020006 : Boolean;
      NextRecord@1240020019 : Boolean;
    BEGIN
      BOLSumLine.RESET;
      IF PackingRule."ASN with PO per Document" THEN
        BOLSumLine.SETCURRENTKEY(
          "Bill of Lading No.","Bill of Lading Type","External Document No.",
          "Source Type","Source Subtype","Source ID")
      ELSE
        BOLSumLine.SETCURRENTKEY(
          "Bill of Lading No.","Bill of Lading Type","External Document No.");
      BOLSumLine.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
      IF PackingRule."ASN Summary from Pack. Summary" THEN
        BOLSumLine.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type"::"Package Summary")
      ELSE
        BOLSumLine.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type"::Standard);
      BOLSumLine.SETRANGE(Type,BOLSumLine.Type::Shipment,BOLSumLine.Type::Item);
      IF BOLSumLine.FIND('-') THEN BEGIN
        BOLSumLine2.RESET;
        BOLSumLine2.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
        BOLSumLine2.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type"::"ASN (EDI)");
        BOLSumLine2.DELETEALL;

        LineNo := 1;
        CLEAR(LevelParent);
        LastExternalDocNo := 'X Y Z';
        LastOrderNo := 'X Y Z';
        LastPackageNo := 'X Y Z';
        ProblemsFound := FALSE;

        BOLSumLine2.GET(CurrentBillOfLading."No.",BOLSumLine."Bill of Lading Type",1);
        BOLSumLine2."Bill of Lading No." := BOLSumLine2."Bill of Lading No.";
        BOLSumLine2."Bill of Lading Type" := BOLSumLine."Bill of Lading Type"::"ASN (EDI)";
        BOLSumLine2."Line No." := LineNo;
        BOLSumLine2."Parent Line No." := 0;
        BOLSumLine2.Level := 1;
        BOLSumLine2.Type := BOLSumLine2.Type::"Bill of Lading";
        BOLSumLine2."No." := CurrentBillOfLading."No.";
        BOLSumLine2."Type Description" :=
          STRSUBSTNO(Text009,BOLSumLine2."Bill of Lading No.");
        BOLSumLine2."EDI Level ID" := CurrentBillOfLading."No.";
        IF OverrideASNSummary THEN BEGIN
          BOLSumLine2."Override ASN Summary" := TRUE;
          BOLSumLine2."Override ASN Summary Type" := PackingRule."ASN Summary Type";
        END;
        UpdateAdvLineNo(BOLSumLine2,PackingRule,LevelParentAdv);

        BOLSumLine2.INSERT;
        LevelParent[BOLSumLine2.Level] := BOLSumLine2."Line No.";

        REPEAT
          CASE BOLSumLine.Type OF
            BOLSumLine.Type::Shipment:
              BEGIN
                SalesShipmentLineTmp.RESET;
                SalesShipmentLineTmp.DELETEALL;
                SalesShipmentLineTmp2.RESET;
                SalesShipmentLineTmp2.DELETEALL;
                SalesShipmentLineTmp3.RESET;
                SalesShipmentLineTmp3.DELETEALL;

                SalesShipmentLine.RESET;
                SalesShipmentLine.SETRANGE("Document No.",BOLSumLine."Posted Source ID");
                SalesShipmentLine.SETRANGE(Type,SalesShipmentLine.Type::Item);
                SalesShipmentLine.SETFILTER(Quantity,'>%1',0);
                IF SalesShipmentLine.FIND('-') THEN
                  REPEAT
                    IF NOT SalesShipmentLineTmp.GET(
                      SalesShipmentLine."Document No.",SalesShipmentLine."Line No.") THEN BEGIN
                        SalesShipmentLineTmp.INIT;
                        SalesShipmentLineTmp3.INIT;
                        SalesShipmentLineTmp := SalesShipmentLine;
                        SalesShipmentLineTmp3 := SalesShipmentLine;
                        SalesShipmentLineTmp.INSERT;
                        SalesShipmentLineTmp3.INSERT;
                        SalesShipmentLineTmp.MODIFY;
                    END;
                  UNTIL SalesShipmentLine.NEXT = 0;

                IF BOLSumLine."External Document No." = '' THEN BEGIN
                  BOLSumLine."ASN Comment" :=
                    STRSUBSTNO(
                      Text010,
                      BOLSumLine.FIELDNAME("External Document No."));
                  BOLSumLine.MODIFY;

                  ProblemsFound := TRUE;
                END;
              END;

            BOLSumLine.Type::Package:
              BEGIN
                IF BOLSumLine.Level = 4 THEN BEGIN
                  IF (BOLSumLine."UCC No." = '') AND PackingRule."ASN Require UCC No." THEN BEGIN
                    BOLSumLine."ASN Comment" :=
                      STRSUBSTNO(
                        Text010,
                        BOLSumLine.FIELDNAME("UCC No."));
                    BOLSumLine.MODIFY;

                    ProblemsFound := TRUE;
                  END;
                END ELSE BEGIN
                  BOLSumLine."ASN Comment" := Text012;
                  IF (BOLSumLine."UCC No." <> '') AND PackingRule."ASN Require UCC No." THEN
                    BOLSumLine."ASN Comment" :=
                      BOLSumLine."ASN Comment" +
                      STRSUBSTNO(
                        Text013,
                        BOLSumLine.FIELDNAME("UCC No."));
                  BOLSumLine.MODIFY;

                  ProblemsFound := TRUE;
                END;
              END;

            BOLSumLine.Type::Item:
              BEGIN
                Finished := TRUE;
                NewQty := 0;
                IF (LastExternalDocNo <> BOLSumLine."External Document No.") OR
                   (PackingRule."ASN with PO per Document" AND
                    (LastOrderNo <> BOLSumLine."Source ID"))
                THEN BEGIN
                  BOLSumLine2 := BOLSumLine;
                  BOLSumLine2."Bill of Lading Type" := BOLSumLine."Bill of Lading Type"::"ASN (EDI)";
                  LineNo := LineNo + 1;
                  BOLSumLine2."Line No." := LineNo;
                  BOLSumLine2.Level := 2;
                  BOLSumLine2."Parent Line No." := LevelParent[BOLSumLine2.Level - 1];
                  BOLSumLine2.Type := BOLSumLine2.Type::"Purchase Order";
                  BOLSumLine2."No." := BOLSumLine2."External Document No.";
                  IF PackingRule."ASN with PO per Document" THEN
                    BOLSumLine2."Type Description" :=
                      STRSUBSTNO(
                        Text011,
                        BOLSumLine2.Type,BOLSumLine2."External Document No.",
                        BOLSumLine2."Source ID")
                  ELSE
                    BOLSumLine2."Type Description" :=
                      STRSUBSTNO(
                        '%1 %2',
                        BOLSumLine2.Type,BOLSumLine2."External Document No.");
                  BOLSumLine2."EDI Level ID" := BOLSumLine2."External Document No.";

                  BOLSumLine2.Description := '';
                  BOLSumLine2."Package No." := '';
                  BOLSumLine2."Package Line Line No." := 0;
                  BOLSumLine2."Package Line Type" := 0;
                  BOLSumLine2."Package Line No." := '';
                  BOLSumLine2."Package Line Variant Code" := '';
                  BOLSumLine2."Package Line Unit of Measure" := '';
                  BOLSumLine2."Package Line Quantity" := 0;
                  BOLSumLine2."Package Line Quantity (Base)" := 0;
                  BOLSumLine2."UCC No." := '';
                  BOLSumLine2."UCC No. (Print)" := '';
                  BOLSumLine2."RF-ID (Hex)" := '';
                  BOLSumLine2."External Tracking No." := '';
                  BOLSumLine2."First Level Package No." := '';
                  BOLSumLine2."Second Level Package No." := '';
                  BOLSumLine2."First Level Line No." := 0;
                  BOLSumLine2."Second Level Line No." := 0;
                  BOLSumLine2."No. of Packages with Packages" := 0;
                  BOLSumLine2."No. of Packages with Items" := 0;
                  IF OverrideASNSummary THEN BEGIN
                    BOLSumLine2."Override ASN Summary" := TRUE;
                    BOLSumLine2."Override ASN Summary Type" := PackingRule."ASN Summary Type";
                  END;
                  UpdateAdvLineNo(BOLSumLine2,PackingRule,LevelParentAdv);

                  BOLSumLine2.INSERT;

                  LevelParent[BOLSumLine2.Level] := BOLSumLine2."Line No.";
                  LastExternalDocNo := BOLSumLine2."External Document No.";
                  LastOrderNo := BOLSumLine."Source ID";
                END;

                IF LastPackageNo <> BOLSumLine."First Level Package No." THEN BEGIN
                  BOLSumLinePackage.GET(
                    CurrentBillOfLading."No.",BOLSumLine."Bill of Lading Type",
                    BOLSumLine."First Level Line No.");
                  BOLSumLinePackage."Bill of Lading Type" := BOLSumLine."Bill of Lading Type"::"ASN (EDI)";
                  LineNo := LineNo + 1;
                  BOLSumLinePackage."Line No." := LineNo;
                  BOLSumLinePackage.Level := 3;
                  BOLSumLinePackage."Parent Line No." := LevelParent[BOLSumLinePackage.Level - 1];
                  BOLSumLinePackage."First Level Line No." := BOLSumLinePackage."Line No.";
                  BOLSumLinePackage."EDI Level ID" := BOLSumLine."UCC No.";
                  BOLSumLinePackage."No. of Packages with Packages" := 0;
                  BOLSumLinePackage."No. of Packages with Items" := 1;
                  IF OverrideASNSummary THEN BEGIN
                    BOLSumLinePackage."Override ASN Summary" := TRUE;
                    BOLSumLinePackage."Override ASN Summary Type" := PackingRule."ASN Summary Type";
                  END;
                  UpdateAdvLineNo(BOLSumLinePackage,PackingRule,LevelParentAdv);

                  BOLSumLinePackage.INSERT;

                  LevelParent[BOLSumLinePackage.Level] :=
                    BOLSumLinePackage."Line No.";
                  LastPackageNo := BOLSumLine."First Level Package No.";
                END;

                DuplicateItem := FALSE;
                SalesShipmentLineTmp.RESET;
                SalesShipmentLineTmp.SETRANGE("Document No.",BOLSumLine."Posted Source ID");
                SalesShipmentLineTmp.SETRANGE(Type, SalesShipmentLineTmp.Type::Item);
                SalesShipmentLineTmp.SETRANGE("No.",BOLSumLine."No.");
                SalesShipmentLineTmp.SETFILTER(Quantity,'>%1',0);
                IF SalesShipmentLineTmp.FIND('-') THEN
                  IF SalesShipmentLineTmp.COUNT > 1 THEN BEGIN
                    DuplicateItem := TRUE;
                    REPEAT
                      IF NOT SalesShipmentLineTmp2.GET(
                        SalesShipmentLineTmp."Document No.",SalesShipmentLineTmp."Line No.") THEN BEGIN
                        SalesShipmentLineTmp2.INIT;
                        SalesShipmentLineTmp2 := SalesShipmentLineTmp;
                        SalesShipmentLineTmp2.INSERT;
                        SalesShipmentLineTmp2.VALIDATE(Quantity,0);
                        SalesShipmentLineTmp2.VALIDATE("Quantity (Base)",0);
                        SalesShipmentLineTmp2.MODIFY;
                      END;
                    UNTIL SalesShipmentLineTmp.NEXT = 0;
                  END;
                IF DuplicateItem THEN BEGIN
                  OutstandingLineQty := 0;
                  RemainingPackageQty := 0;
                  SalesShipmentLineTmp3.RESET;
                  SalesShipmentLineTmp3.SETRANGE("Document No.",BOLSumLine."Posted Source ID");
                  SalesShipmentLineTmp3.SETRANGE(Type,SalesShipmentLineTmp3.Type::Item);
                  SalesShipmentLineTmp3.SETRANGE("No.",BOLSumLine."No.");
                  IF SalesShipmentLineTmp3.FIND('-') THEN
                    REPEAT
                      IF NOT Finished THEN
                        SalesShipmentLineTmp3.NEXT;
                      LineQuantity := SalesShipmentLineTmp3.Quantity;
                      LineQuantityBase := SalesShipmentLineTmp3."Quantity (Base)";
                      IF NOT Finished THEN BEGIN
                        PackageQuantity := BOLSumLine."Package Line Quantity" - NewQty;
                        PackageQuantityBase := BOLSumLine."Package Line Quantity (Base)" - NewQty;
                      END ELSE BEGIN
                        PackageQuantity := BOLSumLine."Package Line Quantity";
                        PackageQuantityBase := BOLSumLine."Package Line Quantity (Base)";
                      END;
                      SalesShipmentLineTmp2.RESET;
                      SalesShipmentLineTmp2.SETRANGE("Document No.",SalesShipmentLineTmp3."Document No.");
                      SalesShipmentLineTmp2.SETRANGE(Type, SalesShipmentLineTmp3.Type::Item);
                      SalesShipmentLineTmp2.SETRANGE("Line No.",SalesShipmentLineTmp3."Line No.");
                      SalesShipmentLineTmp2.SETRANGE("No.",BOLSumLine."No.");
                      IF SalesShipmentLineTmp2.FIND('-') THEN BEGIN
                        LineQuantity2 := SalesShipmentLineTmp2.Quantity;
                        LineQuantityBase2 := SalesShipmentLineTmp2."Quantity (Base)";
                        CASE TRUE OF
                          LineQuantityBase = LineQuantityBase2:
                            BEGIN
                              CurrLineNo := SalesShipmentLineTmp2."Line No.";
                              SalesShipmentLineTmp3.DELETE;
                              SalesShipmentLineTmp2.DELETE;
                              Finished := FALSE;
                            END;
                          ELSE BEGIN
                            OutstandingLineQty := LineQuantity - LineQuantity2;
                            OutstandingLineQtyBase := LineQuantityBase - LineQuantity2Base;
                            IF PackageQuantityBase > OutstandingLineQtyBase THEN BEGIN
                              Finished := FALSE;
                              NewQty := NewQty + OutstandingLineQty;
                              NewQtyBase := NewQtyBase + OutstandingLineQtyBase;
                              LineQuantity2 := LineQuantity2 + OutstandingLineQty;
                              LineQuantityBase2 := LineQuantityBase2 + OutstandingLineQtyBase;
                              RemainingPackageQty := PackageQuantityBase - OutstandingLineQtyBase;
                              CurrLineNo := SalesShipmentLineTmp2."Line No.";
                            END ELSE BEGIN
                              Finished := TRUE;
                              CurrLineNo := SalesShipmentLineTmp2."Line No.";
                              LineQuantity2 := LineQuantity2 + PackageQuantity;
                              LineQuantityBase2 := LineQuantityBase2 + PackageQuantityBase;
                              NewQty := PackageQuantity;
                              NewQtyBase := PackageQuantityBase;
                            END;
                            SalesShipmentLineTmp2.Quantity := LineQuantity2;
                            SalesShipmentLineTmp2."Quantity (Base)" := LineQuantity2Base;
                            SalesShipmentLineTmp2.MODIFY;
                            IF SalesShipmentLineTmp2.Quantity = SalesShipmentLineTmp3.Quantity THEN BEGIN
                              SalesShipmentLineTmp3.DELETE;
                              SalesShipmentLineTmp2.DELETE;
                            END;
                          END;
                        END;
                        IF NOT Finished THEN
                          NextRecord := TRUE
                        ELSE
                          NextRecord := FALSE;
                      END;
                      BOLSumLine2 := BOLSumLine;
                      BOLSumLine2."Bill of Lading Type" := BOLSumLine."Bill of Lading Type"::"ASN (EDI)";
                      LineNo := LineNo + 1;
                      BOLSumLine2."Line No." := LineNo;
                      BOLSumLine2.Level := 4;
                      BOLSumLine2."Parent Line No." := LevelParent[BOLSumLine2.Level - 1];
                      BOLSumLine2."EDI Level ID" := BOLSumLine."Item UPC/EAN Number";
                      BOLSumLine2."UCC No." :=
                      BOLSumLinePackage."UCC No.";
                      BOLSumLine2."UCC No. (Print)" :=
                      BOLSumLinePackage."UCC No. (Print)";
                      BOLSumLine2."RF-ID (Hex)" :=
                      BOLSumLinePackage."RF-ID (Hex)";
                      BOLSumLine2."External Tracking No." :=
                      BOLSumLinePackage."External Tracking No.";
                      BOLSumLine2."First Level Package No." :=
                      BOLSumLinePackage."First Level Package No.";
                      BOLSumLine2."First Level Line No." :=
                      BOLSumLinePackage."First Level Line No.";
                      BOLSumLine2."Second Level Package No." := '';
                      BOLSumLine2."Second Level Line No." := 0;
                      IF BOLSumLine2."Package Line Unit of Measure" <>
                        SalesShipmentLineTmp."Unit of Measure Code"
                      THEN
                        BOLSumLine2."Package Line Unit of Measure" :=
                          SalesShipmentLineTmp."Unit of Measure Code";
                      BOLSumLine2."Type Description" :=
                      STRSUBSTNO(
                        '%1 %2 %3 %4 %5.',BOLSumLine2.Type,BOLSumLine2."No.",
                        BOLSumLine2.Description,LineQuantityBase2,
                        BOLSumLine2."Package Line Unit of Measure");
                      BOLSumLine2."Custom Value 1" := FORMAT(CurrLineNo);
                      UpdateAdvLineNo(BOLSumLine2,PackingRule,LevelParentAdv);
                      BOLSumLine2."Package Line Quantity (Base)" := LineQuantityBase2;
                      BOLSumLine2."Package Line Quantity" := LineQuantity;

                      BOLSumLine2.INSERT;
                      LevelParent[BOLSumLine2.Level] := BOLSumLine2."Line No.";
                    UNTIL Finished = TRUE;
                END ELSE BEGIN
                  BOLSumLine2 := BOLSumLine;
                  BOLSumLine2."Bill of Lading Type" := BOLSumLine."Bill of Lading Type"::"ASN (EDI)";
                  LineNo := LineNo + 1;
                  BOLSumLine2."Line No." := LineNo;
                  BOLSumLine2.Level := 4;
                  BOLSumLine2."Parent Line No." := LevelParent[BOLSumLine2.Level - 1];
                  BOLSumLine2."EDI Level ID" := BOLSumLine."Item UPC/EAN Number";
                  BOLSumLine2."UCC No." :=
                    BOLSumLinePackage."UCC No.";
                  BOLSumLine2."UCC No. (Print)" :=
                    BOLSumLinePackage."UCC No. (Print)";
                  BOLSumLine2."RF-ID (Hex)" :=
                    BOLSumLinePackage."RF-ID (Hex)";
                  BOLSumLine2."External Tracking No." :=
                    BOLSumLinePackage."External Tracking No.";
                  BOLSumLine2."First Level Package No." :=
                    BOLSumLinePackage."First Level Package No.";
                  BOLSumLine2."First Level Line No." :=
                    BOLSumLinePackage."First Level Line No.";
                  BOLSumLine2."Second Level Package No." := '';
                  BOLSumLine2."Second Level Line No." := 0;
                  IF OverrideASNSummary THEN BEGIN
                    BOLSumLine2."Override ASN Summary" := TRUE;
                    BOLSumLine2."Override ASN Summary Type" := PackingRule."ASN Summary Type";
                  END;
                  UpdateAdvLineNo(BOLSumLine2,PackingRule,LevelParentAdv);

                  BOLSumLine2.INSERT;
                  LevelParent[BOLSumLine2.Level] := BOLSumLine2."Line No.";
                END;
              END;
          END;
        UNTIL BOLSumLine.NEXT = 0;
      END;

      BOLSumLine.RESET;
      BOLSumLine.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
      BOLSumLine.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type"::"ASN (EDI)");
      FOR BOLSumLineLevel := 2 DOWNTO 1 DO BEGIN
        BOLSumLine.SETRANGE(Level,BOLSumLineLevel);
        IF BOLSumLine.FIND('-') THEN
          REPEAT
            BOLSumLine.Weight := 0;
            BOLSumLine.Volume := 0;
            BOLSumLine.Value := 0;
            BOLSumLine."Package Line Quantity" := 0;
            BOLSumLine."Package Line Quantity (Base)" := 0;
            BOLSumLine."No. of Packages with Packages" := 0;
            BOLSumLine."No. of Packages with Items" := 0;

            BOLSumLine2.RESET;
            BOLSumLine2.SETCURRENTKEY("Bill of Lading No.","Bill of Lading Type","Parent Line No.");
            BOLSumLine2.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
            BOLSumLine2.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type");
            BOLSumLine2.SETRANGE("Parent Line No.",BOLSumLine."Line No.");
            IF BOLSumLine2.FIND('-') THEN
              REPEAT
                BOLSumLine.Weight := BOLSumLine.Weight + BOLSumLine2.Weight;
                BOLSumLine.Volume := BOLSumLine.Volume + BOLSumLine2.Volume;
                BOLSumLine.Value := BOLSumLine.Value + BOLSumLine2.Value;
                BOLSumLine."Package Line Quantity" :=
                  BOLSumLine."Package Line Quantity" + BOLSumLine2."Package Line Quantity";
                BOLSumLine."Package Line Quantity (Base)" :=
                  BOLSumLine."Package Line Quantity (Base)" +
                  BOLSumLine2."Package Line Quantity (Base)";
                BOLSumLine."No. of Packages with Items" :=
                  BOLSumLine."No. of Packages with Items" +
                  BOLSumLine2."No. of Packages with Items";
              UNTIL BOLSumLine2.NEXT = 0;

            BOLSumLine.MODIFY;
          UNTIL BOLSumLine.NEXT = 0;
      END;

      EXIT(ProblemsFound);
    END;

    LOCAL PROCEDURE UpdateASNSummaryItemPackageDup@1240020009(CurrentBillOfLading@1000000000 : Record 14000822;PackingRule@1000000001 : Record 14000715;TypeCode@1000000002 : Code[10]) : Boolean;
    VAR
      BOLSumLine@1000000003 : Record 14000825;
      BOLSumLine2@1000000004 : Record 14000825;
      BOLSumLineItem@1000000005 : Record 14000825;
      SalesShipmentLine@1240020019 : Record 111;
      SalesShipmentLineTmp@1240020002 : TEMPORARY Record 111;
      SalesShipmentLineTmp2@1240020001 : TEMPORARY Record 111;
      PostedPackageLineTmp@1240020003 : TEMPORARY Record 14000705;
      PostedPackageLineTmp2@1240020004 : TEMPORARY Record 14000705;
      BOLSumLineTmp@1240020028 : TEMPORARY Record 14000825;
      PostedPackageLine@1240020026 : Record 14000705;
      LastExternalDocNo@1000000006 : Code[35];
      LastOrderNo@1000000015 : Code[20];
      LastItemNo@1000000007 : Code[20];
      LastItemVariant@1000000008 : Code[20];
      LastPackageNo@1000000009 : Code[20];
      LineNo@1000000010 : Integer;
      LevelParent@1000000011 : ARRAY [100] OF Integer;
      LevelParentAdv@1240030000 : ARRAY [100] OF Integer;
      BOLSumLineLevel@1000000012 : Integer;
      ProblemsFound@1000000013 : Boolean;
      FirstTime@1240020005 : Boolean;
      Done@1240020006 : Boolean;
      OutstandingLineQty@1240020007 : Decimal;
      OutstandingLineQtyBase@1240020008 : Decimal;
      i@1240020009 : Integer;
      j@1240020010 : Integer;
      LineQuantity@1240020011 : Decimal;
      LineQuantityBase@1240020012 : Decimal;
      RemainingPackageQty@1240020013 : Decimal;
      PackageQuantity@1240020014 : Decimal;
      PackageQuantityBase@1240020015 : Decimal;
      NewQty@1240020016 : Decimal;
      NewQtyBase@1240020017 : Decimal;
      LineNoArray@1240020018 : ARRAY [100] OF Integer;
      DuplicateItem@1240020020 : Boolean;
      Finished@1240020021 : Boolean;
      ItemOccurrence@1240020022 : Integer;
      PackageQtyComplete@1240020023 : Boolean;
      RemainingQty@1240020024 : Decimal;
      FirstDuplicate@1240020027 : Boolean;
      InsertRecord@1240020029 : Boolean;
      CurrLineNo@1240020031 : Integer;
      NextRecord@1240020030 : Boolean;
      RemainingLineQty@1240020032 : Decimal;
    BEGIN
      BOLSumLine.RESET;
      IF PackingRule."ASN with PO per Document" THEN
        BOLSumLine.SETCURRENTKEY(
          "Bill of Lading No.","Bill of Lading Type","External Document No.",
          "Source Type","Source Subtype","Source ID",
          Type,"No.","Package Line Variant Code")
      ELSE
        BOLSumLine.SETCURRENTKEY(
          "Bill of Lading No.","Bill of Lading Type","External Document No.",
          Type,"No.","Package Line Variant Code");
      BOLSumLine.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
      IF PackingRule."ASN Summary from Pack. Summary" THEN
        BOLSumLine.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type"::"Package Summary")
      ELSE
        BOLSumLine.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type"::Standard);
      BOLSumLine.SETRANGE(Type,BOLSumLine.Type::Shipment,BOLSumLine.Type::Item);
      IF BOLSumLine.FIND('-') THEN BEGIN
        BOLSumLine2.RESET;
        BOLSumLine2.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
        BOLSumLine2.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type"::"ASN (EDI)");
        BOLSumLine2.DELETEALL;

        LineNo := 1;
        CLEAR(LevelParent);
        CLEAR(LevelParentAdv);
        LastExternalDocNo := 'X Y Z';
        LastOrderNo := 'X Y Z';
        LastItemNo := 'X Y Z';
        LastItemVariant := 'X Y Z';
        LastPackageNo := 'X Y Z';
        ProblemsFound := FALSE;

        BOLSumLine2.GET(CurrentBillOfLading."No.",BOLSumLine."Bill of Lading Type",1);
        BOLSumLine2."Bill of Lading No." := BOLSumLine2."Bill of Lading No.";
        BOLSumLine2."Bill of Lading Type" := BOLSumLine."Bill of Lading Type"::"ASN (EDI)";
        BOLSumLine2."Line No." := LineNo;
        BOLSumLine2."Parent Line No." := 0;
        BOLSumLine2.Level := 1;
        BOLSumLine2.Type := BOLSumLine2.Type::"Bill of Lading";
        BOLSumLine2."No." := CurrentBillOfLading."No.";
        BOLSumLine2."Type Description" :=
          STRSUBSTNO(Text009,BOLSumLine2."Bill of Lading No.");
        BOLSumLine2."EDI Level ID" := CurrentBillOfLading."No.";
        IF OverrideASNSummary THEN BEGIN
          BOLSumLine2."Override ASN Summary" := TRUE;
          BOLSumLine2."Override ASN Summary Type" := PackingRule."ASN Summary Type";
        END;

        UpdateAdvLineNo(BOLSumLine2,PackingRule,LevelParentAdv);

        BOLSumLine2.INSERT;
        LevelParent[BOLSumLine2.Level] := BOLSumLine2."Line No.";

        REPEAT
          CASE BOLSumLine.Type OF
            BOLSumLine.Type::Shipment:
              BEGIN
                SalesShipmentLineTmp.RESET;
                SalesShipmentLineTmp.DELETEALL;
                SalesShipmentLineTmp2.RESET;
                SalesShipmentLineTmp2.DELETEALL;
                PostedPackageLineTmp.RESET;
                PostedPackageLineTmp.DELETEALL;
                PostedPackageLineTmp2.RESET;
                PostedPackageLineTmp2.DELETEALL;
                FirstTime := TRUE;
                Done := FALSE;
                CLEAR(LineNoArray);
                i := 1;
                j := 1;
                OutstandingLineQty := 0;
                OutstandingLineQtyBase := 0;
                LineQuantity := 0;
                LineQuantityBase := 0;
                RemainingPackageQty := 0;
                PackageQuantity := 0;
                PackageQuantityBase := 0;
                NewQty := 0;
                NewQtyBase := 0;

                SalesShipmentLine.RESET;
                SalesShipmentLine.SETRANGE("Document No.",BOLSumLine."Posted Source ID");
                SalesShipmentLine.SETRANGE(Type,SalesShipmentLine.Type::Item);
                SalesShipmentLine.SETFILTER(Quantity,'>%1',0);
                IF SalesShipmentLine.FIND('-') THEN
                  REPEAT
                    IF NOT SalesShipmentLineTmp.GET(
                      SalesShipmentLine."Document No.",SalesShipmentLine."Line No.") THEN BEGIN
                        SalesShipmentLineTmp.INIT;
                        SalesShipmentLineTmp := SalesShipmentLine;
                        SalesShipmentLineTmp.INSERT;
                    END;
                  UNTIL SalesShipmentLine.NEXT = 0;

                IF BOLSumLine."External Document No." = '' THEN BEGIN
                  BOLSumLine."ASN Comment" :=
                    STRSUBSTNO(
                      Text010,
                      BOLSumLine.FIELDNAME("External Document No."));
                  BOLSumLine.MODIFY;

                  ProblemsFound := TRUE;
                END;
              END;
            BOLSumLine.Type::Item:
              BEGIN
                DuplicateItem := FALSE;
                Finished := FALSE;
                ItemOccurrence := 0;
                IF (LastExternalDocNo <> BOLSumLine."External Document No.") OR
                   (PackingRule."ASN with PO per Document" AND
                    (LastOrderNo <> BOLSumLine."Source ID"))
                THEN BEGIN
                  IF BOLSumLine."External Document No." = '' THEN BEGIN
                    BOLSumLine."ASN Comment" :=
                      STRSUBSTNO(
                        Text010,
                        BOLSumLine.FIELDNAME("External Document No."));
                    BOLSumLine.MODIFY;
                  END;
                  BOLSumLine2 := BOLSumLine;
                  BOLSumLine2."Bill of Lading Type" := BOLSumLine."Bill of Lading Type"::"ASN (EDI)";
                  LineNo := LineNo + 1;
                  BOLSumLine2."Line No." := LineNo;
                  BOLSumLine2.Level := 2;
                  BOLSumLine2."Parent Line No." := LevelParent[BOLSumLine2.Level - 1];
                  BOLSumLine2.Type := BOLSumLine2.Type::"Purchase Order";
                  BOLSumLine2."No." := BOLSumLine2."External Document No.";
                  IF PackingRule."ASN with PO per Document" THEN
                    BOLSumLine2."Type Description" :=
                      STRSUBSTNO(
                        Text011,
                        BOLSumLine2.Type,BOLSumLine2."External Document No.",
                        BOLSumLine2."Source ID")
                  ELSE
                    BOLSumLine2."Type Description" :=
                      STRSUBSTNO(
                        '%1 %2',
                        BOLSumLine2.Type,BOLSumLine2."External Document No.");
                  BOLSumLine2."EDI Level ID" := BOLSumLine2."External Document No.";

                  BOLSumLine2.Description := '';
                  BOLSumLine2."Package No." := '';
                  BOLSumLine2."Package Line Line No." := 0;
                  BOLSumLine2."Package Line Type" := 0;
                  BOLSumLine2."Package Line No." := '';
                  BOLSumLine2."Package Line Variant Code" := '';
                  BOLSumLine2."Package Line Unit of Measure" := '';
                  BOLSumLine2."Package Line Quantity" := 0;
                  BOLSumLine2."Package Line Quantity (Base)" := 0;
                  BOLSumLine2."UCC No." := '';
                  BOLSumLine2."UCC No. (Print)" := '';
                  BOLSumLine2."RF-ID (Hex)" := '';
                  BOLSumLine2."External Tracking No." := '';
                  BOLSumLine2."First Level Package No." := '';
                  BOLSumLine2."Second Level Package No." := '';
                  BOLSumLine2."First Level Line No." := 0;
                  BOLSumLine2."Second Level Line No." := 0;
                  IF OverrideASNSummary THEN BEGIN
                    BOLSumLine2."Override ASN Summary" := TRUE;
                    BOLSumLine2."Override ASN Summary Type" := PackingRule."ASN Summary Type";
                  END;
                  UpdateAdvLineNo(BOLSumLine2,PackingRule,LevelParentAdv);

                  BOLSumLine2.INSERT;

                  LevelParent[BOLSumLine2.Level] := BOLSumLine2."Line No.";
                END;
                PackageQtyComplete := FALSE;
                IF RemainingQty <> 0 THEN BEGIN
                  SalesShipmentLineTmp2.RESET;
                  SalesShipmentLineTmp2.SETRANGE("Document No.",BOLSumLine."Posted Source ID");
                  SalesShipmentLineTmp2.SETRANGE(Type, SalesShipmentLineTmp2.Type::Item);
                  SalesShipmentLineTmp2.SETRANGE("No.",LastItemNo);
                  IF SalesShipmentLineTmp2.FIND('-') THEN BEGIN
                    PackageQtyComplete := TRUE;
                  END;
                END;
                SalesShipmentLineTmp.RESET;
                SalesShipmentLineTmp.SETRANGE("Document No.",BOLSumLine."Posted Source ID");
                SalesShipmentLineTmp.SETRANGE(Type, SalesShipmentLineTmp.Type::Item);
                SalesShipmentLineTmp.SETRANGE("No.",BOLSumLine."No.");
                SalesShipmentLineTmp.SETFILTER(Quantity,'>%1',0);
                IF SalesShipmentLineTmp.FIND('-') THEN
                  IF SalesShipmentLineTmp.COUNT > 1 THEN BEGIN
                    ItemOccurrence := SalesShipmentLineTmp.COUNT;
                    PostedPackageLine.RESET;
                    PostedPackageLine.SETRANGE("Posted Source ID",BOLSumLine."Posted Source ID");
                    PostedPackageLine.SETRANGE("No.",SalesShipmentLineTmp."No.");
                    IF PostedPackageLine.FIND('-') THEN
                      REPEAT
                        PostedPackageLineTmp.RESET;
                        PostedPackageLineTmp.SETRANGE("No.",PostedPackageLine."No.");
                        PostedPackageLineTmp.SETRANGE("Package No.",PostedPackageLine."Package No.");
                        IF NOT PostedPackageLineTmp.FIND('-') THEN BEGIN
                          PostedPackageLineTmp.INIT;
                          PostedPackageLineTmp := PostedPackageLine;
                          PostedPackageLineTmp.VALIDATE(Quantity,0);
                          PostedPackageLineTmp.VALIDATE("Quantity (Base)",0);
                          PostedPackageLineTmp.INSERT;
                          PostedPackageLineTmp2.INIT;
                          PostedPackageLineTmp2 := PostedPackageLine;
                          PostedPackageLineTmp2.INSERT;
                        END;
                      UNTIL PostedPackageLine.NEXT = 0;
                    REPEAT
                      IF FirstTime = TRUE THEN
                        BEGIN
                          FirstDuplicate := TRUE;
                          Done := TRUE;
                        END;
                      InsertRecord := TRUE;
                      IF NOT FirstTime THEN BEGIN
                        i := 1;
                        REPEAT
                         IF LineNoArray[i] = SalesShipmentLineTmp."Line No." THEN
                           InsertRecord := FALSE;
                         i := i + 1;
                       UNTIL (LineNoArray[i] = 0) OR (InsertRecord = FALSE);
                      END;
                      IF FirstDuplicate AND Done THEN BEGIN
                        InsertRecord := TRUE;
                        FirstTime := FALSE;
                        Done := FALSE;
                      END;
                      IF InsertRecord THEN BEGIN
                        SalesShipmentLineTmp2.INIT;
                        SalesShipmentLineTmp2 := SalesShipmentLineTmp;
                        SalesShipmentLineTmp2.VALIDATE(Quantity,0);
                        SalesShipmentLineTmp2.INSERT;
                        LineNoArray[j] := SalesShipmentLineTmp2."Line No.";
                        j := j + 1;
                        InsertRecord := FALSE;
                      END;
                    UNTIL SalesShipmentLineTmp.NEXT = 0;
                  END;

                SalesShipmentLineTmp2.RESET;
                SalesShipmentLineTmp2.SETRANGE("Document No.",BOLSumLine."Posted Source ID");
                SalesShipmentLineTmp2.SETRANGE(Type, SalesShipmentLineTmp2.Type::Item);
                SalesShipmentLineTmp2.SETRANGE("No.",BOLSumLine."No.");
                IF SalesShipmentLineTmp2.FIND('-') THEN BEGIN
                  CurrLineNo := SalesShipmentLineTmp2."Line No.";
                  DuplicateItem := TRUE;
                END;

                IF (LastItemNo <> BOLSumLine."Package Line No.") OR
                   (LastItemVariant <> BOLSumLine."Package Line Variant Code") OR
                   (LastExternalDocNo <> BOLSumLine."External Document No.") OR
                   DuplicateItem = TRUE OR
                   (PackingRule."ASN with PO per Document" AND
                    (LastOrderNo <> BOLSumLine."Source ID"))
                THEN BEGIN
                  IF BOLSumLineItem."No." <> '' THEN
                    BOLSumLineItem.MODIFY;

                  BOLSumLine2 := BOLSumLine;
                  BOLSumLine2."Bill of Lading Type" := BOLSumLine."Bill of Lading Type"::"ASN (EDI)";
                  LineNo := LineNo + 1;
                  BOLSumLine2."Line No." := LineNo;
                  BOLSumLine2.Level := 3;
                  BOLSumLine2."Parent Line No." := LevelParent[BOLSumLine2.Level - 1];
                  BOLSumLine2.Type := BOLSumLine2.Type::"Item (ASN)";
                  BOLSumLine2."Type Description" :=
                    STRSUBSTNO('%1 %2',BOLSumLine.Type,BOLSumLine."No.");
                  BOLSumLine2."EDI Level ID" := BOLSumLine."Item UPC/EAN Number";

                  BOLSumLine2.Description := '';
                  BOLSumLine2."Package No." := '';
                  BOLSumLine2."Package Line Line No." := 0;
                  BOLSumLine2."Package Line Type" := 0;
                  BOLSumLine2."Package Line No." := '';
                  BOLSumLine2."Package Line Variant Code" := '';
                  BOLSumLine2."Package Line Unit of Measure" := '';
                  BOLSumLine2."Package Line Quantity" := 0;
                  BOLSumLine2."Package Line Quantity (Base)" := 0;
                  BOLSumLine2."UCC No." := '';
                  BOLSumLine2."UCC No. (Print)" := '';
                  BOLSumLine2."RF-ID (Hex)" := '';
                  BOLSumLine2."External Tracking No." := '';
                  BOLSumLine2."First Level Package No." := '';
                  BOLSumLine2."Second Level Package No." := '';
                  BOLSumLine2."First Level Line No." := 0;
                  BOLSumLine2."Second Level Line No." := 0;
                  BOLSumLine2.Weight := 0;
                  BOLSumLine2.Volume := 0;
                  BOLSumLine2.Value := 0;
                  BOLSumLine2."No. of Packages with Packages" := 0;
                  BOLSumLine2."No. of Packages with Items" := 0;
                  IF OverrideASNSummary THEN BEGIN
                    BOLSumLine2."Override ASN Summary" := TRUE;
                    BOLSumLine2."Override ASN Summary Type" := PackingRule."ASN Summary Type";
                  END;
                  UpdateAdvLineNo(BOLSumLine2,PackingRule,LevelParentAdv);
                  IF DuplicateItem THEN
                  BOLSumLine2."Custom Value 1" := FORMAT(CurrLineNo);
                  BOLSumLine2.INSERT;
                  BOLSumLineItem := BOLSumLine2;
                END;

                IF DuplicateItem THEN BEGIN
                  SalesShipmentLineTmp.RESET;
                  SalesShipmentLineTmp.SETRANGE("Document No.",BOLSumLine."Posted Source ID");
                  SalesShipmentLineTmp.SETRANGE(Type, SalesShipmentLineTmp.Type::Item);
                  SalesShipmentLineTmp.SETRANGE("No.",BOLSumLine."No.");
                  SalesShipmentLineTmp.SETRANGE("Line No.",CurrLineNo);
                  IF SalesShipmentLineTmp.FIND('-') THEN BEGIN
                    LineQuantity := SalesShipmentLineTmp.Quantity;
                    LineQuantityBase := SalesShipmentLineTmp."Quantity (Base)";
                    OutstandingLineQty := LineQuantity - SalesShipmentLineTmp2.Quantity;
                    OutstandingLineQtyBase := LineQuantityBase - SalesShipmentLineTmp2."Quantity (Base)";
                    IF RemainingQty <> 0 THEN
                      PackageQuantity := RemainingQty
                    ELSE BEGIN
                      PackageQuantity := BOLSumLine."Package Line Quantity";
                      PackageQuantityBase := BOLSumLine."Package Line Quantity (Base)";
                    END;
                   IF PackageQuantity >= OutstandingLineQty THEN BEGIN
                      NewQty := LineQuantity;
                      NewQtyBase := LineQuantityBase;
                      RemainingPackageQty := PackageQuantity - OutstandingLineQty;
                    END ELSE BEGIN
                      NewQty := PackageQuantity;
                      NewQtyBase := PackageQuantityBase;
                    END;
                    SalesShipmentLineTmp2.RESET;
                    SalesShipmentLineTmp2.SETRANGE("Document No.",BOLSumLine."Posted Source ID");
                    SalesShipmentLineTmp2.SETRANGE(Type, SalesShipmentLineTmp2.Type::Item);
                    SalesShipmentLineTmp2.SETRANGE("No.",BOLSumLine."No.");
                    SalesShipmentLineTmp2.SETRANGE("Line No.",CurrLineNo);
                    IF SalesShipmentLineTmp2.FIND('-') THEN
                      IF SalesShipmentLineTmp2.Quantity <SalesShipmentLineTmp.Quantity THEN BEGIN
                        SalesShipmentLineTmp2.VALIDATE(Quantity,NewQty);
                        SalesShipmentLineTmp2.MODIFY;
                        OutstandingLineQty :=  SalesShipmentLineTmp.Quantity - SalesShipmentLineTmp2.Quantity;
                      END;
                    IF OutstandingLineQty = 0 THEN BEGIN
                  SalesShipmentLineTmp.RESET;
                  SalesShipmentLineTmp.SETRANGE("Document No.",BOLSumLine."Posted Source ID");
                  SalesShipmentLineTmp.SETRANGE(Type, SalesShipmentLineTmp.Type::Item);
                  SalesShipmentLineTmp.SETRANGE("No.",BOLSumLine."No.");
                  SalesShipmentLineTmp.SETRANGE("Line No.",SalesShipmentLineTmp2."Line No.");
                  IF SalesShipmentLineTmp.FIND('-') THEN
                    SalesShipmentLineTmp.DELETE;

                      SalesShipmentLineTmp2.DELETE;
                    END;
                  END;
                END;

                IF NOT DuplicateItem THEN BEGIN
                  BOLSumLine2.GET(
                    BOLSumLine."Bill of Lading No.",BOLSumLine."Bill of Lading Type",
                      BOLSumLine."First Level Line No.");
                  IF (BOLSumLine2."UCC No." = '') AND PackingRule."ASN Require UCC No." THEN BEGIN
                    BOLSumLine2."ASN Comment" :=
                      STRSUBSTNO(
                        Text010,
                        BOLSumLine2.FIELDNAME("UCC No."));
                    BOLSumLine2.MODIFY;
                  END;
                  BOLSumLine2."Bill of Lading Type" := BOLSumLine."Bill of Lading Type"::"ASN (EDI)";
                  LineNo := LineNo + 1;
                  BOLSumLine2."Line No." := LineNo;
                  BOLSumLine2.Level := 4;
                  BOLSumLine2."Parent Line No." := LevelParent[BOLSumLine2.Level - 1];
                  IF BOLSumLine."Package Line Quantity" <
                     BOLSumLine."Package Line Quantity (Base)"
                  THEN BEGIN
                    BOLSumLine2."Type Description" :=
                      STRSUBSTNO(
                        '%1 %2 (%3 %4 (%5 %6)).',
                        BOLSumLine2.Type,BOLSumLine2."No.",
                        BOLSumLine."Package Line Quantity",
                        BOLSumLine."Package Line Unit of Measure",
                        BOLSumLine."Package Line Quantity (Base)",
                        BOLSumLine."One Unit of Measure Code");
                  END ELSE
                    BOLSumLine2."Type Description" :=
                      STRSUBSTNO(
                        '%1 %2 (%3 %4).',
                        BOLSumLine2.Type,BOLSumLine2."No.",
                        BOLSumLine."Package Line Quantity",
                        BOLSumLine."Package Line Unit of Measure");
                  BOLSumLine2."EDI Level ID" := BOLSumLine."UCC No.";
                  BOLSumLine2.Type := BOLSumLine2.Type::"Package (Item)";
                  BOLSumLine2."Package Line Line No." := BOLSumLine."Package Line Line No.";
                  BOLSumLine2."Package Line Type" := BOLSumLine."Package Line Type" ;
                  BOLSumLine2."Package Line No." := BOLSumLine."Package Line No.";
                  BOLSumLine2."Package Line Variant Code" := BOLSumLine."Package Line Variant Code";
                  BOLSumLine2."Package Line Unit of Measure" :=
                  BOLSumLine."Package Line Unit of Measure";
                  BOLSumLine2."Package Line Quantity" := BOLSumLine."Package Line Quantity";
                  BOLSumLine2."Package Line Quantity (Base)" :=
                    BOLSumLine."Package Line Quantity (Base)";
                  BOLSumLine2."Item UPC/EAN Number" := BOLSumLine."Item UPC/EAN Number";
                  BOLSumLine2."Item UPC/EAN Number (Print)" := BOLSumLine."Item UPC/EAN Number (Print)";
                  BOLSumLine2."Std. Pack UPC/EAN Number" := BOLSumLine."Std. Pack UPC/EAN Number";
                  BOLSumLine2."Std. Pack UPC/EAN No. (Print)" :=
                    BOLSumLine."Std. Pack UPC/EAN No. (Print)";

                  BOLSumLine2."No. of Packages with Packages" := 0;
                  BOLSumLine2."No. of Packages with Items" := 1;
                  IF OverrideASNSummary THEN BEGIN
                    BOLSumLine2."Override ASN Summary" := TRUE;
                    BOLSumLine2."Override ASN Summary Type" := PackingRule."ASN Summary Type";
                  END;
                  UpdateAdvLineNo(BOLSumLine2,PackingRule,LevelParentAdv);

                  BOLSumLine2.INSERT;

                  // Update Item Line
                  IF BOLSumLineItem."Package Line Quantity" = 0 THEN
                    BOLSumLineItem."Package Line Unit of Measure" :=
                      BOLSumLine2."Package Line Unit of Measure"
                  ELSE
                    IF BOLSumLineItem."Package Line Unit of Measure" <>
                       BOLSumLine2."Package Line Unit of Measure"
                    THEN BEGIN
                      BOLSumLineItem."Package Line Unit of Measure" := '';
                      BOLSumLineItem."Package Line Quantity" :=
                        BOLSumLineItem."Package Line Quantity (Base)";
                    END;
                  IF BOLSumLineItem."Package Line Unit of Measure" <> '' THEN
                    BOLSumLineItem."Package Line Quantity" :=
                      BOLSumLineItem."Package Line Quantity" + BOLSumLine2."Package Line Quantity"
                  ELSE
                    BOLSumLineItem."Package Line Quantity" :=
                      BOLSumLineItem."Package Line Quantity" + BOLSumLine2."Package Line Quantity (Base)";
                  BOLSumLineItem."Package Line Quantity (Base)" :=
                  BOLSumLineItem."Package Line Quantity (Base)" +
                  BOLSumLine2."Package Line Quantity (Base)";
                  BOLSumLineItem.Weight := BOLSumLineItem.Weight + BOLSumLine2.Weight;
                  BOLSumLineItem.Volume := BOLSumLineItem.Volume + BOLSumLine2.Volume;
                  BOLSumLineItem.Value := BOLSumLineItem.Value + BOLSumLine2.Value;
                  BOLSumLineItem."No. of Packages with Items" :=
                    BOLSumLineItem."No. of Packages with Items" +
                  BOLSumLine2."No. of Packages with Items";
                  LastExternalDocNo := BOLSumLine."External Document No.";
                  LastOrderNo := BOLSumLine."Source ID";
                  LastItemNo := BOLSumLine."Package Line No.";
                  LastItemVariant := BOLSumLine."Package Line Variant Code";
              END ELSE BEGIN
                IF (RemainingQty <> 0) AND (NOT PackageQtyComplete) THEN
                  BOLSumLine.NEXT(-1);
                BOLSumLineTmp.RESET;
                BOLSumLineTmp.DELETEALL;
                BOLSumLineTmp.INIT;
                BOLSumLineTmp := BOLSumLine;
                BOLSumLineTmp.INSERT;
                Finished := FALSE;
                REPEAT
                  PostedPackageLineTmp.RESET;
                  PostedPackageLineTmp.SETRANGE("Package No.",BOLSumLine."Package No.");
                  PostedPackageLineTmp.SETRANGE("No.",BOLSumLine."Package Line No.");
                  IF PostedPackageLineTmp.FIND('-') THEN BEGIN
                    PostedPackageLineTmp2.RESET;
                    PostedPackageLineTmp2.SETRANGE("Package No.",PostedPackageLineTmp."Package No.");
                    PostedPackageLineTmp2.SETRANGE("No.",PostedPackageLineTmp."No.");
                    IF PostedPackageLineTmp2.FIND('-') THEN BEGIN
                      IF PostedPackageLineTmp2.Quantity = PostedPackageLineTmp.Quantity THEN BEGIN
                        NextRecord := TRUE;
                     END;
                    REPEAT
                      IF NextRecord THEN BEGIN
                        BOLSumLine.NEXT;
                        WHILE BOLSumLine.Type <> BOLSumLine.Type::Item DO
                          BOLSumLine.NEXT;
                        BOLSumLineTmp := BOLSumLine;
                        PostedPackageLineTmp.RESET;
                        PostedPackageLineTmp.SETRANGE("Package No.",BOLSumLineTmp."Package No.");
                        PostedPackageLineTmp.SETRANGE("No.",BOLSumLineTmp."Package Line No.");
                        IF PostedPackageLineTmp.FIND('-') THEN BEGIN
                          PostedPackageLineTmp2.RESET;
                          PostedPackageLineTmp2.SETRANGE("Package No.",PostedPackageLineTmp."Package No.");
                          PostedPackageLineTmp2.SETRANGE("No.",PostedPackageLineTmp."No.");
                          IF PostedPackageLineTmp2.FIND('-') THEN
                            IF PostedPackageLineTmp2.Quantity = PostedPackageLineTmp.Quantity THEN
                              NextRecord := TRUE
                            ELSE BEGIN
                              NextRecord := FALSE;
                              PackageQuantity := PostedPackageLineTmp2.Quantity;
                           END;
                        END;
                      END;
                    UNTIL NextRecord = FALSE;
                  END;
                  IF PackageQuantity >= NewQty THEN BEGIN
                    RemainingLineQty := OutstandingLineQty;
                    RemainingPackageQty := PackageQuantity - NewQty;
                    RemainingQty := PackageQuantity - NewQty;
                    PostedPackageLineTmp.VALIDATE(Quantity,(PostedPackageLineTmp.Quantity + NewQty));
                    PostedPackageLineTmp.MODIFY;
                    Finished := TRUE;
                  END ELSE BEGIN
                    RemainingQty := (OutstandingLineQty - PackageQuantity) - NewQty;
                    RemainingLineQty := (OutstandingLineQty - PackageQuantity);
                    NewQty := PackageQuantity;
                    PostedPackageLineTmp.VALIDATE(Quantity,(PostedPackageLineTmp.Quantity + NewQty));
                    PostedPackageLineTmp.MODIFY;
                    PostedPackageLineTmp2.RESET;
                    PostedPackageLineTmp2.SETRANGE("Package No.",PostedPackageLineTmp."Package No.");
                    PostedPackageLineTmp2.SETRANGE("No.",PostedPackageLineTmp."No.");
                    IF PostedPackageLineTmp2.FIND('-') THEN BEGIN
                      IF PostedPackageLineTmp2.Quantity = PostedPackageLineTmp.Quantity THEN
                        PostedPackageLineTmp.DELETE;
                    END;
                  END;
                  IF RemainingLineQty = 0 THEN
                    Finished := TRUE
                   ELSE
                     Finished := FALSE;

                  BOLSumLine2.GET(
                    BOLSumLineTmp."Bill of Lading No.",BOLSumLineTmp."Bill of Lading Type",
                      BOLSumLineTmp."First Level Line No.");
                  IF (BOLSumLine2."UCC No." = '') AND PackingRule."ASN Require UCC No." THEN BEGIN
                    BOLSumLine2."ASN Comment" :=
                      STRSUBSTNO(
                        Text010,
                        BOLSumLine2.FIELDNAME("UCC No."));
                    BOLSumLine2.MODIFY;
                  END;
                  BOLSumLine2."Bill of Lading Type" := BOLSumLine."Bill of Lading Type"::"ASN (EDI)";
                  LineNo := LineNo + 1;
                  BOLSumLine2."Line No." := LineNo;
                  BOLSumLine2.Level := 4;
                  BOLSumLine2."Parent Line No." := LevelParent[BOLSumLine2.Level - 1];
                  IF BOLSumLineTmp."Package Line Quantity" <
                    BOLSumLineTmp."Package Line Quantity (Base)"
                  THEN BEGIN
                    BOLSumLine2."Type Description" :=
                      STRSUBSTNO(
                        '%1 %2 (%3 %4 (%5 %6)).',
                        BOLSumLine2.Type,BOLSumLine2."No.",
                        NewQty,
                        BOLSumLineTmp."Package Line Unit of Measure",
                        NewQty,
                        BOLSumLineTmp."One Unit of Measure Code");
                  END ELSE
                    BOLSumLine2."Type Description" :=
                      STRSUBSTNO(
                        '%1 %2 (%3 %4).',
                        BOLSumLine2.Type,BOLSumLine2."No.",
                        NewQty,
                        BOLSumLineTmp."Package Line Unit of Measure");
                  BOLSumLine2."EDI Level ID" := BOLSumLineTmp."UCC No.";
                  BOLSumLine2.Type := BOLSumLine2.Type::"Package (Item)";
                  BOLSumLine2."Package Line Line No." := BOLSumLineTmp."Package Line Line No.";
                  BOLSumLine2."Package Line Type" := BOLSumLineTmp."Package Line Type" ;
                  BOLSumLine2."Package Line No." := BOLSumLineTmp."Package Line No.";
                  BOLSumLine2."Package Line Variant Code" := BOLSumLineTmp."Package Line Variant Code";
                  BOLSumLine2."Package Line Unit of Measure" :=
                    BOLSumLineTmp."Package Line Unit of Measure";
                  BOLSumLine2."Package Line Quantity" := NewQty;
                  BOLSumLine2."Package Line Quantity (Base)" := NewQty;
                  BOLSumLine2."Item UPC/EAN Number" := BOLSumLineTmp."Item UPC/EAN Number";
                  BOLSumLine2."Item UPC/EAN Number (Print)" := BOLSumLineTmp."Item UPC/EAN Number (Print)";
                  BOLSumLine2."Std. Pack UPC/EAN Number" := BOLSumLineTmp."Std. Pack UPC/EAN Number";
                  BOLSumLine2."Std. Pack UPC/EAN No. (Print)" :=
                    BOLSumLineTmp."Std. Pack UPC/EAN No. (Print)";

                  BOLSumLine2."No. of Packages with Packages" := 0;
                  BOLSumLine2."No. of Packages with Items" := 1;
                  IF OverrideASNSummary THEN BEGIN
                    BOLSumLine2."Override ASN Summary" := TRUE;
                    BOLSumLine2."Override ASN Summary Type" := PackingRule."ASN Summary Type";
                  END;
                  UpdateAdvLineNo(BOLSumLine2,PackingRule,LevelParentAdv);

                  BOLSumLine2.INSERT;

                  // Update Item Line
                  IF BOLSumLineItem."Package Line Quantity" = 0 THEN
                    BOLSumLineItem."Package Line Unit of Measure" :=
                      BOLSumLine2."Package Line Unit of Measure"
                  ELSE
                    IF BOLSumLineItem."Package Line Unit of Measure" <>
                       BOLSumLine2."Package Line Unit of Measure"
                    THEN BEGIN
                      BOLSumLineItem."Package Line Unit of Measure" := '';
                      BOLSumLineItem."Package Line Quantity" :=
                        BOLSumLineItem."Package Line Quantity (Base)";
                    END;
                  IF BOLSumLineItem."Package Line Unit of Measure" <> '' THEN
                    BOLSumLineItem."Package Line Quantity" :=
                      BOLSumLineItem."Package Line Quantity" + BOLSumLine2."Package Line Quantity"
                  ELSE
                    BOLSumLineItem."Package Line Quantity" :=
                      BOLSumLineItem."Package Line Quantity" + BOLSumLine2."Package Line Quantity (Base)";
                  BOLSumLineItem."Package Line Quantity (Base)" :=
                    BOLSumLineItem."Package Line Quantity (Base)" +
                  BOLSumLine2."Package Line Quantity (Base)";
                  BOLSumLineItem.Weight := BOLSumLineItem.Weight + BOLSumLine2.Weight;
                  BOLSumLineItem.Volume := BOLSumLineItem.Volume + BOLSumLine2.Volume;
                  BOLSumLineItem.Value := BOLSumLineItem.Value + BOLSumLine2.Value;
                  BOLSumLineItem."No. of Packages with Items" :=
                    BOLSumLineItem."No. of Packages with Items" +
                  BOLSumLine2."No. of Packages with Items";
                  LastExternalDocNo := BOLSumLineTmp."External Document No.";
                  LastOrderNo := BOLSumLineTmp."Source ID";
                  LastItemNo := BOLSumLineTmp."Package Line No.";
                  LastItemVariant := BOLSumLineTmp."Package Line Variant Code";
                  IF OutstandingLineQty <> 0 THEN BEGIN
                    Finished := FALSE;
                    NewQty := OutstandingLineQty + SalesShipmentLineTmp2.Quantity;
                    SalesShipmentLineTmp2.VALIDATE(Quantity,NewQty);
                    SalesShipmentLineTmp2.MODIFY;
                    OutstandingLineQty :=  SalesShipmentLineTmp.Quantity - SalesShipmentLineTmp2.Quantity;
                    IF OutstandingLineQty = 0 THEN BEGIN
                      NewQty := 0;
                  SalesShipmentLineTmp.RESET;
                  SalesShipmentLineTmp.SETRANGE("Document No.",BOLSumLine."Posted Source ID");
                  SalesShipmentLineTmp.SETRANGE(Type, SalesShipmentLineTmp.Type::Item);
                  SalesShipmentLineTmp.SETRANGE("No.",BOLSumLine."No.");
                  SalesShipmentLineTmp.SETRANGE("Line No.",SalesShipmentLineTmp2."Line No.");
                  IF SalesShipmentLineTmp.FIND('-') THEN
                    SalesShipmentLineTmp.DELETE;

                      SalesShipmentLineTmp2.DELETE;
                    END;
                  END;
                  IF RemainingLineQty <> 0 THEN
                    NewQty := RemainingLineQty;
                  END;
                UNTIL Finished;
                  SalesShipmentLineTmp.RESET;
                  SalesShipmentLineTmp.SETRANGE("Document No.",BOLSumLine."Posted Source ID");
                  SalesShipmentLineTmp.SETRANGE(Type, SalesShipmentLineTmp.Type::Item);
                  SalesShipmentLineTmp.SETRANGE("No.",BOLSumLine."No.");
                  SalesShipmentLineTmp.SETFILTER(Quantity,'>%1',0);
                  IF SalesShipmentLineTmp.FIND('-') THEN
                    BOLSumLine.NEXT(-1);
              END;
            END;
          END;
        UNTIL BOLSumLine.NEXT = 0;

        IF BOLSumLineItem."No." <> '' THEN
          BOLSumLineItem.MODIFY;
      END;

      BOLSumLine.RESET;
      BOLSumLine.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
      BOLSumLine.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type"::"ASN (EDI)");
      FOR BOLSumLineLevel := 2 DOWNTO 1 DO BEGIN
        BOLSumLine.SETRANGE(Level,BOLSumLineLevel);
        IF BOLSumLine.FIND('-') THEN
          REPEAT
            BOLSumLine.Weight := 0;
            BOLSumLine.Volume := 0;
            BOLSumLine.Value := 0;
            BOLSumLine."Package Line Quantity" := 0;
            BOLSumLine."Package Line Quantity (Base)" := 0;
            BOLSumLine."No. of Packages with Packages" := 0;
            BOLSumLine."No. of Packages with Items" := 0;

            BOLSumLine2.RESET;
            BOLSumLine2.SETCURRENTKEY("Bill of Lading No.","Bill of Lading Type","Parent Line No.");
            BOLSumLine2.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
            BOLSumLine2.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type");
            BOLSumLine2.SETRANGE("Parent Line No.",BOLSumLine."Line No.");
            IF BOLSumLine2.FIND('-') THEN
              REPEAT
                BOLSumLine.Weight := BOLSumLine.Weight + BOLSumLine2.Weight;
                BOLSumLine.Volume := BOLSumLine.Volume + BOLSumLine2.Volume;
                BOLSumLine.Value := BOLSumLine.Value + BOLSumLine2.Value;
                BOLSumLine."Package Line Quantity" :=
                  BOLSumLine."Package Line Quantity" + BOLSumLine2."Package Line Quantity";
                BOLSumLine."Package Line Quantity (Base)" :=
                  BOLSumLine."Package Line Quantity (Base)" +
                  BOLSumLine2."Package Line Quantity (Base)";
                BOLSumLine."No. of Packages with Items" :=
                  BOLSumLine."No. of Packages with Items" +
                  BOLSumLine2."No. of Packages with Items";
              UNTIL BOLSumLine2.NEXT = 0;

            BOLSumLine.MODIFY;
          UNTIL BOLSumLine.NEXT = 0;
      END;

      EXIT(ProblemsFound);
    END;

    PROCEDURE UpdateAdvLineNo@1240030000(VAR BOLSumLine@1240030001 : Record 14000825;PackingRule@1240030000 : Record 14000715;VAR LevelParent@1240030002 : ARRAY [100] OF Integer);
    VAR
      IncrementLevel@1240030003 : Boolean;
    BEGIN
      IF OverrideASNSummary THEN BEGIN
        IF NOT PackingRule."Increment Level 1 (Override)" AND
          NOT PackingRule."Increment Level 2 (Override)" AND
          NOT PackingRule."Increment Level 3 (Override)" AND
          NOT PackingRule."Increment Level 4 (Override)" AND
          NOT PackingRule."Increment Level 5 (Override)"
        THEN
          EXIT
        ELSE BEGIN
          CASE BOLSumLine.Level OF
            1:
              IncrementLevel := PackingRule."Increment Level 1 (Override)";
            2:
              IncrementLevel := PackingRule."Increment Level 2 (Override)";
            3:
              CASE TRUE OF
                BOLSumLine.Type = BOLSumLine.Type::Tare:
                 IncrementLevel := PackingRule."Increment Level 3 (Override)";
                BOLSumLine.Type = BOLSumLine.Type::Package:
                 IncrementLevel := PackingRule."Increment Level 4 (Override)";
              END;
            4:
             CASE TRUE OF
               BOLSumLine.Type = BOLSumLine.Type::Package:
                 IncrementLevel := PackingRule."Increment Level 4 (Override)";
               BOLSumLine.Type = BOLSumLine.Type::Item:
                 IncrementLevel := PackingRule."Increment Level 5 (Override)";
             END;
            5:
              IncrementLevel := PackingRule."Increment Level 5 (Override)";
            ELSE
              IncrementLevel := TRUE;
          END;
        END;
      END ELSE BEGIN
        IF NOT PackingRule."Increment Level 1 (Advanced)" AND
          NOT PackingRule."Increment Level 2 (Advanced)" AND
          NOT PackingRule."Increment Level 3 (Advanced)" AND
          NOT PackingRule."Increment Level 4 (Advanced)" AND
          NOT PackingRule."Increment Level 5 (Advanced)"
        THEN
          EXIT
        ELSE BEGIN
          CASE BOLSumLine.Level OF
            1:
              IncrementLevel := PackingRule."Increment Level 1 (Advanced)";
            2:
              IncrementLevel := PackingRule."Increment Level 2 (Advanced)";
            3:
              CASE TRUE OF
                BOLSumLine.Type = BOLSumLine.Type::Tare:
                 IncrementLevel := PackingRule."Increment Level 3 (Advanced)";
                BOLSumLine.Type = BOLSumLine.Type::Package:
                 IncrementLevel := PackingRule."Increment Level 4 (Advanced)";
              END;
            4:
             CASE TRUE OF
               BOLSumLine.Type = BOLSumLine.Type::Package:
                 IncrementLevel := PackingRule."Increment Level 4 (Advanced)";
               BOLSumLine.Type = BOLSumLine.Type::Item:
                 IncrementLevel := PackingRule."Increment Level 5 (Advanced)";
             END;
            5:
              IncrementLevel := PackingRule."Increment Level 5 (Advanced)";
            ELSE
              IncrementLevel := TRUE;
          END;

        END;
      END;

      IF IncrementLevel THEN BEGIN
        IF BOLSumLine.Level = 1 THEN BEGIN
          LevelParent[100] := 1;
          LevelParent[BOLSumLine.Level] := LevelParent[100];
        END ELSE BEGIN
          LevelParent[100] := LevelParent[100] + 1;
          LevelParent[BOLSumLine.Level] := LevelParent[100];
        END;
      END ELSE
        IF BOLSumLine.Level = 1 THEN
          LevelParent[BOLSumLine.Level] := 0
        ELSE
          LevelParent[BOLSumLine.Level] := LevelParent[BOLSumLine.Level - 1];

      BOLSumLine."Advanced Line No." := LevelParent[BOLSumLine.Level];
      IF BOLSumLine.Level = 1 THEN
        BOLSumLine."Advanced Parent Line No." := 0
      ELSE
        BOLSumLine."Advanced Parent Line No." := LevelParent[BOLSumLine.Level - 1];
    END;

    PROCEDURE DistributeShippingCharge@13(CurrentBillOfLading@1000000000 : Record 14000822);
    VAR
      BillOfLadingLine@1000000001 : Record 14000823;
      SalesHeader@1000000002 : Record 36;
      SalesHeaderTmp@1000000003 : TEMPORARY Record 36;
      SalesLine@1000000004 : Record 37;
      RateShopHeader@1000000005 : Record 14000741;
      RateShopLine@1000000006 : Record 14000742;
      ShippingSetup@1000000007 : Record 14000707;
      ShippingAgent@1000000012 : Record 291;
      ReleaseSalesDocument@1240030001 : Codeunit 414;
      TotalToDistribute@1000000008 : Decimal;
      TotalDistributed@1000000009 : Decimal;
      ShippingChargeDistributed@1000000010 : Decimal;
      ShippingCostDistributed@1000000011 : Decimal;
      ReleaseSalesOrder@1240030000 : Boolean;
      EShipSetGlobalVariable@1240020000 : Codeunit 14000246;
      Package@1000000013 : Record 14000701;
    BEGIN
      WITH CurrentBillOfLading DO BEGIN
        TESTFIELD(Released,FALSE);
        TESTFIELD("Shipping Charge");
        TESTFIELD("Shipping Agent Code");

        ShippingSetup.GET;
        ShippingSetup.TESTFIELD("Distribute Cost");

        ShippingAgent.GET("Shipping Agent Code");

        BillOfLadingLine.RESET;
        BillOfLadingLine.SETRANGE("Bill of Lading No.","No.");
        BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
        BillOfLadingLine.SETFILTER("No.",'<>%1','');
        IF NOT BillOfLadingLine.FIND('-') THEN
          ERROR(Text016);

        BillOfLadingLine.RESET;
        BillOfLadingLine.SETRANGE("Bill of Lading No.","No.");
        BillOfLadingLine.SETFILTER(Type,'<>%1',BillOfLadingLine.Type::Order);
        BillOfLadingLine.SETFILTER("No.",'<>%1','');
        IF BillOfLadingLine.FIND('-') THEN
          IF NOT CONFIRM(
                   Text017 +
                   Text018,FALSE)
          THEN
            EXIT;

                //TPZ1534
        BillOfLadingLine.RESET;
        BillOfLadingLine.SETRANGE("Bill of Lading No.","No.");
        BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
        BillOfLadingLine.SETFILTER("No.",'<>%1','');
        IF BillOfLadingLine.FIND('-') THEN
          REPEAT
            SalesHeader.GET(SalesHeader."Document Type"::Order,BillOfLadingLine."No.");
            SalesLine.SETRANGE("Document Type", SalesHeader."Document Type");
            SalesLine.SETRANGE("Document No.",SalesHeader."No.");
            SalesLine.SETFILTER("Outstanding Quantity", '<>0');
            SalesLine.SETRANGE("Shipping Charge",TRUE);
            IF SalesLine.FINDFIRST THEN
               ERROR('Cannot distribute shipping charge to order %1 because it already has shipping charge.', SalesHeader."No.");
          UNTIL BillOfLadingLine.NEXT = 0;
        //TPZ1534
        SalesHeaderTmp.DELETEALL;
        TotalToDistribute := 0;
        BillOfLadingLine.RESET;
        BillOfLadingLine.SETRANGE("Bill of Lading No.","No.");
        BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
        BillOfLadingLine.SETFILTER("No.",'<>%1','');
        IF BillOfLadingLine.FIND('-') THEN
          REPEAT
            SalesHeader.GET(SalesHeader."Document Type"::Order,BillOfLadingLine."No.");
            SalesHeaderTmp := SalesHeader;

            CLEAR(RateShopHeader);
            RateShopHeader.TransferFromSalesHeader(SalesHeader);
                        //TM BEG 070915
            IF RateShopHeader."Override Value" = 0 THEN BEGIN
              RateShopHeader."Override Weight" := 0;
              Package.SETCURRENTKEY("Source Type", "Source Subtype", "Source ID");
              Package.SETRANGE("Source Type", DATABASE::"Sales Header");
              Package.SETRANGE("Source Subtype", SalesHeader."Document Type");
              Package.SETRANGE("Source ID", SalesHeader."No.");
              Package.SETRANGE("Location Code", BillOfLadingLine."Location Code");
              IF Package.FINDSET THEN
              REPEAT
                RateShopHeader."Override Value" += Package."Calculation Value";
                RateShopHeader."Override Weight" += Package."Override Weight";
              UNTIL Package.NEXT = 0;
            END;
            //TM END 070915
            IF RateShopHeader."Override Value" <> 0 THEN
              CASE ShippingSetup."Distribute Cost" OF
                ShippingSetup."Distribute Cost"::Equal:
                  SalesHeaderTmp."VAT Base Discount %" := 1;
                ShippingSetup."Distribute Cost"::"by Weight":
                  SalesHeaderTmp."VAT Base Discount %" := RateShopHeader."Override Weight";
                ShippingSetup."Distribute Cost"::"by Value":
                  SalesHeaderTmp."VAT Base Discount %" := RateShopHeader."Override Value";
                ShippingSetup."Distribute Cost"::"by Volume":
                  SalesHeaderTmp."VAT Base Discount %" := RateShopHeader."Override Volume";
              END
            ELSE
              SalesHeaderTmp."VAT Base Discount %" := 0;

            SalesHeaderTmp.INSERT;

            TotalToDistribute := TotalToDistribute + SalesHeaderTmp."VAT Base Discount %";
          UNTIL BillOfLadingLine.NEXT = 0;

        IF TotalToDistribute = 0 THEN
          ERROR(Text019);

        TotalDistributed := 0;
        ShippingChargeDistributed := 0;
        ShippingCostDistributed := 0;
        SalesHeaderTmp.FIND('-');
        REPEAT
          RateShopLine."Shipping Agent Code" := "Shipping Agent Code";
          RateShopLine."Shipping Agent Service" := "Shipping Agent Service";
          RateShopLine."World Wide Service" := "World Wide Service";

          IF TotalDistributed + SalesHeaderTmp."VAT Base Discount %" < TotalToDistribute THEN BEGIN
            RateShopLine."Shipping Charge" :=
              ROUND("Shipping Charge" * (SalesHeaderTmp."VAT Base Discount %" / TotalToDistribute));
            RateShopLine."Shipping Cost" :=
              ROUND("Shipping Cost" * (SalesHeaderTmp."VAT Base Discount %" / TotalToDistribute));
          END ELSE BEGIN
            RateShopLine."Shipping Charge" := "Shipping Charge" - ShippingChargeDistributed;
            RateShopLine."Shipping Cost" := "Shipping Cost" - ShippingCostDistributed;
          END;

          "Cost On Documents" := TRUE;
          MODIFY;

          SalesLine.LOCKTABLE;
          SalesHeader.LOCKTABLE;
          SalesHeader.GET(SalesHeaderTmp."Document Type",SalesHeaderTmp."No.");

          IF SalesHeader.Status = SalesHeader.Status::Released THEN BEGIN
            EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(FALSE);
            EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(TRUE);
            ReleaseSalesDocument.Reopen(SalesHeader);
            EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(FALSE);

            ReleaseSalesOrder := TRUE;
          END ELSE
            ReleaseSalesOrder := FALSE;

          SalesLine.RESET;
          SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
          SalesLine.SETRANGE("Document No.",SalesHeader."No.");
          SalesLine.SETRANGE("Shipping Charge",TRUE);
          SalesLine.SETRANGE("Quantity Shipped",0);
          SalesLine.SETFILTER("Outstanding Quantity",'>%1',0);
          SalesLine.SETRANGE("Shipping Charge BOL No.","No.");
          SalesLine.DELETEALL(TRUE);

          IF "Free Freight" OR SalesHeader."Free Freight" THEN BEGIN
            IF NOT SalesHeader."No Free Freight Lines on Order" THEN
              Shipping.WriteShipChargeSalesHeader(
                SalesHeader,ShippingAgent,RateShopLine."Shipping Charge",RateShopLine."Shipping Cost",
                0,RateShopLine."Shipping Cost",FALSE,"No.");
          END ELSE
            Shipping.WriteShipChargeSalesHeader(
              SalesHeader,ShippingAgent,RateShopLine."Shipping Charge",RateShopLine."Shipping Cost",
              RateShopLine."Shipping Charge",RateShopLine."Shipping Cost",FALSE,"No.");

          IF ReleaseSalesOrder THEN BEGIN
            EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(FALSE);
            EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(TRUE);
            ReleaseSalesDocument.RUN(SalesHeader);
            EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(FALSE);
          END;

          TotalDistributed := TotalDistributed + SalesHeaderTmp."VAT Base Discount %";
          ShippingChargeDistributed := ShippingChargeDistributed + RateShopLine."Shipping Charge";
          ShippingCostDistributed := ShippingCostDistributed + RateShopLine."Shipping Cost";
        UNTIL SalesHeaderTmp.NEXT = 0;
      END;
    END;

    PROCEDURE RemoveShippingCharge@19(CurrentBillOfLading@1000000000 : Record 14000822);
    VAR
      BillOfLadingLine@1000000001 : Record 14000823;
      SalesHeader@1000000002 : Record 36;
      SalesLine@1000000003 : Record 37;
      ReleaseSalesDocument@1240030001 : Codeunit 414;
      ReleaseSalesOrder@1240030000 : Boolean;
      EShipSetGlobalVariable@1240020000 : Codeunit 14000246;
    BEGIN
      WITH CurrentBillOfLading DO BEGIN
        TESTFIELD(Released,FALSE);
        TESTFIELD("Shipping Charge");
        TESTFIELD("Shipping Agent Code");

        BillOfLadingLine.RESET;
        BillOfLadingLine.SETRANGE("Bill of Lading No.","No.");
        BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
        BillOfLadingLine.SETFILTER("No.",'<>%1','');
        IF NOT BillOfLadingLine.FIND('-') THEN
          ERROR(Text020);

        BillOfLadingLine.RESET;
        BillOfLadingLine.SETRANGE("Bill of Lading No.","No.");
        BillOfLadingLine.SETFILTER(Type,'<>%1',BillOfLadingLine.Type::Order);
        BillOfLadingLine.SETFILTER("No.",'<>%1','');
        IF BillOfLadingLine.FIND('-') THEN
          IF NOT CONFIRM(
                   Text017 +
                   Text021,FALSE)
          THEN
            EXIT;

        BillOfLadingLine.RESET;
        BillOfLadingLine.SETRANGE("Bill of Lading No.","No.");
        BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
        BillOfLadingLine.SETFILTER("No.",'<>%1','');
        IF BillOfLadingLine.FIND('-') THEN
          REPEAT
            SalesHeader.GET(SalesHeader."Document Type"::Order,BillOfLadingLine."No.");

            "Cost On Documents" := FALSE;
            MODIFY;

            SalesLine.LOCKTABLE;
            SalesHeader.LOCKTABLE;

            IF SalesHeader.Status = SalesHeader.Status::Released THEN BEGIN
              EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(FALSE);
              EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(TRUE);
              ReleaseSalesDocument.Reopen(SalesHeader);
              EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(FALSE);

              ReleaseSalesOrder := TRUE;
            END ELSE
              ReleaseSalesOrder := FALSE;

            SalesLine.RESET;
            SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
            SalesLine.SETRANGE("Document No.",SalesHeader."No.");
            SalesLine.SETRANGE("Shipping Charge",TRUE);
            SalesLine.SETRANGE("Quantity Shipped",0);
            SalesLine.SETFILTER("Outstanding Quantity",'>%1',0);
            SalesLine.SETRANGE("Shipping Charge BOL No.","No.");
            SalesLine.DELETEALL;

            IF ReleaseSalesOrder THEN BEGIN
              EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(FALSE);
              EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(TRUE);
              ReleaseSalesDocument.RUN(SalesHeader);
              EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(FALSE);
            END;
        UNTIL BillOfLadingLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE UpdateASNBase@16(CurrentBillOfLading@1000000000 : Record 14000822;PackingRule@1000000001 : Record 14000715;TypeCode@1000000002 : Code[10]) : Boolean;
    VAR
      BOLSumLine@1000000003 : Record 14000825;
      BOLSumLine2@1000000004 : Record 14000825;
      ProblemsFound@1000000011 : Boolean;
    BEGIN
      BOLSumLine.RESET;
      BOLSumLine.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
      IF PackingRule."ASN Summary from Pack. Summary" THEN
        BOLSumLine.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type"::"Package Summary")
      ELSE
        BOLSumLine.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type"::Standard);
      IF BOLSumLine.FIND('-') THEN BEGIN
        BOLSumLine2.RESET;
        BOLSumLine2.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
        BOLSumLine2.SETRANGE("Bill of Lading Type",BOLSumLine."Bill of Lading Type"::"ASN (Base)");
        BOLSumLine2.DELETEALL;

        REPEAT
          BOLSumLine2 := BOLSumLine;
          BOLSumLine2."Bill of Lading Type" := BOLSumLine2."Bill of Lading Type"::"ASN (Base)";
          BOLSumLine2.INSERT;
        UNTIL BOLSumLine.NEXT = 0;
      END;

      EXIT(ProblemsFound);
    END;

    LOCAL PROCEDURE SetLevelFields@17(VAR BOLSumLine@1000000000 : Record 14000825;LevelPackageNo@1000000001 : ARRAY [5] OF Code[20];LevelLineNo@1000000002 : ARRAY [5] OF Integer);
    BEGIN
      BOLSumLine."First Level Package No." := LevelPackageNo[1];
      BOLSumLine."First Level Line No." := LevelLineNo[1];
      BOLSumLine."Second Level Package No." := LevelPackageNo[2];
      BOLSumLine."Second Level Line No." := LevelLineNo[2];
      BOLSumLine."Third Level Package No." := LevelPackageNo[3];
      BOLSumLine."Third Level Line No." := LevelLineNo[3];
      BOLSumLine."Fourth Level Package No." := LevelPackageNo[4];
      BOLSumLine."Fourth Level Line No." := LevelLineNo[4];
      BOLSumLine."Fifth Level Package No." := LevelPackageNo[5];
      BOLSumLine."Fifth Level Line No." := LevelLineNo[5];
    END;

    PROCEDURE CreateBillOfLadingInfoLines@21(VAR CurrentBillOfLading@1240030000 : Record 14000822;OverWriteExisting@1240030001 : Boolean);
    VAR
      BillOfLadingLine@1240030002 : Record 14000823;
      BillOfLadingInfoLine@1240030003 : Record 14000827;
      LastExtNo@1240030004 : Code[35];
      LastSalesOrder@1240030005 : Code[20];
    BEGIN
      AllowCommodityInfoLines := FALSE;

      WITH CurrentBillOfLading DO BEGIN
        BillOfLadingInfoLine.RESET;
        BillOfLadingInfoLine.SETRANGE("Bill of Lading No.","No.");
        IF OverWriteExisting AND BillOfLadingInfoLine.FIND('-') THEN
          BillOfLadingInfoLine.DELETEALL(TRUE);

        BillOfLadingInfoLine.RESET;
        BillOfLadingInfoLine.SETRANGE("Bill of Lading No.","No.");
        IF NOT BillOfLadingInfoLine.FIND('-') THEN BEGIN
          BillOfLadingLine.RESET;
          BillOfLadingLine.SETCURRENTKEY(
            "Bill of Lading No.","External Document No.","Source Type","Source Subtype","Source ID");
          BillOfLadingLine.SETRANGE("Bill of Lading No.","No.");
          LastExtNo := 'X Y Z';
          LastSalesOrder := 'X Y Z';
          IF BillOfLadingLine.FIND('-') THEN
            REPEAT
              IF BillOfLadingLine."External Document No." <> '' THEN BEGIN
                IF (LastExtNo <> BillOfLadingLine."External Document No.") OR
                   (LastExtNo = 'X Y Z')
                THEN BEGIN
                  BillOfLadingInfoLine.TRANSFERFIELDS(BillOfLadingLine);
                  IF BillOfLadingInfoLine."External Document No." <> '' THEN BEGIN
                    BillOfLadingInfoLine.Type := BillOfLadingInfoLine.Type::"External Doc. No.";
                    BillOfLadingInfoLine."No." := BillOfLadingInfoLine."External Document No.";
                  END;
                  BillOfLadingInfoLine."Info. Line Type" :=
                    BillOfLadingInfoLine."Info. Line Type"::"Cust. Order Info.";
                                  //TM BEG 081915
                  BillOfLadingInfoLine.SuspendTestReleased(TRUE);
                  //TM END 081915

                  BillOfLadingInfoLine.INSERT(TRUE);
                  LastExtNo := BillOfLadingLine."External Document No.";
                END ELSE
                  IF LastExtNo = BillOfLadingLine."External Document No." THEN BEGIN
                    BillOfLadingInfoLine.Weight := BillOfLadingInfoLine.Weight + BillOfLadingLine.Weight;
                    BillOfLadingInfoLine.Volume := BillOfLadingInfoLine.Volume + BillOfLadingLine.Volume;
                    BillOfLadingInfoLine.Value := BillOfLadingInfoLine.Value + BillOfLadingLine.Value;
                    BillOfLadingInfoLine."Packages (Top Level)" :=
                      BillOfLadingInfoLine."Packages (Top Level)" +
                      BillOfLadingLine."Packages (Top Level)";
                    BillOfLadingInfoLine."Packages (Lower Level)" :=
                      BillOfLadingInfoLine."Packages (Lower Level)" +
                      BillOfLadingLine."Packages (Lower Level)";
                    BillOfLadingInfoLine.MODIFY;
                  END;
              END ELSE BEGIN
                IF (LastSalesOrder = 'X Y Z') OR
                   (LastSalesOrder <> BillOfLadingLine."Source ID")
                THEN BEGIN
                  BillOfLadingInfoLine.TRANSFERFIELDS(BillOfLadingLine);
                  IF BillOfLadingLine."Source ID" <> '' THEN BEGIN
                    IF BillOfLadingLine.Type = BillOfLadingLine.Type::"Bill of Lading (Released)" THEN
                      BillOfLadingInfoLine.Type := BillOfLadingInfoLine.Type::"Bill of Lading"
                    ELSE
                      BillOfLadingInfoLine.Type := BillOfLadingInfoLine.Type::Document;
                    BillOfLadingInfoLine."No." := BillOfLadingLine."Source ID";
                  END;
                  BillOfLadingInfoLine."Info. Line Type" :=
                    BillOfLadingInfoLine."Info. Line Type"::"Cust. Order Info.";
                  BillOfLadingInfoLine.INSERT(TRUE);
                  LastSalesOrder := BillOfLadingLine."Source ID";
                END ELSE
                  IF LastSalesOrder = BillOfLadingLine."Source ID" THEN BEGIN
                    BillOfLadingInfoLine.Weight := BillOfLadingInfoLine.Weight + BillOfLadingLine.Weight;
                    BillOfLadingInfoLine.Volume := BillOfLadingInfoLine.Volume + BillOfLadingLine.Volume;
                    BillOfLadingInfoLine.Value := BillOfLadingInfoLine.Value + BillOfLadingLine.Value;
                    BillOfLadingInfoLine."Packages (Top Level)" :=
                      BillOfLadingInfoLine."Packages (Top Level)" +
                      BillOfLadingLine."Packages (Top Level)";
                    BillOfLadingInfoLine."Packages (Lower Level)" :=
                      BillOfLadingInfoLine."Packages (Lower Level)" +
                      BillOfLadingLine."Packages (Lower Level)";
                    BillOfLadingInfoLine.MODIFY;
                  END;
              END;
            UNTIL BillOfLadingLine.NEXT = 0;
          IF OverWriteExisting THEN
            CreateCommodityInfoLines(CurrentBillOfLading)
          ELSE
            AllowCommodityInfoLines := TRUE;
        END;
      END;
    END;

    PROCEDURE CreateCommodityInfoLines@1240020001(VAR BillOfLading@1240020004 : Record 14000822);
    VAR
      BillofLadingInfoLine@1240020034 : Record 14000827;
      ShippingSetup@1240020020 : Record 14000707;
      BillOfLadingSummaryLine@1240020002 : Record 14000825;
      PostedPackage@1240020013 : Record 14000704;
      PostedPackageLine@1240020014 : Record 14000705;
      PostedPackage2@1240020000 : Record 14000704;
      PostedPackageLine2@1240020001 : Record 14000705;
      PostedPackageTmp@1240020003 : TEMPORARY Record 14000704;
      PostedPackageLineTmp@1240020016 : TEMPORARY Record 14000705;
      ItemTmp@1240020010 : TEMPORARY Record 27;
      Item@1240020019 : Record 27;
      LTLPostedOptionPage@1240020005 : Record 14000802;
      LTLNMFCCode@1240020040 : Record 14000730;
      LTLNMFCCodeTmp@1240020041 : TEMPORARY Record 14000730;
      EDIBillOfLadingCarrier@1240020055 : Record 14050901;
      DefaultNMFCCode@1240020039 : Code[10];
      CommodityNMFCCode@1240020037 : Code[10];
      MultiDocumentPackageNo@1240020008 : Code[20];
      PrevPackNo@1240020009 : Code[20];
      ItemFound@1240020006 : Boolean;
      CommodityFound@1240020027 : Boolean;
      DangerousGoods@1240020023 : Boolean;
      HazMatItem@1240021009 : Code[20];
      HazMatNMFC@1240021025 : Code[20];
      HazMat@1240021018 : Boolean;
      MixedCommodity@1240020012 : Boolean;
      PalletInfoLineCreated@1240020024 : Boolean;
      InsertInfoLine@1240020047 : Boolean;
      MixedCommodityPallet@1240020048 : Boolean;
      CountPackage@1240020049 : Boolean;
      CountOuterPackage@1240020050 : Boolean;
      MixedCommodityPackage@1240020051 : Boolean;
      RoundValue@1240020007 : Boolean;
      Volume@1240020044 : Decimal;
      Value@1240020045 : Decimal;
      Weight@1240020046 : Decimal;
      Palletized@1240020030 : Boolean;
      PalletAndLoosePackages@1240020043 : Boolean;
      DefaultNMFCCodeFound@1240020035 : Boolean;
      InsertDefaultNMFC@1240020015 : Boolean;
      MiscPalletsAlways@1240020054 : Boolean;
      TopLevelPackage@1240020021 : Integer;
      LowerLevelPackage@1240020022 : Integer;
      NoOfItems@1240020011 : Integer;
      LineNo@1240020017 : Integer;
      ItemsWithNMFCCode@1240020036 : Integer;
      NoOfNMFCCodes@1240020031 : Integer;
      Pallets@1240020052 : Integer;
    BEGIN
      ShippingSetup.GET;
      ItemTmp.RESET;
      ItemTmp.DELETEALL;
      LTLNMFCCodeTmp.RESET;
      LTLNMFCCodeTmp.DELETEALL;
      PostedPackageTmp.RESET;
      PostedPackageTmp.DELETEALL;
      PostedPackageLineTmp.RESET;
      PostedPackageLineTmp.DELETEALL;

      Weight := 0;
      Volume := 0;
      Value := 0;
      NoOfItems := 0;
      NoOfNMFCCodes := 0;
      TopLevelPackage := 0;
      LowerLevelPackage := 0;
      ItemsWithNMFCCode := 0;
      DefaultNMFCCode := '';
      CommodityNMFCCode := '';
      HazMatItem := '';
      HazMat := FALSE;
      HazMatNMFC := '';
      ItemFound := FALSE;
      Palletized := FALSE;
      MixedCommodity := FALSE;
      InsertInfoLine := FALSE;
      CommodityFound := FALSE;
      DangerousGoods := FALSE;
      CountPackage := FALSE;
      CountOuterPackage := FALSE;
      MixedCommodityPallet := FALSE;
      MixedCommodityPackage := FALSE;
      InsertDefaultNMFC := FALSE;
      PalletInfoLineCreated := FALSE;
      DefaultNMFCCodeFound := FALSE;

      LTLNMFCCode.RESET;
      IF NOT LTLNMFCCode.FIND('-') THEN
       EXIT;

      IF BillOfLading."EDI Electronic BOL" THEN BEGIN
        EDIBillOfLadingCarrier.RESET;
        EDIBillOfLadingCarrier.SETRANGE("Shipping Agent Code",BillOfLading."Shipping Agent Code");
        EDIBillOfLadingCarrier.SETRANGE("Shipping Agent Service",BillOfLading."Shipping Agent Service");
        IF NOT EDIBillOfLadingCarrier.FIND('-') THEN BEGIN
          EDIBillOfLadingCarrier.SETRANGE("Shipping Agent Service",'');
          IF EDIBillOfLadingCarrier.FIND('-') THEN
            MiscPalletsAlways := EDIBillOfLadingCarrier."Misc. Pallets Always";
        END ELSE
          MiscPalletsAlways := EDIBillOfLadingCarrier."Misc. Pallets Always";
      END;

      DefaultNMFCCode := ShippingSetup."Default NMFC Code";

      PostedPackage.RESET;
      PostedPackage.SETCURRENTKEY("Bill of Lading No.");
      PostedPackage.SETRANGE("Bill of Lading No.",BillOfLading."No.");
      IF PostedPackage.FIND('-') THEN
        REPEAT
          PostedPackageLine.RESET;
          PostedPackageLine.SETRANGE("Package No.",PostedPackage."No.");
          PostedPackageLine.SETRANGE(Type,PostedPackageLine.Type::Item);
          PostedPackageLine.SETFILTER("No.",'<>%1',' ');
          IF PostedPackageLine.FIND('-') THEN
            REPEAT
              ItemTmp.RESET;
              ItemTmp.SETRANGE("No.",PostedPackageLine."No.");
              IF NOT ItemTmp.FIND('-') THEN BEGIN
                Item.GET(PostedPackageLine."No.");
                ItemTmp := Item;
                ItemTmp.INSERT;
                NoOfItems := NoOfItems + 1;
              END;
            UNTIL PostedPackageLine.NEXT = 0;
        UNTIL PostedPackage.NEXT = 0;

      ItemTmp.RESET;
      IF ItemTmp.FIND('-') THEN
        REPEAT
          ItemFound := FALSE;
          PostedPackage.RESET;
          PostedPackage.SETCURRENTKEY("Bill of Lading No.");
          PostedPackage.SETRANGE("Bill of Lading No.",BillOfLading."No.");
          IF PostedPackage.FIND('-') THEN
            REPEAT
              PostedPackageLine.RESET;
              PostedPackageLine.SETRANGE("Package No.",PostedPackage."No.");
              PostedPackageLine.SETRANGE(Type,PostedPackageLine.Type::Item);
              PostedPackageLine.SETRANGE("No.",ItemTmp."No.");
              IF PostedPackageLine.FIND('-') THEN BEGIN
                ItemFound := TRUE;
                CheckHazMatCode(ItemTmp."No.",HazMatItem,HazMat);
                IF PostedPackageLine."NMFC Code" <> '' THEN BEGIN
                  IF HazMat THEN
                    HazMatNMFC := PostedPackageLine."NMFC Code";
                  ItemsWithNMFCCode := ItemsWithNMFCCode + 1;
                  LTLNMFCCodeTmp.RESET;
                  LTLNMFCCodeTmp.SETRANGE(Code,PostedPackageLine."NMFC Code");
                  IF NOT LTLNMFCCodeTmp.FIND('-') THEN BEGIN
                    NoOfNMFCCodes := NoOfNMFCCodes + 1;
                    IF LTLNMFCCode.GET(PostedPackageLine."NMFC Code") THEN BEGIN
                      LTLNMFCCodeTmp := LTLNMFCCode;
                     LTLNMFCCodeTmp.INSERT;
                    END;
                  END;
                END ELSE
                  IF DefaultNMFCCode <> '' THEN BEGIN
                    LTLNMFCCodeTmp.RESET;
                    LTLNMFCCodeTmp.SETRANGE(Code,DefaultNMFCCode);
                    IF NOT LTLNMFCCodeTmp.FIND('-') THEN BEGIN
                      LTLNMFCCode.RESET;
                      LTLNMFCCode.SETRANGE(Code,DefaultNMFCCode);
                      IF LTLNMFCCode.FIND('-') THEN BEGIN
                        InsertDefaultNMFC := TRUE;
                        LTLNMFCCodeTmp := LTLNMFCCode;
                        LTLNMFCCodeTmp.INSERT;
                        NoOfNMFCCodes := NoOfNMFCCodes + 1;
                      END;
                    END;
                  END;
              END;
          UNTIL (PostedPackage.NEXT = 0) OR (ItemFound = TRUE);
        UNTIL ItemTmp.NEXT = 0;

      PostedPackage.RESET;
      PostedPackage.SETCURRENTKEY("Used on Bill of Lading No.");
      PostedPackage.SETRANGE("Used on Bill of Lading No.",BillOfLading."No.");
      IF PostedPackage.FIND('-') THEN
        REPEAT
          PostedPackageLine.RESET;
          PostedPackageLine.SETRANGE("Package No.",PostedPackage."No.");
          PostedPackageLine.SETRANGE(Type,PostedPackageLine.Type::Item);
          PostedPackageLine.SETFILTER("No.",'<>%1',' ');
          IF PostedPackageLine.FIND('-') THEN
            REPEAT
              ItemTmp.RESET;
              ItemTmp.SETRANGE("No.",PostedPackageLine."No.");
              IF NOT ItemTmp.FIND('-') THEN BEGIN
                Item.GET(PostedPackageLine."No.");
                ItemTmp := Item;
                ItemTmp.INSERT;
                NoOfItems := NoOfItems + 1;
              END;
            UNTIL PostedPackageLine.NEXT = 0;
        UNTIL PostedPackage.NEXT = 0;

      ItemTmp.RESET;
      IF ItemTmp.FIND('-') THEN
        REPEAT
          ItemFound := FALSE;
          PostedPackage.RESET;
          PostedPackage.SETCURRENTKEY("Used on Bill of Lading No.");
          PostedPackage.SETRANGE("Used on Bill of Lading No.",BillOfLading."No.");
          IF PostedPackage.FIND('-') THEN
            REPEAT
              PostedPackageLine.RESET;
              PostedPackageLine.SETRANGE("Package No.",PostedPackage."No.");
              PostedPackageLine.SETRANGE(Type,PostedPackageLine.Type::Item);
              PostedPackageLine.SETRANGE("No.",ItemTmp."No.");
              IF PostedPackageLine.FIND('-') THEN BEGIN
                ItemFound := TRUE;
                CheckHazMatCode(ItemTmp."No.",HazMatItem,HazMat);
                IF PostedPackageLine."NMFC Code" <> '' THEN BEGIN
                  IF HazMat THEN
                    HazMatNMFC := PostedPackageLine."NMFC Code";
                  ItemsWithNMFCCode := ItemsWithNMFCCode + 1;
                  LTLNMFCCodeTmp.RESET;
                  LTLNMFCCodeTmp.SETRANGE(Code,PostedPackageLine."NMFC Code");
                  IF NOT LTLNMFCCodeTmp.FIND('-') THEN BEGIN
                    NoOfNMFCCodes := NoOfNMFCCodes + 1;
                    IF LTLNMFCCode.GET(PostedPackageLine."NMFC Code") THEN BEGIN
                      LTLNMFCCodeTmp := LTLNMFCCode;
                     LTLNMFCCodeTmp.INSERT;
                    END;
                  END;
                END ELSE
                  IF DefaultNMFCCode <> '' THEN BEGIN
                    LTLNMFCCodeTmp.RESET;
                    LTLNMFCCodeTmp.SETRANGE(Code,DefaultNMFCCode);
                    IF NOT LTLNMFCCodeTmp.FIND('-') THEN BEGIN
                      LTLNMFCCode.RESET;
                      LTLNMFCCode.SETRANGE(Code,DefaultNMFCCode);
                      IF LTLNMFCCode.FIND('-') THEN BEGIN
                        InsertDefaultNMFC := TRUE;
                        LTLNMFCCodeTmp := LTLNMFCCode;
                        LTLNMFCCodeTmp.INSERT;
                        NoOfNMFCCodes := NoOfNMFCCodes + 1;
                      END;
                    END;
                  END;
              END;
          UNTIL (PostedPackage.NEXT = 0) OR (ItemFound = TRUE);
        UNTIL ItemTmp.NEXT = 0;

      IF ((ItemsWithNMFCCode = 0) AND (DefaultNMFCCode = '')) OR
         ((ItemsWithNMFCCode <> 0) AND
          (ItemsWithNMFCCode <> NoOfItems) AND
          (DefaultNMFCCode = ''))
      THEN
        EXIT;

      IF NoOfNMFCCodes > 1 THEN
        MixedCommodity := TRUE
      ELSE
        MixedCommodity := FALSE;

      IF (NoOfNMFCCodes = 1) AND (DefaultNMFCCode <> '') THEN BEGIN
        LTLNMFCCodeTmp.RESET;
        IF LTLNMFCCodeTmp.FIND('-') THEN
          IF DefaultNMFCCode <> LTLNMFCCodeTmp.Code THEN
            DefaultNMFCCode := '';
      END;
      IF DefaultNMFCCode <> '' THEN
        LTLNMFCCode.GET(DefaultNMFCCode);

      PalletAndLoosePackages := FALSE;
      BillOfLadingSummaryLine.RESET;
      BillOfLadingSummaryLine.SETRANGE(
      BillOfLadingSummaryLine."Bill of Lading No.",BillOfLading."No.");
      BillOfLadingSummaryLine.SETRANGE(
        "Bill of Lading Type",BillOfLadingSummaryLine."Bill of Lading Type"::Standard);
      BillOfLadingSummaryLine.SETRANGE(Type,BillOfLadingSummaryLine.Type::Package);
      BillOfLadingSummaryLine.SETRANGE("Package Contains Only Packages",TRUE);
      IF BillOfLadingSummaryLine.FIND('-') THEN
        Palletized := TRUE;
      IF Palletized THEN BEGIN
        BillOfLadingSummaryLine.RESET;
        BillOfLadingSummaryLine.SETRANGE(
        BillOfLadingSummaryLine."Bill of Lading No.",BillOfLading."No.");
        BillOfLadingSummaryLine.SETRANGE(
          "Bill of Lading Type",BillOfLadingSummaryLine."Bill of Lading Type"::Standard);
        BillOfLadingSummaryLine.SETRANGE(Type,BillOfLadingSummaryLine.Type::Package);
        BillOfLadingSummaryLine.SETRANGE("Package Contains Only Packages",FALSE);
        BillOfLadingSummaryLine.SETRANGE("Second Level Package No.",'');
        IF BillOfLadingSummaryLine.FIND('-') THEN
          PalletAndLoosePackages := TRUE;
        LTLNMFCCodeTmp.RESET;
        IF LTLNMFCCodeTmp.FIND('-') THEN
          REPEAT
            BillOfLadingSummaryLine.RESET;
            BillOfLadingSummaryLine.SETRANGE(
            BillOfLadingSummaryLine."Bill of Lading No.",BillOfLading."No.");
            BillOfLadingSummaryLine.SETRANGE(
              "Bill of Lading Type",BillOfLadingSummaryLine."Bill of Lading Type"::Standard);
            BillOfLadingSummaryLine.SETRANGE(Type,BillOfLadingSummaryLine.Type::Package);
            BillOfLadingSummaryLine.SETRANGE("Package Contains Only Packages",TRUE);
            BillOfLadingSummaryLine.SETRANGE("Second Level Package No.",'');
            IF BillOfLadingSummaryLine.FIND('-') THEN
              REPEAT
                PostedPackage.RESET;
                PostedPackage.SETCURRENTKEY("Used on Bill of Lading No.");
                PostedPackage.SETRANGE("Used on Bill of Lading No.",BillOfLading."No.");
                IF PostedPackage."Multi Document Package" THEN BEGIN
                  MultiDocumentPackageNo :=
                    BillOfLadingSummaryLine."No." + '-' +
                      BillOfLadingSummaryLine."Source ID";
                      PostedPackage.SETRANGE("No.",MultiDocumentPackageNo);
                END ELSE
                  PostedPackage.SETRANGE("No.",BillOfLadingSummaryLine."No.");
                IF NOT PostedPackage.FIND('-') THEN BEGIN
                  PostedPackage.RESET;
                  PostedPackage.SETCURRENTKEY("Bill of Lading No.");
                  PostedPackage.SETRANGE("Bill of Lading No.",BillOfLading."No.");
                  IF PostedPackage."Multi Document Package" THEN BEGIN
                    MultiDocumentPackageNo :=
                      BillOfLadingSummaryLine."No." + '-' +
                      BillOfLadingSummaryLine."Source ID";
                    PostedPackage.SETRANGE("No.",MultiDocumentPackageNo);
                  END ELSE
                    PostedPackage.SETRANGE("No.",BillOfLadingSummaryLine."No.");
                END;
                IF PostedPackage.FIND('-') THEN BEGIN
                  PostedPackageLine.RESET;
                  PostedPackageLine.SETRANGE("Package No.",PostedPackage."No.");
                  PostedPackageLine.SETRANGE(Type,PostedPackageLine.Type::Package);
                  IF PostedPackageLine.FIND('-') THEN
                     REPEAT
                       IF PostedPackage2.GET(PostedPackageLine."No.") THEN BEGIN
                         PostedPackageLine2.RESET;
                         PostedPackageLine2.SETRANGE("Package No.",PostedPackage2."No.");
                         PostedPackageLine2.SETRANGE(Type,PostedPackageLine2.Type::Item);
                         PostedPackageLine2.SETFILTER("No.",'<>%1',' ');
                         IF DefaultNMFCCode = LTLNMFCCodeTmp.Code THEN
                           PostedPackageLine2.SETFILTER("NMFC Code",'%1|%2',LTLNMFCCodeTmp.Code,'')
                         ELSE
                           PostedPackageLine2.SETRANGE("NMFC Code",LTLNMFCCodeTmp.Code);
                         IF PostedPackageLine2.FIND('-') THEN
                           CommodityFound := TRUE;
                         IF CommodityFound THEN BEGIN
                           PostedPackageLine2.RESET;
                           PostedPackageLine2.SETRANGE("Package No.",PostedPackage2."No.");
                           PostedPackageLine2.SETRANGE(Type,PostedPackageLine2.Type::Item);
                           IF DefaultNMFCCode = LTLNMFCCodeTmp.Code THEN BEGIN
                             PostedPackageLine2.SETFILTER("NMFC Code",'<>%1','');
                             IF PostedPackageLine2.FIND('-') THEN BEGIN
                               PostedPackageLine2.SETFILTER("NMFC Code",'<>%1',LTLNMFCCodeTmp.Code);
                               IF PostedPackageLine2.FIND('-') THEN
                                 MixedCommodityPallet := TRUE;
                             END;
                         END ELSE BEGIN
                           PostedPackageLine2.SETRANGE("NMFC Code",'');
                           IF NOT PostedPackageLine2.FIND('-') THEN BEGIN
                             PostedPackageLine2.RESET;
                             PostedPackageLine2.SETRANGE("Package No.",PostedPackage2."No.");
                             PostedPackageLine2.SETRANGE(Type,PostedPackageLine2.Type::Item);
                             PostedPackageLine2.SETFILTER("NMFC Code",'<>%1',LTLNMFCCodeTmp.Code);
                             IF PostedPackageLine2.FIND('-') THEN
                               MixedCommodityPallet := TRUE
                           END;
                         END;
                         IF NOT MixedCommodityPallet THEN BEGIN
                           IF PostedPackage2.GET(PostedPackageLine."No.") THEN BEGIN
                             PostedPackageLine2.RESET;
                             PostedPackageLine2.SETRANGE("Package No.",PostedPackage2."No.");
                             PostedPackageLine2.SETRANGE(Type,PostedPackageLine2.Type::Item);
                             PostedPackageLine2.SETFILTER("No.",'<>%1',' ');
                             IF DefaultNMFCCode = LTLNMFCCodeTmp.Code THEN BEGIN
                               PostedPackageLine2.SETFILTER("NMFC Code",'<>%1','');
                               IF PostedPackageLine2.FIND('-') THEN BEGIN
                                 PostedPackageLine2.SETFILTER("NMFC Code",'<>%1',LTLNMFCCodeTmp.Code);
                                 IF PostedPackageLine2.FIND('-') THEN
                                   MixedCommodityPallet := TRUE;
                                 END;
                               END;
                             END;
                           END;
                         END;
                       END;
                     UNTIL (PostedPackageLine.NEXT = 0) OR (MixedCommodityPallet = TRUE);
                END;
              UNTIL (BillOfLadingSummaryLine.NEXT = 0) OR (MixedCommodityPallet = TRUE);
            IF CommodityFound THEN BEGIN
              Pallets := Pallets + 1;
              CommodityFound := FALSE;
            END;
          UNTIL  (LTLNMFCCodeTmp.NEXT = 0) OR (MixedCommodityPallet = TRUE);
      IF (Pallets > 1) AND (MiscPalletsAlways) THEN
        MixedCommodityPallet := TRUE;
      IF MixedCommodityPallet THEN BEGIN
        BillOfLadingSummaryLine.RESET;
        BillOfLadingSummaryLine.SETRANGE(
        BillOfLadingSummaryLine."Bill of Lading No.",BillOfLading."No.");
        BillOfLadingSummaryLine.SETRANGE(
          "Bill of Lading Type",BillOfLadingSummaryLine."Bill of Lading Type"::Standard);
        BillOfLadingSummaryLine.SETRANGE(Type,BillOfLadingSummaryLine.Type::Package);
        BillOfLadingSummaryLine.SETRANGE("Package Contains Only Packages",TRUE);
        BillOfLadingSummaryLine.SETRANGE("Second Level Package No.",'');
        IF BillOfLadingSummaryLine.FIND('-') THEN
          REPEAT
            InsertInfoLine := TRUE;
            IF BillOfLadingSummaryLine."Package No." <> PrevPackNo THEN BEGIN
            TopLevelPackage := TopLevelPackage + 1;
              PrevPackNo := BillOfLadingSummaryLine."Package No.";
            END;
            Value := Value + BillOfLadingSummaryLine.Value;
            Weight := Weight + BillOfLadingSummaryLine.Weight;
            Volume := Volume + BillOfLadingSummaryLine.Volume;
            PostedPackage.RESET;
            PostedPackage.SETCURRENTKEY("Bill of Lading No.");
            PostedPackage.SETRANGE("Bill of Lading No.",BillOfLading."No.");
            IF PostedPackage."Multi Document Package" THEN BEGIN
              MultiDocumentPackageNo :=
                BillOfLadingSummaryLine."No." + '-' +
                  BillOfLadingSummaryLine."Source ID";
                  PostedPackage.SETRANGE("No.",MultiDocumentPackageNo);
            END ELSE
              PostedPackage.SETRANGE("No.",BillOfLadingSummaryLine."No.");
            IF PostedPackage.FIND('-') THEN BEGIN
              PostedPackageLine.RESET;
              PostedPackageLine.SETRANGE("Package No.",PostedPackage."No.");
              PostedPackageLine.SETRANGE(Type,PostedPackageLine.Type::Package);
              PostedPackageLine.SETFILTER(Quantity,'>%1',0);
              IF PostedPackageLine.FIND('-') THEN
                REPEAT
                  LowerLevelPackage := LowerLevelPackage + 1;
                UNTIL PostedPackageLine.NEXT = 0;
            END;

            PostedPackage.RESET;
            PostedPackage.SETCURRENTKEY("Used on Bill of Lading No.");
            PostedPackage.SETRANGE("Used on Bill of Lading No.",BillOfLading."No.");
            IF PostedPackage."Multi Document Package" THEN BEGIN
              MultiDocumentPackageNo :=
                BillOfLadingSummaryLine."No." + '-' +
                  BillOfLadingSummaryLine."Source ID";
                  PostedPackage.SETRANGE("No.",MultiDocumentPackageNo);
            END ELSE
              PostedPackage.SETRANGE("No.",BillOfLadingSummaryLine."No.");
            IF PostedPackage.FIND('-') THEN BEGIN
              PostedPackageLine.RESET;
              PostedPackageLine.SETRANGE("Package No.",PostedPackage."No.");
              PostedPackageLine.SETRANGE(Type,PostedPackageLine.Type::Package);
              PostedPackageLine.SETFILTER(Quantity,'>%1',0);
              IF PostedPackageLine.FIND('-') THEN
                REPEAT
                  LowerLevelPackage := LowerLevelPackage + 1;
                UNTIL PostedPackageLine.NEXT = 0;
            END;

            PostedPackage.RESET;
            PostedPackage.SETCURRENTKEY("Bill of Lading No.");
            PostedPackage.SETRANGE("Bill of Lading No.",BillOfLading."No.");
            IF PostedPackage."Multi Document Package" THEN BEGIN
              MultiDocumentPackageNo :=
                BillOfLadingSummaryLine."No." + '-' +
                  BillOfLadingSummaryLine."Source ID";
                  PostedPackage.SETRANGE("No.",MultiDocumentPackageNo);
            END ELSE
              PostedPackage.SETRANGE("No.",BillOfLadingSummaryLine."No.");
            IF PostedPackage.FIND('-') THEN
              REPEAT
                IF LTLPostedOptionPage.READPERMISSION THEN BEGIN
                  LTLPostedOptionPage.RESET;
                  LTLPostedOptionPage.SETRANGE("No.",PostedPackage."No.");
                  LTLPostedOptionPage.SETRANGE("Dangerous Goods",TRUE);
                  IF LTLPostedOptionPage.FIND('-') THEN
                    DangerousGoods := TRUE;
                END;
              UNTIL (PostedPackage.NEXT = 0) OR (DangerousGoods = TRUE);

            PostedPackage.RESET;
            PostedPackage.SETCURRENTKEY("Used on Bill of Lading No.");
            PostedPackage.SETRANGE("Used on Bill of Lading No.",BillOfLading."No.");
            IF PostedPackage."Multi Document Package" THEN BEGIN
              MultiDocumentPackageNo :=
                BillOfLadingSummaryLine."No." + '-' +
                  BillOfLadingSummaryLine."Source ID";
                  PostedPackage.SETRANGE("No.",MultiDocumentPackageNo);
            END ELSE
              PostedPackage.SETRANGE("No.",BillOfLadingSummaryLine."No.");
            IF PostedPackage.FIND('-') THEN
              REPEAT
                IF LTLPostedOptionPage.READPERMISSION THEN BEGIN
                  LTLPostedOptionPage.RESET;
                  LTLPostedOptionPage.SETRANGE("No.",PostedPackage."No.");
                  LTLPostedOptionPage.SETRANGE("Dangerous Goods",TRUE);
                  IF LTLPostedOptionPage.FIND('-') THEN
                    DangerousGoods := TRUE;
                END;
              UNTIL (PostedPackage.NEXT = 0) OR (DangerousGoods = TRUE);
          UNTIL BillOfLadingSummaryLine.NEXT = 0;
        IF InsertInfoLine THEN BEGIN
          LTLNMFCCodeTmp.RESET;
          IF LTLNMFCCodeTmp.FIND('-') THEN
            ;
          LineNo := 0;
          BillofLadingInfoLine.RESET;
          BillofLadingInfoLine.SETRANGE("Bill of Lading No.",BillOfLading."No.");
          IF BillofLadingInfoLine.FIND('+') THEN
            LineNo := BillofLadingInfoLine."Line No." + 10000
          ELSE
            LineNo := 10000;
          BillofLadingInfoLine.INIT;
          BillofLadingInfoLine."Bill of Lading No." := BillOfLading."No.";
          BillofLadingInfoLine."Line No." := LineNo;
          BillofLadingInfoLine.Type := BillofLadingInfoLine.Type::" ";
          BillofLadingInfoLine."No." := '';
          BillofLadingInfoLine."Info. Line Type" :=
            BillofLadingInfoLine."Info. Line Type"::"Commodity Info.";
          BillofLadingInfoLine.INSERT(TRUE);
          IF MixedCommodityPallet THEN
            BillofLadingInfoLine.Description := 'MIXED PALLET(S)'
          ELSE BEGIN
            BillofLadingInfoLine.Description := LTLNMFCCodeTmp.Description;
            BillofLadingInfoLine."NMFC #" := LTLNMFCCodeTmp.Code;
            BillofLadingInfoLine."LTL Freight Type" := FORMAT(LTLNMFCCodeTmp."Freight Type");
          END;
          BillofLadingInfoLine.Weight := Weight;
          BillofLadingInfoLine.Value := Value;
          BillofLadingInfoLine.Volume := Volume;
          BillofLadingInfoLine."Handling Unit Type" :=
            BillofLadingInfoLine."Handling Unit Type"::Pallets;
          BillofLadingInfoLine."Package Type" :=
            BillofLadingInfoLine."Package Type"::Cartons;
          BillofLadingInfoLine."Hazardous Material" := DangerousGoods;
          IF HazMat THEN
            BillofLadingInfoLine."Hazardous Material" := HazMat;
          BillofLadingInfoLine."HazMat Code" := HazMatItem;
          BillofLadingInfoLine."Packages (Top Level)" := TopLevelPackage;
          BillofLadingInfoLine."Packages (Lower Level)" := LowerLevelPackage;
          BillofLadingInfoLine.MODIFY;
          InsertInfoLine := FALSE;
        END;

        LTLNMFCCodeTmp.RESET;
        IF LTLNMFCCodeTmp.FIND('-') THEN
          REPEAT
            Weight := 0;
            Volume := 0;
            Value := 0;
            TopLevelPackage := 0;
            LowerLevelPackage := 0;
            InsertInfoLine := FALSE;
            CountPackage := FALSE;
            CountOuterPackage := FALSE;
            MixedCommodityPackage := FALSE;
            RoundValue := FALSE;

            BillOfLadingSummaryLine.RESET;
            BillOfLadingSummaryLine.SETRANGE(
            BillOfLadingSummaryLine."Bill of Lading No.",BillOfLading."No.");
            BillOfLadingSummaryLine.SETRANGE(
              "Bill of Lading Type",BillOfLadingSummaryLine."Bill of Lading Type"::Standard);
            BillOfLadingSummaryLine.SETRANGE(Type,BillOfLadingSummaryLine.Type::Package);
            BillOfLadingSummaryLine.SETRANGE("Package Contains Only Packages",TRUE);
            BillOfLadingSummaryLine.SETRANGE("Second Level Package No.",'');
            IF BillOfLadingSummaryLine.FIND('-') THEN
              REPEAT
                PostedPackage.RESET;
                PostedPackage.SETCURRENTKEY("Used on Bill of Lading No.");
                PostedPackage.SETRANGE("Used on Bill of Lading No.",BillOfLading."No.");
                IF PostedPackage."Multi Document Package" THEN BEGIN
                  MultiDocumentPackageNo :=
                    BillOfLadingSummaryLine."No." + '-' +
                    BillOfLadingSummaryLine."Source ID";
                  PostedPackage.SETRANGE("No.",MultiDocumentPackageNo);
                END ELSE
                  PostedPackage.SETRANGE("No.",BillOfLadingSummaryLine."No.");
                IF NOT PostedPackage.FIND('-') THEN BEGIN
                  PostedPackage.RESET;
                  PostedPackage.SETCURRENTKEY("Bill of Lading No.");
                  PostedPackage.SETRANGE("Bill of Lading No.",BillOfLading."No.");
                  IF PostedPackage."Multi Document Package" THEN BEGIN
                    MultiDocumentPackageNo :=
                      BillOfLadingSummaryLine."No." + '-' +
                      BillOfLadingSummaryLine."Source ID";
                    PostedPackage.SETRANGE("No.",MultiDocumentPackageNo);
                  END ELSE
                    PostedPackage.SETRANGE("No.",BillOfLadingSummaryLine."No.");
                END;
                IF PostedPackage.FIND('-') THEN BEGIN
                  MixedCommodityPackage := FALSE;
                  PostedPackageLine.RESET;
                  PostedPackageLine.SETRANGE("Package No.",PostedPackage."No.");
                  IF PostedPackageLine.FIND('-') THEN
                    REPEAT
                      CountPackage := FALSE;
                      IF PostedPackage2.GET(PostedPackageLine."No.") THEN BEGIN
                        PostedPackageLine2.RESET;
                        PostedPackageLine2.SETRANGE("Package No.",PostedPackage2."No.");
                        PostedPackageLine2.SETRANGE(Type,PostedPackageLine2.Type::Item);
                        PostedPackageLine2.SETFILTER("No.",'<>%1',' ');
                        IF DefaultNMFCCode = LTLNMFCCodeTmp.Code THEN
                          PostedPackageLine2.SETFILTER("NMFC Code",'%1|%2',LTLNMFCCodeTmp.Code,'')
                        ELSE
                          PostedPackageLine2.SETRANGE("NMFC Code",LTLNMFCCodeTmp.Code);
                        IF PostedPackageLine2.FIND('-') THEN
                          CountPackage := TRUE;
                        IF CountPackage THEN BEGIN
                          InsertInfoLine := TRUE;
                          IF LTLPostedOptionPage.READPERMISSION THEN BEGIN
                            LTLPostedOptionPage.RESET;
                            LTLPostedOptionPage.SETRANGE("No.",PostedPackage2."No.");
                            LTLPostedOptionPage.SETRANGE("Dangerous Goods",TRUE);
                            IF LTLPostedOptionPage.FIND('-') THEN
                              DangerousGoods := TRUE;
                          END;
                          PostedPackageLine2.RESET;
                          PostedPackageLine2.SETRANGE("Package No.",PostedPackage2."No.");
                          PostedPackageLine2.SETRANGE(Type,PostedPackageLine2.Type::Item);
                          PostedPackageLine2.SETFILTER("No.",'<>%1',' ');
                          IF DefaultNMFCCode = LTLNMFCCodeTmp.Code THEN BEGIN
                            PostedPackageLine2.SETFILTER("NMFC Code",'<>%1','');
                            IF PostedPackageLine2.FIND('-') THEN BEGIN
                              PostedPackageLine2.SETFILTER("NMFC Code",'<>%1',LTLNMFCCodeTmp.Code);
                              IF PostedPackageLine2.FIND('-') THEN
                                MixedCommodityPackage := TRUE;
                            END;
                          END ELSE BEGIN
                            PostedPackageLine2.SETRANGE("NMFC Code",'');
                            IF PostedPackageLine2.FIND('-') THEN
                              MixedCommodityPackage := TRUE;
                            IF NOT MixedCommodityPackage THEN BEGIN
                              PostedPackageLine2.SETFILTER("NMFC Code",'<>%1',LTLNMFCCodeTmp.Code);
                              IF PostedPackageLine2.FIND('-') THEN
                                MixedCommodityPackage := TRUE;
                            END;
                          END;
                          IF NOT MixedCommodityPackage THEN BEGIN
                            Value := Value + PostedPackage2."Calculation Value";
                            Weight := Weight + PostedPackage2."Calculation Weight";
                            Volume := Volume + PostedPackage2."Calculation Volume";
                          END ELSE BEGIN
                            PostedPackageLine2.RESET;
                            PostedPackageLine2.SETRANGE("Package No.",PostedPackage2."No.");
                            PostedPackageLine2.SETRANGE(Type,PostedPackageLine2.Type::Item);
                            PostedPackageLine2.SETFILTER("No.",'<>%1',' ');
                            IF DefaultNMFCCode = LTLNMFCCodeTmp.Code THEN BEGIN
                              PostedPackageLine2.SETRANGE("NMFC Code",'');
                              IF PostedPackageLine2.FIND('-') THEN
                                REPEAT
                                  CASE ShippingSetup."Declare Value As" OF
                                    ShippingSetup."Declare Value As"::Cost:
                                      Value := Value + PostedPackageLine2."Value (Cost)";
                                    ShippingSetup."Declare Value As"::Price:
                                      Value := Value + PostedPackageLine2."Value (Price)";
                                  END;
                                  CASE ShippingSetup."Actual Weight as" OF
                                    ShippingSetup."Actual Weight as"::"Net Weight":
                                      Weight := Weight + PostedPackageLine2."Net Weight";
                                    ShippingSetup."Actual Weight as"::"Gross Weight":
                                      Weight := Weight + PostedPackageLine2."Gross Weight";
                                    ShippingSetup."Actual Weight as"::"Dimmed Weight":
                                      Weight := Weight + PostedPackageLine2."Dim. Weight";
                                    ShippingSetup."Actual Weight as"::"Unit of Measure Weight":
                                      Weight := Weight + PostedPackageLine2."Unit of Measure Weight";
                                  END;
                                  CASE ShippingSetup."Actual Volume as" OF
                                    ShippingSetup."Actual Volume as"::"Unit Volume":
                                      Volume := Volume + PostedPackageLine2.Volume;
                                    ShippingSetup."Actual Volume as"::Cubage:
                                      Volume := Volume + PostedPackageLine2.Cubage;
                                  END;
                                UNTIL PostedPackageLine2.NEXT = 0;
                            END;
                            PostedPackageLine2.RESET;
                            PostedPackageLine2.SETRANGE("Package No.",PostedPackage2."No.");
                            PostedPackageLine2.SETRANGE(Type,PostedPackageLine2.Type::Item);
                            PostedPackageLine2.SETFILTER("No.",'<>%1',' ');
                            PostedPackageLine2.SETRANGE("NMFC Code",LTLNMFCCodeTmp.Code);
                            IF PostedPackageLine2.FIND('-') THEN
                              REPEAT
                                CASE ShippingSetup."Declare Value As" OF
                                  ShippingSetup."Declare Value As"::Cost:
                                    Value := Value + PostedPackageLine2."Value (Cost)";
                                  ShippingSetup."Declare Value As"::Price:
                                    Value := Value + PostedPackageLine2."Value (Price)";
                                END;
                                CASE ShippingSetup."Actual Weight as" OF
                                  ShippingSetup."Actual Weight as"::"Net Weight":
                                    Weight := Weight + PostedPackageLine2."Net Weight";
                                  ShippingSetup."Actual Weight as"::"Gross Weight":
                                    Weight := Weight + PostedPackageLine2."Gross Weight";
                                  ShippingSetup."Actual Weight as"::"Dimmed Weight":
                                    Weight := Weight + PostedPackageLine2."Dim. Weight";
                                  ShippingSetup."Actual Weight as"::"Unit of Measure Weight":
                                    Weight := Weight + PostedPackageLine2."Unit of Measure Weight";
                                END;
                                CASE ShippingSetup."Actual Volume as" OF
                                  ShippingSetup."Actual Volume as"::"Unit Volume":
                                    Volume := Volume + PostedPackageLine2.Volume;
                                  ShippingSetup."Actual Volume as"::Cubage:
                                    Volume := Volume + PostedPackageLine2.Cubage;
                                END;
                              UNTIL PostedPackageLine2.NEXT = 0;
                          END;
                        END;
                      END;
                      IF CountPackage THEN BEGIN
                        TopLevelPackage := TopLevelPackage + 1;
                        IF MixedCommodityPackage THEN
                          RoundValue := TRUE;
                      END;
                    UNTIL PostedPackageLine.NEXT = 0;
                END;
              UNTIL BillOfLadingSummaryLine.NEXT = 0;
            IF InsertInfoLine THEN BEGIN
              LineNo := 0;
              IF RoundValue THEN
                Weight := ROUND(Weight,1,'>');
              BillofLadingInfoLine.RESET;
              BillofLadingInfoLine.SETRANGE("Bill of Lading No.",BillOfLading."No.");
              IF BillofLadingInfoLine.FIND('+') THEN
                LineNo := BillofLadingInfoLine."Line No." + 10000
              ELSE
                LineNo := 10000;
              BillofLadingInfoLine.INIT;
              BillofLadingInfoLine."Bill of Lading No." := BillOfLading."No.";
              BillofLadingInfoLine."Line No." := LineNo;
              BillofLadingInfoLine.Type := BillofLadingInfoLine.Type::" ";
              BillofLadingInfoLine."No." := '';
              BillofLadingInfoLine."Info. Line Type" :=
                BillofLadingInfoLine."Info. Line Type"::"Commodity Info.";
              BillofLadingInfoLine.INSERT(TRUE);
              BillofLadingInfoLine.Description := LTLNMFCCodeTmp.Description;
              BillofLadingInfoLine."NMFC #" := LTLNMFCCodeTmp.Code;
              BillofLadingInfoLine."LTL Freight Type" := FORMAT(LTLNMFCCodeTmp."Freight Type");
              BillofLadingInfoLine.Weight := Weight;
              BillofLadingInfoLine.Value := Value;
              BillofLadingInfoLine.Volume := Volume;
              BillofLadingInfoLine."Handling Unit Type" :=
                BillofLadingInfoLine."Handling Unit Type"::" ";
              BillofLadingInfoLine."Package Type" :=
                BillofLadingInfoLine."Package Type"::" ";
              BillofLadingInfoLine."Hazardous Material" := DangerousGoods;
              IF HazMat THEN
                BillofLadingInfoLine."Hazardous Material" := HazMat;
              BillofLadingInfoLine."HazMat Code" := HazMatItem;
              BillofLadingInfoLine."Packages (Top Level)" := 0;
              BillofLadingInfoLine."Packages (Lower Level)" := LowerLevelPackage;
              BillofLadingInfoLine.MODIFY;
              InsertInfoLine := FALSE;
            END;
          UNTIL LTLNMFCCodeTmp.NEXT = 0;
      END ELSE BEGIN
        LTLNMFCCodeTmp.RESET;
        IF LTLNMFCCodeTmp.FIND('-') THEN
          REPEAT
            CountPackage := FALSE;
            InsertInfoLine := FALSE;
            CountOuterPackage := FALSE;
            Value := 0;
            Weight := 0;
            Volume := 0;
            LowerLevelPackage := 0;
            TopLevelPackage := 0;
            BillOfLadingSummaryLine.RESET;
            BillOfLadingSummaryLine.SETRANGE(
            BillOfLadingSummaryLine."Bill of Lading No.",BillOfLading."No.");
            BillOfLadingSummaryLine.SETRANGE(
              "Bill of Lading Type",BillOfLadingSummaryLine."Bill of Lading Type"::Standard);
            BillOfLadingSummaryLine.SETRANGE(Type,BillOfLadingSummaryLine.Type::Package);
            BillOfLadingSummaryLine.SETRANGE("Package Contains Only Packages",TRUE);
            BillOfLadingSummaryLine.SETRANGE("Second Level Package No.",'');
            IF BillOfLadingSummaryLine.FIND('-') THEN
              REPEAT
                PostedPackage.RESET;
                PostedPackage.SETCURRENTKEY("Used on Bill of Lading No.");
                PostedPackage.SETRANGE("Used on Bill of Lading No.",BillOfLading."No.");
                IF PostedPackage."Multi Document Package" THEN BEGIN
                  MultiDocumentPackageNo :=
                    BillOfLadingSummaryLine."No." + '-' +
                      BillOfLadingSummaryLine."Source ID";
                      PostedPackage.SETRANGE("No.",MultiDocumentPackageNo);
                END ELSE
                  PostedPackage.SETRANGE("No.",BillOfLadingSummaryLine."No.");
                IF NOT PostedPackage.FIND('-') THEN BEGIN
                  PostedPackage.RESET;
                  PostedPackage.SETCURRENTKEY("Bill of Lading No.");
                  PostedPackage.SETRANGE("Bill of Lading No.",BillOfLading."No.");
                  IF PostedPackage."Multi Document Package" THEN BEGIN
                    MultiDocumentPackageNo :=
                      BillOfLadingSummaryLine."No." + '-' +
                        BillOfLadingSummaryLine."Source ID";
                        PostedPackage.SETRANGE("No.",MultiDocumentPackageNo);
                  END ELSE
                    PostedPackage.SETRANGE("No.",BillOfLadingSummaryLine."No.");
                END;
                IF PostedPackage.FIND('-') THEN
                  REPEAT
                    IF LTLPostedOptionPage.READPERMISSION THEN BEGIN
                      LTLPostedOptionPage.RESET;
                      LTLPostedOptionPage.SETRANGE("No.",PostedPackage2."No.");
                      LTLPostedOptionPage.SETRANGE("Dangerous Goods",TRUE);
                      IF LTLPostedOptionPage.FIND('-') THEN
                        DangerousGoods := TRUE;
                    END;
                    PostedPackageLine.RESET;
                    PostedPackageLine.SETRANGE("Package No.",PostedPackage."No.");
                    PostedPackageLine.SETRANGE(Type,PostedPackageLine.Type::Package);
                    PostedPackageLine.SETFILTER(Quantity,'>%1',0);
                    IF PostedPackageLine.FIND('-') THEN
                      REPEAT
                        CountPackage := FALSE;
                        IF PostedPackage2.GET(PostedPackageLine."No.") THEN BEGIN
                          PostedPackageLine2.RESET;
                          PostedPackageLine2.SETRANGE("Package No.",PostedPackage2."No.");
                          PostedPackageLine2.SETRANGE(Type,PostedPackageLine2.Type::Item);
                          PostedPackageLine2.SETFILTER("No.",'<>%1',' ');
                          IF DefaultNMFCCode = LTLNMFCCodeTmp.Code THEN
                            PostedPackageLine2.SETFILTER("NMFC Code",'%1|%2',LTLNMFCCodeTmp.Code,'')
                          ELSE
                            PostedPackageLine2.SETRANGE("NMFC Code",LTLNMFCCodeTmp.Code);
                          IF PostedPackageLine2.FIND('-') THEN BEGIN
                            CountPackage := TRUE;
                            LowerLevelPackage := LowerLevelPackage + 1;
                            InsertInfoLine := TRUE;
                          END;
                          IF LTLPostedOptionPage.READPERMISSION THEN BEGIN
                            LTLPostedOptionPage.RESET;
                            LTLPostedOptionPage.SETRANGE("No.",PostedPackage2."No.");
                            LTLPostedOptionPage.SETRANGE("Dangerous Goods",TRUE);
                            IF LTLPostedOptionPage.FIND('-') THEN
                              DangerousGoods := TRUE;
                          END;
                        END;
                      UNTIL (PostedPackageLine.NEXT = 0);
                  UNTIL PostedPackage.NEXT = 0;
                  IF CountPackage THEN BEGIN
                    TopLevelPackage := TopLevelPackage + 1;
                    Value := Value + PostedPackage."Calculation Value";
                    Weight := Weight + PostedPackage."Calculation Weight";
                    Volume := Volume + PostedPackage."Calculation Volume";
                    CountPackage := FALSE;
                  END;
              UNTIL (BillOfLadingSummaryLine.NEXT = 0);
            IF InsertInfoLine THEN BEGIN
               LineNo := 0;
                  BillofLadingInfoLine.SETRANGE("Bill of Lading No.",BillOfLading."No.");
                    IF BillofLadingInfoLine.FIND('+') THEN
                      LineNo := BillofLadingInfoLine."Line No." + 10000
                    ELSE
                      LineNo := 10000;
                    BillofLadingInfoLine.INIT;
                    BillofLadingInfoLine."Bill of Lading No." := BillOfLading."No.";
                    BillofLadingInfoLine."Line No." := LineNo;
                    BillofLadingInfoLine.Type := BillofLadingInfoLine.Type::" ";
                    BillofLadingInfoLine."No." := '';
                    BillofLadingInfoLine."Info. Line Type" :=
                    BillofLadingInfoLine."Info. Line Type"::"Commodity Info.";
                    BillofLadingInfoLine.INSERT(TRUE);
                    BillofLadingInfoLine.Description := LTLNMFCCodeTmp.Description;
                    BillofLadingInfoLine."NMFC #" := LTLNMFCCodeTmp.Code;
                    BillofLadingInfoLine."LTL Freight Type" := FORMAT(LTLNMFCCodeTmp."Freight Type");
                    BillofLadingInfoLine.Weight := Weight;
                    BillofLadingInfoLine.Value := Value;
                    BillofLadingInfoLine.Volume := Volume;
                    BillofLadingInfoLine."Handling Unit Type" :=
                      BillofLadingInfoLine."Handling Unit Type"::Pallets;
                    BillofLadingInfoLine."Package Type" :=
                      BillofLadingInfoLine."Package Type"::Cartons;
                    BillofLadingInfoLine."Hazardous Material" := DangerousGoods;
                    IF HazMat THEN
                      BillofLadingInfoLine."Hazardous Material" := HazMat;
                    BillofLadingInfoLine."HazMat Code" := HazMatItem;
                    BillofLadingInfoLine."Packages (Top Level)" := TopLevelPackage;
                    BillofLadingInfoLine."Packages (Lower Level)" := LowerLevelPackage;
                    BillofLadingInfoLine.MODIFY;
                    InsertInfoLine := FALSE
              END;
            UNTIL (LTLNMFCCodeTmp.NEXT = 0);
          END;
          IF PalletAndLoosePackages THEN BEGIN
            LTLNMFCCodeTmp.RESET;
            IF LTLNMFCCodeTmp.FIND('-') THEN
              REPEAT
                Value := 0;
                Weight := 0;
                Volume := 0;
                InsertInfoLine := FALSE;
                RoundValue := FALSE;
                TopLevelPackage := 0;
                Palletized := FALSE;

                BillOfLadingSummaryLine.RESET;
                BillOfLadingSummaryLine.SETRANGE(
                BillOfLadingSummaryLine."Bill of Lading No.",BillOfLading."No.");
                BillOfLadingSummaryLine.SETRANGE(
                  "Bill of Lading Type",BillOfLadingSummaryLine."Bill of Lading Type"::Standard);
                BillOfLadingSummaryLine.SETRANGE(Type,BillOfLadingSummaryLine.Type::Package);
                BillOfLadingSummaryLine.SETRANGE("Package Contains Only Packages",FALSE);
                BillOfLadingSummaryLine.SETRANGE("Second Level Package No.",'');
                IF BillOfLadingSummaryLine.FIND('-') THEN
                  REPEAT
                    DangerousGoods := FALSE;
                    CommodityFound := FALSE;
                    CountPackage := FALSE;
                    PostedPackage.RESET;
                    PostedPackage.SETCURRENTKEY("Used on Bill of Lading No.");
                    PostedPackage.SETRANGE("Used on Bill of Lading No.",BillOfLading."No.");
                    IF PostedPackage."Multi Document Package" THEN BEGIN
                      MultiDocumentPackageNo :=
                        BillOfLadingSummaryLine."No." + '-' +
                          BillOfLadingSummaryLine."Source ID";
                          PostedPackage.SETRANGE("No.",MultiDocumentPackageNo);
                    END ELSE
                      PostedPackage.SETRANGE("No.",BillOfLadingSummaryLine."No.");
                    IF NOT PostedPackage.FIND('-') THEN BEGIN
                      PostedPackage.RESET;
                      PostedPackage.SETCURRENTKEY("Bill of Lading No.");
                      PostedPackage.SETRANGE("Bill of Lading No.",BillOfLading."No.");
                      IF PostedPackage."Multi Document Package" THEN BEGIN
                        MultiDocumentPackageNo :=
                          BillOfLadingSummaryLine."No." + '-' +
                          BillOfLadingSummaryLine."Source ID";
                        PostedPackage.SETRANGE("No.",MultiDocumentPackageNo);
                      END ELSE
                        PostedPackage.SETRANGE("No.",BillOfLadingSummaryLine."No.");
                    END;
                    IF PostedPackage.FIND('-') THEN BEGIN
                      REPEAT
                        IF LTLPostedOptionPage.READPERMISSION THEN BEGIN
                          LTLPostedOptionPage.RESET;
                          LTLPostedOptionPage.SETRANGE("No.",PostedPackage."No.");
                          LTLPostedOptionPage.SETRANGE("Dangerous Goods",TRUE);
                          IF LTLPostedOptionPage.FIND('-') THEN
                            DangerousGoods := TRUE;
                        END;

                        MixedCommodityPackage := FALSE;
                        PostedPackageLine.RESET;
                        PostedPackageLine.SETRANGE("Package No.",PostedPackage."No.");
                        PostedPackageLine.SETRANGE(Type,PostedPackageLine.Type::Item);
                        PostedPackageLine.SETFILTER("No.",'<>%1',' ');
                        PostedPackageLine.SETRANGE("NMFC Code",LTLNMFCCodeTmp.Code);
                        IF DefaultNMFCCode = LTLNMFCCodeTmp.Code THEN
                          PostedPackageLine.SETFILTER("NMFC Code",'%1|%2',LTLNMFCCodeTmp.Code,'')
                        ELSE
                          PostedPackageLine.SETRANGE("NMFC Code",LTLNMFCCodeTmp.Code);
                        IF NOT PostedPackageLine.FIND('-') THEN BEGIN
                          IF LTLNMFCCodeTmp.Code = DefaultNMFCCode THEN
                            PostedPackageLine.SETRANGE("NMFC Code",'');
                        END;
                        IF PostedPackageLine.FIND('-') THEN
                          REPEAT
                            CountPackage := TRUE;
                            InsertInfoLine := TRUE;
                          UNTIL (PostedPackageLine.NEXT = 0) OR (CountPackage = TRUE);
                        IF CountPackage THEN BEGIN
                          MixedCommodityPackage := FALSE;
                          IF PostedPackage2.GET(PostedPackage."No.") THEN BEGIN
                            PostedPackageLine2.RESET;
                            PostedPackageLine2.SETRANGE("Package No.",PostedPackage2."No.");
                            PostedPackageLine2.SETRANGE(Type,PostedPackageLine2.Type::Item);
                            PostedPackageLine2.SETFILTER("No.",'<>%1',' ');
                            IF DefaultNMFCCode = LTLNMFCCodeTmp.Code THEN BEGIN
                              PostedPackageLine2.SETFILTER("NMFC Code",'<>%1','');
                              IF PostedPackageLine2.FIND('-') THEN BEGIN
                                PostedPackageLine2.SETFILTER("NMFC Code",'<>%1',LTLNMFCCodeTmp.Code);
                                IF PostedPackageLine2.FIND('-') THEN
                                  MixedCommodityPackage := TRUE;
                              END;
                            END ELSE BEGIN
                              PostedPackageLine2.SETRANGE("NMFC Code",'');
                              IF PostedPackageLine2.FIND('-') THEN
                                MixedCommodityPackage := TRUE;
                              IF NOT MixedCommodityPackage THEN BEGIN
                                PostedPackageLine2.SETFILTER("NMFC Code",'<>%1',LTLNMFCCodeTmp.Code);
                                IF PostedPackageLine2.FIND('-') THEN
                                  MixedCommodityPackage := TRUE;
                              END;
                            END;
                            IF NOT MixedCommodityPackage THEN BEGIN
                              Value := Value + PostedPackage2."Calculation Value";
                              Weight := Weight + PostedPackage2."Calculation Weight";
                              Volume := Volume + PostedPackage2."Calculation Volume";
                            END ELSE BEGIN
                              IF PostedPackage2.GET(PostedPackage."No.") THEN BEGIN
                                PostedPackageLine2.RESET;
                                PostedPackageLine2.SETRANGE("Package No.",PostedPackage2."No.");
                                PostedPackageLine2.SETRANGE(Type,PostedPackageLine2.Type::Item);
                                PostedPackageLine2.SETFILTER("No.",'<>%1',' ');
                                IF DefaultNMFCCode = LTLNMFCCodeTmp.Code THEN BEGIN
                                  PostedPackageLine2.SETRANGE("NMFC Code",'');
                                  IF PostedPackageLine2.FIND('-') THEN
                                    REPEAT
                                      CASE ShippingSetup."Declare Value As" OF
                                        ShippingSetup."Declare Value As"::Cost:
                                          Value := Value + PostedPackageLine2."Value (Cost)";
                                        ShippingSetup."Declare Value As"::Price:
                                          Value := Value + PostedPackageLine2."Value (Price)";
                                      END;
                                      CASE ShippingSetup."Actual Weight as" OF
                                        ShippingSetup."Actual Weight as"::"Net Weight":
                                          Weight := Weight + PostedPackageLine2."Net Weight";
                                        ShippingSetup."Actual Weight as"::"Gross Weight":
                                          Weight := Weight + PostedPackageLine2."Gross Weight";
                                        ShippingSetup."Actual Weight as"::"Dimmed Weight":
                                          Weight := Weight + PostedPackageLine2."Dim. Weight";
                                        ShippingSetup."Actual Weight as"::"Unit of Measure Weight":
                                          Weight := Weight + PostedPackageLine2."Unit of Measure Weight";
                                      END;
                                      CASE ShippingSetup."Actual Volume as" OF
                                        ShippingSetup."Actual Volume as"::"Unit Volume":
                                          Volume := Volume + PostedPackageLine2.Volume;
                                        ShippingSetup."Actual Volume as"::Cubage:
                                          Volume := Volume + PostedPackageLine2.Cubage;
                                      END;
                                   UNTIL PostedPackageLine2.NEXT = 0;
                                END;
                                PostedPackageLine2.RESET;
                                PostedPackageLine2.SETRANGE("Package No.",PostedPackage2."No.");
                                PostedPackageLine2.SETRANGE(Type,PostedPackageLine2.Type::Item);
                                PostedPackageLine2.SETFILTER("No.",'<>%1',' ');
                                PostedPackageLine2.SETRANGE("NMFC Code",LTLNMFCCodeTmp.Code);
                                IF PostedPackageLine2.FIND('-') THEN
                                  REPEAT
                                    CASE ShippingSetup."Declare Value As" OF
                                      ShippingSetup."Declare Value As"::Cost:
                                        Value := Value + PostedPackageLine2."Value (Cost)";
                                      ShippingSetup."Declare Value As"::Price:
                                        Value := Value + PostedPackageLine2."Value (Price)";
                                    END;
                                    CASE ShippingSetup."Actual Weight as" OF
                                      ShippingSetup."Actual Weight as"::"Net Weight":
                                        Weight := Weight + PostedPackageLine2."Net Weight";
                                      ShippingSetup."Actual Weight as"::"Gross Weight":
                                        Weight := Weight + PostedPackageLine2."Gross Weight";
                                      ShippingSetup."Actual Weight as"::"Dimmed Weight":
                                        Weight := Weight + PostedPackageLine2."Dim. Weight";
                                      ShippingSetup."Actual Weight as"::"Unit of Measure Weight":
                                        Weight := Weight + PostedPackageLine2."Unit of Measure Weight";
                                    END;
                                    CASE ShippingSetup."Actual Volume as" OF
                                      ShippingSetup."Actual Volume as"::"Unit Volume":
                                        Volume := Volume + PostedPackageLine2.Volume;
                                      ShippingSetup."Actual Volume as"::Cubage:
                                        Volume := Volume + PostedPackageLine2.Cubage;
                                    END;
                                  UNTIL PostedPackageLine2.NEXT = 0;
                                END;
                              END;
                            END;
                        END;
                        IF CountPackage THEN BEGIN
                          TopLevelPackage := TopLevelPackage + 1;
                          IF MixedCommodityPackage THEN
                            RoundValue := TRUE;
                        END;
                      UNTIL PostedPackage.NEXT = 0;
                    END;
                  UNTIL BillOfLadingSummaryLine.NEXT = 0;
                IF InsertInfoLine THEN BEGIN
                  LineNo := 0;
                  IF RoundValue THEN
                    Weight := ROUND(Weight,1,'>');
                  BillofLadingInfoLine.RESET;
                  BillofLadingInfoLine.SETRANGE("Bill of Lading No.",BillOfLading."No.");
                  IF BillofLadingInfoLine.FIND('+') THEN
                    LineNo := BillofLadingInfoLine."Line No." + 10000
                  ELSE
                    LineNo := 10000;
                  BillofLadingInfoLine."Bill of Lading No." := BillOfLading."No.";
                  BillofLadingInfoLine."Line No." := LineNo;
                  BillofLadingInfoLine.Type := BillofLadingInfoLine.Type::" ";
                  BillofLadingInfoLine."No." := '';
                  BillofLadingInfoLine."Info. Line Type" :=
                  BillofLadingInfoLine."Info. Line Type"::"Commodity Info.";
                  BillofLadingInfoLine.INSERT(TRUE);
                  BillofLadingInfoLine.Description := LTLNMFCCodeTmp.Description;
                  BillofLadingInfoLine."NMFC #" := LTLNMFCCodeTmp.Code;
                  BillofLadingInfoLine."LTL Freight Type" := FORMAT(LTLNMFCCodeTmp."Freight Type");
                  BillofLadingInfoLine.Weight := Weight;
                  BillofLadingInfoLine.Value := Value;
                  BillofLadingInfoLine.Volume := Volume;
                  BillofLadingInfoLine."Handling Unit Type" :=
                    BillofLadingInfoLine."Handling Unit Type"::Cartons;
                  BillofLadingInfoLine."Package Type" :=
                    BillofLadingInfoLine."Package Type"::" ";
                  BillofLadingInfoLine."Hazardous Material" := DangerousGoods;
                  IF HazMat THEN
                    BillofLadingInfoLine."Hazardous Material" := HazMat;
                  BillofLadingInfoLine."HazMat Code" := HazMatItem;
                  BillofLadingInfoLine."Packages (Top Level)" := TopLevelPackage;
                  BillofLadingInfoLine."Packages (Lower Level)" := 0;
                  BillofLadingInfoLine.MODIFY;
                  InsertInfoLine := FALSE;
                END;
                LowerLevelPackage := 0;
                TopLevelPackage := 0;
              UNTIL LTLNMFCCodeTmp.NEXT = 0;
            END;
          END ELSE BEGIN
            LTLNMFCCodeTmp.RESET;
            IF LTLNMFCCodeTmp.FIND('-') THEN
              REPEAT
                Value := 0;
                Weight := 0;
                Volume := 0;
                InsertInfoLine := FALSE;
                TopLevelPackage := 0;
                Palletized := FALSE;
                RoundValue := FALSE;

                BillOfLadingSummaryLine.RESET;
                BillOfLadingSummaryLine.SETRANGE(
                BillOfLadingSummaryLine."Bill of Lading No.",BillOfLading."No.");
                BillOfLadingSummaryLine.SETRANGE(
                  "Bill of Lading Type",BillOfLadingSummaryLine."Bill of Lading Type"::Standard);
                BillOfLadingSummaryLine.SETRANGE(Type,BillOfLadingSummaryLine.Type::Package);
                BillOfLadingSummaryLine.SETRANGE("Package Contains Only Packages",FALSE);
                BillOfLadingSummaryLine.SETRANGE("Second Level Package No.",'');
                IF BillOfLadingSummaryLine.FIND('-') THEN
                  REPEAT
                    DangerousGoods := FALSE;
                    CommodityFound := FALSE;
                    CountPackage := FALSE;
                    PostedPackage.RESET;
                    PostedPackage.SETCURRENTKEY("Used on Bill of Lading No.");
                    PostedPackage.SETRANGE("Used on Bill of Lading No.",BillOfLading."No.");
                    IF PostedPackage."Multi Document Package" THEN BEGIN
                      MultiDocumentPackageNo :=
                        BillOfLadingSummaryLine."No." + '-' +
                        BillOfLadingSummaryLine."Source ID";
                      PostedPackage.SETRANGE("No.",MultiDocumentPackageNo);
                    END ELSE
                      PostedPackage.SETRANGE("No.",BillOfLadingSummaryLine."No.");
                    IF NOT PostedPackage.FIND('-') THEN BEGIN
                      PostedPackage.RESET;
                      PostedPackage.SETCURRENTKEY("Bill of Lading No.");
                      PostedPackage.SETRANGE("Bill of Lading No.",BillOfLading."No.");
                      IF PostedPackage."Multi Document Package" THEN BEGIN
                        MultiDocumentPackageNo :=
                          BillOfLadingSummaryLine."No." + '-' +
                          BillOfLadingSummaryLine."Source ID";
                        PostedPackage.SETRANGE("No.",MultiDocumentPackageNo);
                      END ELSE
                        PostedPackage.SETRANGE("No.",BillOfLadingSummaryLine."No.");
                    END;
                    IF PostedPackage.FIND('-') THEN BEGIN
                      REPEAT
                        IF LTLPostedOptionPage.READPERMISSION THEN BEGIN
                          LTLPostedOptionPage.RESET;
                          LTLPostedOptionPage.SETRANGE("No.",PostedPackage."No.");
                          LTLPostedOptionPage.SETRANGE("Dangerous Goods",TRUE);
                          IF LTLPostedOptionPage.FIND('-') THEN
                            DangerousGoods := TRUE;
                        END;

                        MixedCommodityPackage := FALSE;
                        PostedPackageLine.RESET;
                        PostedPackageLine.SETRANGE("Package No.",PostedPackage."No.");
                        PostedPackageLine.SETRANGE(Type,PostedPackageLine.Type::Item);
                        PostedPackageLine.SETFILTER("No.",'<>%1',' ');
                        IF DefaultNMFCCode = LTLNMFCCodeTmp.Code THEN
                          PostedPackageLine.SETFILTER("NMFC Code",'%1|%2',LTLNMFCCodeTmp.Code,'')
                        ELSE
                          PostedPackageLine.SETRANGE("NMFC Code",LTLNMFCCodeTmp.Code);
                        IF NOT PostedPackageLine.FIND('-') THEN BEGIN
                          IF LTLNMFCCodeTmp.Code = DefaultNMFCCode THEN
                            PostedPackageLine.SETRANGE("NMFC Code",'');
                        END;
                        IF PostedPackageLine.FIND('-') THEN
                          REPEAT
                            CountPackage := TRUE;
                            InsertInfoLine := TRUE;
                          UNTIL (PostedPackageLine.NEXT = 0) OR (CountPackage = TRUE);
                        IF CountPackage THEN BEGIN
                          MixedCommodityPackage := FALSE;
                          IF PostedPackage2.GET(PostedPackage."No.") THEN BEGIN
                            PostedPackageLine2.RESET;
                            PostedPackageLine2.SETRANGE("Package No.",PostedPackage2."No.");
                            PostedPackageLine2.SETRANGE(Type,PostedPackageLine2.Type::Item);
                            PostedPackageLine2.SETFILTER("No.",'<>%1',' ');
                            IF DefaultNMFCCode = LTLNMFCCodeTmp.Code THEN BEGIN
                              PostedPackageLine2.SETFILTER("NMFC Code",'<>%1','');
                              IF PostedPackageLine2.FIND('-') THEN BEGIN
                                PostedPackageLine2.SETFILTER("NMFC Code",'<>%1',LTLNMFCCodeTmp.Code);
                                IF PostedPackageLine2.FIND('-') THEN
                                  MixedCommodityPackage := TRUE;
                              END;
                            END ELSE BEGIN
                              PostedPackageLine2.SETRANGE("NMFC Code",'');
                              IF PostedPackageLine2.FIND('-') THEN
                                MixedCommodityPackage := TRUE;
                              IF NOT MixedCommodityPackage THEN BEGIN
                                PostedPackageLine2.SETFILTER("NMFC Code",'<>%1',LTLNMFCCodeTmp.Code);
                                IF PostedPackageLine2.FIND('-') THEN
                                  MixedCommodityPackage := TRUE;
                              END;
                            END;
                            IF NOT MixedCommodityPackage THEN BEGIN
                              Value := Value + PostedPackage2."Calculation Value";
                              Weight := Weight + PostedPackage2."Calculation Weight";
                              Volume := Volume + PostedPackage2."Calculation Volume";
                            END ELSE BEGIN
                              IF PostedPackage2.GET(PostedPackage."No.") THEN BEGIN
                                PostedPackageLine2.RESET;
                                PostedPackageLine2.SETRANGE("Package No.",PostedPackage2."No.");
                                PostedPackageLine2.SETRANGE(Type,PostedPackageLine2.Type::Item);
                                PostedPackageLine2.SETFILTER("No.",'<>%1',' ');
                                IF DefaultNMFCCode = LTLNMFCCodeTmp.Code THEN BEGIN
                                  PostedPackageLine2.SETRANGE("NMFC Code",'');
                                  IF PostedPackageLine2.FIND('-') THEN
                                    REPEAT
                                      CASE ShippingSetup."Declare Value As" OF
                                        ShippingSetup."Declare Value As"::Cost:
                                          Value := Value + PostedPackageLine2."Value (Cost)";
                                        ShippingSetup."Declare Value As"::Price:
                                          Value := Value + PostedPackageLine2."Value (Price)";
                                      END;
                                      CASE ShippingSetup."Actual Weight as" OF
                                        ShippingSetup."Actual Weight as"::"Net Weight":
                                          Weight := Weight + PostedPackageLine2."Net Weight";
                                        ShippingSetup."Actual Weight as"::"Gross Weight":
                                          Weight := Weight + PostedPackageLine2."Gross Weight";
                                        ShippingSetup."Actual Weight as"::"Dimmed Weight":
                                          Weight := Weight + PostedPackageLine2."Dim. Weight";
                                        ShippingSetup."Actual Weight as"::"Unit of Measure Weight":
                                          Weight := Weight + PostedPackageLine2."Unit of Measure Weight";
                                      END;
                                      CASE ShippingSetup."Actual Volume as" OF
                                        ShippingSetup."Actual Volume as"::"Unit Volume":
                                          Volume := Volume + PostedPackageLine2.Volume;
                                        ShippingSetup."Actual Volume as"::Cubage:
                                          Volume := Volume + PostedPackageLine2.Cubage;
                                      END;
                                    UNTIL PostedPackageLine2.NEXT = 0;
                                END;
                                PostedPackageLine2.RESET;
                                PostedPackageLine2.SETRANGE("Package No.",PostedPackage2."No.");
                                PostedPackageLine2.SETRANGE(Type,PostedPackageLine2.Type::Item);
                                PostedPackageLine2.SETFILTER("No.",'<>%1',' ');
                                PostedPackageLine2.SETRANGE("NMFC Code",LTLNMFCCodeTmp.Code);
                                IF PostedPackageLine2.FIND('-') THEN
                                  REPEAT
                                    CASE ShippingSetup."Declare Value As" OF
                                      ShippingSetup."Declare Value As"::Cost:
                                        Value := Value + PostedPackageLine2."Value (Cost)";
                                      ShippingSetup."Declare Value As"::Price:
                                        Value := Value + PostedPackageLine2."Value (Price)";
                                    END;
                                    CASE ShippingSetup."Actual Weight as" OF
                                      ShippingSetup."Actual Weight as"::"Net Weight":
                                        Weight := Weight + PostedPackageLine2."Net Weight";
                                      ShippingSetup."Actual Weight as"::"Gross Weight":
                                        Weight := Weight + PostedPackageLine2."Gross Weight";
                                      ShippingSetup."Actual Weight as"::"Dimmed Weight":
                                        Weight := Weight + PostedPackageLine2."Dim. Weight";
                                      ShippingSetup."Actual Weight as"::"Unit of Measure Weight":
                                        Weight := Weight + PostedPackageLine2."Unit of Measure Weight";
                                    END;
                                    CASE ShippingSetup."Actual Volume as" OF
                                      ShippingSetup."Actual Volume as"::"Unit Volume":
                                        Volume := Volume + PostedPackageLine2.Volume;
                                      ShippingSetup."Actual Volume as"::Cubage:
                                        Volume := Volume + PostedPackageLine2.Cubage;
                                    END;
                                  UNTIL PostedPackageLine2.NEXT = 0;
                              END;
                            END;
                        END;
                      END;
                      IF CountPackage THEN BEGIN
                        TopLevelPackage := TopLevelPackage + 1;
                        IF MixedCommodityPackage THEN
                          RoundValue := TRUE;
                      END;
                      UNTIL PostedPackage.NEXT = 0;
                    END;
                  UNTIL BillOfLadingSummaryLine.NEXT = 0;
                IF InsertInfoLine THEN BEGIN
                  LineNo := 0;
                  IF RoundValue THEN
                    Weight := ROUND(Weight,1,'>');
                  BillofLadingInfoLine.RESET;
                  BillofLadingInfoLine.SETRANGE("Bill of Lading No.",BillOfLading."No.");
                  IF BillofLadingInfoLine.FIND('+') THEN
                    LineNo := BillofLadingInfoLine."Line No." + 10000
                  ELSE
                    LineNo := 10000;
                  BillofLadingInfoLine."Bill of Lading No." := BillOfLading."No.";
                  BillofLadingInfoLine."Line No." := LineNo;
                  BillofLadingInfoLine.Type := BillofLadingInfoLine.Type::" ";
                  BillofLadingInfoLine."No." := '';
                  BillofLadingInfoLine."Info. Line Type" :=
                  BillofLadingInfoLine."Info. Line Type"::"Commodity Info.";
                  BillofLadingInfoLine.INSERT(TRUE);
                  BillofLadingInfoLine.Description := LTLNMFCCodeTmp.Description;
                  BillofLadingInfoLine."NMFC #" := LTLNMFCCodeTmp.Code;
                  BillofLadingInfoLine."LTL Freight Type" := FORMAT(LTLNMFCCodeTmp."Freight Type");
                  BillofLadingInfoLine.Weight := Weight;
                  BillofLadingInfoLine.Value := Value;
                  BillofLadingInfoLine.Volume := Volume;
                  BillofLadingInfoLine."Handling Unit Type" :=
                    BillofLadingInfoLine."Handling Unit Type"::Cartons;
                  BillofLadingInfoLine."Package Type" :=
                    BillofLadingInfoLine."Package Type"::" ";
                  BillofLadingInfoLine."Hazardous Material" := DangerousGoods;
                  IF (HazMat AND (HazMatNMFC = BillofLadingInfoLine."NMFC #"))THEN BEGIN
                    BillofLadingInfoLine."Hazardous Material" := HazMat;
                    BillofLadingInfoLine."HazMat Code" := HazMatItem;
                  END ELSE
                    BillofLadingInfoLine."HazMat Code" := '';
                  BillofLadingInfoLine."Packages (Top Level)" := TopLevelPackage;
                  BillofLadingInfoLine."Packages (Lower Level)" := 0;
                  BillofLadingInfoLine.MODIFY;
                  InsertInfoLine := FALSE;
                END;
                LowerLevelPackage := 0;
                TopLevelPackage := 0;
              UNTIL LTLNMFCCodeTmp.NEXT = 0;
          END;
    END;

    PROCEDURE CreateVicsBOLNo@27(VAR CurrentBillOfLading@1240030000 : Record 14000822);
    VAR
      PackingRule@1240030001 : Record 14000715;
      NoSeriesMgt@1240030002 : Codeunit 396;
      TextNo@1240030003 : Code[20];
    BEGIN
      WITH CurrentBillOfLading DO BEGIN
        IF NOT PackingRule.GetPackingRule("Ship-to Type","Ship-to No.","Ship-to Code") THEN
          EXIT;

        IF STRPOS(PackingRule."UCC 128 Mask",'S') > 0 THEN BEGIN
          PackingRule.TESTFIELD("VICS BOL Nos.");
          TextNo := NoSeriesMgt.GetNextNo(PackingRule."VICS BOL Nos.",WORKDATE,TRUE);
        END;

        IF STRPOS(PackingRule."UCC 128 Mask",'M') > 0 THEN
          PackingRule.TESTFIELD("VICS BOL Manufacturer Ident.");
        FormatLabelNo(
              "VICS Bill of Lading No.",PackingRule."VICS BOL 128 Mask",
              PackingRule."VICS BOL 128 Weight",PackingRule."VICS BOL Manufacturer Ident.",TextNo);

        FormatLabelNoPrint(
          "VICS Bill of Lading No.(Print)","VICS Bill of Lading No.",
          PackingRule."VICS BOL 128 Printing Mask");
      END;
    END;

    PROCEDURE FormatVicsBOLNoPrint@28(VAR CurrentBillOfLading@1240030000 : Record 14000822);
    VAR
      PackingRule@1240030001 : Record 14000715;
    BEGIN
      WITH CurrentBillOfLading DO BEGIN
        IF "VICS Bill of Lading No." = '' THEN
          "VICS Bill of Lading No.(Print)" := '';

        IF PackingRule.GetPackingRule("Ship-to Type","Ship-to No.","Ship-to Code") THEN BEGIN
          PackingRule.TESTFIELD("VICS BOL 128 Printing Mask");
          FormatLabelNoPrint(
            "VICS Bill of Lading No.(Print)","VICS Bill of Lading No.",
            PackingRule."VICS BOL 128 Printing Mask");
        END ELSE
          "VICS Bill of Lading No.(Print)" := '';
      END;
    END;

    LOCAL PROCEDURE FormatLabelNo@26(VAR LabelNo@1240030000 : Code[20];Mask@1240030001 : Code[20];Weight@1240030002 : Code[20];MfgID@1240030003 : Code[10];TextNo@1240030004 : Code[20]);
    VAR
      CheckDigit@1240030005 : Integer;
      Number@1240030006 : Code[20];
      LabelNoTemp@1240030007 : Code[20];
      i@1240030008 : Integer;
      CDigit@1240030009 : Integer;
      MDigit@1240030011 : Integer;
      SDigit@1240030012 : Integer;
    BEGIN
      FOR i := 1 TO STRLEN(Mask) DO
        CASE COPYSTR(Mask,i,1) OF
          'C':
            CDigit := CDigit + 1;
          'M':
            MDigit := MDigit + 1;
          'S':
            SDigit := SDigit + 1;
        END;

      IF CDigit > 1 THEN
        ERROR(Text022,Mask);

      IF MDigit <> 0 THEN BEGIN
        IF MfgID = '' THEN
          ERROR(Text023);
        IF STRLEN(MfgID) <> MDigit THEN
          ERROR(Text024,MDigit);

        FOR i := 1 TO MDigit DO
          IF STRPOS('1234567890',COPYSTR(MfgID,i,1)) = 0 THEN
            ERROR(Text025);
      END;

      IF SDigit <> 0 THEN BEGIN
        i := STRLEN(TextNo);
        CASE TRUE OF
          i > SDigit:
            ERROR(Text026,SDigit);
          i < SDigit:
            Number := COPYSTR('00000000000000000000',1,(SDigit - i)) + TextNo;
          ELSE
            Number := TextNo;
        END;

        FOR i := 1 TO SDigit DO
          IF STRPOS('1234567890',COPYSTR(Number,i,1)) = 0 THEN
            ERROR(Text027,Number);
      END;

      LabelNo := '';
      FOR i := 1 TO STRLEN(Mask) DO
        CASE STRPOS('1234567890AMSC',COPYSTR(Mask,i,1)) OF
          1,2,3,4,5,6,7,8,9,10,11:
            LabelNo := LabelNo + COPYSTR(Mask,i,1);
          12:
            IF MDigit <> 0 THEN BEGIN
              LabelNo := LabelNo + MfgID;
              MDigit := 0;
            END;
          13:
            IF SDigit <> 0 THEN BEGIN
              LabelNo := LabelNo + Number;
              SDigit := 0;
            END;
          14:
            IF i <> STRLEN(Mask) THEN
              ERROR(Text028,Mask);
          ELSE
            ERROR(Text029,Mask);
        END;

      IF CDigit <> 0 THEN BEGIN
        IF Weight = '' THEN
          ERROR(Text030);
        LabelNoTemp := '';
        FOR i := 1 TO STRLEN(LabelNo) DO
          IF STRPOS('1234567890',COPYSTR(LabelNo,i,1)) = 0 THEN
            LabelNoTemp := LabelNoTemp + '0'
          ELSE
            LabelNoTemp := LabelNoTemp + COPYSTR(LabelNo,i,1);

        CheckDigit := STRCHECKSUM(LabelNoTemp,Weight);
        LabelNo := LabelNo + FORMAT(CheckDigit);
      END;
    END;

    LOCAL PROCEDURE FormatLabelNoPrint@25(VAR LabelNoPrint@1240030000 : Code[30];LabelNo@1240030001 : Code[20];Mask@1240030002 : Code[30]);
    VAR
      i@1240030003 : Integer;
      Pos@1240030004 : Integer;
      Spaces@1240030005 : Integer;
    BEGIN
      LabelNoPrint := '';
      IF LabelNo = '' THEN
        EXIT;

      Pos := 0;
      Spaces := 0;
      FOR i := 1 TO STRLEN(Mask) DO
        IF COPYSTR(Mask,i,1) = '#' THEN BEGIN
          Pos := Pos + 1;
          IF Pos > STRLEN(LabelNo) THEN
            ERROR(Text031,Mask,LabelNo);
          LabelNoPrint := LabelNoPrint + PADSTR('',Spaces) + COPYSTR(LabelNo,Pos,1);
          Spaces := 0;
        END ELSE
          IF COPYSTR(Mask,i,1) = ' ' THEN
            Spaces := Spaces + 1
          ELSE BEGIN
            LabelNoPrint := LabelNoPrint + PADSTR('',Spaces) + COPYSTR(Mask,i,1);
            Spaces := 0;
          END;

      IF Pos <> STRLEN(LabelNo) THEN
        ERROR(Text031,Mask,LabelNo);
    END;

    PROCEDURE LookupFromDocument@29(BillOfLadingNo@1240030000 : Code[20]);
    VAR
      BillOfLading@1240030001 : Record 14000822;
    BEGIN
      IF BillOfLadingNo = '' THEN
        EXIT;

      IF BillOfLading.GET(BillOfLadingNo) THEN BEGIN
        BillOfLading.SETRECFILTER;

        IF BillOfLading.Posted THEN
          PAGE.RUNMODAL(PAGE::"Posted Bill of Lading",BillOfLading)
        ELSE
          PAGE.RUNMODAL(PAGE::"Bill of Lading",BillOfLading);
      END;
    END;

    PROCEDURE CreateFedExBOL@1240020000(VAR CurrentBillOfLading@1240020000 : Record 14000822;Source@1240020002 : Code[20]);
    VAR
      FedExTransactionWebServices@1240020001 : Codeunit 14000787;
    BEGIN

      IF CurrentBillOfLading."External Tracking No." <> '' THEN
        DeleteFedExBOL(CurrentBillOfLading);

      CASE Source OF
        'INFO_LINES':
          FedExTransactionWebServices.CreateFedExBOLByInfoLines(CurrentBillOfLading);
        'BOL_DETAIL':
          FedExTransactionWebServices.CreateFedExBOLByClass(CurrentBillOfLading);
      END;
    END;

    PROCEDURE DeleteFedExBOL@1240020002(VAR CurrentBillOfLading@1240020000 : Record 14000822);
    VAR
      FedExTransactionWebServices@1240020001 : Codeunit 14000787;
    BEGIN
      FedExTransactionWebServices.DeleteFedExBOL(CurrentBillOfLading);
    END;

    PROCEDURE UpdateBillOfLadingInfoLines@1000000001(VAR CurrentBillOfLading@1240030000 : Record 14000822;OverWriteExisting@1240030001 : Boolean);
    VAR
      BillOfLadingLine@1240030002 : Record 14000823;
      BillOfLadingInfoLine@1240030003 : Record 14000827;
      LastExtNo@1240030004 : Code[20];
      LastSalesOrder@1240030005 : Code[20];
      LineNo@1000000000 : Integer;
      TempBillOfLadingInfoLine@1000000001 : TEMPORARY Record 14000827;
    BEGIN
      //TM BEG 070915
      WITH CurrentBillOfLading DO BEGIN
        BillOfLadingInfoLine.SETRANGE("Bill of Lading No.", "No.");
        BillOfLadingInfoLine.SETRANGE("Source ID", '');
        IF BillOfLadingInfoLine.FINDSET THEN
        REPEAT
          TempBillOfLadingInfoLine.INIT;
          TempBillOfLadingInfoLine.TRANSFERFIELDS(BillOfLadingInfoLine);
          TempBillOfLadingInfoLine.INSERT;
        UNTIL BillOfLadingInfoLine.NEXT = 0;
      END;

      CreateBillOfLadingInfoLines(CurrentBillOfLading, TRUE);

      BillOfLadingInfoLine.RESET;
      BillOfLadingInfoLine.SETRANGE("Bill of Lading No.", CurrentBillOfLading."No.");
      LineNo := 10000;
      IF BillOfLadingInfoLine.FINDLAST THEN
        LineNo := BillOfLadingInfoLine."Line No." + LineNo;

      IF TempBillOfLadingInfoLine.FIND('-') THEN
      REPEAT
        BillOfLadingInfoLine.INIT;
        BillOfLadingInfoLine.TRANSFERFIELDS(TempBillOfLadingInfoLine);
        BillOfLadingInfoLine."Line No." := LineNo;
        BillOfLadingInfoLine.INSERT(TRUE);
        LineNo := LineNo + 10000;
      UNTIL TempBillOfLadingInfoLine.NEXT = 0;
      //TM END 070915
    END;

    PROCEDURE GetZeroShipmentLines@1240020003(CurrentBillOfLading@1240020000 : Record 14000822);
    VAR
      BillOfLadingLine@1240020001 : Record 14000823;
      SalesShipmentHdr@1240020002 : Record 110;
      SalesShipmentLine@1240020003 : Record 111;
      SalesShipmentHdr2@1240020011 : Record 110;
      SalesShipmentLine2@1240020010 : Record 111;
      SalesHeader@1240020014 : Record 36;
      SalesLine@1240020013 : Record 37;
      Item@1240020008 : Record 27;
      LineNo@1240020006 : Integer;
      ShippedItemFound@1240020012 : Boolean;
    BEGIN
      LineNo := 0;

      BillOfLadingLine.RESET;
      BillOfLadingLine.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
      BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::"Sales Shipment (Posted)");
      IF BillOfLadingLine.FIND('-') THEN
        REPEAT
          IF SalesShipmentHdr.GET(BillOfLadingLine."No.") THEN BEGIN
            ZeroASN := TRUE;
            LineNo := 0;
            SalesShipmentLine.RESET;
            SalesShipmentLine.SETRANGE("Document No.",SalesShipmentHdr."No.");
            SalesShipmentLine.SETRANGE(Quantity,0);
            IF SalesShipmentLine.FIND('-') THEN
              REPEAT
                SalesShipmentHdr2.RESET;
                SalesShipmentHdr2.SETCURRENTKEY("Order No.");
                SalesShipmentHdr2.SETRANGE("Order No.",SalesShipmentHdr."Order No.");
                SalesShipmentHdr2.SETFILTER("No.",'<%1',SalesShipmentHdr."No.");
                IF SalesShipmentHdr2.FIND('-') THEN
                  REPEAT
                    ShippedItemFound := FALSE;
                    REPEAT
                      SalesShipmentLine2.RESET;
                      SalesShipmentLine2.SETRANGE("Document No.",SalesShipmentHdr2."No.");
                      SalesShipmentLine2.SETRANGE("No.",SalesShipmentLine."No.");
                      SalesShipmentLine2.SETFILTER(Quantity,'>%1',0);
                      IF SalesShipmentLine2.FIND('-') THEN
                        ShippedItemFound := TRUE;
                    UNTIL (SalesShipmentLine2.NEXT = 0) OR (ShippedItemFound);
                  UNTIL (SalesShipmentHdr2.NEXT = 0) OR (ShippedItemFound);
                IF ShippedItemFound = FALSE THEN
                  AddZeroShippedToPackage(BillOfLadingLine,SalesShipmentLine);
              UNTIL SalesShipmentLine.NEXT = 0;

              SalesShipmentLine.RESET;
              SalesShipmentLine.SETRANGE("Document No.",SalesShipmentHdr."No.");
              SalesShipmentLine.SETRANGE(Type,SalesShipmentLine.Type::Item);
              SalesShipmentLine.SETFILTER(Quantity,'<>%1',0);
              IF SalesShipmentLine.FIND('-') THEN BEGIN
                SalesHeader.RESET;
                SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
                SalesHeader.SETRANGE("No.",SalesShipmentHdr."Order No.");
                IF SalesHeader.FIND('-') THEN
                  REPEAT
                    SalesLine.RESET;
                    SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
                    SalesLine.SETRANGE("Document No.",SalesShipmentHdr."Order No.");
                    SalesLine.SETRANGE(Type,SalesShipmentLine.Type);
                    SalesLine.SETRANGE("No.",SalesShipmentLine."No.");
                    SalesLine.SETRANGE("Line No.",SalesShipmentLine."Line No.");
                    IF SalesLine.FIND('-') THEN BEGIN
                      IF SalesLine."Outstanding Quantity" <> 0 THEN BEGIN
                        AddZeroShippedToPackage(BillOfLadingLine,SalesShipmentLine);
                        AddZeroShippedToLP(BillOfLadingLine,SalesShipmentLine); //TPZ3178
                      END;
                    END;
                  UNTIL SalesShipmentLine.NEXT = 0;
              END;
          END;
        UNTIL BillOfLadingLine.NEXT = 0;
    END;

    PROCEDURE AddZeroShippedToPackage@1240020005(BillOfLadingLine@1240020014 : Record 14000823;SalesShipmentLine@1240020015 : Record 111);
    VAR
      PostedPackage@1240020006 : Record 14000704;
      PostedPackageLine@1240020005 : Record 14000705;
      Item@1240020004 : Record 27;
      ItemUnitOfMeasure@1240020003 : Record 5404;
      LineWeightType@1240020001 : 'Pounds,Kilograms';
    BEGIN
      PostedPackage.RESET;
      PostedPackage.SETCURRENTKEY("Source Type","Source Subtype","Posted Source ID");
      PostedPackage.SETRANGE("Source Type",BillOfLadingLine."Source Type");
      PostedPackage.SETRANGE("Posted Source ID",BillOfLadingLine."Posted Source ID");
      IF PostedPackage.FIND('+') THEN BEGIN
        PostedPackageLine.RESET;
        PostedPackageLine.SETRANGE("Package No.",PostedPackage."No.");
        IF PostedPackageLine.FIND('+') THEN BEGIN
          IF ZeroShippedLineNo = 0 THEN
            ZeroShippedLineNo := PostedPackageLine."Line No." + 10000
          ELSE
            ZeroShippedLineNo := ZeroShippedLineNo + 10000;
        END ELSE
          ZeroShippedLineNo := 10000;
         LineWeightType := PostedPackageLine."Line Weight Type";

        IF Item.GET(SalesShipmentLine."No.") THEN;
        IF ItemUnitOfMeasure.GET(
          SalesShipmentLine."No.",SalesShipmentLine."Unit of Measure Code") THEN;
        PostedPackageLineTmp."Package No." := PostedPackage."No.";
        PostedPackageLineTmp."Line No." := ZeroShippedLineNo;
        PostedPackageLineTmp.INSERT(TRUE);
        PostedPackageLineTmp."Source Type" := PostedPackage."Source Type";
        PostedPackageLineTmp."Source Subtype" := PostedPackage."Source Subtype";
        PostedPackageLineTmp."Source ID" := PostedPackage."Source ID";
        PostedPackageLineTmp."Posted Source ID" := PostedPackage."Posted Source ID";
        PostedPackageLineTmp.Type := PostedPackageLine.Type::Item;
        PostedPackageLineTmp."No." := SalesShipmentLine."No.";
        PostedPackageLineTmp.Description := SalesShipmentLine.Description;
        PostedPackageLineTmp."Variant Code" := SalesShipmentLine."Variant Code";
        PostedPackageLineTmp.Quantity := 0;
        PostedPackageLineTmp.Quantity := 0;
        PostedPackageLineTmp."Unit of Measure Code" := SalesShipmentLine."Unit of Measure Code";
        PostedPackageLineTmp."Qty. per Unit of Measure" :=
          SalesShipmentLine."Qty. per Unit of Measure";
        PostedPackageLineTmp."Net Weight" := SalesShipmentLine."Net Weight";
        PostedPackageLineTmp."Gross Weight" := SalesShipmentLine."Gross Weight";
        PostedPackageLineTmp."Line Weight Type" := LineWeightType;
        PostedPackageLineTmp.Volume := SalesShipmentLine."Unit Volume";
        PostedPackageLineTmp."Value (Price)" := SalesShipmentLine."Unit Price";
        PostedPackageLineTmp."Value (Cost)" := SalesShipmentLine."Unit Cost";
        PostedPackageLineTmp."Item UPC/EAN Number" := Item."Item UPC/EAN Number";
        PostedPackageLineTmp."Std. Pack UPC/EAN Number" :=
          ItemUnitOfMeasure."Std. Pack UPC/EAN Number";
        PostedPackageLineTmp.MODIFY;
      END;
    END;

    PROCEDURE InsertNonShippedItem@1240020004(VAR BOLSumLine@1000000000 : Record 14000825;VAR LevelParent@1000000001 : ARRAY [100] OF Integer;CurrentPostedPackage@1000000002 : Record 14000704;CurrentPostedPackageLine@1240020000 : TEMPORARY Record 14000705;CurrentLevel@1000000003 : Integer;ParentUCC128No@1000000004 : Code[30];ParentUCC128NoPrint@1000000005 : Code[30];ParentRFID@1240030000 : Code[50];ParentExternalDocNo@1000000006 : Code[35];LevelPackageNo@1000000007 : ARRAY [5] OF Code[20];LevelLineNo@1000000008 : ARRAY [5] OF Integer);
    VAR
      PostedPackage@1000000011 : Record 14000704;
      PostedPackageLine@1000000012 : Record 14000705;
      ItemUnitOfMeasure@1000000013 : Record 5404;
      BOLSumLinePackage@1000000014 : Record 14000825;
      PackageNoToShow@1000000009 : Code[20];
      i@1000000010 : Integer;
    BEGIN
      PostedPackageLineTmp.RESET;
      PostedPackageLineTmp.SETRANGE("Package No.",PostedPackageLineTmp."Package No.");
      IF PostedPackageLineTmp.FIND('-') THEN
        REPEAT
          BOLSumLine."Line No." := BOLSumLine."Line No." + 1;
          BOLSumLine.Level := CurrentLevel + 1;
          BOLSumLine."Parent Line No." := LevelParent[BOLSumLine.Level - 1];
          BOLSumLine.Type := BOLSumLine.Type::Item;
          BOLSumLine."No." := PostedPackageLineTmp."No.";
          BOLSumLine.Description := PostedPackageLineTmp.Description;
          IF (PostedPackageLineTmp.Quantity < PostedPackageLineTmp."Quantity (Base)") AND
             (PostedPackageLineTmp.Type = PostedPackageLineTmp.Type::Item)
          THEN BEGIN
            ItemUnitOfMeasure.RESET;
            ItemUnitOfMeasure.SETRANGE("Item No.",PostedPackageLineTmp."No.");
            ItemUnitOfMeasure.SETRANGE("Qty. per Unit of Measure",1);
            IF NOT ItemUnitOfMeasure.FIND('-') THEN
              CLEAR(ItemUnitOfMeasure);

            BOLSumLine."Type Description" :=
              STRSUBSTNO(
                '%1 %2 %3 %4 %5 (%6 %7).',PostedPackageLineTmp.Type,PostedPackageLineTmp."No.",
                PostedPackageLineTmp.Description,PostedPackageLineTmp.Quantity,
                PostedPackageLineTmp."Unit of Measure Code",PostedPackageLineTmp."Quantity (Base)",
                ItemUnitOfMeasure.Code);
          END ELSE
            BOLSumLine."Type Description" :=
              STRSUBSTNO(
                '%1 %2 %3 %4 %5.',PostedPackageLineTmp.Type,PostedPackageLineTmp."No.",
                PostedPackageLineTmp.Description,PostedPackageLineTmp.Quantity,
                PostedPackageLineTmp."Unit of Measure Code");
          BOLSumLine."Source Type" := CurrentPostedPackage."Source Type";
          BOLSumLine."Source Subtype" := CurrentPostedPackage."Source Subtype";
          BOLSumLine."Source ID" := CurrentPostedPackage."Source ID";
          BOLSumLine."Posted Source ID" := CurrentPostedPackage."Posted Source ID";
          SetLevelFields(BOLSumLine,LevelPackageNo,LevelLineNo);
          BOLSumLine."UCC No." := ParentUCC128No;
          BOLSumLine."UCC No. (Print)" := ParentUCC128NoPrint;
          BOLSumLine."RF-ID (Hex)" := ParentRFID;
          BOLSumLine."External Document No." := ParentExternalDocNo;
          BOLSumLine."Package No." := PackageNoToShow;
          BOLSumLine."Package Line Line No." := PostedPackageLineTmp."Line No.";
          BOLSumLine."Package Line Type" := PostedPackageLineTmp.Type;
          BOLSumLine."Package Line No." := PostedPackageLineTmp."No.";
          BOLSumLine."Package Line Variant Code" := PostedPackageLineTmp."Variant Code";
          BOLSumLine."Package Line Unit of Measure" :=
            PostedPackageLineTmp."Unit of Measure Code";
          BOLSumLine."Package Line Quantity" := PostedPackageLineTmp.Quantity;
          BOLSumLine."Package Line Quantity (Base)" := PostedPackageLineTmp."Quantity (Base)";
          BOLSumLine."Multi Package Line Quantity" := PostedPackageLineTmp."Multi Document Quantity";
          BOLSumLine."Multi Package Line Qty. (Base)" :=
            PostedPackageLineTmp."Multi Document Qty. (Base)";
          BOLSumLine."Multi Document" := CurrentPostedPackage."Multi Document Package";
          BOLSumLine."Item UPC/EAN Number" := PostedPackageLineTmp."Item UPC/EAN Number";
          BOLSumLine."Item UPC/EAN Number (Print)" :=
            PostedPackageLineTmp."Item UPC/EAN Number (Print)";
          BOLSumLine."Std. Pack UPC/EAN Number" := PostedPackageLineTmp."Std. Pack UPC/EAN Number";
          BOLSumLine."Std. Pack UPC/EAN No. (Print)" :=
            PostedPackageLineTmp."Std. Pack UPC/EAN No. (Print)";
          BOLSumLine."One Unit of Measure Code" := ItemUnitOfMeasure.Code;
          BOLSumLine."Zero ASN Line" := TRUE;
          BOLSumLine.INSERT;

          BOLSumLinePackage."Package Line Quantity" :=
            BOLSumLinePackage."Package Line Quantity" + BOLSumLine."Package Line Quantity";
          BOLSumLinePackage."Package Line Quantity (Base)" :=
            BOLSumLinePackage."Package Line Quantity (Base)" +
            BOLSumLine."Package Line Quantity (Base)";
        UNTIL PostedPackageLineTmp.NEXT = 0;
    END;

    PROCEDURE SetASNSummary@1240020008(VAR CurrentBillOfLading@1240020000 : Record 14000822) : Boolean;
    VAR
      SalesShipmentHdr@1240020002 : Record 110;
      SalesShipmentLine@1240020003 : Record 111;
      SalesShipmentLine2@1240020004 : Record 111;
      ItemTmp@1240020001 : TEMPORARY Record 27;
      PostedPackage@1240020011 : Record 14000704;
      PostedPackageLine@1240020012 : Record 14000705;
      EDITradePartner@1240020005 : Record 14002360;
      EDICustCrossRef@1240020006 : Record 14002362;
      EDIDocument@1240020013 : Record 14002353;
      EDIRecDocHdr@1240020015 : Record 14002358;
      EvaluateASNSummaryType@1240020007 : Boolean;
      DuplicateFound@1240020008 : Boolean;
      MultipleItemPackage@1240020009 : Boolean;
      LastItem@1240020010 : Code[20];
      DocumentNo@1240020014 : Code[10];
    BEGIN
      ItemTmp.RESET;
      ItemTmp.DELETEALL;
      DocumentNo := 'E_SLSASN';

      EvaluateASNSummaryType := FALSE;
      EDITradePartner.SETCURRENTKEY("Customer No.");
      EDITradePartner.SETRANGE("Customer No.",CurrentBillOfLading."Ship-to No.");
      IF EDITradePartner.FIND('-') THEN BEGIN
        EDIDocument.SETRANGE("Trade Partner No.",EDITradePartner."No.");
        EDIDocument.SETFILTER(Status,'%1|%2',EDIDocument.Status::Test,EDIDocument.Status::Production);
        EDIDocument.SETRANGE(EDIDocument."Navision Document",DocumentNo);
        EDIDocument.SETRANGE("Override Map",TRUE);
        IF EDIDocument.FIND('-') THEN BEGIN
          IF EDIDocument."Override ASN Type" <> EDIDocument."Override ASN Type"::" " THEN
            EvaluateASNSummaryType := TRUE;
        END;
      END;
      IF NOT EvaluateASNSummaryType THEN BEGIN
        EDICustCrossRef.INIT;
        EDICustCrossRef.SETCURRENTKEY("Navision Sell To Code");
        EDICustCrossRef.SETRANGE("Navision Sell To Code",CurrentBillOfLading."Ship-to No.");
        EDICustCrossRef.SETRANGE("Navision Ship To Code",CurrentBillOfLading."Ship-to Code");
        IF EDICustCrossRef.FIND('-') THEN BEGIN
          IF EDITradePartner.GET(EDICustCrossRef."Trade Partner No.") THEN BEGIN
            EDIDocument.SETRANGE("Trade Partner No.",EDITradePartner."No.");
            EDIDocument.SETFILTER(Status,'%1|%2',EDIDocument.Status::Test,EDIDocument.Status::Production);
            EDIDocument.SETRANGE(EDIDocument."Navision Document",DocumentNo);
            EDIDocument.SETRANGE("Override Map",TRUE);
            IF EDIDocument.FIND('-') THEN BEGIN
              IF EDIDocument."Override ASN Type" <> EDIDocument."Override ASN Type"::" " THEN
              EvaluateASNSummaryType := TRUE;
            END;
          END;
        END;
      END;


      IF EvaluateASNSummaryType THEN BEGIN
        CASE EDIDocument."Override ASN Type" OF
          EDIDocument."Override ASN Type"::"Duplicate Item":
            BEGIN
              SalesShipmentHdr.RESET;
              SalesShipmentHdr.SETCURRENTKEY("Bill of Lading No.");
              SalesShipmentHdr.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
              IF SalesShipmentHdr.FIND('-') THEN BEGIN
                SalesShipmentLine.RESET;
                SalesShipmentLine.SETRANGE("Document No.",SalesShipmentHdr."No.");
                IF SalesShipmentLine.FIND('-') THEN
                  REPEAT
                    ItemTmp.RESET;
                    ItemTmp.SETRANGE("No.",SalesShipmentLine."No.");
                    IF ItemTmp.FIND('-') THEN BEGIN
                      SalesShipmentLine2.RESET;
                      SalesShipmentLine2.SETRANGE("Document No.",SalesShipmentLine."Document No.");
                      SalesShipmentLine2.SETRANGE("No.",SalesShipmentLine."No.");
                      SalesShipmentLine2.SETRANGE("Variant Code",SalesShipmentLine."Variant Code");
                      SalesShipmentLine2.SETFILTER(Quantity,'>%1',0);
                       IF SalesShipmentLine2.FIND('-') THEN
                        IF SalesShipmentLine2.COUNT >= 1 THEN
                          DuplicateFound := TRUE;
                    END ELSE BEGIN
                      ItemTmp."No." :=  SalesShipmentLine."No.";
                      ItemTmp.INSERT;
                    END;
                  UNTIL (SalesShipmentLine.NEXT = 0) OR (DuplicateFound = TRUE);
              END;
            END;
          EDIDocument."Override ASN Type"::"Duplicate Item-Multiple Item Package":
            BEGIN
              SalesShipmentHdr.RESET;
              SalesShipmentHdr.SETCURRENTKEY("Bill of Lading No.");
              SalesShipmentHdr.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
              IF SalesShipmentHdr.FIND('-') THEN BEGIN
                SalesShipmentLine.RESET;
                SalesShipmentLine.SETRANGE("Document No.",SalesShipmentHdr."No.");
                IF SalesShipmentLine.FIND('-') THEN
                  REPEAT
                    ItemTmp.RESET;
                    ItemTmp.SETRANGE("No.",SalesShipmentLine."No.");
                    IF ItemTmp.FIND('-') THEN BEGIN
                      SalesShipmentLine2.RESET;
                      SalesShipmentLine2.SETRANGE("Document No.",SalesShipmentLine."Document No.");
                      SalesShipmentLine2.SETRANGE("No.",SalesShipmentLine."No.");
                      SalesShipmentLine2.SETRANGE("Variant Code",SalesShipmentLine."Variant Code");
                      IF SalesShipmentLine2.FIND('-') THEN
                        IF SalesShipmentLine2.COUNT >= 1 THEN BEGIN
                          DuplicateFound := TRUE;
                        END;
                    END ELSE BEGIN
                      ItemTmp."No." :=  SalesShipmentLine."No.";
                      ItemTmp.INSERT;
                   END;
                 UNTIL (SalesShipmentLine.NEXT = 0) OR (DuplicateFound = TRUE);

                IF NOT DuplicateFound THEN BEGIN
                  PostedPackage.RESET;
                  PostedPackage.SETCURRENTKEY("Source Type", "Source Subtype", "Posted Source ID");
                  PostedPackage.SETRANGE("Source Type", 36);
                  PostedPackage.SETRANGE("Source Subtype", 1);
                  PostedPackage.SETRANGE("Posted Source ID", SalesShipmentHdr."No.");
                  IF PostedPackage.FIND('-') THEN
                    REPEAT
                      LastItem := '';
                      PostedPackageLine.RESET;
                      PostedPackageLine.SETRANGE("Package No.", PostedPackage."No.");
                      IF PostedPackageLine.FIND('-') THEN
                        REPEAT
                          IF LastItem = '' THEN
                            LastItem := PostedPackageLine."No."
                          ELSE
                            IF LastItem <> PostedPackageLine."No." THEN
                              MultipleItemPackage := TRUE;
                        UNTIL ((PostedPackageLine.NEXT = 0) OR (MultipleItemPackage));
                    UNTIL ((PostedPackage.NEXT = 0) OR (MultipleItemPackage));
                END;
              END;
            END;
          EDIDocument."Override ASN Type"::"DC Order":
            BEGIN
              EDICustCrossRef.RESET;
              EDICustCrossRef.SETRANGE("Trade Partner No.",EDITradePartner."No.");
              EDICustCrossRef.SETRANGE("Navision Sell To Code",CurrentBillOfLading."Ship-to No.");
              EDICustCrossRef.SETRANGE("Navision Ship To Code",CurrentBillOfLading."Ship-to Code");
              IF EDICustCrossRef.FIND('-') THEN
                IF EDICustCrossRef."Ship-to Type" =
                  EDICustCrossRef."Ship-to Type"::"Dist. Center"
                THEN BEGIN
                  OverrideASNSummary := TRUE;
                  EXIT(TRUE);
                END ELSE BEGIN
                  OverrideASNSummary := FALSE;
                  EXIT(FALSE);
                END
              ELSE BEGIN
                OverrideASNSummary := FALSE;
                EXIT(FALSE);
              END;
            END;
          EDIDocument."Override ASN Type"::"Special Order":
            BEGIN
              SalesShipmentHdr.RESET;
              SalesShipmentHdr.SETCURRENTKEY("Bill of Lading No.");
              SalesShipmentHdr.SETRANGE("Bill of Lading No.",CurrentBillOfLading."No.");
              IF SalesShipmentHdr.FIND('-') THEN BEGIN
                IF EDIRecDocHdr.GET(SalesShipmentHdr."EDI Internal Doc. No.") THEN BEGIN
                  IF EDIRecDocHdr."Special Order" THEN BEGIN
                    OverrideASNSummary := TRUE;
                    EXIT(TRUE);
                  END ELSE BEGIN
                    OverrideASNSummary := FALSE;
                    EXIT(FALSE);
                  END;
                END ELSE BEGIN
                  OverrideASNSummary := FALSE;
                  EXIT(FALSE);
                END;
              END;
            END;
          EDIDocument."Override ASN Type"::"Custom 1":
            BEGIN
            END;
          EDIDocument."Override ASN Type"::"Custom 2":
            BEGIN
            END;
          EDIDocument."Override ASN Type"::"Custom 3":
            BEGIN
            END;
          EDIDocument."Override ASN Type"::"Custom 4":
            BEGIN
            END;
        END;
      END;

      IF DuplicateFound OR MultipleItemPackage THEN BEGIN
        OverrideASNSummary := TRUE;
        EXIT(TRUE);
      END ELSE
        EXIT(FALSE);
    END;

    LOCAL PROCEDURE CheckRequiredFields@1240020007(PackingRule@1240020000 : Record 14000715;CurrentBOL@1240020001 : Record 14000822);
    VAR
      RequiredBOLFields@1240020002 : Text[250];
      Text001@1240020003 : TextConst 'ENU=The following must have a value: %1.';
    BEGIN
      IF (PackingRule."Expected Delivery Date Req.") AND
         (CurrentBOL."Expected Delivery Date" = 0D)
      THEN
        IF RequiredBOLFields = '' THEN
          RequiredBOLFields := 'Expected Delivery Date'
        ELSE
          RequiredBOLFields := RequiredBOLFields + ' ' + 'Expected Delivery Date';
      IF (PackingRule."Custom Value 1 Required") AND
         (CurrentBOL."Custom Value 1" = '')
      THEN
        IF RequiredBOLFields = '' THEN
          RequiredBOLFields :=  'Custom Value 1'
        ELSE
          RequiredBOLFields := RequiredBOLFields + ' ' + 'Custom Value 1';
      IF (PackingRule."Custom Value 2 Required") AND
         (CurrentBOL."Custom Value 2" = '')
      THEN
        IF RequiredBOLFields = '' THEN
          RequiredBOLFields :=  'Custom Value 2'
        ELSE
          RequiredBOLFields := RequiredBOLFields + ' ' + 'Custom Value 2';
      IF (PackingRule."Custom Value 3 Required") AND
         (CurrentBOL."Custom Value 3" = '')
      THEN
        IF RequiredBOLFields = '' THEN
          RequiredBOLFields :=  'Custom Value 3'
        ELSE
          RequiredBOLFields := RequiredBOLFields + ' ' + 'Custom Value 3';
      IF (PackingRule."Custom Value 4 Required") AND
         (CurrentBOL."Custom Value 4" = '')
      THEN
        IF RequiredBOLFields = '' THEN
          RequiredBOLFields :=  'Custom Value 4'
        ELSE
          RequiredBOLFields := RequiredBOLFields + ' ' + 'Custom Value 4';
      IF (PackingRule."Custom Value 5 Required") AND
         (CurrentBOL."Custom Value 5" = '')
      THEN
        IF RequiredBOLFields = '' THEN
          RequiredBOLFields :=  'Custom Value 5'
        ELSE
          RequiredBOLFields := RequiredBOLFields + ' ' + 'Custom Value 5';
      IF (PackingRule."EDI Routing Request No. Req.") AND
         (CurrentBOL."EDI Routing Request No." = '')
      THEN
        IF RequiredBOLFields = '' THEN
          RequiredBOLFields :=  'EDI Routing Request No.'
        ELSE
          RequiredBOLFields := RequiredBOLFields + ' ' + 'EDI Routing Request No.';
      IF RequiredBOLFields <> '' THEN
        ERROR(Text001,RequiredBOLFields);
    END;

    PROCEDURE EDIPostBeforeSendASNCheck@14000351(CurrentBillOfLading@1240020001 : Record 14000822) : Boolean;
    VAR
      PackingRule@1240020000 : Record 14000715;
    BEGIN
      WITH CurrentBillOfLading DO
        PackingRule.GetPackingRule("Ship-to Type","Ship-to No.","Ship-to Code");
      IF PackingRule."Allow BOL Post Before ASN Send" THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    LOCAL PROCEDURE CheckHazMatCode@1240020010(ItemCode@1240020000 : Code[20];VAR HazMatItemCode@1240020003 : Code[100];VAR HazMat@1240020004 : Boolean);
    VAR
      HazMatItem@1240020001 : Record 14050102;
      HazMatProductClass@1240020002 : Record 14050103;
    BEGIN
      HazMatItem.RESET;
      HazMatItem.SETRANGE(HazMatItem.Type,HazMatItem.Type::Item);
      HazMatItem.SETRANGE("No.",ItemCode);
      IF HazMatItem.FINDFIRST THEN
       REPEAT
        IF HazMatProductClass.GET(HazMatItem."Product Class") THEN BEGIN
         HazMat := TRUE;
         IF STRPOS(HazMatItemCode,ItemCode) = 0 THEN
           IF STRLEN(HazMatItemCode) = 0 THEN
             HazMatItemCode += ItemCode
           ELSE
             HazMatItemCode += '|' + ItemCode;
        END;
      UNTIL HazMatItem.NEXT = 0;
    END;

    PROCEDURE UpdateASNSummaryLines1@1000000000(CurrentBillOfLading@1000000000 : Record 14000822);
    VAR
      PackingRule@1000000003 : Record 14000715;
      PackRuleChangeFlag@1000000001 : Boolean;
    BEGIN
      //<TPZ2409>
      WITH CurrentBillOfLading DO BEGIN
        TESTFIELD("Summary Released",FALSE);

        TESTFIELD("Ship-to No.");
        PackingRule.GetPackingRule("Ship-to Type","Ship-to No.","Ship-to Code");
        IF PackingRule.Code = 'DEFAULT' THEN BEGIN
          IF PackingRule."ASN Summary Type" = 0 THEN BEGIN
             PackRuleChangeFlag := TRUE;
             PackingRule."ASN Summary Type" := PackingRule."ASN Summary Type" :: "Shipment-Order-Package-Item";
             PackingRule.MODIFY;
          END;
        END;
        PackingRule.TESTFIELD("ASN Summary Type");

        OverrideASNSummary := FALSE;
        IF SetASNSummary(CurrentBillOfLading) THEN BEGIN
          PackingRule.TESTFIELD("Override ASN Summary Type");
          PackingRule."ASN Summary Type" := PackingRule."Override ASN Summary Type";
          DuplicateItemOverrideSummary := PackingRule."Override Line Data Not Summed";
        END;

        CASE PackingRule."ASN Summary Type" OF
          PackingRule."ASN Summary Type"::"Shipment-Order-Item":
            UpdateASNSummaryItem(CurrentBillOfLading,PackingRule,'ASN');
          PackingRule."ASN Summary Type"::"Shipment-Order-Package-Item":
            UpdateASNSummaryPackageItem(CurrentBillOfLading,PackingRule,'ASN');
          PackingRule."ASN Summary Type"::"Shipment-Order-Tare-Package-Item":
            UpdateASNSummaryTarePackItem(CurrentBillOfLading,PackingRule,'ASN');
          PackingRule."ASN Summary Type"::"Shipment-Order-Item-Package":
            UpdateASNSummaryItemPackage(CurrentBillOfLading,PackingRule,'ASN');
          PackingRule."ASN Summary Type"::"Shipment-Package-Order-Item":
            UpdateASNSummaryPackOrderItem(CurrentBillOfLading,PackingRule,'ASN');
          PackingRule."ASN Summary Type"::Prioritized:
            UpdateASNSummaryPrioritized(CurrentBillOfLading,PackingRule,'ASN');
          PackingRule."ASN Summary Type"::"Custom 1":
            UpdateASNSummaryCustom1(CurrentBillOfLading,PackingRule,'ASN');
          PackingRule."ASN Summary Type"::"Custom 2":
            UpdateASNSummaryCustom2(CurrentBillOfLading,PackingRule,'ASN');
          PackingRule."ASN Summary Type"::"Custom 3":
            UpdateASNSummaryCustom3(CurrentBillOfLading,PackingRule,'ASN');
        END;
      END;
      IF PackRuleChangeFlag THEN BEGIN
          PackingRule."ASN Summary Type" := 0;
          PackingRule.MODIFY;
      END;
        CLEAR(PackRuleChangeFlag);
      //</TPZ2409>
    END;

    PROCEDURE UpdateStdRecurseUnPostedPackage@1000000003(VAR BOLSumLine@1000000000 : Record 14000825;VAR LevelParent@1000000001 : ARRAY [100] OF Integer;CurrentPackage@1000000002 : Record 14000701;CurrentLevel@1000000003 : Integer;ParentUCC128No@1000000004 : Code[30];ParentUCC128NoPrint@1000000005 : Code[30];ParentRFID@1240030000 : Code[50];ParentExternalDocNo@1000000006 : Code[35];LevelPackageNo@1000000007 : ARRAY [5] OF Code[20];LevelLineNo@1000000008 : ARRAY [5] OF Integer);
    VAR
      Package@1000000011 : Record 14000701;
      PackageLine@1000000012 : Record 14000702;
      ItemUnitOfMeasure@1000000013 : Record 5404;
      BOLSumLinePackage@1000000014 : Record 14000825;
      PackageSummaryLine@1240030001 : Record 14000964;
      PackageNoToShow@1000000009 : Code[20];
      i@1000000010 : Integer;
    BEGIN
      IF CurrentLevel >= 99 THEN
        ERROR(Text007);

      IF CurrentPackage."Original Package No." <> '' THEN
        PackageNoToShow := CurrentPackage."Original Package No."
      ELSE
        PackageNoToShow := CurrentPackage."No.";

      BOLSumLine.INIT;
      BOLSumLine."Line No." := BOLSumLine."Line No." + 1;
      BOLSumLine.Level := CurrentLevel;
      BOLSumLine."Parent Line No." := LevelParent[BOLSumLine.Level - 1];
      BOLSumLine.Type := BOLSumLine.Type::Package;
      BOLSumLine."No." := PackageNoToShow;
      BOLSumLine.Description := CurrentPackage.Description;
      BOLSumLine."Type Description" := STRSUBSTNO(Text008,PackageNoToShow);
      BOLSumLine."Source Type" := CurrentPackage."Source Type";
      BOLSumLine."Source Subtype" := CurrentPackage."Source Subtype";
      BOLSumLine."Source ID" := CurrentPackage."Source ID";
      BOLSumLine."Posted Source ID" := CurrentPackage."Posted Source ID";
      BOLSumLine."Package No." := PackageNoToShow;
      IF CurrentLevel <= ARRAYLEN(LevelPackageNo) THEN BEGIN
        LevelPackageNo[CurrentLevel - 3] := PackageNoToShow;
        LevelLineNo[CurrentLevel - 3] := BOLSumLine."Line No.";
      END;
      SetLevelFields(BOLSumLine,LevelPackageNo,LevelLineNo);
      BOLSumLine."External Tracking No." := CurrentPackage."External Tracking No.";
      BOLSumLine.Weight := CurrentPackage."Calculation Weight";
      BOLSumLine.Volume := CurrentPackage."Calculation Volume";
      BOLSumLine.Value := CurrentPackage."Calculation Value";
      BOLSumLine."Multi Document" := CurrentPackage."Multi Document Package";

      IF CurrentPackage."UCC No." <> '' THEN BEGIN
        ParentUCC128No := CurrentPackage."UCC No.";
        ParentUCC128NoPrint := CurrentPackage."UCC No. (Print)";
        ParentRFID := CurrentPackage."RF-ID (Hex)";
      END;
      BOLSumLine."UCC No." := ParentUCC128No;
      BOLSumLine."UCC No. (Print)" := ParentUCC128NoPrint;
      BOLSumLine."RF-ID (Hex)" := ParentRFID;
      IF CurrentPackage."External Document No." <> '' THEN
        ParentExternalDocNo := CurrentPackage."External Document No.";
      BOLSumLine."External Document No." := ParentExternalDocNo;
      PackageLine.RESET;
      PackageLine.SETRANGE("Package No.",CurrentPackage."No.");
      PackageLine.SETRANGE(Type,PackageLine.Type::Package);
      PackageLine.SETFILTER("No.",'<>%1','');
      IF PackageLine.FIND('-') THEN BEGIN
        PackageLine.SETFILTER(Type,'<>%1',PackageLine.Type::Package);
        BOLSumLine."Package Contains Only Packages" := NOT PackageLine.FIND('-');
      END ELSE
        BOLSumLine."Package Contains Only Packages" := FALSE;
      BOLSumLine.INSERT;
      BOLSumLinePackage := BOLSumLine;

      LevelParent[BOLSumLine.Level] := BOLSumLine."Line No.";

      CASE BOLSumLine."Bill of Lading Type" OF
        BOLSumLine."Bill of Lading Type"::Standard:
          BEGIN
            PackageLine.RESET;
            PackageLine.SETRANGE("Package No.",CurrentPackage."No.");
            PackageLine.SETFILTER(
              Type,'<>%1&<>%2',PackageLine.Type::Package,PackageLine.Type::" ");
            PackageLine.SETFILTER(Quantity,'<>0');
            IF PackageLine.FIND('-') THEN BEGIN
              BOLSumLinePackage."No. of Packages with Items" := 1;
              NonShippedItemFound := FALSE;
              IF ZeroASN THEN BEGIN
                PostedPackageLineTmp.RESET;
                PostedPackageLineTmp.SETRANGE("Package No.",PackageLine."Package No.");
                IF PostedPackageLineTmp.FIND('-') THEN
                  NonShippedItemFound := TRUE
                ELSE
                  NonShippedItemFound := FALSE;
              END;

              REPEAT
                BOLSumLine."Line No." := BOLSumLine."Line No." + 1;
                BOLSumLine.Level := CurrentLevel + 1;
                BOLSumLine."Parent Line No." := LevelParent[BOLSumLine.Level - 1];
                BOLSumLine.Type := BOLSumLine.Type::Item;
                BOLSumLine."No." := PackageLine."No.";
                BOLSumLine.Description := PackageLine.Description;
                IF (PackageLine.Quantity < PackageLine."Quantity (Base)") AND
                   (PackageLine.Type = PackageLine.Type::Item)
                THEN BEGIN
                  ItemUnitOfMeasure.RESET;
                  ItemUnitOfMeasure.SETRANGE("Item No.",PackageLine."No.");
                  ItemUnitOfMeasure.SETRANGE("Qty. per Unit of Measure",1);
                  IF NOT ItemUnitOfMeasure.FIND('-') THEN
                    CLEAR(ItemUnitOfMeasure);

                  BOLSumLine."Type Description" :=
                    STRSUBSTNO(
                      '%1 %2 %3 %4 %5 (%6 %7).',PackageLine.Type,PackageLine."No.",
                      PackageLine.Description,PackageLine.Quantity,
                      PackageLine."Unit of Measure Code",PackageLine."Quantity (Base)",
                      ItemUnitOfMeasure.Code);
                END ELSE
                  BOLSumLine."Type Description" :=
                    STRSUBSTNO(
                      '%1 %2 %3 %4 %5.',PackageLine.Type,PackageLine."No.",
                      PackageLine.Description,PackageLine.Quantity,
                      PackageLine."Unit of Measure Code");
                BOLSumLine."Source Type" := CurrentPackage."Source Type";
                BOLSumLine."Source Subtype" := CurrentPackage."Source Subtype";
                BOLSumLine."Source ID" := CurrentPackage."Source ID";
                BOLSumLine."Posted Source ID" := CurrentPackage."Posted Source ID";
                SetLevelFields(BOLSumLine,LevelPackageNo,LevelLineNo);
                BOLSumLine."UCC No." := ParentUCC128No;
                BOLSumLine."UCC No. (Print)" := ParentUCC128NoPrint;
                BOLSumLine."RF-ID (Hex)" := ParentRFID;
                BOLSumLine."External Document No." := ParentExternalDocNo;
                BOLSumLine."Package No." := PackageNoToShow;
                BOLSumLine."Package Line Line No." := PackageLine."Line No.";
                BOLSumLine."Package Line Type" := PackageLine.Type;
                BOLSumLine."Package Line No." := PackageLine."No.";
                BOLSumLine."Package Line Variant Code" := PackageLine."Variant Code";
                BOLSumLine."Package Line Unit of Measure" :=
                  PackageLine."Unit of Measure Code";
                BOLSumLine."Package Line Quantity" := PackageLine.Quantity;
                BOLSumLine."Package Line Quantity (Base)" := PackageLine."Quantity (Base)";
                BOLSumLine."Multi Package Line Quantity" := PackageLine."Multi Document Quantity";
                BOLSumLine."Multi Package Line Qty. (Base)" :=
                  PackageLine."Multi Document Qty. (Base)";
                BOLSumLine."Multi Document" := CurrentPackage."Multi Document Package";
                BOLSumLine."Item UPC/EAN Number" := PackageLine."Item UPC/EAN Number";
                BOLSumLine."Item UPC/EAN Number (Print)" :=
                  PackageLine."Item UPC/EAN Number (Print)";
                BOLSumLine."Std. Pack UPC/EAN Number" := PackageLine."Std. Pack UPC/EAN Number";
                BOLSumLine."Std. Pack UPC/EAN No. (Print)" :=
                  PackageLine."Std. Pack UPC/EAN No. (Print)";
                BOLSumLine."One Unit of Measure Code" := ItemUnitOfMeasure.Code;
                BOLSumLine.INSERT;

                BOLSumLinePackage."Package Line Quantity" :=
                  BOLSumLinePackage."Package Line Quantity" + BOLSumLine."Package Line Quantity";
                BOLSumLinePackage."Package Line Quantity (Base)" :=
                  BOLSumLinePackage."Package Line Quantity (Base)" +
                  BOLSumLine."Package Line Quantity (Base)";
              UNTIL PackageLine.NEXT = 0;
              {
             IF NonShippedItemFound THEN
               InsertNonShippedItem(
                 BOLSumLine,LevelParent,CurrentPostedPackage,PostedPackageLineTmp,CurrentLevel,
                 ParentUCC128No,ParentUCC128NoPrint,ParentRFID,ParentExternalDocNo,LevelPackageNo,
                 LevelLineNo);
              }//TBC
            END;
          END;
        BOLSumLine."Bill of Lading Type"::"Package Summary":
          BEGIN
            PackageSummaryLine.RESET;
            PackageSummaryLine.SETRANGE("Package No.",CurrentPackage."No.");
            PackageSummaryLine.SETFILTER(Type,'<>%1',PackageSummaryLine.Type::Package);
            IF CurrentPackage."Multi Document Package" THEN
              PackageSummaryLine.SETFILTER(Quantity,'<>0');
            IF PackageSummaryLine.FIND('-') THEN BEGIN
              BOLSumLinePackage."No. of Packages with Items" := 1;

              REPEAT
                BOLSumLine."Line No." := BOLSumLine."Line No." + 1;
                BOLSumLine.Level := CurrentLevel + 1;
                BOLSumLine."Parent Line No." := LevelParent[BOLSumLine.Level - 1];
                BOLSumLine.Type := BOLSumLine.Type::Item;
                BOLSumLine."No." := PackageSummaryLine."No.";
                BOLSumLine.Description := PackageSummaryLine.Description;
                IF (PackageSummaryLine.Quantity < PackageSummaryLine."Quantity (Base)") AND
                   (PackageSummaryLine.Type = PackageSummaryLine.Type::Item)
                THEN BEGIN
                  ItemUnitOfMeasure.RESET;
                  ItemUnitOfMeasure.SETRANGE("Item No.",PackageSummaryLine."No.");
                  ItemUnitOfMeasure.SETRANGE("Qty. per Unit of Measure",1);
                  IF NOT ItemUnitOfMeasure.FIND('-') THEN
                    CLEAR(ItemUnitOfMeasure);

                  BOLSumLine."Type Description" :=
                    STRSUBSTNO(
                      '%1 %2 %3 %4 %5 (%6 %7).',PackageSummaryLine.Type,PackageSummaryLine."No.",
                      PackageSummaryLine.Description,PackageSummaryLine.Quantity,
                      PackageSummaryLine."Unit of Measure Code",PackageSummaryLine."Quantity (Base)",
                      ItemUnitOfMeasure.Code);
                END ELSE
                  BOLSumLine."Type Description" :=
                    STRSUBSTNO(
                      '%1 %2 %3 %4 %5.',PackageSummaryLine.Type,PackageSummaryLine."No.",
                      PackageSummaryLine.Description,PackageSummaryLine.Quantity,
                      PackageSummaryLine."Unit of Measure Code");
                BOLSumLine."Source Type" := CurrentPackage."Source Type";
                BOLSumLine."Source Subtype" := CurrentPackage."Source Subtype";
                BOLSumLine."Source ID" := CurrentPackage."Source ID";
                BOLSumLine."Posted Source ID" := CurrentPackage."Posted Source ID";
                SetLevelFields(BOLSumLine,LevelPackageNo,LevelLineNo);
                BOLSumLine."UCC No." := ParentUCC128No;
                BOLSumLine."UCC No. (Print)" := ParentUCC128NoPrint;
                BOLSumLine."RF-ID (Hex)" := ParentRFID;
                BOLSumLine."External Document No." := ParentExternalDocNo;
                BOLSumLine."Package No." := PackageNoToShow;
                BOLSumLine."Package Line Line No." := PackageSummaryLine."Line No.";
                BOLSumLine."Package Line Type" := PackageSummaryLine.Type;
                BOLSumLine."Package Line No." := PackageSummaryLine."No.";
                BOLSumLine."Package Line Variant Code" := PackageSummaryLine."Variant Code";
                BOLSumLine."Package Line Unit of Measure" :=
                  PackageSummaryLine."Unit of Measure Code";
                BOLSumLine."Package Line Quantity" := PackageSummaryLine.Quantity;
                BOLSumLine."Package Line Quantity (Base)" := PackageSummaryLine."Quantity (Base)";
                BOLSumLine."Multi Package Line Quantity" := PackageSummaryLine."Multi Document Quantity";
                BOLSumLine."Multi Package Line Qty. (Base)" :=
                  PackageSummaryLine."Multi Document Qty. (Base)";
                BOLSumLine."Multi Document" := CurrentPackage."Multi Document Package";
                BOLSumLine."Item UPC/EAN Number" := PackageSummaryLine."Item UPC/EAN Number";
                BOLSumLine."Item UPC/EAN Number (Print)" :=
                  PackageSummaryLine."Item UPC/EAN Number (Print)";
                BOLSumLine."Std. Pack UPC/EAN Number" := PackageSummaryLine."Std. Pack UPC/EAN Number";
                BOLSumLine."Std. Pack UPC/EAN No. (Print)" :=
                  PackageSummaryLine."Std. Pack UPC/EAN No. (Print)";
                BOLSumLine."One Unit of Measure Code" := ItemUnitOfMeasure.Code;
                BOLSumLine.INSERT;

                BOLSumLinePackage."Package Line Quantity" :=
                  BOLSumLinePackage."Package Line Quantity" + BOLSumLine."Package Line Quantity";
                BOLSumLinePackage."Package Line Quantity (Base)" :=
                  BOLSumLinePackage."Package Line Quantity (Base)" +
                  BOLSumLine."Package Line Quantity (Base)";
              UNTIL PackageSummaryLine.NEXT = 0;
            END;
          END;
      END;

      PackageLine.RESET;
      PackageLine.SETRANGE("Package No.",CurrentPackage."No.");
      PackageLine.SETRANGE(Type,PackageLine.Type::Package);
      IF CurrentPackage."Multi Document Package" THEN
        PackageLine.SETFILTER(Quantity,'<>0');
      IF PackageLine.FIND('-') THEN BEGIN
        BOLSumLinePackage."No. of Packages with Packages" := 1;

        REPEAT
          IF PackageLine."No." <> '' THEN BEGIN
            IF CurrentPackage."Multi Document Package" THEN
              Package.GET(PackageLine."No." + '-' + BOLSumLine."Source ID")
            ELSE
              Package.GET(PackageLine."No.");

            UpdateStdRecurseUnPostedPackage(
              BOLSumLine,LevelParent,Package,CurrentLevel + 1,
              ParentUCC128No,ParentUCC128NoPrint,ParentRFID,
              ParentExternalDocNo,LevelPackageNo,LevelLineNo);
              //TBO
            BOLSumLinePackage."No. of Packages with Items" :=
              BOLSumLinePackage."No. of Packages with Items" +
              BOLSumLine."No. of Packages with Items";
            BOLSumLinePackage."No. of Packages with Packages" :=
              BOLSumLinePackage."No. of Packages with Packages" +
              BOLSumLine."No. of Packages with Packages";
            BOLSumLinePackage."Package Line Quantity" :=
              BOLSumLinePackage."Package Line Quantity" + BOLSumLine."Package Line Quantity";
            BOLSumLinePackage."Package Line Quantity (Base)" :=
              BOLSumLinePackage."Package Line Quantity (Base)" +
              BOLSumLine."Package Line Quantity (Base)";
          END;
        UNTIL PackageLine.NEXT = 0;
      END;

      BOLSumLinePackage.MODIFY;
      BOLSumLine."Package Line Quantity" := BOLSumLinePackage."Package Line Quantity";
      BOLSumLine."Package Line Quantity (Base)" := BOLSumLinePackage."Package Line Quantity (Base)";
      BOLSumLine."No. of Packages with Packages" := BOLSumLinePackage."No. of Packages with Packages";
      BOLSumLine."No. of Packages with Items" := BOLSumLinePackage."No. of Packages with Items";
    END;

    PROCEDURE UpdateStdRecurseLP@1000000002(VAR BOLSumLine@1000000000 : Record 14000825;VAR LevelParent@1000000001 : ARRAY [100] OF Integer;CurrentLevel@1000000003 : Integer;ParentUCC128No@1000000004 : Code[30];ParentUCC128NoPrint@1000000005 : Code[30];ParentRFID@1240030000 : Code[50];ParentExternalDocNo@1000000006 : Code[35];ShipmentNo@1170000001 : Code[20];LevelPackageNo@1000000007 : ARRAY [5] OF Code[20];LevelLineNo@1000000008 : ARRAY [5] OF Integer);
    VAR
      ItemUnitOfMeasure@1000000013 : Record 5404;
      BOLSumLinePackage@1000000014 : Record 14000825;
      PackageNoToShow@1000000009 : Code[20];
      i@1000000010 : Integer;
      LicensePlateHeader@1000000015 : Record 23044505;
      LicensePlateLine@1000000016 : Record 23044506;
      Item@1000000018 : Record 27;
      lrecLineUsage@1170000000 : Record 23044507;
      PostedWhseShipmentLine@1170000002 : Record 7323;
      ShipmentFound@1170000003 : Boolean;
    BEGIN
      //-->TPZ3202
      IF CurrentLevel >= 99 THEN
        ERROR(Text007);

      PackageNoToShow  := TempIWXLPHdr."No.";
      BOLSumLine.INIT;
      BOLSumLine."Line No." := BOLSumLine."Line No." + 1;
      BOLSumLine.Level := CurrentLevel;
      BOLSumLine."Parent Line No." := LevelParent[BOLSumLine.Level - 1];
      BOLSumLine.Type := BOLSumLine.Type::Package;
      BOLSumLine."No." := PackageNoToShow;
      BOLSumLine.Description := TempIWXLPHdr.Description;
      BOLSumLine."Type Description" := STRSUBSTNO(Text008,PackageNoToShow);

      BOLSumLine."Source Type" := TempIWXLPHdr."Source Document Type";
      //BOLSumLine."Source Subtype" := CurrentPostedPackage."Source Subtype";
      BOLSumLine."Source ID" := TempIWXLPHdr."Shipped Source No.";
      BOLSumLine."Posted Source ID" := ShipmentNo;

      BOLSumLine."Package No." := PackageNoToShow;
      IF CurrentLevel <= ARRAYLEN(LevelPackageNo) THEN BEGIN
        LevelPackageNo[CurrentLevel - 3] := PackageNoToShow;
        LevelLineNo[CurrentLevel - 3] := BOLSumLine."Line No.";
      END;
      SetLevelFields(BOLSumLine,LevelPackageNo,LevelLineNo);
      BOLSumLine."External Tracking No." := TempIWXLPHdr."Package Tracking Number";
      BOLSumLine.Weight := TempIWXLPHdr."Shipment Gross Weight";
      BOLSumLine.Volume := TempIWXLPHdr."Shipment Cubage";
      BOLSumLine.Value := TempIWXLPHdr."Insurance Amount";
      //BOLSumLine."Multi Document" := CurrentPostedPackage."Multi Document Package";

      BOLSumLine."Package Contains Only Packages" := FALSE;
      BOLSumLine.INSERT;
      BOLSumLinePackage := BOLSumLine;

      LevelParent[BOLSumLine.Level] := BOLSumLine."Line No.";

      CASE BOLSumLine."Bill of Lading Type" OF
        BOLSumLine."Bill of Lading Type"::Standard:
          BEGIN
            LicensePlateLine.RESET;
            LicensePlateLine.SETRANGE("License Plate No.",TempIWXLPHdr."No.");
            LicensePlateLine.SETFILTER(Quantity,'<>0');
            IF LicensePlateLine.FINDFIRST THEN BEGIN
              BOLSumLinePackage."No. of Packages with Items" := 1;
              NonShippedItemFound := FALSE;
              IF ZeroASN THEN BEGIN
                LicensePlateLineTemp.RESET;
                LicensePlateLineTemp.SETRANGE("License Plate No.",LicensePlateLine."License Plate No.");
                IF LicensePlateLineTemp.FIND('-') THEN
                  NonShippedItemFound := TRUE
                ELSE
                  NonShippedItemFound := FALSE;
              END;

              REPEAT
                ShipmentFound := FALSE;
                PostedWhseShipmentLine.RESET;
                PostedWhseShipmentLine.SETCURRENTKEY("Posted Source No.","Posting Date");
                PostedWhseShipmentLine.SETRANGE("Posted Source No.",ShipmentNo);
                IF PostedWhseShipmentLine.FINDFIRST THEN;
                lrecLineUsage.RESET;
                lrecLineUsage.SETRANGE("License Plate No.",LicensePlateLine."License Plate No.");
                lrecLineUsage.SETRANGE("License Plate Line No.",LicensePlateLine."Line No.");
                lrecLineUsage.SETRANGE("Source Document",lrecLineUsage."Source Document"::Shipment);
                lrecLineUsage.SETRANGE("Source No.",PostedWhseShipmentLine."Whse. Shipment No.");
                lrecLineUsage.SETRANGE("Source Line No.",PostedWhseShipmentLine."Whse Shipment Line No.");
                IF NOT lrecLineUsage.ISEMPTY THEN
                  ShipmentFound := TRUE
                ELSE BEGIN
                  lrecLineUsage.SETRANGE("Source Document",lrecLineUsage."Source Document"::"Sales Order");
                  lrecLineUsage.SETRANGE("Source No.",PostedWhseShipmentLine."Source No.");
                  lrecLineUsage.SETRANGE("Source Line No.",PostedWhseShipmentLine."Source Line No.");
                  IF NOT lrecLineUsage.ISEMPTY THEN
                    ShipmentFound := TRUE;
                END;
                IF ShipmentFound THEN BEGIN
                  BOLSumLine."Line No." := BOLSumLine."Line No." + 1;
                  BOLSumLine.Level := CurrentLevel + 1;
                  BOLSumLine."Parent Line No." := LevelParent[BOLSumLine.Level - 1];
                  BOLSumLine.Type := BOLSumLine.Type::Item;
                  BOLSumLine."No." := LicensePlateLine."No.";
                  BOLSumLine.Description := LicensePlateLine.Description;
                  IF (LicensePlateLine.Quantity < LicensePlateLine."Quantity (Base)") AND
                     (LicensePlateLine.Type = LicensePlateLine.Type::Item)
                  THEN BEGIN
                    ItemUnitOfMeasure.RESET;
                    ItemUnitOfMeasure.SETRANGE("Item No.",LicensePlateLine."No.");
                    ItemUnitOfMeasure.SETRANGE("Qty. per Unit of Measure",1);
                    IF NOT ItemUnitOfMeasure.FIND('-') THEN
                      CLEAR(ItemUnitOfMeasure);

                    BOLSumLine."Type Description" :=
                      STRSUBSTNO(
                        '%1 %2 %3 %4 %5 (%6 %7).',LicensePlateLine.Type,LicensePlateLine."No.",
                        LicensePlateLine.Description,LicensePlateLine.Quantity,
                        LicensePlateLine."Unit of Measure Code",LicensePlateLine."Quantity (Base)",
                        ItemUnitOfMeasure.Code);
                  END ELSE
                    BOLSumLine."Type Description" :=
                      STRSUBSTNO(
                        '%1 %2 %3 %4 %5.',LicensePlateLine.Type,LicensePlateLine."No.",
                        LicensePlateLine.Description,LicensePlateLine.Quantity,
                        LicensePlateLine."Unit of Measure Code");
                  BOLSumLine."Source Type" := TempIWXLPHdr."Source Document Type";
                  //BOLSumLine."Source Subtype" := CurrentPostedPackage."Source Subtype"; //TBD
                  BOLSumLine."Source ID" := TempIWXLPHdr."Shipment No.";
                  BOLSumLine."Posted Source ID" := ShipmentNo;
                  SetLevelFields(BOLSumLine,LevelPackageNo,LevelLineNo);
                  BOLSumLine."UCC No." := ParentUCC128No;
                  BOLSumLine."UCC No. (Print)" := ParentUCC128NoPrint;
                  BOLSumLine."RF-ID (Hex)" := ParentRFID;
                  BOLSumLine."External Document No." := ParentExternalDocNo;
                  BOLSumLine."Package No." := PackageNoToShow;
                  BOLSumLine."Package Line Line No." := LicensePlateLine."Line No.";
                  BOLSumLine."Package Line Type" := LicensePlateLine.Type;
                  BOLSumLine."Package Line No." := LicensePlateLine."No.";
                  BOLSumLine."Package Line Variant Code" := LicensePlateLine."Variant Code";
                  BOLSumLine."Package Line Unit of Measure" :=
                    LicensePlateLine."Unit of Measure Code";
                  BOLSumLine."Package Line Quantity" := LicensePlateLine.Quantity;
                  BOLSumLine."Package Line Quantity (Base)" := LicensePlateLine."Quantity (Base)";
                  IF Item.GET(LicensePlateLine."No.") THEN;
                  BOLSumLine."Item UPC/EAN Number" := Item."Item UPC/EAN Number";
                  BOLSumLine."One Unit of Measure Code" := ItemUnitOfMeasure.Code;
                  BOLSumLine.INSERT;

                  BOLSumLinePackage."Package Line Quantity" :=
                    BOLSumLinePackage."Package Line Quantity" + BOLSumLine."Package Line Quantity";
                  BOLSumLinePackage."Package Line Quantity (Base)" :=
                    BOLSumLinePackage."Package Line Quantity (Base)" +
                    BOLSumLine."Package Line Quantity (Base)";
                END;
              UNTIL LicensePlateLine.NEXT = 0;
             IF NonShippedItemFound THEN
               InsertNonShippedLPItem(
                 BOLSumLine,LevelParent,TempIWXLPHdr,LicensePlateLineTemp,CurrentLevel,
                 ParentUCC128No,ParentUCC128NoPrint,ParentRFID,ParentExternalDocNo,LevelPackageNo,
                 LevelLineNo);
            END;
          END;
      END;
      BOLSumLinePackage.MODIFY;
      BOLSumLine."Package Line Quantity" := BOLSumLinePackage."Package Line Quantity";
      BOLSumLine."Package Line Quantity (Base)" := BOLSumLinePackage."Package Line Quantity (Base)";
      BOLSumLine."No. of Packages with Packages" := BOLSumLinePackage."No. of Packages with Packages";
      BOLSumLine."No. of Packages with Items" := BOLSumLinePackage."No. of Packages with Items";
      //<--TPZ3202
    END;

    PROCEDURE InsertNonShippedLPItem@1000000016(VAR BOLSumLine@1000000000 : Record 14000825;VAR LevelParent@1000000001 : ARRAY [100] OF Integer;CurrentPostedLP@1000000002 : Record 23044505;CurrentPostedLPLine@1240020000 : TEMPORARY Record 23044506;CurrentLevel@1000000003 : Integer;ParentUCC128No@1000000004 : Code[30];ParentUCC128NoPrint@1000000005 : Code[30];ParentRFID@1240030000 : Code[50];ParentExternalDocNo@1000000006 : Code[35];LevelPackageNo@1000000007 : ARRAY [5] OF Code[20];LevelLineNo@1000000008 : ARRAY [5] OF Integer);
    VAR
      PostedLP@1000000011 : Record 23044505;
      PostedLPLine@1000000012 : Record 23044506;
      ItemUnitOfMeasure@1000000013 : Record 5404;
      BOLSumLinePackage@1000000014 : Record 14000825;
      PackageNoToShow@1000000009 : Code[20];
      i@1000000010 : Integer;
      Item@1000000015 : Record 27;
    BEGIN
      //-->TPZ3202
      LicensePlateLineTemp.RESET;
      LicensePlateLineTemp.SETRANGE("License Plate No.",LicensePlateLineTemp."License Plate No.");
      IF PostedPackageLineTmp.FIND('-') THEN
        REPEAT
          BOLSumLine."Line No." := BOLSumLine."Line No." + 1;
          BOLSumLine.Level := CurrentLevel + 1;
          BOLSumLine."Parent Line No." := LevelParent[BOLSumLine.Level - 1];
          BOLSumLine.Type := BOLSumLine.Type::Item;
          BOLSumLine."No." := LicensePlateLineTemp."No.";
          BOLSumLine.Description := LicensePlateLineTemp.Description;
          IF (LicensePlateLineTemp.Quantity < LicensePlateLineTemp."Quantity (Base)") AND
             (LicensePlateLineTemp.Type = LicensePlateLineTemp.Type::Item)
          THEN BEGIN
            ItemUnitOfMeasure.RESET;
            ItemUnitOfMeasure.SETRANGE("Item No.",LicensePlateLineTemp."No.");
            ItemUnitOfMeasure.SETRANGE("Qty. per Unit of Measure",1);
            IF NOT ItemUnitOfMeasure.FIND('-') THEN
              CLEAR(ItemUnitOfMeasure);

            BOLSumLine."Type Description" :=
              STRSUBSTNO(
                '%1 %2 %3 %4 %5 (%6 %7).',LicensePlateLineTemp.Type,LicensePlateLineTemp."No.",
                LicensePlateLineTemp.Description,LicensePlateLineTemp.Quantity,
                LicensePlateLineTemp."Unit of Measure Code",LicensePlateLineTemp."Quantity (Base)",
                ItemUnitOfMeasure.Code);
          END ELSE
            BOLSumLine."Type Description" :=
              STRSUBSTNO(
                '%1 %2 %3 %4 %5.',LicensePlateLineTemp.Type,LicensePlateLineTemp."No.",
                LicensePlateLineTemp.Description,LicensePlateLineTemp.Quantity,
                LicensePlateLineTemp."Unit of Measure Code");
          BOLSumLine."Source Type" := CurrentPostedLP."Shipped Source Document";
          //BOLSumLine."Source Subtype" := CurrentPostedPackage."Source Subtype";
          BOLSumLine."Source ID" := CurrentPostedLP."Shipped Source No.";
          BOLSumLine."Posted Source ID" := CurrentPostedLP."Shipment No.";
          SetLevelFields(BOLSumLine,LevelPackageNo,LevelLineNo);
          BOLSumLine."UCC No." := ParentUCC128No;
          BOLSumLine."UCC No. (Print)" := ParentUCC128NoPrint;
          BOLSumLine."RF-ID (Hex)" := ParentRFID;
          BOLSumLine."External Document No." := ParentExternalDocNo;
          BOLSumLine."Package No." := PackageNoToShow;
          BOLSumLine."Package Line Line No." := LicensePlateLineTemp."Line No.";
          BOLSumLine."Package Line Type" := LicensePlateLineTemp.Type;
          BOLSumLine."Package Line No." := LicensePlateLineTemp."No.";
          BOLSumLine."Package Line Variant Code" := LicensePlateLineTemp."Variant Code";
          BOLSumLine."Package Line Unit of Measure" :=
            LicensePlateLineTemp."Unit of Measure Code";
          BOLSumLine."Package Line Quantity" := LicensePlateLineTemp.Quantity;
          BOLSumLine."Package Line Quantity (Base)" := LicensePlateLineTemp."Quantity (Base)";
          IF Item.GET(LicensePlateLineTemp."No.") THEN;
          BOLSumLine."Item UPC/EAN Number" := Item."Item UPC/EAN Number";
          BOLSumLine."One Unit of Measure Code" := ItemUnitOfMeasure.Code;
          BOLSumLine."Zero ASN Line" := TRUE;
          BOLSumLine.INSERT;

          BOLSumLinePackage."Package Line Quantity" :=
            BOLSumLinePackage."Package Line Quantity" + BOLSumLine."Package Line Quantity";
          BOLSumLinePackage."Package Line Quantity (Base)" :=
            BOLSumLinePackage."Package Line Quantity (Base)" +
            BOLSumLine."Package Line Quantity (Base)";
        UNTIL LicensePlateLineTemp.NEXT = 0;
      //<--TPZ3202
    END;

    PROCEDURE AddZeroShippedToLP@1000000019(BillOfLadingLine@1240020014 : Record 14000823;SalesShipmentLine@1240020015 : Record 111);
    VAR
      LicensePlate@1240020006 : Record 23044505;
      LicensePlateLine@1240020005 : Record 23044506;
      Item@1240020004 : Record 27;
      ItemUnitOfMeasure@1240020003 : Record 5404;
      LineWeightType@1240020001 : 'Pounds,Kilograms';
    BEGIN
      //-->TPZ3202
      LicensePlate.RESET;
      LicensePlate.SETRANGE("No.",GetLPFromPostedShipment(SalesShipmentLine."No."));
      IF LicensePlate.FIND('+') THEN BEGIN
        LicensePlateLine.RESET;
        LicensePlateLine.SETRANGE("License Plate No.",LicensePlate."No.");
        IF LicensePlateLine.FIND('+') THEN BEGIN
          IF ZeroShippedLineNo = 0 THEN
            ZeroShippedLineNo := LicensePlateLine."Line No." + 10000
          ELSE
            ZeroShippedLineNo := ZeroShippedLineNo + 10000;
        END ELSE
          ZeroShippedLineNo := 10000;
        IF LicensePlate."Weight Unit of Measure" = 'LB' THEN
         LineWeightType := 0;

        IF Item.GET(SalesShipmentLine."No.") THEN;
        IF ItemUnitOfMeasure.GET(
          SalesShipmentLine."No.",SalesShipmentLine."Unit of Measure Code") THEN;
        LicensePlateLineTemp."License Plate No." := LicensePlate."No.";
        LicensePlateLineTemp."Line No." := ZeroShippedLineNo;
        LicensePlateLineTemp.INSERT(TRUE);
        LicensePlateLineTemp.Type := LicensePlateLine.Type::Item;
        LicensePlateLineTemp."No." := SalesShipmentLine."No.";
        LicensePlateLineTemp.Description := SalesShipmentLine.Description;
        LicensePlateLineTemp."Variant Code" := SalesShipmentLine."Variant Code";
        LicensePlateLineTemp.Quantity := 0;
        LicensePlateLineTemp."Unit of Measure Code" := SalesShipmentLine."Unit of Measure Code";
        LicensePlateLineTemp."Qty. per Unit of Measure" :=
          SalesShipmentLine."Qty. per Unit of Measure";
        PostedPackageLineTmp.MODIFY;
      END;
      //<--TPZ3202
    END;

    LOCAL PROCEDURE GetLPFromPostedShipment@1000000020(ShipmentNo@1000000000 : Code[20]) LPNo : Code[20];
    VAR
      PostedWhseShipmentLine@1000000002 : Record 7323;
    BEGIN
      //-->TPZ3202
      PostedWhseShipmentLine.RESET;
      PostedWhseShipmentLine.SETRANGE("Posted Source No.",ShipmentNo);
      IF PostedWhseShipmentLine.FINDFIRST THEN
        EXIT(PostedWhseShipmentLine."No.");
      //<--TPZ3202
    END;

    LOCAL PROCEDURE GetLPTrackingNo@1170000000(PostedSalesShipNo@1170000000 : Code[20]);
    VAR
      IWXLicensePlateHeader@1000000004 : Record 23044505;
      WarehouseShipmentLine@1000000003 : Record 7321;
      PostedWarehouseReleaseLine@1000000002 : Record 7323;
      RegisteredWhseActivityLine@1000000000 : Record 5773;
      RegisteredWhseActivityHdr@1000000001 : Record 5772;
      SalesShipmentHeader@1000000005 : Record 110;
      PKgTrackingFound@1170000001 : Boolean;
    BEGIN
      //-->TPZ3202
      SalesShipmentHeader.GET(PostedSalesShipNo);
      //Package tracking from license plate
      //-->Checking Warehouse Shipment/Posted Warehouse shipment in LP
      PKgTrackingFound := FALSE;
      PostedWarehouseReleaseLine.RESET;
      PostedWarehouseReleaseLine.SETRANGE("Posted Source No.",PostedSalesShipNo);
      PostedWarehouseReleaseLine.SETRANGE("Source No.",SalesShipmentHeader."Order No.");
      IF PostedWarehouseReleaseLine.FINDSET THEN BEGIN
        PKgTrackingFound := TRUE;
        REPEAT
          IWXLicensePlateHeader.RESET;
          IWXLicensePlateHeader.SETRANGE("Shipped Source No.",PostedWarehouseReleaseLine."Whse. Shipment No.");
          IWXLicensePlateHeader.SETRANGE("Shipment No.",PostedWarehouseReleaseLine."No.");
          IF IWXLicensePlateHeader.FINDFIRST THEN
            REPEAT
              IF NOT TempIWXLPHdr.GET(IWXLicensePlateHeader."No.") THEN BEGIN
                TempIWXLPHdr.INIT;
                TempIWXLPHdr.TRANSFERFIELDS(IWXLicensePlateHeader);
                TempIWXLPHdr.INSERT;
              END;
            UNTIL IWXLicensePlateHeader.NEXT = 0;
        UNTIL PostedWarehouseReleaseLine.NEXT = 0;
      END;
      //<--Checking Warehouse Shipment/Posted Warehouse shipment in LP
      //-->Checking WPI in LP source
      IF NOT PKgTrackingFound THEN BEGIN
        PostedWarehouseReleaseLine.RESET;
        PostedWarehouseReleaseLine.SETRANGE("Posted Source No.",PostedSalesShipNo);
        IF PostedWarehouseReleaseLine.FINDSET THEN BEGIN
          RegisteredWhseActivityLine.RESET;
          RegisteredWhseActivityLine.SETRANGE("Activity Type",RegisteredWhseActivityLine."Activity Type"::Pick);
          RegisteredWhseActivityLine.SETRANGE("Whse. Document No.",PostedWarehouseReleaseLine."Whse. Shipment No.");
          RegisteredWhseActivityLine.SETRANGE("Whse. Document Line No.",PostedWarehouseReleaseLine."Whse Shipment Line No.");
          IF RegisteredWhseActivityLine.FINDFIRST THEN
            REPEAT
              IF RegisteredWhseActivityHdr.GET(RegisteredWhseActivityLine."Activity Type",RegisteredWhseActivityLine."No.") THEN BEGIN
                IWXLicensePlateHeader.RESET;
                IWXLicensePlateHeader.SETAUTOCALCFIELDS("Source No.");
                IWXLicensePlateHeader.SETRANGE("Source No.",RegisteredWhseActivityHdr."Whse. Activity No.");
                IF IWXLicensePlateHeader.FINDFIRST THEN BEGIN
                  REPEAT
                    IF NOT TempIWXLPHdr.GET(IWXLicensePlateHeader."No.") THEN BEGIN
                      TempIWXLPHdr.INIT;
                      TempIWXLPHdr.TRANSFERFIELDS(IWXLicensePlateHeader);
                      TempIWXLPHdr.INSERT;
                    END;
                  UNTIL IWXLicensePlateHeader.NEXT = 0;
                END;
              END;
            UNTIL RegisteredWhseActivityLine.NEXT = 0;
        END;
      END;
      //<--
      //-->Checking Sales Order No. in LP
      IF NOT PKgTrackingFound THEN BEGIN
        IWXLicensePlateHeader.RESET;
        IWXLicensePlateHeader.SETRANGE("Shipment No.",SalesShipmentHeader."Order No.");
        IF IWXLicensePlateHeader.FINDFIRST THEN BEGIN
          PKgTrackingFound := TRUE;
          REPEAT
            IF NOT TempIWXLPHdr.GET(IWXLicensePlateHeader."No.") THEN BEGIN
              TempIWXLPHdr.INIT;
              TempIWXLPHdr.TRANSFERFIELDS(IWXLicensePlateHeader);
              TempIWXLPHdr.INSERT;
            END;
          UNTIL IWXLicensePlateHeader.NEXT = 0;
        END;
      END;

      //<--TPZ3202
    END;

    BEGIN
    {
      2018-09-07 TPZ2409 UCHOUHAN
        Added New function UpdateASNSummaryLines1.
      001 TPZ3202 GKG 06152021 Code added to create BOL through LP
    }
    END.
  }
}

