OBJECT Codeunit 14000785 FedEx Management
{
  OBJECT-PROPERTIES
  {
    Date=07/13/20;
    Time=12:00:00 PM;
    Version List=SE0.62;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=%1 formatted is %2 with %3 decimals.';

    PROCEDURE Time2Text@1240030008(CalcTime@1240030000 : Time) : Text[30];
    VAR
      TempText@1240030001 : Text[30];
    BEGIN
      TempText := FORMAT(CalcTime,0,'<Hours24,2><Minutes,2>');
      IF TempText[1] = ' ' THEN
        TempText := '0' + COPYSTR(TempText,2,STRLEN(TempText));
      EXIT(TempText);
    END;

    PROCEDURE FixPhoneNo@1240030016(OriginalPhone@1240030000 : Text[30]) ReturnPhone : Text[30];
    VAR
      i@1240030001 : Integer;
      PackingStation@1240020000 : Record 14000709;
    BEGIN
      IF OriginalPhone = '' THEN BEGIN
        PackingStation.GetPackingStation;
        OriginalPhone := PackingStation."Phone No. to use If Blank";
      END;

      FOR i := 1 TO STRLEN(OriginalPhone) DO BEGIN
        IF (OriginalPhone[i] >= 48) AND (OriginalPhone[i] <= 57) THEN
          ReturnPhone := ReturnPhone + STRSUBSTNO('%1',OriginalPhone[i]);
      END;
    END;

    PROCEDURE FixZIPCode@1240030017(ZIPCodeText@1240030000 : Text[30]) : Text[9];
    BEGIN
      EXIT(COPYSTR(DELCHR(ZIPCodeText,'=',' -'),1,9));
    END;

    PROCEDURE FixState@1240030018(StateText@1240030000 : Text[30]) : Text[2];
    BEGIN
      EXIT(COPYSTR(DELCHR(StateText,'>',' '),1,2));
    END;

    PROCEDURE FixUnitOfMeasure@44(UnitOfMeasureText@1240030000 : Text[30]) : Text[3];
    BEGIN
      EXIT(COPYSTR(UnitOfMeasureText,1,3));
    END;

    PROCEDURE Date2Integer@25(CalcDate@1240030000 : Date) : Integer;
    BEGIN
      EXIT(DATE2DMY(CalcDate,3) * 10000 + DATE2DMY(CalcDate,2) * 100 + DATE2DMY(CalcDate,1));
    END;

    PROCEDURE Decimal2Text@36(CalcDecimal@1240030000 : Decimal;DecimalToShow@1240030001 : Integer) : Text[30];
    VAR
      TempText@1240030002 : Text[30];
      ThousandChar@1240030003 : Text[1];
    BEGIN
      ThousandChar := COPYSTR(FORMAT(1000.1),2,1);
      TempText := FORMAT(CalcDecimal);
      TempText := DELCHR(TempText,'=',ThousandChar);
      TempText := CONVERTSTR(TempText,',','.');

      IF DecimalToShow <> 0 THEN BEGIN
        IF STRPOS(TempText,'.') = 0 THEN
          TempText := TempText + '.000000'
        ELSE
          TempText := TempText + '00000';
        TempText := COPYSTR(TempText,1,STRPOS(TempText,'.') + DecimalToShow);

        IF (STRLEN(TempText) - STRPOS(TempText,'.') <> DecimalToShow) OR (STRPOS(TempText,'.') = 0) THEN
          ERROR(Text001,CalcDecimal,TempText,DecimalToShow);
      END;

      EXIT(TempText);
    END;

    PROCEDURE Text2Decimal@29(CalcText@1240030000 : Text[30]) : Decimal;
    VAR
      TempDecimal@1240030001 : Decimal;
    BEGIN
      IF CalcText = '' THEN
        EXIT(0);

      EVALUATE(TempDecimal,CalcText);
      EXIT(TempDecimal);
    END;

    PROCEDURE Integer2Text@38(CalcInteger@1240030000 : Integer) : Text[30];
    VAR
      TempText@1240030001 : Text[30];
      ThousandChar@1240030002 : Text[1];
    BEGIN
      ThousandChar := COPYSTR(FORMAT(1000.1),2,1);
      TempText := FORMAT(CalcInteger);
      TempText := DELCHR(TempText,'=',ThousandChar);
      TempText := CONVERTSTR(TempText,',','.');
      EXIT(TempText);
    END;

    PROCEDURE Text2Integer@41(CalcText@1240030000 : Text[30]) : Integer;
    VAR
      TempInteger@1240030001 : Integer;
    BEGIN
      IF CalcText = '' THEN
        EXIT(0);

      EVALUATE(TempInteger,CalcText);
      EXIT(TempInteger);
    END;

    PROCEDURE Boolean2YN@40(CalcBoolean@1240030000 : Boolean) : Text[1];
    BEGIN
      IF CalcBoolean THEN
        EXIT('Y')
      ELSE
        EXIT('N');
    END;

    PROCEDURE Boolean2TF@1240030007(CalcBoolean@1240030000 : Boolean) : Text[5];
    BEGIN
      IF CalcBoolean THEN
        EXIT('TRUE')
      ELSE
        EXIT('FALSE');
    END;

    PROCEDURE YN2Boolean@39(CalcText@1240030000 : Text[30]) : Boolean;
    BEGIN
      EXIT(CalcText = 'Y');
    END;

    PROCEDURE GetFedExCountryCode@27(CountryCode@1240030000 : Code[10]) : Code[10];
    VAR
      Country@1240030001 : Record 9;
    BEGIN
      IF CountryCode <> '' THEN BEGIN
        Country.GET(CountryCode);
        Country.TESTFIELD(FedEx);
        Country.TESTFIELD("ISO 2 char Country Code");
        EXIT(Country."ISO 2 char Country Code");
      END ELSE
        EXIT('US');
    END;

    PROCEDURE AddElement@1240030000(VAR XMLNode@1240030000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";NodeName@1240030001 : Text[250];NodeText@1240030002 : Text[250];NameSpace@1240030003 : Text[250];VAR CreatedXMLNode@1240030004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") ExitStatus : Integer;
    VAR
      NewChildNode@1240030005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      NewChildNode := XMLNode.OwnerDocument.CreateNode('element', NodeName, NameSpace);

      IF ISNULL(NewChildNode) THEN BEGIN
        ExitStatus := 50;
        EXIT;
      END;

      IF NodeText <> '' THEN
        NewChildNode.InnerText := NodeText;

      XMLNode.AppendChild(NewChildNode);
      CreatedXMLNode := NewChildNode;

      ExitStatus := 0;
    END;

    PROCEDURE AddAttribute@1240030003(VAR XMLNode@1240030000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";Name@1240030001 : Text[260];NodeValue@1240030002 : Text[260];NormalCaseMode@1240020000 : Boolean) ExitStatus : Integer;
    VAR
      XMLNewAttributeNode@1240030004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      IF NOT NormalCaseMode THEN
        Name := UPPERCASE(Name);
      XMLNewAttributeNode := XMLNode.OwnerDocument.CreateAttribute(Name);

      IF ISNULL(XMLNewAttributeNode) THEN BEGIN
        ExitStatus := 60;
        EXIT(ExitStatus)
      END;

      IF NodeValue <> '' THEN
        XMLNewAttributeNode.Value := NodeValue;

      XMLNode.Attributes.SetNamedItem(XMLNewAttributeNode);
    END;

    PROCEDURE FindNode@1240030004(XMLRootNode@1240030000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodePath@1240030001 : Text[250];VAR FoundXMLNode@1240030002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";XMLNsMgr@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager") : Boolean;
    BEGIN
      IF ISNULL(XMLRootNode) THEN
        EXIT(FALSE);

      FoundXMLNode := XMLRootNode.SelectSingleNode(NodePath,XMLNsMgr);

      IF ISNULL(FoundXMLNode) THEN
        EXIT(FALSE)
      ELSE
        EXIT(TRUE);
    END;

    PROCEDURE FindNodeText@1240030005(XMLRootNode@1240030000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodePath@1240030001 : Text[250]) : Text[250];
    VAR
      FoundXMLNode@1240030002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      IF ISNULL(XMLRootNode) THEN
        EXIT('');

      FoundXMLNode := XMLRootNode.SelectSingleNode(NodePath);

      IF ISNULL(FoundXMLNode) THEN
        EXIT('')
      ELSE
        EXIT(FoundXMLNode.InnerText);
    END;

    PROCEDURE FindNodes@1240030006(XMLRootNode@1240030000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodePath@1240030001 : Text[250];VAR ReturnedXMLNodeList@1240030002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList") : Boolean;
    BEGIN
      ReturnedXMLNodeList := XMLRootNode.SelectNodes(NodePath);

      IF ISNULL(ReturnedXMLNodeList) THEN
        EXIT(FALSE)
      ELSE
        EXIT(TRUE);
    END;

    PROCEDURE FormatDateYYYYMMDD@1240030002(DatetoFormat@1240030001 : Date) DateFormatted : Text[10];
    BEGIN
      DateFormatted := FORMAT(DatetoFormat,0,'<Year4>-<Month,2>-<Day,2>');
    END;

    PROCEDURE FormatTime24HRMMSS@1240030001(TimetoFormat@1240030000 : Time) TimeFormatted : Text[12];
    VAR
      hour@1240030002 : Integer;
    BEGIN
      TimeFormatted := FORMAT(TimetoFormat);
      IF COPYSTR(TimeFormatted,1,1) = ' ' THEN
        EVALUATE(hour,COPYSTR(TimeFormatted,2,1))
      ELSE
        EVALUATE(hour,COPYSTR(TimeFormatted,1,2));

      IF (STRPOS(TimeFormatted,'PM') > 0) AND
         (hour < 12)
      THEN
        hour := hour + 12;

      IF STRLEN(TimeFormatted) = 12 THEN
        TimeFormatted := FORMAT(hour) + ':' +
          COPYSTR(TimeFormatted,5,2) + ':' + COPYSTR(TimeFormatted,8,2)
      ELSE
        TimeFormatted := FORMAT(hour) + ':' +
          COPYSTR(TimeFormatted,4,2) + ':' + COPYSTR(TimeFormatted,7,2);

      IF STRLEN(TimeFormatted) < 8 THEN
        TimeFormatted := '0' + TimeFormatted;
    END;

    PROCEDURE Blank2Underscore@1240020000(OriginalString@1240030000 : Text[100]) ReturnString : Text[100];
    VAR
      i@1240030001 : Integer;
    BEGIN
      FOR i := 1 TO STRLEN(OriginalString) DO BEGIN
        IF (OriginalString[i] = ' ') THEN
          OriginalString[i] := '_';
        ReturnString := ReturnString + STRSUBSTNO('%1',OriginalString[i]);
      END;
    END;

    PROCEDURE AddBigElement@1240020001(VAR XMLNode@1240030000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";NodeName@1240030001 : Text;NodeText@1240030002 : Text;NameSpace@1240030003 : Text;VAR CreatedXMLNode@1240030004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") ExitStatus : Integer;
    VAR
      NewChildNode@1240030005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      NewChildNode := XMLNode.OwnerDocument.CreateNode('element', NodeName, NameSpace);

      IF ISNULL(NewChildNode) THEN BEGIN
        ExitStatus := 50;
        EXIT;
      END;

      IF NodeText <> '' THEN
        NewChildNode.InnerText := NodeText;

      XMLNode.AppendChild(NewChildNode);
      CreatedXMLNode := NewChildNode;

      ExitStatus := 0;
    END;

    PROCEDURE Quote2Blank@1240020002(OriginalString@1240030000 : Text[100]) ReturnString : Text[100];
    VAR
      i@1240030001 : Integer;
    BEGIN
      FOR i := 1 TO STRLEN(OriginalString) DO BEGIN
        IF (OriginalString[i] = '"') THEN
          OriginalString[i] := ' ';
        ReturnString := ReturnString + STRSUBSTNO('%1',OriginalString[i]);
      END;
    END;

    BEGIN
    END.
  }
}

