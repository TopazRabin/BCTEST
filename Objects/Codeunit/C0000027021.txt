OBJECT Codeunit 27021 DIOT Data Management
{
  OBJECT-PROPERTIES
  {
    Date=10/26/19;
    Time=12:00:00 PM;
    Version List=NAVNA11.00.00.37606;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      BlankTypeOfOperationErr@1310000 : TextConst 'ENU=Operations reported in DIOT must have a non-blank Type of Operation or Vendor must have a Type of Operation.;ESM=Las operaciones de las que se reporta en DIOT deben tener un tipo de operaci¢n o un proveedor que no est‚ en blanco debe tener un tipo de operaci¢n.;FRC=Les op‚rations d‚clar‚es dans DIOT doivent avoir un type d''op‚ration non vide ou le fournisseur doit avoir un type d''op‚ration.;ENC=Operations reported in DIOT must have a non-blank Type of Operation or Vendor must have a Type of Operation.';
      LeaseAndRentNonMXErr@1310001 : TextConst 'ENU=Operations with non-mx Vendor cannot have Lease And Rent Type of operation.;ESM=Las operaciones con el proveedor que no es mx no pueden tener arrendamiento y tipo de operaci¢n.;FRC=Les op‚rations avec un fournisseur non mexicain ne peuvent pas avoir Location et loyer comme Type d''op‚ration.;ENC=Operations with non-mx Vendor cannot have Lease And Rent Type of operation.';
      MissingRFCNoErr@1310002 : TextConst 'ENU=MX vendors must have RFC Number filled in.;ESM=Los proveedores MX deben tener el n£mero RFC rellenado.;FRC=Les fournisseurs MX doivent avoir le num‚ro RFC compl‚t‚.;ENC=MX vendors must have RFC Number filled in.';
      CountryCodeNotValidErr@1310003 : TextConst 'ENU=Vendor Country Code is not among valid DIOT Country Codes.;ESM=El c¢digo de pa¡s del proveedor no est  entre los c¢digos de pa¡s de DIOT v lidos.;FRC=Le code pays fournisseur ne fait pas partie des codes pays DIOT valides.;ENC=Vendor Country Code is not among valid DIOT Country Codes.';
      NegativeAmountErr@1310004 : TextConst '@@@="%1=Concept number, %2= Vendor number";ENU="The amount for Concept No. %1 for Vendor with No. = %2 is negative, which is not valid.";ESM="El importe del concepto N.§ %1 para el proveedor con N§ = %2 es negativo, lo que no es v lido.";FRC="Le montant pour le nø concept %1 pour le fournisseur portant le nø = %2 est n‚gatif, ce qui n''est pas valide.";ENC="The amount for Concept No. %1 for Vendor with No. = %2 is negative, which is not valid."';
      NoDataMsg@1310005 : TextConst 'ENU=There are no Tax Entries for configured concepts in the specified date range.;ESM=No existen movimientos de IVA para los conceptos configurados en el intervalo de fechas especificado.;FRC=Il n''existe pas d''‚criture TVA pour les concepts configur‚s dans la plage de dates sp‚cifi‚e.;ENC=There are no Tax Entries for configured concepts in the specified date range.';

    PROCEDURE GetTypeOfOperationCode@1310001(TypeOfOperation@1310000 : Option) : Code[2];
    VAR
      DummyVendor@1310001 : Record 23;
    BEGIN
      CASE TypeOfOperation OF
        DummyVendor."DIOT-Type of Operation"::"Prof. Services":
          EXIT('03');
        DummyVendor."DIOT-Type of Operation"::"Lease and Rent":
          EXIT('06');
        DummyVendor."DIOT-Type of Operation"::Others:
          EXIT('85');
        ELSE
          EXIT('');
      END;
    END;

    LOCAL PROCEDURE GetTypeOfVendorText@1310002(CountryRegionCode@1310000 : Code[10]) : Text[2];
    BEGIN
      IF CountryRegionCode = GetMXCountryCode THEN
        EXIT('04');
      EXIT('05');
    END;

    LOCAL PROCEDURE GetTypeOfOperationForEntry@1310003(VATEntry@1310000 : Record 254) : Integer;
    VAR
      Vendor@1310001 : Record 23;
    BEGIN
      IF VATEntry."DIOT-Type of Operation" <> VATEntry."DIOT-Type of Operation"::" " THEN
        EXIT(VATEntry."DIOT-Type of Operation");
      Vendor.GET(VATEntry."Bill-to/Pay-to No.");
      EXIT(Vendor."DIOT-Type of Operation");
    END;

    PROCEDURE GetWHTConceptNo@1310004() : Integer;
    BEGIN
      EXIT(16);
    END;

    PROCEDURE GetConceptCount@1310005() : Integer;
    BEGIN
      EXIT(17);
    END;

    PROCEDURE GetVendorNameLength@1310006() : Integer;
    BEGIN
      EXIT(43);
    END;

    PROCEDURE GetNationalityLength@1310007() : Integer;
    BEGIN
      EXIT(40);
    END;

    PROCEDURE GetMXCountryCode@1310008() : Code[10];
    BEGIN
      EXIT('MX');
    END;

    PROCEDURE IsCountryCodeMXorBlank@1310009(CountryRegionCode@1310000 : Code[10]) : Boolean;
    BEGIN
      EXIT(CountryRegionCode IN ['',GetMXCountryCode]);
    END;

    LOCAL PROCEDURE ConvertToDIOTVendorName@1310011(InputVendorName@1310000 : Text) : Text;
    BEGIN
      EXIT(COPYSTR(RemoveUnwantedCharacters(InputVendorName,' @Ö%!­$.&,'),1,GetVendorNameLength));
    END;

    PROCEDURE RemoveUnwantedCharacters@1310012(InputString@1310000 : Text;SpecialCharactersAllowed@1310001 : Text) OutputString : Text;
    VAR
      AlphanumericChars@1310002 : Text;
    BEGIN
      AlphanumericChars := 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
      OutputString := DELCHR(InputString,'=',DELCHR(InputString,'=',AlphanumericChars + SpecialCharactersAllowed));
    END;

    LOCAL PROCEDURE CalcAmountForVATEntryAndDIOTConcept@1310013(VATEntry@1310000 : Record 254;DIOTConcept@1310001 : Record 27040;VATPostingSetup@1310002 : Record 325) : Decimal;
    VAR
      WHTModifier@1310003 : Decimal;
    BEGIN
      WHTModifier := 1;
      IF VATPostingSetup."VAT %" > 0 THEN
        WHTModifier -= VATPostingSetup."DIOT-WHT %" / VATPostingSetup."VAT %";
      IF DIOTConcept."Concept No." = GetWHTConceptNo THEN
        EXIT(VATEntry.Amount * (1 - WHTModifier));
      CASE DIOTConcept."Column Type" OF
        DIOTConcept."Column Type"::"VAT Base":
          EXIT(VATEntry.Base);
        DIOTConcept."Column Type"::"Vat Amount":
          BEGIN
            IF DIOTConcept."Non-Deductible" THEN
              EXIT(VATEntry.Amount * WHTModifier * DIOTConcept."Non-Deductible Pct" / 100);
            EXIT(VATEntry.Amount * WHTModifier);
          END;
        DIOTConcept."Column Type"::None:
          EXIT(0);
      END;
    END;

    PROCEDURE ConvertToDIOTCountryCode@1310014(CountryCode@1310000 : Code[10]) : Text[2];
    VAR
      DIOTCountryRegionData@1310001 : Record 27049;
    BEGIN
      DIOTCountryRegionData.SETRANGE("BC Country/Region Code",CountryCode);
      IF DIOTCountryRegionData.FINDFIRST THEN
        EXIT(DIOTCountryRegionData."Country/Region Code");
      IF DIOTCountryRegionData.GET(CountryCode) THEN
        EXIT(DIOTCountryRegionData."Country/Region Code");
      EXIT('');
    END;

    LOCAL PROCEDURE InsertVendorBufferConditionally@1310015(VAR TempDIOTReportVendorBuffer@1310000 : TEMPORARY Record 27043;VendorNo@1310002 : Code[20];DIOTTypeOfOperation@1310003 : Option);
    VAR
      Vendor@1310004 : Record 23;
    BEGIN
      WITH TempDIOTReportVendorBuffer DO
        IF NOT GET(VendorNo,DIOTTypeOfOperation) THEN BEGIN
          INIT;
          Vendor.GET(VendorNo);
          "Vendor No." := VendorNo;
          "Type of Operation" := DIOTTypeOfOperation;

          "Type of Vendor Text" := GetTypeOfVendorText(Vendor."Country/Region Code");

          "Type of Operation Text" := GetTypeOfOperationCode(DIOTTypeOfOperation);

          "RFC Number" := COPYSTR(Vendor."RFC No.",1,MAXSTRLEN("RFC Number"));

          IF Vendor."Country/Region Code" <> GetMXCountryCode THEN BEGIN
            "TAX Registration ID" := COPYSTR(Vendor."VAT Registration No.",1,MAXSTRLEN("TAX Registration ID"));
            "Vendor Name" := COPYSTR(ConvertToDIOTVendorName(Vendor.Name),1,MAXSTRLEN("Vendor Name"));
            "Country/Region Code" := ConvertToDIOTCountryCode(Vendor."Country/Region Code");
            Nationality := COPYSTR(GetNationalyForCountryCode("Country/Region Code"),1,MAXSTRLEN(Nationality));
          END;
          INSERT;
        END;
    END;

    LOCAL PROCEDURE InsertBufferConditionally@1310016(VAR TempDIOTReportBuffer@1310000 : TEMPORARY Record 27042;VendorNo@1310001 : Code[20];TypeOfOperation@1310002 : Option;ConceptNo@1310003 : Integer;Amount@1310004 : Decimal);
    BEGIN
      WITH TempDIOTReportBuffer DO
        IF GET(VendorNo,TypeOfOperation,ConceptNo) THEN BEGIN
          VALIDATE(Value,Value + Amount);
          MODIFY(TRUE);
        END ELSE BEGIN
          "Vendor No." := VendorNo;
          "Type of Operation" := TypeOfOperation;
          "DIOT Concept No." := ConceptNo;
          Value := Amount;
          INSERT;
        END;
    END;

    PROCEDURE CollectDIOTDataSet@1310017(VAR TempDIOTReportBuffer@1310000 : TEMPORARY Record 27042;VAR TempDIOTReportVendorBuffer@1310001 : TEMPORARY Record 27043;VAR TempErrorMessage@1310002 : TEMPORARY Record 700;StartingDate@1310003 : Date;EndingDate@1310004 : Date);
    VAR
      DIOTConceptLink@1310005 : Record 27041;
      VATEntry@1310006 : Record 254;
      CurrentDIOTConcept@1310007 : Record 27040;
      CurrentVATPostingSetup@1310008 : Record 325;
      VendorNo@1310009 : Code[20];
      TypeOfOperation@1310010 : Option;
      CalcAmount@1310011 : Decimal;
    BEGIN
      WITH VATEntry DO BEGIN
        SETRANGE(Type,Type::Purchase);
        SETFILTER("Bill-to/Pay-to No.",'<>%1','');
        SETRANGE("Posting Date",StartingDate,EndingDate);
        SETRANGE("Document Type","Document Type"::Invoice);
      END;
      IF DIOTConceptLink.FINDSET THEN
        REPEAT
          CurrentDIOTConcept.GET(DIOTConceptLink."DIOT Concept No.");
          CurrentVATPostingSetup.GET(DIOTConceptLink."VAT Bus. Posting Group",DIOTConceptLink."VAT Prod. Posting Group");
          WITH VATEntry DO BEGIN
            SETRANGE("VAT Bus. Posting Group",DIOTConceptLink."VAT Bus. Posting Group");
            SETRANGE("VAT Prod. Posting Group",DIOTConceptLink."VAT Prod. Posting Group");
            IF FINDSET THEN
              REPEAT
                VendorNo := "Bill-to/Pay-to No.";
                TypeOfOperation := GetTypeOfOperationForEntry(VATEntry);
                CalcAmount := CalcAmountForVATEntryAndDIOTConcept(VATEntry,CurrentDIOTConcept,CurrentVATPostingSetup);
                InsertBufferConditionally(TempDIOTReportBuffer,VendorNo,TypeOfOperation,DIOTConceptLink."DIOT Concept No.",CalcAmount);
                InsertVendorBufferConditionally(TempDIOTReportVendorBuffer,VendorNo,TypeOfOperation);
              UNTIL NEXT = 0;
          END;
        UNTIL DIOTConceptLink.NEXT = 0;
      CheckDIOTData(TempDIOTReportVendorBuffer,TempDIOTReportBuffer,TempErrorMessage);
    END;

    PROCEDURE GetInstallationComplete@1310018() : Boolean;
    VAR
      DIOTConcept@1310000 : Record 27040;
    BEGIN
      EXIT(DIOTConcept.FINDFIRST);
    END;

    PROCEDURE GetNationalyForCountryCode@1310020(CountryRegionCode@1310000 : Code[2]) : Text;
    VAR
      DIOTCountryRegionData@1310001 : Record 27049;
    BEGIN
      IF DIOTCountryRegionData.GET(CountryRegionCode) THEN
        EXIT(COPYSTR(DIOTCountryRegionData.Nationality,1,GetNationalityLength));
      EXIT('');
    END;

    LOCAL PROCEDURE GenerateDIOTLine@1310021(DIOTReportVendorBuffer@1310000 : Record 27043;ColumnAmounts@1310001 : ARRAY [17] OF Decimal) : Text;
    VAR
      DIOTLine@1310002 : Text;
      i@1310003 : Integer;
    BEGIN
      WITH DIOTReportVendorBuffer DO BEGIN
        DIOTLine := STRSUBSTNO('%1|%2|%3|%4|%5|%6|%7|',
            "Type of Vendor Text","Type of Operation Text","RFC Number",
            "TAX Registration ID","Vendor Name","Country/Region Code",Nationality);
        FOR i := 1 TO ARRAYLEN(ColumnAmounts) DO BEGIN
          IF ColumnAmounts[i] > 0 THEN
            DIOTLine += FORMAT(ROUND(ColumnAmounts[i],1),0,9);
          DIOTLine += '|';
        END;
      END;
      EXIT(DIOTLine);
    END;

    PROCEDURE GenerateDIOTFile@1310022(VAR TempDIOTReportBuffer@1310000 : TEMPORARY Record 27042;VAR TempDIOTReportVendorBuffer@1310001 : TEMPORARY Record 27043;VAR TempBLOB@1310002 : Record 99008535);
    VAR
      DummyDIOTConcept@1310003 : Record 27040;
      oStream@1310005 : OutStream;
      CurrentColumnNumbers@1310004 : ARRAY [17] OF Decimal;
    BEGIN
      CLEAR(TempBLOB);
      TempBLOB.Blob.CREATEOUTSTREAM(oStream);
      IF TempDIOTReportVendorBuffer.FINDSET THEN
        REPEAT
          CLEAR(CurrentColumnNumbers);
          TempDIOTReportBuffer.SETRANGE("Vendor No.",TempDIOTReportVendorBuffer."Vendor No.");
          TempDIOTReportBuffer.SETRANGE("Type of Operation",TempDIOTReportVendorBuffer."Type of Operation");
          IF TempDIOTReportBuffer.FINDSET THEN
            REPEAT
              CurrentColumnNumbers[DummyDIOTConcept.GetColumnNo(TempDIOTReportBuffer."DIOT Concept No.") - 7] :=
                TempDIOTReportBuffer.Value;
            UNTIL TempDIOTReportBuffer.NEXT = 0;
          oStream.WRITETEXT(GenerateDIOTLine(TempDIOTReportVendorBuffer,CurrentColumnNumbers));
          oStream.WRITETEXT;
        UNTIL TempDIOTReportVendorBuffer.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckDIOTData@1310023(VAR TempDIOTReportVendorBuffer@1310000 : TEMPORARY Record 27043;VAR TempDIOTReportBuffer@1310001 : TEMPORARY Record 27042;VAR TempErrorMessage@1310002 : TEMPORARY Record 700);
    BEGIN
      IF TempDIOTReportVendorBuffer.FINDSET THEN
        REPEAT
          CheckDIOTReportVendorBuffer(TempDIOTReportVendorBuffer,TempErrorMessage);
        UNTIL TempDIOTReportVendorBuffer.NEXT = 0;
      CheckDIOTReportBuffer(TempDIOTReportBuffer,TempErrorMessage);
    END;

    LOCAL PROCEDURE CheckDIOTReportVendorBuffer@1310024(DIOTReportVendorBuffer@1310000 : Record 27043;VAR TempErrorMessage@1310001 : TEMPORARY Record 700);
    VAR
      DummyVendor@1310002 : Record 23;
    BEGIN
      WITH DIOTReportVendorBuffer DO BEGIN
        IF "Type of Operation Text" = '' THEN
          LogErrorForVendor(TempErrorMessage,DummyVendor.FIELDNO("DIOT-Type of Operation"),BlankTypeOfOperationErr,"Vendor No.");

        IF ("Type of Operation Text" = '06') AND ("Type of Vendor Text" = '05') THEN
          LogErrorForVendor(TempErrorMessage,DummyVendor.FIELDNO("DIOT-Type of Operation"),LeaseAndRentNonMXErr,"Vendor No.");

        IF ("RFC Number" = '') AND ("Type of Vendor Text" = '04') THEN
          LogErrorForVendor(TempErrorMessage,DummyVendor.FIELDNO("RFC No."),MissingRFCNoErr,"Vendor No.");

        IF ("Country/Region Code" = '') AND ("Type of Vendor Text" = '05') THEN
          LogErrorForVendor(TempErrorMessage,DummyVendor.FIELDNO("Country/Region Code"),CountryCodeNotValidErr,"Vendor No.");
      END;
    END;

    LOCAL PROCEDURE LogErrorForVendor@1310025(VAR TempErrorMessage@1310000 : TEMPORARY Record 700;FieldNo@1310001 : Integer;Message@1310002 : Text;VendorNo@1310003 : Code[20]);
    VAR
      Vendor@1310004 : Record 23;
    BEGIN
      Vendor.GET(VendorNo);
      TempErrorMessage.LogMessage(Vendor,FieldNo,TempErrorMessage."Message Type"::Error,Message);
    END;

    LOCAL PROCEDURE CheckDIOTReportBuffer@1310026(VAR TempDIOTReportBuffer@1310000 : TEMPORARY Record 27042;VAR TempErrorMessage@1310001 : TEMPORARY Record 700);
    BEGIN
      WITH TempDIOTReportBuffer DO
        IF FINDSET THEN
          REPEAT
            IF Value < 0 THEN
              TempErrorMessage.LogDetailedMessage(
                TempDIOTReportBuffer,0,TempErrorMessage."Message Type"::Error,
                STRSUBSTNO(NegativeAmountErr,"DIOT Concept No.","Vendor No."),'','');
          UNTIL NEXT = 0;
    END;

    PROCEDURE WriteDIOTFile@1310027(VAR TempDIOTReportBuffer@1310000 : TEMPORARY Record 27042;VAR TempDIOTReportVendorBuffer@1310001 : TEMPORARY Record 27043);
    VAR
      TempBlob@1310002 : Record 99008535;
      FileManagement@1310003 : Codeunit 419;
    BEGIN
      IF TempDIOTReportVendorBuffer.ISEMPTY THEN
        MESSAGE(NoDataMsg)
      ELSE BEGIN
        GenerateDIOTFile(TempDIOTReportBuffer,TempDIOTReportVendorBuffer,TempBlob);
        FileManagement.BLOBExportWithEncoding(TempBlob,'diot.txt',TRUE,TEXTENCODING::UTF8);
      END;
    END;

    PROCEDURE ConfirmProcess@1310035(ConfirmQuestion@1310000 : Text;DefaultButton@1310001 : Boolean) : Boolean;
    BEGIN
      IF NOT GUIALLOWED THEN
        EXIT(DefaultButton);
      EXIT(CONFIRM(ConfirmQuestion,DefaultButton));
    END;

    BEGIN
    END.
  }
}

