OBJECT Codeunit 14000712 Carrier Label Management
{
  OBJECT-PROPERTIES
  {
    Date=06/28/17;
    Time=12:00:00 PM;
    Version List=SE0.60.04;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LabelFileName@1240030007 : Text[250];
      PrinterType@1240030006 : ' ,,Eltron (EPL II),,Zebra (ZPL II)';
      HorzOffset@1240030003 : Integer;
      VertOffset@1240030002 : Integer;
      LabelWidth@1240030001 : Integer;
      LabelHeight@1240030000 : Integer;
      Text001@1001 : TextConst 'ENU=Invalid printer type!';
      Text002@1240030004 : TextConst 'ENU=BarCode type %1 not available.';
      Text003@1240030005 : TextConst 'ENU=Invalid Label Media Type';

    PROCEDURE CloseLabelFile@1240030003(VAR LabelFile@1240030000 : File);
    BEGIN
      LabelFile.CLOSE;
      IF NOT EXISTS(LabelFileName) THEN
        REPEAT
          SLEEP(1000);
        UNTIL EXISTS(LabelFileName);

      EXIT;
    END;

    PROCEDURE CloseLabelReverseBlock@1240030012(VAR LabelFile@1240030006 : File;XStart@1240030001 : Integer;YStart@1240030003 : Integer;HorzLength@1240030004 : Integer;VertLength@1240030005 : Integer);
    VAR
      LabelText@1240030000 : Text[250];
    BEGIN
      CASE PrinterType OF
        PrinterType::"Zebra (ZPL II)":
          BEGIN
          END;
        PrinterType::"Eltron (EPL II)":
          BEGIN
            WriteLabelReverseBlock(LabelFile,XStart,YStart,HorzLength,VertLength);
          END;
        ELSE
          ERROR(Text001);
      END;

      LabelFile.WRITE(LabelText);

      EXIT;
    END;

    LOCAL PROCEDURE FormatZebraFont@1240030026(PrinterType@1240030005 : ' ,Laser Printer,Eltron Orion,Eltron Eclipse,Zebra (ZPL)';FontSize@1240030000 : Integer;HorizontalMultiplier@1240030003 : Integer;VerticalMultiplier@1240030006 : Integer;VAR HBase@1240030001 : Integer;VAR VBase@1240030002 : Integer;VAR Font@1240030004 : Code[1]);
    BEGIN
      IF VerticalMultiplier < 1 THEN
        VerticalMultiplier := 1;

      IF PrinterType = PrinterType::"Zebra (ZPL)" THEN BEGIN
        GetZebraBase(VerticalMultiplier,FontSize,Font,VBase);
        GetZebraBase(HorizontalMultiplier,FontSize,Font,HBase);

        CASE TRUE OF
          HorizontalMultiplier = 0:
            HBase := ROUND(VBase * 0.75,1);
          HorizontalMultiplier <> VerticalMultiplier:
            HBase := ROUND(HBase+((VBase - HBase)*0.25),1);
        END;
      END ELSE BEGIN
        CASE FontSize OF
          2:
            BEGIN
              VBase := 16;
              HBase := 10;
            END;
          3:
            BEGIN
              VBase := 20;
              HBase := 12;
            END;
          4:
            BEGIN
              VBase := 24;
              HBase := 14;
            END;
          5:
            BEGIN
              VBase := 48;
              HBase := 32;
            END;
          ELSE
            BEGIN
              VBase := 12;
              HBase := 9;
            END;
        END;
        VBase := ROUND(VBase * VerticalMultiplier,1);
        HBase := ROUND(HBase * HorizontalMultiplier,1);
        Font := FORMAT(FontSize);
      END;
    END;

    PROCEDURE GetZebraBase@1240030015(Multiplier@1240030000 : Integer;Fontsize@1240030001 : Integer;VAR Font@1240030002 : Code[1];VAR Base@1240030003 : Integer);
    BEGIN
      CASE Multiplier OF
        2:
          BEGIN
            CASE Fontsize OF
              2:
                BEGIN
                  Font := '0';
                  Base := 38;
                END;
              3:
               BEGIN
                  Font := '0';
                  Base := 42;
                END;
              4:
                BEGIN
                  Font := '0';
                  Base := 56;
                END;
              5:
                BEGIN
                  Font := '0';
                  Base := 104;
                END;
              ELSE
                BEGIN
                  Font := '0';
                  Base := 28;
                END;
            END;
          END;
        3:
          BEGIN
            CASE Fontsize OF
              2:
                BEGIN
                  Font := '0';
                  Base := 58;
                END;
              3:
                BEGIN
                  Font := '0';
                  Base := 63;
                END;
              4:
                BEGIN
                  Font := '0';
                  Base := 84;
                END;
              5:
                BEGIN
                  Font := '0';
                  Base := 156;
                END;
              ELSE
                BEGIN
                  Font := '0';
                  Base := 42;
                END;
            END;
          END;
        4:
          BEGIN
            CASE Fontsize OF
              2:
                BEGIN
                  Font := '0';
                  Base := 78;
                END;
              3:
                BEGIN
                  Font := '0';
                  Base := 87;
                END;
              4:
                BEGIN
                  Font := '0';
                  Base := 112;
                END;
              5:
                BEGIN
                  Font := '0';
                  Base := 208;
                END;
              ELSE
                BEGIN
                  Font := '0';
                  Base := 56;
                END;
            END;
          END;
        5:
          BEGIN
            CASE Fontsize OF
              2:
                BEGIN
                  Font := '0';
                  Base := 90;
                END;
              3:
                BEGIN
                  Font := '0';
                  Base := 105;
                END;
              4:
                BEGIN
                  Font := '0';
                  Base := 140;
                END;
              5:
                BEGIN
                  Font := '0';
                  Base := 260;
                END;
              ELSE
                BEGIN
                  Font := '0';
                  Base := 70;
                END;
            END;
          END;
        ELSE
          BEGIN
            CASE Fontsize OF
              2:
                BEGIN
                  Font := '0'; Base := 20; END;
              3:
                BEGIN
                  Font := '0'; Base := 22; END;
              4:
                BEGIN
                  Font := '0'; Base := 24; END;
              5:
                BEGIN
                  Font := '0'; Base := 54; END;
              ELSE
                BEGIN
                  Font := '0';
                  Base := 14;
                END;
            END;
          END;
      END;
    END;

    PROCEDURE InsertFile@1240030014(VAR LabelFile@1240030003 : File;SourceFileName@1240030000 : Text[250];EraseSourceFile@1240030001 : Boolean);
    VAR
      SourceFile@1240030002 : File;
      SourceInStream@1240030004 : InStream;
      Data@1240030006 : Char;
      AsciiData@1240030010 : Text[1024];
      TargetFileName@1240030008 : Text[250];
      ReadLen@1240030005 : Integer;
      IntData@1240030009 : Integer;
      CharCount@1240030014 : Integer;
      TruncLen@1240030015 : Integer;
      OkToWrite@1240030007 : Boolean;
      WriteNextTime@1240030011 : Boolean;
      DoneWriting@1240030012 : Boolean;
    BEGIN
      TargetFileName := LabelFile.NAME;
      LabelFile.CLOSE;
      LabelFile.TEXTMODE := FALSE;
      LabelFile.OPEN(TargetFileName);
      LabelFile.SEEK(LabelFile.LEN);

      SourceFile.TEXTMODE := FALSE;
      SourceFile.OPEN(SourceFileName);
      IF SourceFile.LEN > 0 THEN BEGIN
        SourceFile.CREATEINSTREAM(SourceInStream);
        AsciiData := '';
        OkToWrite := FALSE;
        WriteNextTime := FALSE;
        DoneWriting := FALSE;
        CharCount := 0;
        TruncLen := 0;
        REPEAT
          ReadLen := SourceInStream.READ(Data);
          CharCount += ReadLen;
          IF ReadLen > 0 THEN BEGIN
            IF WriteNextTime THEN BEGIN
              OkToWrite := TRUE;
              WriteNextTime := FALSE;
            END ELSE
              IF NOT OkToWrite THEN BEGIN
                IntData := Data;
                IF STRLEN(AsciiData) > 1000 THEN
                  AsciiData := COPYSTR(AsciiData,501);
                AsciiData += FORMAT(IntData);
                CASE PrinterType OF
                  PrinterType::"Zebra (ZPL II)":
                    IF (STRPOS(AsciiData,'948079731310') > 0) OR
                       (STRPOS(AsciiData,'948079781310') > 0)
                    THEN
                      WriteNextTime := TRUE;
                  PrinterType::"Eltron (EPL II)":
                    IF (STRPOS(AsciiData,'90841310781310') > 0) OR
                       (STRPOS(AsciiData,'90661310781310') > 0) OR
                       (STRPOS(AsciiData,'9084131073564465444848491310781310') > 0) OR
                       (STRPOS(AsciiData,'9066131073564465444848491310781310') > 0)
                    THEN
                      WriteNextTime := TRUE;
                END;
              END ELSE
                IF OkToWrite THEN BEGIN
                  IntData := Data;
                  IF STRLEN(AsciiData) > 1000 THEN
                    AsciiData := COPYSTR(AsciiData,501);
                  AsciiData += FORMAT(IntData);
                  CASE PrinterType OF
                    PrinterType::"Zebra (ZPL II)":
                      IF STRPOS(AsciiData,'131094889013') > 0 THEN BEGIN
                        OkToWrite := FALSE;
                        DoneWriting := TRUE;
                        TruncLen := 3;
                      END;
                    PrinterType::"Eltron (EPL II)":
                      IF STRPOS(AsciiData,'1310804913') > 0 THEN BEGIN
                        OkToWrite := FALSE;
                        DoneWriting := TRUE;
                        TruncLen := 2;
                      END;
                  END;
                END;

            IF OkToWrite THEN
              LabelFile.WRITE(Data);
          END;
        UNTIL (ReadLen = 0) OR DoneWriting;
      END;

      IF TruncLen > 0 THEN BEGIN
        LabelFile.CLOSE;
        LabelFile.OPEN(TargetFileName);
        LabelFile.SEEK(LabelFile.LEN - TruncLen);
        LabelFile.TRUNC;
      END;

      LabelFile.CLOSE;
      LabelFile.TEXTMODE := TRUE;
      LabelFile.OPEN(TargetFileName);
      LabelFile.SEEK(LabelFile.LEN);

      SourceFile.CLOSE;
      IF EraseSourceFile THEN
        ERASE(SourceFileName);

      EXIT;
    END;

    PROCEDURE OpenLabelFile@1240030001(VAR LabelFile@1240030000 : File;SetLabelFileName@1240030001 : Text[250]);
    BEGIN
      LabelFileName := SetLabelFileName;
      IF EXISTS(LabelFileName) THEN
        ERASE(LabelFileName);
      LabelFile.TEXTMODE(TRUE);
      LabelFile.CREATE(LabelFileName);

      EXIT;
    END;

    PROCEDURE OpenLabelReverseBlock@1240030006(VAR LabelFile@1240030006 : File;XStart@1240030001 : Integer;YStart@1240030003 : Integer;HorzLength@1240030004 : Integer;VertLength@1240030005 : Integer);
    VAR
      LabelText@1240030000 : Text[250];
    BEGIN
      CASE PrinterType OF
        PrinterType::"Zebra (ZPL II)":
          BEGIN
            WriteLabelReverseBlock(LabelFile,XStart,YStart,HorzLength,VertLength);
          END;
        PrinterType::"Eltron (EPL II)":
          BEGIN
          END;
        ELSE
          ERROR(Text001);
      END;

      LabelFile.WRITE(LabelText);

      EXIT;
    END;

    PROCEDURE WriteLabelBarCode@1240030004(VAR LabelFile@1240030014 : File;XStart@1240030001 : Integer;YStart@1240030003 : Integer;ZebraOffset@1240030015 : Integer;Rotation@1240030004 : Integer;BarCode@1240030005 : Code[10];NarrowBarWidth@1240030006 : Integer;WideBarWidth@1240030007 : Integer;Height@1240030008 : Integer;PrintHuman@1240030009 : Boolean;Data@1240030002 : Text[250]);
    BEGIN
      LabelFile.WRITE(
        FormatLabelBarCode(
          XStart,YStart,ZebraOffset,Rotation,BarCode,NarrowBarWidth,WideBarWidth,Height,PrintHuman,Data));
    END;

    PROCEDURE WriteLabelBitMap@1240030002(VAR LabelFile@1240030024 : File;XStart@1240030012 : Integer;YStart@1240030001 : Integer;Width@1240030020 : Integer;Length@1240030021 : Integer;TempLogoFileName@1240030019 : Text[250]);
    VAR
      TempBitmapFile@1240030005 : File;
      TempFileName@1240030003 : Text[250];
      LabelText@1240030000 : Text[250];
      Loop@1240030002 : Integer;
      Loop2@1240030010 : Integer;
      RasterStartPosition@1240030006 : Integer;
      BitmapWidth@1240030007 : Integer;
      BitmapHeight@1240030009 : Integer;
      BytesPerLine@1240030023 : Integer;
      BytesPerRow@1240030008 : Integer;
      ByteCount@1240030022 : Integer;
      MultipliedVertical@1240030011 : Integer;
      MultipliedHorizontal@1240030017 : Integer;
      VerticalMultiplier@1240030018 : Integer;
      HorizontalMultiplier@1240030014 : Integer;
      Bit@1240030013 : Integer;
      WriteCharPos@1240030016 : Integer;
      ReadChar@1240030004 : Char;
      WriteChar@1240030015 : Char;
    BEGIN
      TempFileName := LabelFile.NAME;
      LabelFile.WRITEMODE(TRUE);
      LabelFile.TEXTMODE(FALSE);
      LabelFile.OPEN(TempFileName);
      LabelFile.SEEK(LabelFile.LEN);

      TempBitmapFile.WRITEMODE(FALSE);
      TempBitmapFile.TEXTMODE(FALSE);
      TempBitmapFile.OPEN(TempLogoFileName);
      IF (TempBitmapFile.LEN >= 62) AND
         (TempBitmapFile.LEN <= 960000)
      THEN BEGIN
        FOR Loop := 1 TO 10 DO
          TempBitmapFile.READ(ReadChar);

        TempBitmapFile.READ(ReadChar);
        RasterStartPosition := ReadChar;
        TempBitmapFile.READ(ReadChar);
        RasterStartPosition := RasterStartPosition + 256 * ReadChar;
        TempBitmapFile.READ(ReadChar);
        RasterStartPosition := RasterStartPosition + 256 * 256 * ReadChar;
        TempBitmapFile.READ(ReadChar);
        RasterStartPosition := RasterStartPosition + 256 * 256 * 256 * ReadChar;

        FOR Loop := 1 TO 4 DO
          TempBitmapFile.READ(ReadChar);

        TempBitmapFile.READ(ReadChar);
        BitmapWidth := ReadChar;
        TempBitmapFile.READ(ReadChar);
        BitmapWidth := BitmapWidth + 256 * ReadChar;
        TempBitmapFile.READ(ReadChar);
        BitmapWidth := BitmapWidth + 256 * 256 * ReadChar;
        TempBitmapFile.READ(ReadChar);
        BitmapWidth := BitmapWidth + 256 * 256 * 256 * ReadChar;
        IF BitmapWidth MOD 8 = 0 THEN BEGIN
          TempBitmapFile.READ(ReadChar);
          BitmapHeight := ReadChar;
          TempBitmapFile.READ(ReadChar);
          BitmapHeight := BitmapHeight + 256 * ReadChar;
          TempBitmapFile.READ(ReadChar);
          BitmapHeight := BitmapHeight + 256 * 256 * ReadChar;
          TempBitmapFile.READ(ReadChar);
          BitmapHeight := BitmapHeight + 256 * 256 * 256 * ReadChar;
          TempBitmapFile.SEEK(RasterStartPosition);
          BytesPerLine := 4 * ((BitmapWidth DIV 8 + 3) DIV 4);

          BytesPerRow := (BitmapWidth DIV 8);
          ByteCount := BytesPerRow * BitmapHeight;

          CASE PrinterType OF
            PrinterType::"Zebra (ZPL II)":
              LabelText := STRSUBSTNO(
                '^FO%1,%2^GFB,%3,%3,%4,',XStart + HorzOffset,YStart + VertOffset,ByteCount,BytesPerRow);
            PrinterType::"Eltron (EPL II)":
              LabelText := STRSUBSTNO(
                'GW%1,%2,%3,%4,',XStart + HorzOffset,YStart + VertOffset,Width,Length);
            ELSE
              ERROR(Text001);
          END;

          FOR Loop := 1 TO STRLEN(LabelText) DO BEGIN
            ReadChar := LabelText[Loop];
            LabelFile.WRITE(ReadChar);
          END;

          FOR Loop := BitmapHeight DOWNTO 1 DO BEGIN
            MultipliedVertical := 0;
            REPEAT
              FOR Loop2 := 1 TO (BitmapWidth DIV 8) DO BEGIN
                TempBitmapFile.SEEK(
                  RasterStartPosition + (Loop - 1) * BytesPerLine + Loop2 - 1);
                TempBitmapFile.READ(ReadChar);
                IF PrinterType = PrinterType::"Zebra (ZPL II)" THEN BEGIN
                  FOR Bit := 0 TO 7 DO
                    IF (ReadChar DIV POWER(2,Bit)) MOD 2 = 1 THEN
                      ReadChar := ReadChar - POWER(2,Bit)
                    ELSE
                      ReadChar := ReadChar + POWER(2,Bit);
                END;

                IF HorizontalMultiplier > 1 THEN BEGIN
                  WriteChar := 0;
                  WriteCharPos := 7;
                  FOR Bit := 7 DOWNTO 0 DO
                    FOR MultipliedHorizontal := 1 TO HorizontalMultiplier DO BEGIN
                      IF (ReadChar DIV POWER(2,Bit)) MOD 2 = 1 THEN
                        WriteChar := WriteChar + POWER(2,WriteCharPos);

                      WriteCharPos := WriteCharPos - 1;
                      IF WriteCharPos < 0 THEN BEGIN
                        LabelFile.WRITE(WriteChar);

                        WriteChar := 0;
                        WriteCharPos := 7;
                      END;
                    END;
                END ELSE
                  LabelFile.WRITE(ReadChar);
              END;

              MultipliedVertical := MultipliedVertical + 1;
            UNTIL MultipliedVertical >= VerticalMultiplier;
          END;
        END;
      END;

      TempBitmapFile.CLOSE;
      ERASE(TempLogoFileName);

      LabelFile.CLOSE;
      LabelFile.WRITEMODE(TRUE);
      LabelFile.TEXTMODE(TRUE);
      LabelFile.OPEN(TempFileName);
      LabelFile.SEEK(LabelFile.LEN);
      LabelFile.WRITE('');

      EXIT;
    END;

    PROCEDURE WriteLabelClearBox@1240030013(VAR LabelFile@1240030004 : File;XStart@1240030001 : Integer;YStart@1240030003 : Integer;HorzLength@1240030006 : Integer;VertLength@1240030007 : Integer);
    VAR
      LabelText@1240030000 : Text[250];
      Thickness@1240030002 : Integer;
    BEGIN
      CASE PrinterType OF
        PrinterType::"Zebra (ZPL II)":
          BEGIN
            IF HorzLength < VertLength THEN
              Thickness := HorzLength
            ELSE
              Thickness := VertLength;
            LabelText := STRSUBSTNO(
              '^FO%1,%2^GB%3,%4,%5,W^FS',XStart + HorzOffset,YStart + VertOffset,HorzLength,
              VertLength,Thickness);
          END;
        PrinterType::"Eltron (EPL II)":
          BEGIN
            LabelText := STRSUBSTNO(
              'LW%1,%2,%3,%4',XStart + HorzOffset,YStart + VertOffset,HorzLength,VertLength);
          END;
        ELSE
          ERROR(Text001);
      END;

      LabelFile.WRITE(LabelText);

      EXIT;
    END;

    PROCEDURE WriteLabelDiagLine@1240030011(VAR LabelFile@1240030008 : File;XStart@1240030001 : Integer;YStart@1240030003 : Integer;HorzLength@1240030006 : Integer;VertLength@1240030007 : Integer;YEnd@1240030004 : Integer);
    VAR
      LabelText@1240030000 : Text[250];
      Orientation@1240030005 : Code[1];
      Thickness@1240030002 : Integer;
    BEGIN
      CASE PrinterType OF
        PrinterType::"Zebra (ZPL II)":
          BEGIN
            Thickness := HorzLength;
            VertLength := YStart - YEnd;
            HorzLength := VertLength;
            IF YEnd < YStart THEN
              Orientation := 'R'
            ELSE
              Orientation := 'L';
            YStart := YStart - VertLength;
            LabelText := STRSUBSTNO(
              '^FO%1,%2^GD%3,%4,%5,%6,%7^FS',XStart + HorzOffset,YStart + VertOffset,HorzLength,
              VertLength,Thickness,'B',Orientation);
          END;
        PrinterType::"Eltron (EPL II)":
          LabelText := STRSUBSTNO(
            'LS%1,%2,%3,%4,%5',XStart + HorzOffset,YStart + VertOffset,HorzLength,VertLength,YEnd);
        ELSE
          ERROR(Text001);
      END;

      LabelFile.WRITE(LabelText);

      EXIT;
    END;

    PROCEDURE WriteLabelFooter@1240030010(VAR LabelFile@1240030000 : File);
    BEGIN
      CASE PrinterType OF
        PrinterType::"Zebra (ZPL II)":
          BEGIN
            LabelFile.WRITE('^PQ1,0,0,Y');
            LabelFile.WRITE('^XZ');
          END;
        PrinterType::"Eltron (EPL II)":
          BEGIN
            LabelFile.WRITE('P1');
            LabelFile.WRITE('.');
          END;
        ELSE
          ERROR(Text001);
      END;

      EXIT;
    END;

    PROCEDURE WriteLabelHeader@1240030009(VAR LabelFile@1240030000 : File;SetPrinterType@1240030003 : ' ,,Eltron (EPL II),,Zebra (ZPL II)';MediaType@1240030006 : ' ,4X6 with Doc Tab,4X6 W/O Doc Tab,4X4';PrintDirectionType@1240030002 : 'Bottom,Top';VAR UseLabelWidth@1240030005 : Integer;VAR UseLabelHeight@1240030004 : Integer);
    VAR
      PrintDirectionText@1240030001 : Code[1];
    BEGIN
      LabelWidth := 800;
      PrinterType := SetPrinterType;

      CASE MediaType OF
        MediaType::"4X6 with Doc Tab":
          LabelHeight := 1380;
        MediaType::"4X6 W/O Doc Tab":
          LabelHeight := 1250;
        MediaType::"4X4":
          LabelHeight := 800;
        14050601:
          LabelHeight := 2292;
        ELSE
          ERROR(Text003);
      END;

      CASE PrinterType OF
        PrinterType::"Zebra (ZPL II)":
          BEGIN
            IF PrintDirectionType = PrintDirectionType::Top THEN BEGIN
              PrintDirectionText := 'N';
              HorzOffset := 5;
              VertOffset := 0;
            END ELSE BEGIN
              PrintDirectionText := 'I';
              HorzOffset := 5;
              VertOffset := 0;
            END;
            LabelFile.WRITE('^XA');
            LabelFile.WRITE('^MD30');
            LabelFile.WRITE(STRSUBSTNO('^LL%1',LabelHeight));
            LabelFile.WRITE(STRSUBSTNO('^PW%1',LabelWidth));
            LabelFile.WRITE(STRSUBSTNO('^PO%1',PrintDirectionText));
          END;
        PrinterType::"Eltron (EPL II)":
          BEGIN
            IF PrintDirectionType = PrintDirectionType::Top THEN BEGIN
              PrintDirectionText := 'B';
              HorzOffset := 0;
              VertOffset := 35;
            END ELSE BEGIN
              PrintDirectionText := 'T';
              HorzOffset := 0;
              VertOffset := 0;
            END;

            IF (MediaType = MediaType::"4X6 with Doc Tab") THEN BEGIN
              LabelFile.WRITE('JF');
              LabelFile.WRITE(STRSUBSTNO('Q%1,24',LabelHeight));
              LabelFile.WRITE('R5,0');
            END ELSE BEGIN
              LabelFile.WRITE('.');
              LabelFile.WRITE(STRSUBSTNO('Q%1,24',LabelHeight));
            END;

            LabelFile.WRITE(STRSUBSTNO('q%1',LabelWidth));
            LabelFile.WRITE('S4');
            LabelFile.WRITE('UN');
            LabelFile.WRITE('WN');
            LabelFile.WRITE(STRSUBSTNO('Z%1',PrintDirectionText));
            LabelFile.WRITE('N');
          END;
        ELSE
          ERROR(Text001);
      END;

      UseLabelWidth := LabelWidth;
      UseLabelHeight := LabelHeight;
    END;

    PROCEDURE WriteLabelLine@1240030005(VAR LabelFile@1240030004 : File;XStart@1240030001 : Integer;YStart@1240030003 : Integer;HorzLength@1240030006 : Integer;VertLength@1240030007 : Integer);
    VAR
      LabelText@1240030000 : Text[250];
      Thickness@1240030002 : Integer;
    BEGIN
      CASE PrinterType OF
        PrinterType::"Zebra (ZPL II)":
          BEGIN
            IF HorzLength < VertLength THEN
              Thickness := HorzLength
            ELSE
              Thickness := VertLength;
            LabelText := STRSUBSTNO(
              '^FO%1,%2^GB%3,%4,%5^FS',XStart + HorzOffset,YStart + VertOffset,HorzLength,
              VertLength,Thickness);
          END;
        PrinterType::"Eltron (EPL II)":
          LabelText := STRSUBSTNO(
            'LO%1,%2,%3,%4',XStart + HorzOffset,YStart + VertOffset,HorzLength,VertLength);
        ELSE
          ERROR(Text001);
      END;

      LabelFile.WRITE(LabelText);
    END;

    LOCAL PROCEDURE WriteLabelReverseBlock@1240030000(VAR LabelFile@1240030006 : File;XStart@1240030001 : Integer;YStart@1240030003 : Integer;HorzLength@1240030004 : Integer;VertLength@1240030005 : Integer);
    VAR
      LabelText@1240030000 : Text[250];
      Thickness@1240030002 : Integer;
    BEGIN
      CASE PrinterType OF
        PrinterType::"Zebra (ZPL II)":
          BEGIN
            IF HorzLength < VertLength THEN
              Thickness := HorzLength
            ELSE
              Thickness := VertLength;
            LabelText := STRSUBSTNO(
              '^FO%1,%2^GB%3,%4,%5^FS',XStart + HorzOffset,YStart + VertOffset,HorzLength,
              VertLength,Thickness);
          END;
        PrinterType::"Eltron (EPL II)":
          LabelText := STRSUBSTNO(
            'LE%1,%2,%3,%4',XStart + HorzOffset,YStart + VertOffset,HorzLength,VertLength);
        ELSE
          ERROR(Text001);
      END;

      LabelFile.WRITE(LabelText);

      EXIT;
    END;

    PROCEDURE WriteLabelText@1240030007(VAR LabelFile@1240030017 : File;XStart@1240030001 : Integer;YStart@1240030003 : Integer;ZPLOffset@1240030018 : Integer;Rotation@1240030004 : Integer;FontSize@1240030005 : Integer;Multiplier@1240030006 : Integer;Reverse@1240030008 : Boolean;Bold@1240030010 : Boolean;Data@1240030002 : Text[250]);
    BEGIN
      WriteLabelText2(LabelFile,XStart,YStart,ZPLOffset,Rotation,FontSize,0,Multiplier,Reverse,Bold,Data);
    END;

    PROCEDURE WriteLabelText2@1240030020(VAR LabelFile@1240030017 : File;XStart@1240030001 : Integer;YStart@1240030003 : Integer;ZPLOffset@1240030018 : Integer;Rotation@1240030004 : Integer;FontSize@1240030005 : Integer;HorizontalMultiplier@1240030006 : Integer;VerticalMultiplier@1240030014 : Integer;Reverse@1240030008 : Boolean;Bold@1240030010 : Boolean;Data@1240030002 : Text[250]);
    BEGIN
      LabelFile.WRITE(
        FormatLabelText(
          XStart,YStart,ZPLOffset,Rotation,FontSize,HorizontalMultiplier,VerticalMultiplier,Reverse,
          Bold,Data));
    END;

    PROCEDURE FormatLabelText@1240030008(XStart@1240030001 : Integer;YStart@1240030003 : Integer;ZPLOffset@1240030018 : Integer;Rotation@1240030004 : Integer;FontSize@1240030005 : Integer;HorizontalMultiplier@1240030006 : Integer;VerticalMultiplier@1240030014 : Integer;Reverse@1240030008 : Boolean;Bold@1240030010 : Boolean;Data@1240030002 : Text[250]) : Text[250];
    VAR
      ReverseText@1240030009 : Code[3];
      FontOrientation@1240030013 : Code[1];
      Font@1240030007 : Code[1];
      CharHeight@1240030011 : Integer;
      CharWidth@1240030012 : Integer;
    BEGIN
      // Note:  Bold parameter is not functional with the current zebra drivers, but is included
      //        for future functionality.

      CASE PrinterType OF
        PrinterType::"Zebra (ZPL II)":
          BEGIN
            IF Reverse THEN
              ReverseText := ''
            ELSE
              ReverseText := '^FR';
            FontOrientation := COPYSTR('NRIB',Rotation + 1,1);
            FormatZebraFont(
              PrinterType,FontSize,HorizontalMultiplier,VerticalMultiplier,CharWidth,CharHeight,Font);
            EXIT(
              STRSUBSTNO(
                '^FO%1,%2^FW%3^A%7%3,%4,%5,%6^FD%8^FS',XStart + ZPLOffset + HorzOffset,
                YStart + VertOffset,FontOrientation,CharHeight,CharWidth,ReverseText,Font,Data));
          END;
        PrinterType::"Eltron (EPL II)":
          BEGIN
            IF Reverse THEN
              ReverseText := 'R'
            ELSE
              ReverseText := 'N';
            EXIT(
              STRSUBSTNO(
                'A%1,%2,%3,%4,%5,%6,%7,"%8"',XStart + HorzOffset,YStart + VertOffset,Rotation,
                FontSize,HorizontalMultiplier,VerticalMultiplier,ReverseText,Data));
          END;
        ELSE
          ERROR(Text001);
      END;
    END;

    PROCEDURE FormatLabelBarCode@1240030018(XStart@1240030001 : Integer;YStart@1240030003 : Integer;ZebraOffset@1240030015 : Integer;Rotation@1240030004 : Integer;BarCode@1240030005 : Code[10];NarrowBarWidth@1240030006 : Integer;WideBarWidth@1240030007 : Integer;Height@1240030008 : Integer;PrintHuman@1240030009 : Boolean;Data@1240030002 : Text[250]) : Text[250];
    VAR
      FontOrientation@1240030012 : Code[1];
      PrintHumanCode@1240030010 : Code[1];
      BarcodeRatio@1240030011 : Decimal;
    BEGIN
      CASE PrinterType OF
        PrinterType::"Zebra (ZPL II)":
          BEGIN
            IF PrintHuman THEN
              PrintHumanCode := 'Y'
            ELSE
              PrintHumanCode := 'N';

            FontOrientation := COPYSTR('NRIB',Rotation + 1,1);

            IF NarrowBarWidth = 0 THEN
              BarcodeRatio := 0
            ELSE
              BarcodeRatio := ROUND(WideBarWidth / NarrowBarWidth,0.1);

            CASE BarCode OF
              '1':  // Automatic Mode
                EXIT(
                  STRSUBSTNO(
                    '^FO%1,%2^BY%4,%8,%6^BC%9,%6,%7,N,N,A^FD',XStart + ZebraOffset + HorzOffset,
                    YStart + VertOffset,Rotation,NarrowBarWidth,WideBarWidth,Height,PrintHumanCode,
                    BarcodeRatio,FontOrientation) + Data + '^FS');
              '0','1B':  // Assumes Char Set B (default)
                ERROR(Text002,BarCode);
              '1A','1C','1D':
                // BarCodeText := 'BC' - needs Invocation code at beginning of Data;
                ERROR(Text002,BarCode);
              '2':
                // BarCodeText := 'B2';
                ERROR(Text002,BarCode);
              '2C':
                // BarCodeText := 'B2';
                ERROR(Text002,BarCode);
              '2D':
                // BarCodeText := 'B2';
                ERROR(Text002,BarCode);
              '2U':
                ERROR(Text002,BarCode);
              '3','3C':
                EXIT(
                  STRSUBSTNO(
                    '^FO%1,%2^BY%4,%8,%6^B3%9,N,%6,%7,N^FD',XStart + ZebraOffset + HorzOffset,
                    YStart + VertOffset,Rotation,NarrowBarWidth,WideBarWidth,Height,PrintHumanCode,
                    BarcodeRatio,FontOrientation) + Data + '^FS');
              '9':
                // BarCodeText := 'BA';
                ERROR(Text002,BarCode);
              'B2':
                // BarCodeText := 'B2';
                ERROR(Text002,BarCode);
              'DM':  //Data Matrix
                EXIT(
                  STRSUBSTNO(
                    '^FO%1,%2^BXN,4,200,,,,^FD',XStart + HorzOffset,YStart + VertOffset) + '"' + Data + '"' + '^FS');
              'E30','E32','E35':
                // BarCodeText := 'BE';
                ERROR(Text002,BarCode);
              'E80','E82','E85':
                // BarCodeText := 'B8';
                ERROR(Text002,BarCode);
              'K':
                // BarCodeText := 'BK';
                ERROR(Text002,BarCode);
              'L':
                // BarCodeText := 'BP';
                ERROR(Text002,BarCode);
              'M':
                // BarCodeText := 'BM';
                ERROR(Text002,BarCode);
              'UA0','UA2','UA5':
                // BarCodeText := 'BU';
                ERROR(Text002,BarCode);
              'UE0','UE2','UE5':
                // BarCodeText := 'B9';
                ERROR(Text002,BarCode);
              'UPSM2':  // UPS Maxicode mode 2 (postal code U.S.)
                EXIT(
                  STRSUBSTNO(
                    '^FO%1,%2^BD2^FH^FD',XStart + ZebraOffset + HorzOffset,
                    YStart + ZebraOffset + VertOffset,Rotation,NarrowBarWidth,WideBarWidth,Height,PrintHumanCode,
                    BarcodeRatio,FontOrientation) + Data + '^FS');
              'UPSM3':  // UPS Maxicode mode 3 (alphanumeric postal code (non U.S.)
                EXIT(
                  STRSUBSTNO(
                    '^FO%1,%2^BD3^FH^FD',XStart + ZebraOffset + HorzOffset,
                    YStart + ZebraOffset + VertOffset,Rotation,NarrowBarWidth,WideBarWidth,Height,PrintHumanCode,
                    BarcodeRatio,FontOrientation) + Data + '^FS');
              'UPSPDF417':  // No data portion (written separately for PDF 417)
                BEGIN
                  EXIT(
                    STRSUBSTNO(
                      '^FO%1,%2^BY2^B7%3,7,,12^FH^FD',XStart + ZebraOffset + HorzOffset,
                      YStart + ZebraOffset + VertOffset,ConvertToZebraOrientation(Rotation),NarrowBarWidth,
                      WideBarWidth,Height,PrintHumanCode,Data,BarcodeRatio,FontOrientation));
                END;
              'UPSPDF417M':  // PDF MACRO
                EXIT(
                  STRSUBSTNO(
                    '^FM%1,%2,%3,%4',XStart + ZebraOffset + HorzOffset,
                    YStart + ZebraOffset + VertOffset, XStart + ZebraOffset + HorzOffset,
                    800 + VertOffset));
              ELSE
                ERROR(Text002,BarCode);
            END;
          END;
        PrinterType::"Eltron (EPL II)":
          BEGIN
            IF PrintHuman THEN
              PrintHumanCode := 'B'
            ELSE
              PrintHumanCode := 'N';

            CASE BarCode OF
              'UPSM2':  // UPS Maxicode mode 3 (alphanumeric postal code (non U.S.)
                EXIT(
                  STRSUBSTNO(
                    'b%1,%2,M,m2,"',XStart + HorzOffset,
                    YStart + VertOffset,Rotation,BarCode,NarrowBarWidth,WideBarWidth,Height,PrintHumanCode) +
                    Data + '"');
              'UPSM3':  // UPS Maxicode mode 3 (alphanumeric postal code (non U.S.)
                EXIT(
                  STRSUBSTNO(
                    'b%1,%2,M,m3,"',XStart + HorzOffset,
                    YStart + VertOffset,Rotation,BarCode,NarrowBarWidth,WideBarWidth,Height,PrintHumanCode) +
                    Data + '"');
              'UPSPDF417':  // No data portion (written separately for PDF 417)
                EXIT(
                  STRSUBSTNO(
                    'b%1,%2,P,%5,%7,x2,y6,l100,r100,f0,s2,',XStart + HorzOffset,
                    YStart + VertOffset,Rotation,BarCode,NarrowBarWidth,WideBarWidth,Height,PrintHumanCode));
              'UPSPDF417M':  // PDF MACRO
                EXIT('oH0,400');
              'DM':  //Data Matrix
                EXIT(
                  STRSUBSTNO(
                    'b%1,%2,D,h4,',XStart + HorzOffset,YStart + VertOffset) + '"' + Data + '"');
              ELSE
                EXIT(
                  STRSUBSTNO(
                    'B%1,%2,%3,%4,%5,%6,%7,%8,"',XStart + HorzOffset,
                    YStart + VertOffset,Rotation,BarCode,NarrowBarWidth,WideBarWidth,Height,PrintHumanCode) +
                    Data + '"');
            END;
          END;
        ELSE
          ERROR(Text001);
      END;
    END;

    PROCEDURE ChangeTextMode@1240030016(VAR LabelFile@1240030002 : File;ChangeToTextMode@1240030000 : Boolean);
    VAR
      LabelFileName@1240030001 : Text[250];
    BEGIN
      LabelFileName := LabelFile.NAME;
      LabelFile.CLOSE;
      LabelFile.TEXTMODE(ChangeToTextMode);
      LabelFile.WRITEMODE(TRUE);
      LabelFile.OPEN(LabelFileName);
      LabelFile.SEEK(LabelFile.LEN);
    END;

    PROCEDURE WriteLabelBinaryData@1240030017(VAR LabelFile@1240030003 : File;DataText@1240030000 : Text[250]);
    VAR
      I@1240030001 : Integer;
      WriteChar@1240030002 : Char;
    BEGIN
      FOR I := 1 TO STRLEN(DataText) DO BEGIN
        CASE PrinterType OF
          PrinterType::"Eltron (EPL II)":
            IF DataText[I] IN ['\','''','"'] THEN BEGIN
              WriteChar := '\';
              LabelFile.WRITE(WriteChar);
            END;
        END;
        WriteChar := DataText[I];
        LabelFile.WRITE(WriteChar);
      END;
    END;

    PROCEDURE WriteLabelBarCodeBeginChar@1240030021(VAR LabelFile@1240030003 : File);
    VAR
      i@1240030001 : Integer;
      WriteChar@1240030002 : Char;
      DataText@1240030000 : Text[250];
    BEGIN
      CASE PrinterType OF
        PrinterType::"Zebra (ZPL II)":
          DataText := '';
        PrinterType::"Eltron (EPL II)":
          DataText := '"';
        ELSE
          ERROR(Text001);
      END;

      IF LabelFile.TEXTMODE THEN
        LabelFile.WRITE(DataText)
      ELSE
        FOR i := 1 TO STRLEN(DataText) DO BEGIN
          WriteChar := DataText[i];
          LabelFile.WRITE(WriteChar);
        END;
    END;

    PROCEDURE WriteLabelBarCodeEndChar@1240030022(VAR LabelFile@1240030003 : File);
    VAR
      i@1240030001 : Integer;
      WriteChar@1240030002 : Char;
      DataText@1240030000 : Text[250];
    BEGIN
      CASE PrinterType OF
        PrinterType::"Zebra (ZPL II)":
          DataText := '^FS';
        PrinterType::"Eltron (EPL II)":
          DataText := '"';
        ELSE
          ERROR(Text001);
      END;

      IF LabelFile.TEXTMODE THEN
        LabelFile.WRITE(DataText)
      ELSE
        FOR i := 1 TO STRLEN(DataText) DO BEGIN
          WriteChar := DataText[i];
          LabelFile.WRITE(WriteChar);
        END;
    END;

    PROCEDURE ConvertToZebraOrientation@1240030019(Rotation@1240030000 : Integer) : Text[30];
    BEGIN
      CASE Rotation OF
       0:
         EXIT('');
       1:
         EXIT('R');
       2:
         EXIT('I');
       3:
         EXIT('B');
      END;
    END;

    PROCEDURE SetLabelConfiguration@1240030023(VAR LabelFile@1240030000 : File;SetPrinterType@1240030003 : ' ,,Eltron (EPL II),,Zebra (ZPL II)';MediaType@1240030006 : ' ,4X6 with Doc Tab,4X6 W/O Doc Tab,4X11 OverLabel';PrintDirectionType@1240030002 : 'Bottom,Top';VAR UseLabelWidth@1240030005 : Integer;VAR UseLabelHeight@1240030004 : Integer);
    VAR
      PrintDirectionText@1240030001 : Code[1];
    BEGIN
      LabelWidth := 800;
      PrinterType := SetPrinterType;

      CASE PrinterType OF
        PrinterType::"Zebra (ZPL II)":
          IF PrintDirectionType = PrintDirectionType::Top THEN BEGIN
            PrintDirectionText := 'N';
            HorzOffset := 5;
            VertOffset := 0;
          END ELSE BEGIN
            PrintDirectionText := 'I';
            HorzOffset := 5;
            VertOffset := 0;
          END;
        PrinterType::"Eltron (EPL II)":
          IF PrintDirectionType = PrintDirectionType::Top THEN BEGIN
            PrintDirectionText := 'B';
            HorzOffset := 0;
            VertOffset := 35;
          END ELSE BEGIN
            PrintDirectionText := 'T';
            HorzOffset := 0;
            VertOffset := 0;
          END;
        ELSE
          ERROR(Text001);
      END;

      CASE MediaType OF
        MediaType::"4X6 with Doc Tab":
          LabelHeight := 1380;
        MediaType::"4X6 W/O Doc Tab":
          LabelHeight := 1250;
        MediaType::"4X11 OverLabel":
          LabelHeight := 2292;
        ELSE
          ERROR(Text003);
      END;

      UseLabelWidth := LabelWidth;
      UseLabelHeight := LabelHeight;
    END;

    BEGIN
    END.
  }
}

