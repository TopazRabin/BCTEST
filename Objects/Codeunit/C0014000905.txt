OBJECT Codeunit 14000905 E-Mail Integration
{
  OBJECT-PROPERTIES
  {
    Date=09/17/21;
    Time=[ 6:18:05 AM];
    Modified=Yes;
    Version List=SE0.62,TPZ1788,001;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      EMailSetup@1240030001 : Record 14000905;
      Mail@1240030008 : Codeunit 397;
      MailSMTP@1240020000 : DotNet "'Microsoft.Dynamics.Nav.SMTP, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.SMTP.SmtpMessage";
      OutlookMessageHelper@1240020001 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Outlook.OutlookMessage" RUNONCLIENT;
      LineFeedCharValue@1240030004 : Text[30];
      EMailSetupRetrieved@1240030002 : Boolean;
      Text001@1240030003 : TextConst 'ENU=%1 must not be %2.';
      Text002@1240030007 : TextConst 'ENU=E-Mail(s) have been sent automatically.';
      Text004@1240030010 : TextConst 'ENU=Attachment %1 does not exist or can not be accessed from the program.';
      Text005@1240030009 : TextConst 'ENU=The SMTP mail system returned the following error: %1';
      ErrorNo@1240030014 : Integer;
      MailGUIDValue@1240030013 : GUID;
      UseOutlook@1000000000 : Boolean;
      GlobalSendViaOff365@1000000002 : Boolean;

    PROCEDURE InitializeMail@1240030000(Subject@1240030000 : Text[1000]) : Boolean;
    VAR
      UserSetup@1240030001 : Record 91;
    BEGIN
      GetEMailSetup;

      CASE EMailSetup."E-Mail Integration Type" OF
        EMailSetup."E-Mail Integration Type"::SMTP:
          BEGIN
            UserSetup.GET(USERID);
            UserSetup.TESTFIELD("E-Mail Sender Name");
            UserSetup.TESTFIELD("E-Mail Sender Address");

            IF NOT ISNULL(MailSMTP) THEN BEGIN
              MailSMTP.Dispose;
              CLEAR(MailSMTP);
            END;

            MailSMTP := MailSMTP.SmtpMessage;
            IF GlobalSendViaOff365 THEN BEGIN
              MailSMTP.FromName := EMailSetup."From Name";
              MailSMTP.FromAddress := EMailSetup."Sales Invoice Off. 365 E-mail";
            END ELSE BEGIN
              // <TPZ859>
              IF EMailSetup."From Address" <> '' THEN BEGIN
                MailSMTP.FromName := EMailSetup."From Name";
                MailSMTP.FromAddress := EMailSetup."From Address";
              END ELSE BEGIN
            MailSMTP.FromName := UserSetup."E-Mail Sender Name";
            MailSMTP.FromAddress := UserSetup."E-Mail Sender Address";
              END;
              // </TPZ859>
            END;
            MailSMTP.Subject := Subject;
            MailSMTP.HtmlFormatted := FALSE;
          END;
        EMailSetup."E-Mail Integration Type"::Outlook:
          BEGIN
            Initialize;
            OutlookMessageHelper.Subject := Subject;
            OutlookMessageHelper.BodyFormat := 1;
          END;
        ELSE
          ERROR(
            Text001,EMailSetup.FIELDCAPTION("E-Mail Integration Type"),
            EMailSetup."E-Mail Integration Type");
      END;
    END;

    PROCEDURE InitializeMail2@1240030001(Subject@1240030000 : Text[1000]) : Boolean;
    VAR
      UserSetup@1240030001 : Record 91;
    BEGIN
      GetEMailSetup;

      CASE EMailSetup."E-Mail Integration Type" OF
        EMailSetup."E-Mail Integration Type"::SMTP:
          BEGIN
            UserSetup.GET(USERID);
            UserSetup.TESTFIELD("E-Mail Sender Name");
            UserSetup.TESTFIELD("E-Mail Sender Address");

            IF NOT ISNULL(MailSMTP) THEN BEGIN
              MailSMTP.Dispose;
              CLEAR(MailSMTP);
            END;

            MailSMTP := MailSMTP.SmtpMessage;
            // <TPZ859>
            IF EMailSetup."From Address" <> '' THEN BEGIN
              MailSMTP.FromName := EMailSetup."From Name";
              MailSMTP.FromAddress := EMailSetup."From Address";
            END ELSE BEGIN
            MailSMTP.FromName := UserSetup."E-Mail Sender Name";
            MailSMTP.FromAddress := UserSetup."E-Mail Sender Address";
            END;
            // </TPZ859>
            MailSMTP.Subject := Subject;
            MailSMTP.HtmlFormatted := TRUE;
          END;
        EMailSetup."E-Mail Integration Type"::Outlook:
          BEGIN
            Initialize;
            OutlookMessageHelper.Subject := Subject;
            OutlookMessageHelper.BodyFormat := 1;
          END;
        ELSE
          ERROR(
            Text001,EMailSetup.FIELDCAPTION("E-Mail Integration Type"),
            EMailSetup."E-Mail Integration Type");
      END;

      EXIT(TRUE);
    END;

    PROCEDURE AddReceiverTo@1240030002(Receiver@1240030000 : Text[1000]) : Boolean;
    VAR
      Result@1240020000 : Text;
    BEGIN
      GetEMailSetup;

      CASE EMailSetup."E-Mail Integration Type" OF
        EMailSetup."E-Mail Integration Type"::SMTP:
          BEGIN
            Result := MailSMTP.AddRecipients(Receiver);
            IF Result <> '' THEN
              ERROR(Text005,Result);
          END;
        EMailSetup."E-Mail Integration Type"::Outlook:
          BEGIN
            Initialize;
            OutlookMessageHelper.Recipients := Receiver;
          END;
        ELSE
          ERROR(
            Text001,EMailSetup.FIELDCAPTION("E-Mail Integration Type"),
            EMailSetup."E-Mail Integration Type");
      END;

      EXIT(TRUE);
    END;

    PROCEDURE AddReceiverCC@1240030003(Receiver@1240030000 : Text[1000]) : Boolean;
    VAR
      Result@1240020000 : Text;
    BEGIN
      GetEMailSetup;

      CASE EMailSetup."E-Mail Integration Type" OF
        EMailSetup."E-Mail Integration Type"::SMTP:
          BEGIN
            Result := MailSMTP.AddCC(Receiver);
            IF Result <> '' THEN
              ERROR(Text005,Result);
          END;
        EMailSetup."E-Mail Integration Type"::Outlook:
          BEGIN
            Initialize;
            OutlookMessageHelper.CarbonCopyRecipients := Receiver;
          END;
        ELSE
          ERROR(
            Text001,EMailSetup.FIELDCAPTION("E-Mail Integration Type"),
            EMailSetup."E-Mail Integration Type");
      END;

      EXIT(TRUE);
    END;

    PROCEDURE AddReceiverBCC@1240030004(Receiver@1240030000 : Text[1000]) : Boolean;
    VAR
      Result@1240020000 : Text;
    BEGIN
      GetEMailSetup;

      CASE EMailSetup."E-Mail Integration Type" OF
        EMailSetup."E-Mail Integration Type"::SMTP:
          BEGIN
            Result := MailSMTP.AddBCC(Receiver);
            IF Result <> '' THEN
              ERROR(Text005,Result);
          END;
        EMailSetup."E-Mail Integration Type"::Outlook:
          BEGIN
            Initialize;
            OutlookMessageHelper.BlindCarbonCopyRecipients := Receiver;
          END;
        ELSE
          ERROR(
            Text001,EMailSetup.FIELDCAPTION("E-Mail Integration Type"),
            EMailSetup."E-Mail Integration Type");
      END;

      EXIT(TRUE);
    END;

    PROCEDURE AddAttachment@1240030005(FileName@1240030000 : Text[1000]) : Boolean;
    VAR
      ActiveSession@1240020001 : Record 2000000110;
      FileSystemObject@1240020002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.File" RUNONCLIENT;
      TempFile@1240020003 : File;
      NVInStream@1240020004 : InStream;
      Result@1240020000 : Text;
      ClientFileName@1240020005 : Text[1000];
    BEGIN
      GetEMailSetup;

      CASE EMailSetup."E-Mail Integration Type" OF
        EMailSetup."E-Mail Integration Type"::SMTP:
          BEGIN
            IF NOT EXISTS(FileName) THEN
              ERROR(Text004,FileName);
            Result := MailSMTP.AddAttachments(FileName);
            IF Result <> '' THEN
              ERROR(Text005,Result);
          END;
        EMailSetup."E-Mail Integration Type"::Outlook:
          BEGIN
            ActiveSession.RESET;
            ActiveSession.SETRANGE("Session ID",SESSIONID);
            ActiveSession.FINDFIRST;
            IF UPPERCASE(ActiveSession."Server Computer Name") <>
              UPPERCASE(ActiveSession."Client Computer Name") THEN
            BEGIN
              TempFile.OPEN(FileName);
              TempFile.CREATEINSTREAM(NVInStream);
              DOWNLOADFROMSTREAM(NVInStream,'','<TEMP>','',ClientFileName);
              TempFile.CLOSE;
              FileSystemObject.Copy(ClientFileName,FileName,TRUE);
            END;
            Initialize;
            OutlookMessageHelper.AttachmentFileNames.Add(FileName);
          END;
        ELSE
          ERROR(
            Text001,EMailSetup.FIELDCAPTION("E-Mail Integration Type"),
            EMailSetup."E-Mail Integration Type");
      END;

      EXIT(TRUE);
    END;

    PROCEDURE AddtoBody@1240030006(Value@1240030000 : Text[1000]) : Boolean;
    VAR
      Pos@1240030001 : Integer;
      LineFeed@1240030002 : Text[30];
      Result@1240020000 : Text;
    BEGIN
      GetEMailSetup;

      CASE EMailSetup."E-Mail Integration Type" OF
        EMailSetup."E-Mail Integration Type"::SMTP:
          BEGIN
            IF LineFeedCharValue <> '' THEN BEGIN
              LineFeed[1] := 13;
              LineFeed[2] := 10;

              Pos := STRPOS(Value,LineFeedCharValue);
              WHILE Pos > 0 DO BEGIN
                IF Pos > 1 THEN BEGIN
                  Result := MailSMTP.AppendBody(COPYSTR(Value,1,Pos -1));
                  IF Result <> '' THEN
                    ERROR(Text005,Result);
                END;
                Result := MailSMTP.AppendBody(LineFeed);
                IF Result <> '' THEN
                  ERROR(Text005,Result);
                Value := COPYSTR(Value,Pos + 1);
                Pos := STRPOS(Value,LineFeedCharValue);
              END;
              IF STRLEN(Value) > 0 THEN BEGIN
                Result := MailSMTP.AppendBody(Value);
                IF Result <> '' THEN
                  ERROR(Text005,Result);
              END;
            END ELSE BEGIN
              Result := MailSMTP.AppendBody(Value);
              IF Result <> '' THEN
                ERROR(Text005,Result);
            END;
          END;
        EMailSetup."E-Mail Integration Type"::Outlook:
          BEGIN
            Initialize;
            IF LineFeedCharValue <> '' THEN BEGIN
              LineFeed[1] := 13;
              LineFeed[2] := 10;

              Pos := STRPOS(Value,LineFeedCharValue);
              WHILE Pos > 0 DO BEGIN
                IF Pos > 1 THEN
                  OutlookMessageHelper.Body.Append(COPYSTR(Value,1,Pos -1));
                OutlookMessageHelper.Body.Append(LineFeed);
                Value := COPYSTR(Value,Pos + 1);
                Pos := STRPOS(Value,LineFeedCharValue);
              END;
              IF STRLEN(Value) > 0 THEN
                OutlookMessageHelper.Body.Append(Value);
            END ELSE
              OutlookMessageHelper.Body.Append(Value);
          END;
        ELSE
          ERROR(
            Text001,EMailSetup.FIELDCAPTION("E-Mail Integration Type"),
            EMailSetup."E-Mail Integration Type");
      END;

      EXIT(TRUE);
    END;

    PROCEDURE Send@1240030007(OpenDialog@1240030000 : Boolean) : Boolean;
    VAR
      MailSent@1240030001 : Boolean;
      SecureConnection@1240020001 : Boolean;
      Result@1240020000 : Text;
    BEGIN
      GetEMailSetup;

      CASE EMailSetup."E-Mail Integration Type" OF
        EMailSetup."E-Mail Integration Type"::SMTP:
          BEGIN
            IF OpenDialog THEN
              MESSAGE(Text002);

            IF EMailSetup."SMTP Secure Connection" = EMailSetup."SMTP Secure Connection"::"True" THEN
              SecureConnection := TRUE
            ELSE
              SecureConnection := FALSE;

            Result :=
              MailSMTP.Send(
                EMailSetup."SMTP Server",EMailSetup."SMTP Server Port",
                EMailSetup."SMTP Authentication" <> EMailSetup."SMTP Authentication"::Anonymous,
                EMailSetup."SMTP User ID",EMailSetup."SMTP Password",SecureConnection);

            IF NOT ISNULL(MailSMTP) THEN BEGIN
              MailSMTP.Dispose;
              CLEAR(MailSMTP);
            END;

            IF Result <> '' THEN
              ERROR(Text005,Result);
          END;
        EMailSetup."E-Mail Integration Type"::Outlook:
          BEGIN
            Initialize;
            OutlookMessageHelper.ShowNewMailDialogOnSend := OpenDialog;
            MailSent := OutlookMessageHelper.Send;
            EXIT(MailSent);
          END;
        ELSE
          ERROR(
            Text001,EMailSetup.FIELDCAPTION("E-Mail Integration Type"),
            EMailSetup."E-Mail Integration Type");
      END;

      EXIT(TRUE);
    END;

    PROCEDURE LineFeedChar@1240030008(Value@1240030000 : Text[30]);
    BEGIN
      LineFeedCharValue := Value;

      GetEMailSetup;

      CASE EMailSetup."E-Mail Integration Type" OF
        EMailSetup."E-Mail Integration Type"::SMTP:
          LineFeedCharValue := Value;
        EMailSetup."E-Mail Integration Type"::Outlook:
          LineFeedCharValue := Value;
        ELSE
          ERROR(
            Text001,EMailSetup.FIELDCAPTION("E-Mail Integration Type"),
            EMailSetup."E-Mail Integration Type");
      END;
    END;

    LOCAL PROCEDURE GetEMailSetup@1240030009();
    BEGIN
      IF EMailSetupRetrieved THEN
        EXIT;

      EMailSetup.GET('');
      IF EMailSetup."E-Mail Integration Type" = EMailSetup."E-Mail Integration Type"::SMTP THEN BEGIN
        EMailSetup.TESTFIELD("SMTP Server");
      END;

      // <TPZ92>
      IF UseOutlook THEN
        EMailSetup."E-Mail Integration Type" := EMailSetup."E-Mail Integration Type"::Outlook;
      // </TPZ92>

      EMailSetupRetrieved := TRUE;
    END;

    LOCAL PROCEDURE Initialize@11();
    VAR
      OutlookMessageHelperInstance@1000 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Outlook.OutlookMessage" RUNONCLIENT;
    BEGIN
      IF ISNULL(OutlookMessageHelper) THEN
        OutlookMessageHelper := OutlookMessageHelperInstance.OutlookMessage;
    END;

    PROCEDURE DeleteAttachment@1240020000(AttachmentFileName@1240020000 : Text[250]);
    VAR
      ActiveSession@1240020002 : Record 2000000110;
      FileSystemObject@1240020001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.File" RUNONCLIENT;
    BEGIN
      ERASE(AttachmentFileName);

      //<TPZ:HD:9809>
      // <TPZ859>
      IF NOT GUIALLOWED THEN BEGIN
        IF ActiveSession.GET(SERVICEINSTANCEID,SESSIONID) AND
           (UPPERCASE(ActiveSession."Server Computer Name") <>
            UPPERCASE(ActiveSession."Client Computer Name")) AND
           NOT (ActiveSession."Client Type" IN [ActiveSession."Client Type"::NAS,ActiveSession."Client Type"::Background])
        THEN
          FileSystemObject.Delete(AttachmentFileName);
      END;
      //</TPZ:HD:9809>
      //ActiveSession.RESET;
      //ActiveSession.SETRANGE("Session ID",SESSIONID);
      //ActiveSession.FINDFIRST;
      //IF UPPERCASE(ActiveSession."Server Computer Name") <>
      //  UPPERCASE(ActiveSession."Client Computer Name") THEN
      //BEGIN
      //  FileSystemObject.Delete(AttachmentFileName);
      //END;
      // </TPZ859>
    END;

    PROCEDURE SetException@1000000000(NewUseOutlook@1000000000 : Boolean);
    BEGIN
      // <TPZ92>
      UseOutlook := NewUseOutlook;
      // </TPZ92>
    END;

    PROCEDURE SendViaOff365@1000000001(OpenDialog@1000000000 : Boolean) : Boolean;
    VAR
      MailSent@1000000003 : Boolean;
      SecureConnection@1000000002 : Boolean;
      Result@1000000001 : Text;
    BEGIN
      //TPZE-mail
      CASE EMailSetup."E-Mail Integration Type" OF
        EMailSetup."E-Mail Integration Type"::SMTP:
          BEGIN
            IF OpenDialog THEN
              MESSAGE(Text002);

            IF (EMailSetup."SMTP Secure Conn. Off. 365" = EMailSetup."SMTP Secure Conn. Off. 365"::"True") THEN
              SecureConnection := TRUE
            ELSE
              SecureConnection := FALSE;

            Result :=
              MailSMTP.Send(
               EMailSetup."SMTP Server  Off. 365",EMailSetup."SMTP Server Port Off. 365",
               EMailSetup."SMTP  Authentication Off. 365" <> EMailSetup."SMTP  Authentication Off. 365"::Anonymous,
               EMailSetup."SMTP User ID Off. 365",EMailSetup."SMTP Password Off. 365",SecureConnection);

            MailSMTP.Dispose;
            CLEAR(MailSMTP);
            IF Result <> '' THEN
              ERROR(Text005,Result);
          END;
        ELSE
          ERROR(
            Text001,EMailSetup.FIELDCAPTION("E-Mail Integration Type"),
            EMailSetup."E-Mail Integration Type");
      END;

      EXIT(TRUE);
    END;

    PROCEDURE InitializeMailOff365@1000000002(Subject@1240030000 : Text[1000];pDocType@1000000000 : 'SalesInvoice,SalesCM,CustStatement,SOConf,SPSASN,SROConf,SQConf,BOL') : Boolean;
    VAR
      UserSetup@1240030001 : Record 91;
    BEGIN
      GetEMailSetup;

      CASE EMailSetup."E-Mail Integration Type" OF
        EMailSetup."E-Mail Integration Type"::SMTP:
          BEGIN

            IF NOT ISNULL(MailSMTP) THEN BEGIN
              MailSMTP.Dispose;
              CLEAR(MailSMTP);
            END;

            MailSMTP := MailSMTP.SmtpMessage;

            CASE pDocType OF
              pDocType::SalesInvoice:
                BEGIN
                  IF EMailSetup."Sales Invoice Off. 365 E-mail" <> '' THEN BEGIN
                    MailSMTP.FromName := EMailSetup."From Name";
                    MailSMTP.FromAddress := EMailSetup."Sales Invoice Off. 365 E-mail";
                  END;
            END;
              //>>001 TPZ3222
      //        // <TPZ2430>
      //        pDocType::CustStatement:
      //          BEGIN
      //            IF EMailSetup."Cust. Stat. Off. 365 E-mail" <> '' THEN BEGIN
      //              MailSMTP.FromName := EMailSetup."From Name";
      //              MailSMTP.FromAddress := EMailSetup."Cust. Stat. Off. 365 E-mail";
      //            END;
      //          END;
      //        pDocType::SalesCM:
      //          BEGIN
      //            IF EMailSetup."Sales CM Off. 365 E-mail" <> '' THEN BEGIN
      //              MailSMTP.FromName := EMailSetup."From Name";
      //              MailSMTP.FromAddress := EMailSetup."Sales CM Off. 365 E-mail"
      //            END;
      //          END;
      //        pDocType::SOConf:
      //          BEGIN
      //            IF EMailSetup."SO Off. 365 Conf. E-Mail" <> '' THEN BEGIN
      //              MailSMTP.FromName := EMailSetup."From Name";
      //              MailSMTP.FromAddress := EMailSetup."SO Off. 365 Conf. E-Mail"
      //            END;
      //          END;
      //        pDocType::SPSASN:
      //          BEGIN
      //            IF EMailSetup."SPS ASN Off.365 E-Mail" <> '' THEN BEGIN
      //              MailSMTP.FromName := EMailSetup."From Name";
      //              MailSMTP.FromAddress := EMailSetup."SPS ASN Off.365 E-Mail"
      //            END;
      //          END;
      //        pDocType::SROConf:
      //          BEGIN
      //            IF EMailSetup."SRO Off. 365 Conf. E-Mail" <> '' THEN BEGIN
      //              MailSMTP.FromName := EMailSetup."From Name";
      //              MailSMTP.FromAddress := EMailSetup."SRO Off. 365 Conf. E-Mail"
      //    END;
      // END;
      //        pDocType::SQConf:
      //          BEGIN
      //            IF EMailSetup."SQ Off. 365 Conf. E-Mail" <> '' THEN BEGIN
      //              MailSMTP.FromName := EMailSetup."From Name";
      //              MailSMTP.FromAddress := EMailSetup."SQ Off. 365 Conf. E-Mail"
      //            END;
      //          END;
      //        pDocType::BOL:
      //          BEGIN
      //            IF EMailSetup."BOL Off. 365 E-Mail" <> '' THEN BEGIN
      //              MailSMTP.FromName := EMailSetup."From Name";
      //              MailSMTP.FromAddress := EMailSetup."BOL Off. 365 E-Mail"
      //            END;
      //          END;
      //        // </TPZ2430>
              //<<001 TPZ3222
            END;
            MailSMTP.Subject := Subject;
            MailSMTP.HtmlFormatted := FALSE;
          END;
        ELSE
          ERROR(
            Text001,EMailSetup.FIELDCAPTION("E-Mail Integration Type"),
            EMailSetup."E-Mail Integration Type");
      END;
    END;

    PROCEDURE SetSendViaOff365@1000000003(pSendViaOff365@1000000000 : Boolean);
    BEGIN
      //>>001 TPZ3222
      //GlobalSendViaOff365 := pSendViaOff365; //TPZE-mail
      //<<001 TPZ3222
    END;

    BEGIN
    {
      Code for the MAPI Integration is copied from Navision 4.00.03 codeunit 397
      Code for the SMTP Integration is copied from Navision 7.00 codeunit 400
      2015-07-30 TPZ859 TAKHMETO - InitializeMail, InitializeMail2, DeleteAttachment functions have been modified
      2016-07-18 Help Desk - Request ID: 9809 -  Added code to eliminate the fileIO handling (deletion) over and above Erase for GUI users.
      2017-03-05 TPZ1788 SDESAI - Added code for Office 365 SMTP
      2019-01-18 TPZ2430 SNAGPAL - Move outbound emails to O365 smtp server.
      001 TPZ3222 RPS 07072021 - Change 365 to SMTP  task for NAV
    }
    END.
  }
}

