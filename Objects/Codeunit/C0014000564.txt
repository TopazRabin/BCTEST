OBJECT Codeunit 14000564 UBP
{
  OBJECT-PROPERTIES
  {
    Date=11/01/20;
    Time=12:00:00 PM;
    Version List=UBP3.03;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1240030000 : TextConst 'ENU=Location not found.';
      Text001@1240030001 : TextConst 'ENU=Replenishment Path Loop: Location %1 Item %2  %3';
      CreateLocInvRollUP@1240030002 : Codeunit 14000574;
      SetupRead@1240020002 : Boolean;
      InvMgtSetup@1240020001 : Record 14000551;
      AdvForSetup@1240020000 : Record 14002651;
      FormulaMinPeriods@1240020004 : Integer;
      FormulaMaxPeriods@1240020003 : Integer;
      LeadTimeSource@1240020005 : Text[10];
      outLeadTimeDays@1240020006 : Decimal;

    PROCEDURE VPLLocationLookup@1(VAR LocationCode@14000500 : Code[20];VAR VendorPerfLine@14000501 : Record 14000561);
    VAR
      Location@14000502 : Record 14;
    BEGIN
      Location.RESET;
      IF PAGE.RUNMODAL(PAGE::"Location List",Location) = ACTION::LookupOK THEN
        LocationCode := Location.Code;
      VendorPerfLine.SETRANGE("Location Code",LocationCode);
    END;

    PROCEDURE VPLLocationVerify@2(LocationCode@14000500 : Code[20];VAR VendorPerfLine@14000501 : Record 14000561);
    VAR
      Location@14000502 : Record 14;
    BEGIN
      Location.RESET;
      IF LocationCode = '' THEN BEGIN
        VendorPerfLine.SETRANGE("Location Code");
        EXIT;
      END;

      IF Location.GET(LocationCode) THEN
        VendorPerfLine.SETRANGE("Location Code",LocationCode)
      ELSE
        ERROR(Text000);
    END;

    PROCEDURE VPLGetFilter@3(VAR LocationCode@14000500 : Code[20];VAR VendorPerfLine@14000501 : Record 14000561);
    BEGIN
      LocationCode := VendorPerfLine.GETFILTER("Location Code");
    END;

    PROCEDURE PVPLLocationLookup@9(VAR LocationCode@14000500 : Code[20];VAR PostedVendorPerfLine@14000501 : Record 14000562);
    VAR
      Location@14000502 : Record 14;
    BEGIN
      Location.RESET;
      IF PAGE.RUNMODAL(PAGE::"Location List",Location) = ACTION::LookupOK THEN
        LocationCode := Location.Code;
      PostedVendorPerfLine.SETRANGE("Location Code",LocationCode);
    END;

    PROCEDURE PVPLLocationVerify@8(LocationCode@14000500 : Code[20];VAR PostedVendorPerfLine@14000501 : Record 14000562);
    VAR
      Location@14000502 : Record 14;
    BEGIN
      Location.RESET;
      IF LocationCode = '' THEN BEGIN
        PostedVendorPerfLine.SETRANGE("Location Code");
        EXIT;
      END;

      IF Location.GET(LocationCode) THEN
        PostedVendorPerfLine.SETRANGE("Location Code",LocationCode)
      ELSE
        ERROR(Text000);
    END;

    PROCEDURE PVPLGetFilter@7(VAR LocationCode@14000500 : Code[20];VAR PostedVendorPerfLine@14000501 : Record 14000562);
    BEGIN
      LocationCode := PostedVendorPerfLine.GETFILTER("Location Code");
    END;

    PROCEDURE FormatAddr@1000000002(VAR AddrArray@1000 : ARRAY [8] OF Text[100];Name@1001 : Text[100];Name2@1002 : Text[100];Contact@1003 : Text[100];Addr@1004 : Text[100];Addr2@1005 : Text[50];City@1006 : Text[50];PostCode@1007 : Code[20];County@1008 : Text[50];CountryCode@1009 : Code[10]);
    VAR
      Country@1010 : Record 9;
      GLSetup@1000000000 : Record 98;
      InsertText@1011 : Integer;
      Index@1012 : Integer;
      NameLineNo@1013 : Integer;
      Name2LineNo@1014 : Integer;
      AddrLineNo@1015 : Integer;
      Addr2LineNo@1016 : Integer;
      ContLineNo@1017 : Integer;
      PostCodeCityLineNo@1018 : Integer;
      CountyLineNo@1019 : Integer;
      CountryLineNo@1020 : Integer;
      Dummy@1021 : Text[100];
    BEGIN
      CLEAR(AddrArray);

      IF CountryCode = '' THEN BEGIN
        GLSetup.GET;
        CLEAR(Country);
        Country."Address Format" := GLSetup."Local Address Format";
        Country."Contact Address Format" := GLSetup."Local Cont. Addr. Format";
      END ELSE
        Country.GET(CountryCode);

      CASE Country."Contact Address Format" OF
        Country."Contact Address Format"::First:
          BEGIN
            NameLineNo := 2;
            Name2LineNo := 3;
            ContLineNo := 1;
            AddrLineNo := 4;
            Addr2LineNo := 5;
            PostCodeCityLineNo := 6;
            CountyLineNo := 7;
            CountryLineNo := 8;
          END;
        Country."Contact Address Format"::"After Company Name":
          BEGIN
            NameLineNo := 1;
            Name2LineNo := 2;
            ContLineNo := 3;
            AddrLineNo := 4;
            Addr2LineNo := 5;
            PostCodeCityLineNo := 6;
            CountyLineNo := 7;
            CountryLineNo := 8;
          END;
        Country."Contact Address Format"::Last:
          BEGIN
            NameLineNo := 1;
            Name2LineNo := 2;
            ContLineNo := 8;
            AddrLineNo := 3;
            Addr2LineNo := 4;
            PostCodeCityLineNo := 5;
            CountyLineNo := 6;
            CountryLineNo := 7;
          END;
      END;

      AddrArray[NameLineNo] := Name;
      AddrArray[Name2LineNo] := Name2;
      AddrArray[AddrLineNo] := Addr;
      AddrArray[Addr2LineNo] := Addr2;

      CASE Country."Address Format" OF
        Country."Address Format"::"Post Code+City",
          Country."Address Format"::"City+County+Post Code",
          Country."Address Format"::"City+Post Code":
          BEGIN
            AddrArray[ContLineNo] := Contact;
            GeneratePostCodeCity(AddrArray[PostCodeCityLineNo], AddrArray[CountyLineNo], City, PostCode, County, Country);
            AddrArray[CountryLineNo] := Country.Name;
            COMPRESSARRAY(AddrArray);
          END;
        Country."Address Format"::"Blank Line+Post Code+City":
          BEGIN
            IF ContLineNo < PostCodeCityLineNo THEN
              AddrArray[ContLineNo] := Contact;
            COMPRESSARRAY(AddrArray);

            Index := 1;
            InsertText := 1;
            REPEAT
              IF AddrArray[Index] = '' THEN BEGIN
                CASE InsertText OF
                  2: GeneratePostCodeCity(AddrArray[Index], Dummy, City, PostCode, County, Country);
                  3: AddrArray[Index] := Country.Name;
                  4:
                    IF ContLineNo > PostCodeCityLineNo THEN
                      AddrArray[Index] := Contact;
                END;
                InsertText := InsertText + 1;
              END;
              Index := Index + 1;
            UNTIL Index = 9;
          END;
      END;
    END;

    PROCEDURE SuggestedOrderHeaderBuyFrom@1000000001(VAR AddrArray@1000 : ARRAY [8] OF Text[50];VAR SuggestedOrderHeader@1001 : Record 14000565);
    BEGIN
      WITH SuggestedOrderHeader DO BEGIN
        CALCFIELDS(
          "Buy-from Vendor Name","Buy-from Vendor Name 2","Buy-from Address",
          "Buy-from Address 2","Buy-from City","Buy-from Contact",
          "Buy-from Post Code","Buy-from County","Buy-from Country Code");
        FormatAddr(
          AddrArray,"Buy-from Vendor Name","Buy-from Vendor Name 2","Buy-from Contact","Buy-from Address","Buy-from Address 2",
          "Buy-from City","Buy-from Post Code","Buy-from County","Buy-from Country Code");
      END;
    END;

    PROCEDURE SuggestedOrderHeaderShipTo@11(VAR AddrArray@1000 : ARRAY [8] OF Text[50];VAR SuggestedOrderHeader@1001 : Record 14000565);
    BEGIN
      WITH SuggestedOrderHeader DO
        FormatAddr(
          AddrArray,"Ship-to Name","Ship-to Name 2","Ship-to Contact","Ship-to Address","Ship-to Address 2",
          "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country Code");
    END;

    LOCAL PROCEDURE GeneratePostCodeCity@31(VAR PostCodeCityText@1000 : Text[90];VAR CountyText@1001 : Text[50];City@1002 : Text[50];PostCode@1003 : Code[20];County@1004 : Text[50];Country@1005 : Record 9);
    BEGIN
      CASE Country."Address Format" OF
        Country."Address Format"::"Post Code+City":
          BEGIN
            IF PostCode <> '' THEN
              PostCodeCityText := DELSTR(PostCode + ' ' + City,MAXSTRLEN(PostCodeCityText) + 1)
            ELSE
              PostCodeCityText := City;
            CountyText := County;
          END;
        Country."Address Format"::"City+County+Post Code":
          BEGIN
            IF (County <> '') AND (PostCode <> '') THEN
              PostCodeCityText :=
                DELSTR(City,MAXSTRLEN(PostCodeCityText) - STRLEN(PostCode) - STRLEN(County) - 2) +
                ', ' + County + '  ' + PostCode
            ELSE
              IF PostCode = '' THEN BEGIN
                PostCodeCityText := City;
                CountyText := County;
              END ELSE
                IF (County = '') AND (PostCode <> '') THEN
                  PostCodeCityText := DELSTR(City,MAXSTRLEN(PostCodeCityText) - STRLEN(PostCode) - 1) + ', ' + PostCode;
          END;
        Country."Address Format"::"City+Post Code":
          BEGIN
            IF PostCode <> '' THEN
              PostCodeCityText := DELSTR(City,MAXSTRLEN(PostCodeCityText) - STRLEN(PostCode) - 1) + ', ' + PostCode
            ELSE
              PostCodeCityText := City;
          END;
        Country."Address Format"::"Blank Line+Post Code+City":
          IF PostCode <> '' THEN
            PostCodeCityText := DELSTR(PostCode + ' ' + City,MAXSTRLEN(PostCodeCityText) + 1)
          ELSE
            PostCodeCityText := City;
      END;
    END;

    PROCEDURE EnableAFPRecDateMgt@1240030006() Resp : Boolean;
    VAR
      InvMgtSetup@1240030000 : Record 14000551;
    BEGIN
      IF NOT InvMgtSetup.FIND('-') THEN
        InvMgtSetup.INIT;
      EXIT(InvMgtSetup."Enable AFP Rec. Date Mgmt.");
    END;

    PROCEDURE CalcLeadTimeDays@1240030007(VAR CurrProcUnit@1240030000 : Record 14000555) LeadTimeDays : Decimal;
    VAR
      VendBuyingCalendar@1240030002 : Record 14000563;
      txtAverage@1240020003 : TextConst 'ENU=Average';
      txtMin@1240020002 : TextConst 'ENU=Minimum';
      txtVBCFrozen@1240020001 : TextConst 'ENU=VBC Frozen';
      txtFrozen@1240020000 : TextConst 'ENU=Frozen';
      txtDefault@1240020004 : TextConst 'ENU=Default';
      txtImport@1240020005 : TextConst 'ENU=Imported';
      txtMax@1240020006 : TextConst 'ENU=Max';
    BEGIN
      LeadTimeSource := '';
      outLeadTimeDays := 0;
      IF CurrProcUnit."Replenishment Source Type" <> CurrProcUnit."Replenishment Source Type"::Vendor THEN
        EXIT(0);

      GetSetup;

      LeadTimeDays := 0;
      LeadTimeDays := CurrProcUnit."Average Lead Time (Days)";

      LeadTimeSource := txtAverage;

      IF CurrProcUnit."Average Lead Time (Days)" <> 0 THEN BEGIN
        IF CurrProcUnit."Average Lead Time (Days)" < InvMgtSetup."Min. Lead Time Days" THEN BEGIN
          LeadTimeDays := InvMgtSetup."Min. Lead Time Days";
          LeadTimeSource := txtMin;
        END;
      END ELSE BEGIN
        LeadTimeDays := InvMgtSetup."Default Lead Time (Days)";
        LeadTimeSource := txtDefault;
      END;

      IF CurrProcUnit."Imported Lead Time (Days)" > 0 THEN BEGIN
        LeadTimeDays := CurrProcUnit."Imported Lead Time (Days)";
        LeadTimeSource := txtImport;
        IF CurrProcUnit."Imported Lead Time (Days)" < InvMgtSetup."Min. Lead Time Days" THEN BEGIN
          LeadTimeDays := InvMgtSetup."Min. Lead Time Days";
          LeadTimeSource := txtMin;
        END;
      END;

      IF VendBuyingCalendar.GET(CurrProcUnit."Replenishment Source Code", CurrProcUnit."Location Code", CurrProcUnit."Division Code") THEN BEGIN
        IF VendBuyingCalendar."Frozen Lead Time (Days)" > 0 THEN BEGIN
          LeadTimeDays := VendBuyingCalendar."Frozen Lead Time (Days)";
          LeadTimeSource := txtVBCFrozen;
        END;
      END;

      IF (CurrProcUnit."Frozen Lead Time Expir. Date" <> 0D) AND
         (CurrProcUnit."Frozen Lead Time Expir. Date" >= WORKDATE) AND
         (CurrProcUnit."Frozen Lead Time (Days)" <> 0) THEN BEGIN
        LeadTimeDays := CurrProcUnit."Frozen Lead Time (Days)";
        LeadTimeSource := txtFrozen;
      END;

      IF InvMgtSetup."Max. Lead Time Days To Use" = 0 THEN BEGIN
        InvMgtSetup."Max. Lead Time Days To Use" := 365;
      END;

      IF (LeadTimeDays > InvMgtSetup."Max. Lead Time Days To Use") THEN BEGIN
        LeadTimeDays := InvMgtSetup."Max. Lead Time Days To Use";
        LeadTimeSource := txtMax;
      END;

      IF LeadTimeDays < 0 THEN
        LeadTimeDays := 0;

      outLeadTimeDays := LeadTimeDays;
      EXIT(LeadTimeDays);
    END;

    PROCEDURE CalcExpRecDate@1000000000(LocCode@1002 : Code[10];ItemNo@1001 : Code[50];VariantCode@1003 : Code[10];OrderDate@1000 : Date) PlannedRecDate@1000000003 : Date;
    VAR
      ProcUnit@1000000001 : Record 14000555;
      LeadTimeDays@1240030001 : Decimal;
    BEGIN
      PlannedRecDate := 0D;
      IF OrderDate = 0D THEN
        EXIT(PlannedRecDate);

      IF NOT ProcUnit.GET(LocCode,ItemNo,VariantCode) THEN
        EXIT(PlannedRecDate);

      PlannedRecDate := CALCDATE(STRSUBSTNO('<+%1D>',CalcLeadTimeDays(ProcUnit)),OrderDate);

      EXIT(PlannedRecDate);
    END;

    PROCEDURE SummarizeVariantDetail@1240030000() Resp@1240030002 : Boolean;
    BEGIN
      GetSetup;
      IF InvMgtSetup."Summarize Variant Detail" = InvMgtSetup."Summarize Variant Detail"::Never THEN
        EXIT(FALSE)
      ELSE
        EXIT(TRUE);
    END;

    PROCEDURE DecCharacter@1240030001() Response : Text[1];
    VAR
      DecVariable@1240030000 : Decimal;
      DecText@1240030001 : Text[30];
    BEGIN
      DecVariable := 1.23;
      DecText := FORMAT(DecVariable);
      Response := COPYSTR(DecText,2,1);
    END;

    PROCEDURE GetUsageLocationFilter@1240030015(CurrLocation@1240030000 : Code[10];CurrItem@1240030004 : Code[50];CurrVariant@1240030005 : Code[10];CurrSingleLocation@1240030001 : Boolean) LocationFilter : Text;
    VAR
      LocProcUnit@1240030003 : Record 14000555;
      LocProcUnitTop@1240020000 : Record 14000555;
      LocationArray@1000000001 : ARRAY [100] OF Code[10];
      i@1000000002 : Integer;
      j@1000000003 : Integer;
      CheckLocation@1240020003 : Code[10];
      Finished@1240020002 : Boolean;
      Stocked@1000 : Boolean;
    BEGIN
      IF NOT LocProcUnit.GET(CurrLocation,CurrItem,CurrVariant) THEN BEGIN
        LocationFilter := CurrLocation;
        EXIT(LocationFilter);
      END;

      GetSetup;

      IF InvMgtSetup."Nonstock Usage Location Filter" = '' THEN BEGIN
        InvMgtSetup."Nonstock Usage Location Filter" := 'x';
      END;

      IF (CurrSingleLocation) OR
         (NOT InvMgtSetup."Roll Up Via Repl. Path") OR
         ((LocProcUnit."Replenishment Source Code" = '') AND
          (LocProcUnit."Replenishment Source Type" = LocProcUnit."Replenishment Source Type"::Location))
      THEN BEGIN
        LocationFilter := LocProcUnit."Location Code";
        IF LocProcUnit."Nonstock Unit" OR
          ((LocProcUnit."Replenishment Model" = LocProcUnit."Replenishment Model"::"Min/Max") AND
           (LocProcUnit."Maximum Inventory" <> 0))
        THEN
          LocationFilter := InvMgtSetup."Nonstock Usage Location Filter";
        EXIT(LocationFilter);
      END;

      IF LocProcUnit."Usage Location Filter String" <> '' THEN
        EXIT(LocProcUnit."Usage Location Filter String");

      CheckLocation := CurrLocation;
      Finished := FALSE;
      REPEAT
        IF CheckLocation <> '' THEN BEGIN
          LocProcUnitTop.GET(CheckLocation,CurrItem,CurrVariant);
          IF (LocProcUnitTop."Replenishment Source Type" = LocProcUnitTop."Replenishment Source Type"::Vendor) OR
             (LocProcUnitTop."Replenishment Source Type" = LocProcUnitTop."Replenishment Source Type"::Production) OR
             (LocProcUnitTop."Replenishment Source Type" = LocProcUnitTop."Replenishment Source Type"::Assembly)
          THEN
            Finished := TRUE
          ELSE
            CheckLocation := LocProcUnitTop."Replenishment Source Code";
        END ELSE BEGIN
          Finished := TRUE;
          LocationFilter := LocProcUnit."Location Code";
          EXIT(LocationFilter);
        END;
      UNTIL Finished;

      CLEAR(LocationArray);
      i := 1;
      j := 1;

      LocationArray[i] := LocProcUnit."Location Code";


      LocProcUnit.SETCURRENTKEY("Item No.","Replenishment Source Type","Replenishment Source Code","Variant Code","Location Code");
      REPEAT
        LocProcUnit.SETRANGE("Item No.",LocProcUnit."Item No.");
        LocProcUnit.SETRANGE("Variant Code",LocProcUnit."Variant Code");
        LocProcUnit.SETRANGE("Replenishment Source Type",LocProcUnit."Replenishment Source Type"::Location);
        LocProcUnit.SETRANGE("Replenishment Source Code",LocationArray[j]);
        IF LocProcUnit.FINDFIRST THEN
          REPEAT
              i := i + 1;
              LocationArray[i] := LocProcUnit."Location Code";
            IF (LocProcUnit."Replenishment Source Type" = LocProcUnit."Replenishment Source Type"::Location) AND
               (LocProcUnit."Location Code" = LocProcUnit."Replenishment Source Code")
            THEN
              ERROR(
                STRSUBSTNO(
                  Text001,LocProcUnit."Location Code",LocProcUnit."Item No.",LocProcUnit."Variant Code"));
          UNTIL LocProcUnit.NEXT = 0;
        j := j + 1;
      UNTIL LocationArray[j] = '';

      i := 1;
      LocationFilter := '';
      Stocked := FALSE;
      REPEAT
        LocProcUnit.RESET;
        LocProcUnit.GET(
          LocationArray[i],
          LocProcUnit."Item No.",
          LocProcUnit."Variant Code");
        IF ((LocProcUnit."Location Code" = CurrLocation) AND
            (LocProcUnit."Nonstock Unit"))
           OR
           ((LocProcUnit."Nonstock Unit") AND
            (AdvForSetup."Exclude Usage on Nonstock Unit"))
        THEN
          LocationFilter := LocationFilter
        ELSE BEGIN
          IF LocationFilter = '' THEN
            LocationFilter := LocationArray[i]
          ELSE
            LocationFilter := LocationFilter + '|' + LocationArray[i];
        END;
        IF (LocProcUnit."Nonstock Unit" = FALSE) THEN
          Stocked :=  TRUE;
        i := i + 1;
      UNTIL LocationArray[i] = '';

      LocProcUnit.GET(CurrLocation, CurrItem, CurrVariant);
      IF ((CurrLocation = LocProcUnit."Location Code") AND (LocProcUnit."Nonstock Unit")) AND (NOT Stocked)
        THEN BEGIN
        LocationFilter := '';
      END;

      IF LocationFilter = '' THEN
        LocationFilter := InvMgtSetup."Nonstock Usage Location Filter";
      EXIT(LocationFilter);
    END;

    PROCEDURE GetLocationFilter@1240030008(CurrProcUnit@1240030000 : Record 14000555;SingleLocation@1240030004 : Boolean) LocationFilter : Text;
    VAR
      LocProcUnit@1240030001 : Record 14000555;
      LocationArray@1240030007 : ARRAY [100] OF Code[10];
      i@1240030005 : Integer;
      j@1240030006 : Integer;
    BEGIN
      GetSetup;

      IF InvMgtSetup."Nonstock Usage Location Filter" = '' THEN BEGIN
        InvMgtSetup."Nonstock Usage Location Filter" := 'x';
      END;

      IF (SingleLocation) OR
         (NOT InvMgtSetup."Roll Up Via Repl. Path") OR
         ((CurrProcUnit."Replenishment Source Code" = '') AND
          (CurrProcUnit."Replenishment Source Type" = CurrProcUnit."Replenishment Source Type"::Location))
           THEN BEGIN
        LocationFilter := CurrProcUnit."Location Code";
        EXIT(LocationFilter);
      END;

      IF NOT LocProcUnit.GET(
          CurrProcUnit."Location Code",
          CurrProcUnit."Item No.",
          CurrProcUnit."Variant Code") THEN BEGIN
        LocationFilter := CurrProcUnit."Location Code";
        EXIT(LocationFilter);
      END;

      IF LocProcUnit."Location Filter String" <> '' THEN
        EXIT(LocProcUnit."Location Filter String");

      CLEAR(LocationArray);
      i := 1;
      j := 1;
      LocationArray[i] := CurrProcUnit."Location Code";

      LocProcUnit.SETCURRENTKEY("Item No.","Replenishment Source Type","Replenishment Source Code","Variant Code","Location Code");
      REPEAT
        LocProcUnit.SETRANGE("Item No.",CurrProcUnit."Item No.");
        LocProcUnit.SETRANGE("Variant Code",CurrProcUnit."Variant Code");
        LocProcUnit.SETRANGE("Replenishment Source Type",CurrProcUnit."Replenishment Source Type"::Location);
        LocProcUnit.SETRANGE("Replenishment Source Code",LocationArray[j]);
        IF LocProcUnit.FINDFIRST THEN
          REPEAT
            i := i + 1;
            LocationArray[i] := LocProcUnit."Location Code";
            IF (LocProcUnit."Replenishment Source Type" = LocProcUnit."Replenishment Source Type"::Location) AND
               (LocProcUnit."Location Code" = LocProcUnit."Replenishment Source Code")
            THEN
              ERROR(
                STRSUBSTNO(
                  Text001,LocProcUnit."Location Code",LocProcUnit."Item No.",LocProcUnit."Variant Code"));
          UNTIL LocProcUnit.NEXT = 0;
        j := j + 1;
      UNTIL LocationArray[j] = '';

      LocProcUnit.RESET;
      i := 1;
      LocationFilter := '';
      REPEAT
        LocProcUnit.GET(
          LocationArray[i],
          CurrProcUnit."Item No.",
          CurrProcUnit."Variant Code");
        IF LocationFilter = '' THEN
          LocationFilter := LocationArray[i]
        ELSE
          LocationFilter := LocationFilter + '|' + LocationArray[i];
        i := i + 1;
      UNTIL LocationArray[i] = '';
      IF LocationFilter = '' THEN
        LocationFilter := InvMgtSetup."Nonstock Usage Location Filter";
      EXIT(LocationFilter);
    END;

    PROCEDURE GetProductionStatusFilter@1240030002() ProdStatFilter2 : Text[60];
    VAR
      ProcUnit@1240030002 : Record 14000555;
      ProdStatFilter@1240030001 : Text[60];
    BEGIN
      GetSetup;

      ProdStatFilter := '';

      ProdStatFilter := ProdStatFilter + '|' + FORMAT(ProcUnit."Prod. Order Status Filter"::Simulated);

      ProdStatFilter := ProdStatFilter + '|' + FORMAT(ProcUnit."Prod. Order Status Filter"::Planned);

      ProdStatFilter := ProdStatFilter + '|' + FORMAT(ProcUnit."Prod. Order Status Filter"::"Firm Planned");

      ProdStatFilter := ProdStatFilter + '|' + FORMAT(ProcUnit."Prod. Order Status Filter"::Released);

      ProdStatFilter := COPYSTR(ProdStatFilter,2,STRLEN(ProdStatFilter));

      IF ProdStatFilter = '' THEN
        ProdStatFilter := '>' + FORMAT(ProcUnit."Prod. Order Status Filter"::Released);
      EXIT(ProdStatFilter);
    END;

    PROCEDURE GetSafetyStock@1240030003(VAR CurrProcUnit@1240030000 : Record 14000555;VAR SafetyStockValue@1240030001 : Decimal;VAR SafetyStockCaption@1240030002 : Text[30]) Resp : Boolean;
    VAR
      ItemUsage@1240030003 : Record 14000557;
      LocInvPer@1240030004 : Record 14000553;
      Text001@1240030005 : TextConst 'ENU=Units';
      Text002@1240030006 : TextConst 'ENU=Days';
      Text003@1240030007 : TextConst 'ENU=%';
    BEGIN
      GetSetup;
      SafetyStockValue :=  0;
      SafetyStockCaption := '';
      CASE CurrProcUnit."Safety Stock Calc. Method" OF
        CurrProcUnit."Safety Stock Calc. Method"::Fixed:
          CASE CurrProcUnit."Replenishment Model" OF
            CurrProcUnit."Replenishment Model"::"Usage Based Procurement":
              BEGIN
                IF  (CurrProcUnit."Frozen Safety Expiration Date" >= WORKDATE) THEN
                  SafetyStockValue := CurrProcUnit."Frozen Safety Allowance %"
                ELSE BEGIN
                  InvMgtSetup.GET;
                  SafetyStockValue := InvMgtSetup."Safety Allowance %";
                END;
                SafetyStockCaption := FORMAT(SafetyStockValue) + ' ' + Text003;
                EXIT(TRUE);
              END;
            CurrProcUnit."Replenishment Model"::"Lead Time Horizon":
              BEGIN
                SafetyStockValue :=
                  GetSafetyStockDays(
                    CurrProcUnit,CalcLeadTimeDays(CurrProcUnit),
                    GetReviewCycle(CurrProcUnit),0);
                SafetyStockCaption := FORMAT(SafetyStockValue) + ' ' + Text002;
                EXIT(TRUE);
              END;
          END;
        CurrProcUnit."Safety Stock Calc. Method"::"Forecast Deviation":
          BEGIN
            IF (CurrProcUnit."Frozen Safety Expiration Date" >= WORKDATE) THEN
               SafetyStockValue := CurrProcUnit."Frozen Safety Allowance %"
            ELSE BEGIN
            LocInvPer.RESET;
            LocInvPer.SETCURRENTKEY("Location Code","Period End Closed");
            LocInvPer.SETRANGE("Location Code",CurrProcUnit."Location Code");
            LocInvPer.SETRANGE("Period End Closed",TRUE);
            IF LocInvPer.FIND('+') THEN BEGIN
              ItemUsage.RESET;
              ItemUsage.SETCURRENTKEY("Location Code","Item No.","Variant Code","Starting Date","Ending Date");
              ItemUsage.SETRANGE("Location Code",CurrProcUnit."Location Code");
              ItemUsage.SETRANGE("Item No.",CurrProcUnit."Item No.");
              ItemUsage.SETRANGE("Variant Code",CurrProcUnit."Variant Code");
              ItemUsage.SETRANGE("Starting Date",LocInvPer."Starting Date");
              ItemUsage.SETFILTER("Source No.",'=%1','');
              IF NOT ItemUsage.FIND('-') THEN
                ItemUsage.INIT;
                SafetyStockValue := ROUND(ItemUsage."Safety Allowance Qty.",1.0);
              END
            END;
            SafetyStockCaption := FORMAT(SafetyStockValue) + ' ' + Text001;
            EXIT(TRUE);
          END;
      END;
    END;

    PROCEDURE GetLeadTimeHoriz@1240030004(VAR CurrProcUnit@1240030000 : Record 14000555) LTHDate : Date;
    VAR
      VendBuyingCalendar@1240030002 : Record 14000563;
      RPLocation@1240030007 : Record 14;
      RPProcUnit@1240030006 : Record 14000555;
      RPLocationCode@1240030008 : Code[10];
      RPItemNo@1240030009 : Code[50];
      RPVariantCode@1240030010 : Code[10];
      LeadTime@1240030003 : Decimal;
      ReviewCycle@1240030004 : Decimal;
      SafetyStockDays@1240030012 : Integer;
    BEGIN
      LTHDate := WORKDATE;
      CASE CurrProcUnit."Replenishment Source Type" OF
        CurrProcUnit."Replenishment Source Type"::" ":
          BEGIN
          END;
        CurrProcUnit."Replenishment Source Type"::Vendor:
          BEGIN
            CASE CurrProcUnit."Replenishment Model" OF
              CurrProcUnit."Replenishment Model"::"Lead Time Horizon":
              BEGIN
                LeadTime := CalcLeadTimeDays(CurrProcUnit);
                ReviewCycle := GetReviewCycle(CurrProcUnit);
                IF CurrProcUnit."Safety Stock Calc. Method" = CurrProcUnit."Safety Stock Calc. Method"::Fixed THEN BEGIN
                  SafetyStockDays := GetSafetyStockDays(CurrProcUnit,LeadTime,ReviewCycle,0);
                  LTHDate := CALCDATE(STRSUBSTNO('<+%1D>',LeadTime + ReviewCycle + SafetyStockDays),WORKDATE);
                END ELSE
                  LTHDate := CALCDATE(STRSUBSTNO('<+%1D>',LeadTime + ReviewCycle),WORKDATE);
              END;
              CurrProcUnit."Replenishment Model"::"Min/Max":
              BEGIN
                IF (CurrProcUnit."Maximum Inventory" <> 0) OR
                   ((CurrProcUnit."Maximum Inventory" = 0) AND
                   (CurrProcUnit."Minimum Inventory" = 0) AND
                   (CurrProcUnit."Minimum Days Supply" = 0) AND
                   (CurrProcUnit."Maximum Days Supply" = 0)) THEN BEGIN
                      LeadTime := CalcLeadTimeDays(CurrProcUnit);
                      ReviewCycle := GetReviewCycle(CurrProcUnit);
                      IF CurrProcUnit."Safety Stock Calc. Method" = CurrProcUnit."Safety Stock Calc. Method"::Fixed THEN BEGIN
                        SafetyStockDays := GetSafetyStockDays(CurrProcUnit,LeadTime,ReviewCycle,0);
                        LTHDate := CALCDATE(STRSUBSTNO('<+%1D>',LeadTime + ReviewCycle + SafetyStockDays),WORKDATE);
                      END ELSE
                        LTHDate := CALCDATE(STRSUBSTNO('<+%1D>',LeadTime + ReviewCycle),WORKDATE);
                        EXIT(LTHDate);
                END;

            IF CurrProcUnit."Maximum Days Supply" <> 0 THEN BEGIN
              IF InvMgtSetup."Roll Up Via Repl. Path" THEN
                LTHDate := CALCDATE(STRSUBSTNO('<+%1D>',CurrProcUnit."Maximum Days Supply"),WORKDATE)
              ELSE
                LTHDate := CALCDATE(STRSUBSTNO('<+%1D>',CurrProcUnit."Minimum Days Supply"),WORKDATE);
                END;
              END;
            END;
          END;
        CurrProcUnit."Replenishment Source Type"::Location:
          BEGIN
              IF (CurrProcUnit."Maximum Inventory" <> 0) OR
                 ((CurrProcUnit."Maximum Inventory" = 0) AND
                  (CurrProcUnit."Minimum Inventory" = 0) AND
                  (CurrProcUnit."Minimum Days Supply" = 0) AND
                (CurrProcUnit."Maximum Days Supply" = 0)) THEN BEGIN
                LTHDate := GetLeadTimeHorizHub(CurrProcUnit);
                EXIT(LTHDate);
            END;
            IF CurrProcUnit."Maximum Days Supply" <> 0 THEN BEGIN
              IF InvMgtSetup."Roll Up Via Repl. Path" THEN
                LTHDate := CALCDATE(STRSUBSTNO('<+%1D>',CurrProcUnit."Maximum Days Supply"),WORKDATE)
              ELSE
                LTHDate := CALCDATE(STRSUBSTNO('<+%1D>',CurrProcUnit."Minimum Days Supply"),WORKDATE);
            END;
         END;
        CurrProcUnit."Replenishment Source Type"::Production:
          BEGIN
            LTHDate := CALCDATE(STRSUBSTNO('<+%1D>', GetProductionTemplateIncrDays(CurrProcUnit."Location Code")), WORKDATE);
          END;
        CurrProcUnit."Replenishment Source Type"::Assembly:
          BEGIN
            LTHDate := CALCDATE(STRSUBSTNO('<+%1D>', GetAssemblyIncrementDays), WORKDATE);
          END;
      END;
      EXIT(LTHDate);
    END;

    PROCEDURE GetLeadTimeHorizHub@1240020014(VAR CurrProcUnit@1240030000 : Record 14000555) : Date;
    VAR
      VendBuyingCalendar@1240030002 : Record 14000563;
      RPLocation@1240030007 : Record 14;
      RPProcUnit@1240030006 : Record 14000555;
      RPLocationCode@1240030008 : Code[10];
      RPItemNo@1240030009 : Code[50];
      RPVariantCode@1240030010 : Code[10];
      LeadTime@1240030003 : Decimal;
      LTHDate@1240030005 : Date;
      ReviewCycle@1240030004 : Decimal;
      SafetyStockDays@1240030012 : Integer;
      Finished@1000000000 : Boolean;
      i@1000000001 : Integer;
    BEGIN
      IF CurrProcUnit."Replenishment Source Type" <> CurrProcUnit."Replenishment Source Type"::Location THEN
        EXIT(GetLeadTimeHoriz(CurrProcUnit))
      ELSE BEGIN
        Finished := FALSE;
        i := 1;
        IF RPProcUnit."Location Code" = '' THEN
          RPLocationCode := CurrProcUnit."Location Code"
        ELSE
          RPLocationCode := RPProcUnit."Replenishment Source Code";
        RPItemNo := CurrProcUnit."Item No.";
        RPVariantCode := CurrProcUnit."Variant Code";
        REPEAT
          IF (RPLocationCode <> '') THEN BEGIN
          RPProcUnit.GET(RPLocationCode,RPItemNo,RPVariantCode);
          IF RPProcUnit."Replenishment Source Type" <> RPProcUnit."Replenishment Source Type"::Location THEN
            EXIT(GetLeadTimeHoriz(RPProcUnit))
          ELSE BEGIN
              i := i + 1;
            RPLocationCode := RPProcUnit."Replenishment Source Code";
            RPItemNo := RPProcUnit."Item No.";
            RPVariantCode := RPProcUnit."Variant Code";
          END;
          END ELSE
            Finished := TRUE;
          IF i > 50 THEN
            Finished := TRUE;
        UNTIL (RPProcUnit."Replenishment Source Type" =
                  RPProcUnit."Replenishment Source Type"::" ") OR
              (RPProcUnit."Replenishment Source Type" =
                  RPProcUnit."Replenishment Source Type"::Vendor) OR
              (RPProcUnit."Replenishment Source Type" =
                  RPProcUnit."Replenishment Source Type"::Production) OR
              (RPProcUnit."Replenishment Source Type" =
                  RPProcUnit."Replenishment Source Type"::Assembly) OR
               Finished;
      END;

      EXIT(WORKDATE);
    END;

    PROCEDURE RecalcVendorLeadTime@1240030005(CurrLocation@1240030000 : Record 14);
    VAR
      Location@1240030003 : Record 14;
      PostedVendPerfLine@1240030005 : Record 14000562;
      VendPerfLine@1240030004 : Record 14000561;
      VendPerfCalc@1240030001 : Codeunit 14000551;
      Text000@1240030002 : TextConst 'ENU=Re-Calculating Vendor Lead Time could take some time. \Are you sure you wish to Proceed?';
      Text001@1240030006 : TextConst 'ENU=Deleting Current Vendor Performance';
      DispWindow@1240030007 : Dialog;
      Text002@1240020001 : TextConst 'ENU=This function is not available when using an ERP interface.';
    BEGIN
      GetSetup;
      IF InvMgtSetup."Enable AV Interface" THEN
        ERROR(Text002);
      IF CONFIRM(Text000,FALSE) THEN BEGIN
        DispWindow.OPEN(Text001);
        Location.GET(CurrLocation.Code);
        Location."Last Item Rcpt. Entry No." := 0;
        Location.MODIFY;
        CurrLocation."Last Item Rcpt. Entry No." := Location."Last Item Rcpt. Entry No.";
        VendPerfLine.SETCURRENTKEY(
          "Location Code",Vendor,"Document No.","Document Line No.","Item No.","Variant Code");
        VendPerfLine.SETRANGE("Location Code",CurrLocation.Code);
        VendPerfLine.DELETEALL;
        PostedVendPerfLine.SETCURRENTKEY(
          "Location Code",Vendor,"Document No.","Document Line No.","Item No.","Variant Code");
        PostedVendPerfLine.SETRANGE("Location Code",CurrLocation.Code);
        PostedVendPerfLine.DELETEALL;
        COMMIT;
        DispWindow.CLOSE;
        VendPerfCalc.RUN(CurrLocation);
      END;
    END;

    PROCEDURE CheckReplPathLoop@1240030009(VAR CurrProcUnit@1240030000 : Record 14000555) Resp : Boolean;
    VAR
      LocProcUnit@1240030001 : Record 14000555;
      i@1240030003 : Integer;
      j@1240030004 : Integer;
      LocationArray@1240030002 : ARRAY [50] OF Code[10];
      ReplLocation@1240030005 : Code[10];
    BEGIN
      IF (CurrProcUnit."Replenishment Source Code" = '') OR
         (CurrProcUnit."Replenishment Source Type" <>
          CurrProcUnit."Replenishment Source Type"::Location) THEN
        EXIT(FALSE);

      IF (CurrProcUnit."Location Code" = CurrProcUnit."Replenishment Source Code") AND
         (CurrProcUnit."Replenishment Source Type" = CurrProcUnit."Replenishment Source Type"::Location)
      THEN
        EXIT(TRUE);

      CLEAR(LocationArray);
      i := 1;
      LocationArray[i] := CurrProcUnit."Location Code";
      ReplLocation := CurrProcUnit."Replenishment Source Code";
      REPEAT
        IF LocProcUnit.GET(
             ReplLocation,CurrProcUnit."Item No.",CurrProcUnit."Variant Code")
        THEN BEGIN
          IF (LocProcUnit."Location Code" = CurrProcUnit."Location Code") THEN BEGIN
            LocProcUnit."Replenishment Source Type" := CurrProcUnit."Replenishment Source Type";
            LocProcUnit."Replenishment Source Code" := CurrProcUnit."Replenishment Source Code";
          END;
          IF LocProcUnit."Replenishment Source Type" <>
               LocProcUnit."Replenishment Source Type"::Location THEN
            EXIT(FALSE);
          j := 0;
          REPEAT
            j := j + 1;
            IF LocProcUnit."Location Code" = LocationArray[j] THEN
              EXIT(TRUE);
          UNTIL (LocationArray[j] = '');
          i := i + 1;
          LocationArray[i] := LocProcUnit."Location Code";
          ReplLocation := LocProcUnit."Replenishment Source Code";
        END ELSE
          EXIT(FALSE);
      UNTIL LocationArray[i] = '';
    END;

    PROCEDURE GetLastDayOpenPeriod@1240030010(VAR CurrProcUnit@1240030000 : Record 14000555) Resp : Date;
    VAR
      LocationInvPeriod@1240030001 : Record 14000553;
      StartingDate@1240030002 : Date;
    BEGIN
      LocationInvPeriod.RESET;
      LocationInvPeriod.SETRANGE("Location Code",CurrProcUnit."Location Code");
      LocationInvPeriod.SETRANGE("Period End Closed",TRUE);
      IF LocationInvPeriod.FIND('+') THEN BEGIN
        StartingDate := LocationInvPeriod."Starting Date";
        LocationInvPeriod.SETRANGE("Period End Closed",FALSE);
        LocationInvPeriod.SETFILTER("Starting Date",'>%1',StartingDate);
        IF LocationInvPeriod.FIND('-') THEN
          EXIT(LocationInvPeriod."Ending Date")
        ELSE
          EXIT(0D);
      END ELSE
        EXIT(0D);
    END;

    PROCEDURE DisplayLocInvRollup@1240030011(CurrProcUnit@1240030000 : Record 14000555);
    VAR
      Text001@1240030002 : TextConst 'ENU=Your system is not currently configured to roll up forecast and demand via replenishment path.';
      LocInvRollUpRTC@1240030004 : Page 14097475;
    BEGIN
      GetSetup;
      IF InvMgtSetup."Roll Up Via Repl. Path" THEN BEGIN
        LocInvRollUpRTC.LoadProcUnit(CurrProcUnit);
        LocInvRollUpRTC.RUN;
      END ELSE
        ERROR(Text001);
    END;

    PROCEDURE DisplayReplenishmentPath@1240030012(CurrProcUnit@1240030000 : Record 14000555);
    BEGIN
      CLEAR(CreateLocInvRollUP);
      CreateLocInvRollUP.CalcRollUp(CurrProcUnit,TRUE,1,0D);
    END;

    PROCEDURE GetFirstStockedDate@1240030013(CurrProcUnit@1240030000 : Record 14000555;CurrCustomerNo@1240030003 : Code[20]) FSDate : Date;
    VAR
      UsageLedgerEntry@1240030002 : Record 14000556;
      ItemLedgerEntry@1240030006 : Record 32;
      ItemUsageAdj@1240030007 : Record 14000558;
      Finished@1240030008 : Boolean;
      FirstTranDate@1240030005 : Date;
      LocationFilter@1240030010 : Text[250];
    BEGIN
      GetSetup;
      FirstTranDate := 0D;
      LocationFilter := GetLocationFilter(CurrProcUnit,FALSE);

      ItemLedgerEntry.SETCURRENTKEY("Item No.","Entry Type","Variant Code","Drop Shipment","Location Code","Posting Date");
      ItemLedgerEntry.SETRANGE("Item No.",CurrProcUnit."Item No.");
      IF InvMgtSetup."Enable AV Interface" THEN
        ItemLedgerEntry.SETRANGE("Entry Type",ItemLedgerEntry."Entry Type"::Sale);
      ItemLedgerEntry.SETRANGE("Variant Code",CurrProcUnit."Variant Code");
      ItemLedgerEntry.SETFILTER("Location Code",LocationFilter);
      ItemLedgerEntry.SETFILTER(Quantity,'<>%1',0);
      IF ItemLedgerEntry.FIND('-') THEN
        FirstTranDate := ItemLedgerEntry."Posting Date";
      Finished := FALSE;
      REPEAT
        ItemLedgerEntry.SETFILTER("Posting Date",'<%1',FirstTranDate);
        IF ItemLedgerEntry.FIND('-') THEN
          FirstTranDate := ItemLedgerEntry."Posting Date"
        ELSE
          Finished := TRUE;
      UNTIL Finished;

      IF FirstTranDate <> 0D THEN
        FirstTranDate :=
          CheckFirstStockedDate(
            InvMgtSetup,ItemLedgerEntry."Posting Date",FirstTranDate);

      UsageLedgerEntry.RESET;
      UsageLedgerEntry.SETCURRENTKEY("Item No.","Usage Date");
      UsageLedgerEntry.SETRANGE("Item No.",CurrProcUnit."Item No.");
      UsageLedgerEntry.SETFILTER("Location Code",LocationFilter);
      UsageLedgerEntry.SETRANGE("Variant Code",CurrProcUnit."Variant Code");
      UsageLedgerEntry.SETRANGE("Exclude from Usage",FALSE);
      UsageLedgerEntry.SETFILTER("Usage Date",'<>%1',0D);
      IF CurrCustomerNo = '' THEN
        UsageLedgerEntry.SETRANGE("Source No.")
      ELSE
        UsageLedgerEntry.SETRANGE("Source No.",CurrCustomerNo);
      IF UsageLedgerEntry.FIND('-') THEN
        FirstTranDate :=
          CheckFirstStockedDate(
            InvMgtSetup,UsageLedgerEntry."Usage Date",FirstTranDate);

      ItemUsageAdj.RESET;
      ItemUsageAdj.SETCURRENTKEY("Item No.","Starting Date");
      ItemUsageAdj.SETFILTER("Location Code",LocationFilter);
      ItemUsageAdj.SETRANGE("Item No.",CurrProcUnit."Item No.");
      ItemUsageAdj.SETRANGE("Variant Code",CurrProcUnit."Variant Code");
      ItemUsageAdj.SETFILTER("Adjustment Quantity",'<>%1',0);
      IF ItemUsageAdj.FIND('-') THEN
        FirstTranDate :=
          CheckFirstStockedDate(
            InvMgtSetup,ItemUsageAdj."Starting Date",FirstTranDate);

      IF (FirstTranDate <> 0D) AND
         (FirstTranDate < InvMgtSetup."Usage Start Date") THEN
        FirstTranDate := InvMgtSetup."Usage Start Date";

      EXIT(FirstTranDate);
    END;

    PROCEDURE CheckFirstStockedDate@1240030014(CurrInvMgtSetup@1240030000 : Record 14000551;DateToCheck@1240030001 : Date;FirstTranDate@1240030002 : Date) RespDate : Date;
    VAR
      CheckedDate@1240030003 : Date;
    BEGIN
      CheckedDate := 0D;
      IF FirstTranDate = 0D THEN BEGIN
        CheckedDate := DateToCheck;
        IF CheckedDate < CurrInvMgtSetup."Usage Start Date" THEN
          CheckedDate := CurrInvMgtSetup."Usage Start Date";
      END ELSE BEGIN
        IF DateToCheck < FirstTranDate THEN
          IF DateToCheck >= CurrInvMgtSetup."Usage Start Date" THEN
            CheckedDate := DateToCheck
          ELSE
            CheckedDate := CurrInvMgtSetup."Usage Start Date";
      END;

      IF CheckedDate = 0D THEN
        EXIT(FirstTranDate)
      ELSE
        EXIT(CheckedDate);
    END;

    PROCEDURE GetSafetyStockDays@1240020000(VAR CurrProcUnit@1240020007 : Record 14000555;CurrLeadTimeDays@1240020000 : Integer;CurrReviewCycle@1240020001 : Integer;CurrPushDays@1240020002 : Integer) SafetyStockDays : Integer;
    VAR
      SafetyStockModLine@1240020005 : Record 14097466;
      TotalLeadtime@1240020006 : Integer;
      LTHDate@1240020003 : Date;
    BEGIN
      IF CurrProcUnit."Replenishment Model" <> CurrProcUnit."Replenishment Model"::"Lead Time Horizon" THEN
        EXIT(0);

      TotalLeadtime := CurrLeadTimeDays + CurrReviewCycle + CurrPushDays;
      LTHDate := WORKDATE + TotalLeadtime;

      GetSetup;

      SafetyStockDays := AdvForSetup."Safety Stock Days";
      IF CurrProcUnit."Safety Stock Days" <> 0 THEN
        SafetyStockDays := ROUND(CurrProcUnit."Safety Stock Days", 1.0);

      IF CurrProcUnit."Safety Stock Modifier" <> '' THEN BEGIN
        SafetyStockModLine.RESET;
        SafetyStockModLine.SETRANGE("Safety Stock Modifier Code",CurrProcUnit."Safety Stock Modifier");
        SafetyStockModLine.SETFILTER("Starting Date",'..%1',LTHDate);
        SafetyStockModLine.SETFILTER("Ending Date",'%1..',LTHDate);
        IF SafetyStockModLine.FIND('-') THEN BEGIN
          CASE SafetyStockModLine.Type OF
            SafetyStockModLine.Type::"% of Lead Time":
              BEGIN
                SafetyStockDays := ROUND((CurrLeadTimeDays * SafetyStockModLine.Value) / 100,1.0);
              END;
            SafetyStockModLine.Type::"Safety Stock Days":
              BEGIN
                SafetyStockDays := SafetyStockModLine.Value;
              END;
            SafetyStockModLine.Type::"Safety Stock Days + Days":
              BEGIN
                SafetyStockDays := SafetyStockDays + SafetyStockModLine.Value;
              END;
            SafetyStockModLine.Type::"Safety Stock Days * %":
              BEGIN
                SafetyStockDays := ROUND((SafetyStockDays * SafetyStockModLine.Value) / 100,1.0);
              END;
          END;
        END;
      END;

      EXIT(SafetyStockDays);
    END;

    PROCEDURE GetReviewCycle@1240020001(VAR CurrProcUnit@1240020000 : Record 14000555) ReviewCycleDays : Integer;
    VAR
      VendorBuyingCal@1240020001 : Record 14000563;
    BEGIN
      ReviewCycleDays := 0;
      IF (CurrProcUnit."Replenishment Source Type" = CurrProcUnit."Replenishment Source Type"::Vendor) THEN BEGIN
        GetSetup;
        ReviewCycleDays := InvMgtSetup."Def. Vend. Review Cycle (Days)";
        IF VendorBuyingCal.GET(CurrProcUnit."Replenishment Source Code",CurrProcUnit."Location Code",CurrProcUnit."Division Code") THEN
          ReviewCycleDays := VendorBuyingCal."Frozen Review Cycle (Days)";
      END;
      EXIT(ReviewCycleDays);
    END;

    PROCEDURE SetReplenishmentHierarchy@4(VAR CurrProcUnit@1000 : Record 14000555);
    VAR
      locProcUnit@1001 : Record 14000555;
      hub@1240020000 : Boolean;
      spoke@1240020001 : Boolean;
    BEGIN
      hub := FALSE;
      spoke := FALSE;
      locProcUnit.SETRANGE("Replenishment Source Type",CurrProcUnit."Replenishment Source Type"::Location);
      locProcUnit.SETRANGE("Replenishment Source Code",CurrProcUnit."Location Code");
      locProcUnit.SETRANGE("Item No.",CurrProcUnit."Item No.");
      locProcUnit.SETFILTER("Variant Code",CurrProcUnit."Variant Code");
      IF locProcUnit.ISEMPTY THEN
        hub := FALSE
      ELSE
        hub := TRUE;

      IF CurrProcUnit."Replenishment Source Type" = CurrProcUnit."Replenishment Source Type"::Location THEN
        spoke := TRUE
      ELSE
        spoke := FALSE;


      CASE TRUE OF
        spoke AND hub:
          CurrProcUnit."Replenishment Hierarchy" := CurrProcUnit."Replenishment Hierarchy"::"Hub and Spoke";
        hub:
          CurrProcUnit."Replenishment Hierarchy" := CurrProcUnit."Replenishment Hierarchy"::Hub;
        spoke:
          CurrProcUnit."Replenishment Hierarchy" := CurrProcUnit."Replenishment Hierarchy"::Spoke;
        ELSE
          CurrProcUnit."Replenishment Hierarchy" := CurrProcUnit."Replenishment Hierarchy"::" ";
      END;
    END;

    PROCEDURE SetFinalReplenishmentSource@1240020002(VAR CurrProcUnit@1240020001 : Record 14000555) LocationFilter : Text[250];
    VAR
      LocProcUnitTop@1240020000 : Record 14000555;
      CheckLocation@1240020003 : Code[10];
      Finished@1240020002 : Boolean;
      CurrItem@1240020006 : Code[50];
      CurrVariant@1240020005 : Code[10];
      CurrSingleLocation@1240020004 : Boolean;
      Vendor@1000 : Record 23;
      VendBuyingCalendar@1001 : Record 14000563;
    BEGIN
      GetSetup;
      Finished := FALSE;
      CheckLocation := CurrProcUnit."Location Code";
      CurrItem :=  CurrProcUnit."Item No.";
      CurrVariant := CurrProcUnit."Variant Code";
      CurrProcUnit."Top Repl. Source Type" := 0;
      CurrProcUnit."Top Repl. Source Code" := '';
      REPEAT
        IF LocProcUnitTop.GET(CheckLocation,CurrItem,CurrVariant) THEN BEGIN
          IF (LocProcUnitTop."Replenishment Source Type" = LocProcUnitTop."Replenishment Source Type"::Vendor) OR
             (LocProcUnitTop."Replenishment Source Type" = LocProcUnitTop."Replenishment Source Type"::Production) OR
             (LocProcUnitTop."Replenishment Source Type" = LocProcUnitTop."Replenishment Source Type"::Assembly)
          THEN BEGIN
            Finished := TRUE;
            CurrProcUnit."Top Repl. Source Type" := LocProcUnitTop."Replenishment Source Type";
            CurrProcUnit."Top Repl. Source Code" := LocProcUnitTop."Replenishment Source Code";
            IF InvMgtSetup."Force Purchaser Code Synch." THEN
            CurrProcUnit."Purchaser Code" := '';
            IF (CurrProcUnit."Top Repl. Source Type" = CurrProcUnit."Top Repl. Source Type"::Vendor) AND (CurrProcUnit."Top Repl. Source Code" <> '')
              AND (CurrProcUnit."Purchaser Code" = '') THEN BEGIN
              IF VendBuyingCalendar.GET(CurrProcUnit."Top Repl. Source Code", LocProcUnitTop."Location Code", LocProcUnitTop."Division Code") THEN BEGIN
                CurrProcUnit."Purchaser Code" := VendBuyingCalendar."Purchaser Code";
              END;
              IF (CurrProcUnit."Purchaser Code" = '') THEN BEGIN
                Vendor.GET(CurrProcUnit."Top Repl. Source Code");
                CurrProcUnit."Purchaser Code" := Vendor."Purchaser Code";
              END;
            END ELSE BEGIN
              IF (LocProcUnitTop."Purchaser Code" <> '') AND (CurrProcUnit."Purchaser Code" = '') THEN BEGIN
                CurrProcUnit."Purchaser Code" := LocProcUnitTop."Purchaser Code";
              END;
            END;
          END ELSE
           CheckLocation := LocProcUnitTop."Replenishment Source Code";
        END ELSE
          Finished := TRUE;
      UNTIL Finished;
    END;

    PROCEDURE IsLeapYear@1240020003(DateToTest@1240020000 : Date) : Boolean;
    VAR
      YearLeapTest@1240020001 : Integer;
    BEGIN
      YearLeapTest := DATE2DMY(DateToTest, 3);
      // not divisible by no leap
      IF ((YearLeapTest MOD 4) <> 0) THEN
        EXIT(FALSE)
      // divisible 4 but not divisble by 100
      ELSE IF (YearLeapTest MOD 100) <> 0 THEN
        EXIT(TRUE)
      // divisible by 4, divisible by 100, divisible by 400
      ELSE IF (YearLeapTest MOD 400) = 0 THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE GetUnitCost@5(LocationCode@1003 : Code[10];ItemNo@1004 : Code[50];VariantCode@1005 : Code[10]) UnitCost : Decimal;
    VAR
      StockKeepingUnit@1001 : Record 5700;
      Item@1002 : Record 27;
    BEGIN
      UnitCost := 0;
      GetSetup;
      CASE InvMgtSetup."Preferred Cost to Use" OF
        InvMgtSetup."Preferred Cost to Use"::Default: UnitCost := StandardUnitCostCalc(LocationCode, ItemNo, VariantCode);
        InvMgtSetup."Preferred Cost to Use"::"SKU Last Direct":
        BEGIN
          IF StockKeepingUnit.GET(LocationCode,ItemNo,VariantCode) THEN
            UnitCost := StockKeepingUnit."Last Direct Cost";
        END;
        InvMgtSetup."Preferred Cost to Use"::"SKU Unit Cost":
        BEGIN
          IF StockKeepingUnit.GET(LocationCode,ItemNo,VariantCode) THEN
            UnitCost := StockKeepingUnit."Unit Cost";
        END;
        InvMgtSetup."Preferred Cost to Use"::"Item Last Direct":
        BEGIN
          Item.GET(ItemNo);
          UnitCost := Item."Last Direct Cost";
        END;
        InvMgtSetup."Preferred Cost to Use"::"Item Unit Cost":
        BEGIN
          Item.GET(ItemNo);
          UnitCost := Item."Unit Cost";
        END;
      END;

      IF ((UnitCost = 0) AND (InvMgtSetup."Preferred Cost to Use" <> InvMgtSetup."Preferred Cost to Use"::Default)) THEN BEGIN
        CASE InvMgtSetup."Alternative Cost Option" OF
          InvMgtSetup."Alternative Cost Option"::Default: UnitCost := StandardUnitCostCalc(LocationCode, ItemNo, VariantCode);
          InvMgtSetup."Alternative Cost Option"::Zero:  UnitCost := 0;
        END;
      END;

      EXIT(UnitCost);
    END;

    LOCAL PROCEDURE StandardUnitCostCalc@1240020005(LocationCode@1003 : Code[10];ItemNo@1004 : Code[50];VariantCode@1005 : Code[10]) UnitCost : Decimal;
    VAR
      StockKeepingUnit@1001 : Record 5700;
      Item@1002 : Record 27;
    BEGIN
      // Standard Calculation
      UnitCost := 0;
      IF StockKeepingUnit.GET(LocationCode,ItemNo,VariantCode) THEN BEGIN
        UnitCost := StockKeepingUnit."Last Direct Cost";
        IF UnitCost = 0 THEN
          UnitCost := StockKeepingUnit."Unit Cost";
        IF UnitCost > 0 THEN
          EXIT(UnitCost);
      END;
      IF UnitCost = 0 THEN BEGIN
        Item.GET(ItemNo);
        UnitCost := Item."Last Direct Cost";
      END;
      IF UnitCost = 0 THEN
        UnitCost := Item."Unit Cost";
    END;

    LOCAL PROCEDURE GetSetup@1240020004();
    BEGIN
      IF NOT SetupRead THEN BEGIN
        SetupRead := TRUE;
        InvMgtSetup.GET;
        AdvForSetup.GET;
      END;
    END;

    PROCEDURE CalcCriticalQty@6(CurrProcUnit@1240020000 : Record 14000555;OverrideHorizonDate@1240020001 : Date) QtyCritical : Decimal;
    BEGIN
      QtyCritical := 0;

      WITH CurrProcUnit DO BEGIN
        IF OverrideHorizonDate = 0D THEN
          OverrideHorizonDate := CALCDATE(STRSUBSTNO('<+%1D>',CalcLeadTimeDays(CurrProcUnit)), WORKDATE);
        SETFILTER("Location Filter", "Location Code");
        SETFILTER("Date Filter", '..%1', OverrideHorizonDate);
        SETRANGE("Prod. Order Status Filter", "Prod. Order Status Filter"::Released);
        IF "Summarize Variant Detail" THEN BEGIN
          CALCFIELDS(
            "Inventory Sum.","Qty. on Purchase Order Sum.","Qty. on Transfer In Sum.","Qty. on Prod. Order Sum.",
            "Qty. on Sales Order Sum.","Qty. on Transfer Out Sum.","Qty. on Component Lines Sum.",
            "Qty. on Service Order Sum.","Qty. on Vend. Ret. Order Sum.","Additional Demand Sum.",
            "Qty. on Assy. Order Sum.","Qty. on Assy. Comp. Sum.");
          Inventory := "Inventory Sum.";
          "Qty. on Purchase Order" := "Qty. on Purchase Order Sum.";
          "Qty. on Transfer In" := "Qty. on Transfer In Sum.";
          "Qty. on Prod. Order" := "Qty. on Prod. Order Sum.";
          "Qty. on Sales Order" := "Qty. on Sales Order Sum.";
          "Qty. on Transfer Out" := "Qty. on Transfer Out Sum.";
          "Qty. on Component Lines" := "Qty. on Component Lines Sum.";
          "Qty. on Service Order" := "Qty. on Service Order Sum.";
          "Qty. on Vend. Return Order" := "Qty. on Vend. Ret. Order Sum.";
          "Additional Demand" := "Additional Demand Sum.";
          "Qty. on Assy. Order" := "Qty. on Assy. Order Sum.";
          "Qty. on Assy. Comp." := "Qty. on Assy. Comp. Sum.";
        END ELSE
          CALCFIELDS(
            Inventory,"Qty. on Purchase Order","Qty. on Transfer In","Qty. on Prod. Order",
            "Qty. on Sales Order",  "Qty. on Transfer Out","Qty. on Component Lines",
            "Qty. on Service Order","Qty. on Vend. Return Order","Additional Demand",
            "Qty. on Assy. Order","Qty. on Assy. Comp.","Qty. on Sales Return Order");
        IF Inventory < 0 THEN
          QtyCritical := 0
        ELSE
          QtyCritical := Inventory;
        QtyCritical := QtyCritical + ("Qty. on Purchase Order" - "Qty. on Vend. Return Order");
        QtyCritical := QtyCritical + "Qty. on Transfer In";
        QtyCritical := QtyCritical + "Qty. on Prod. Order";
        QtyCritical := QtyCritical - "Qty. on Sales Order";
        QtyCritical := QtyCritical - "Qty. on Transfer Out";
        QtyCritical := QtyCritical - "Qty. on Component Lines";
        QtyCritical := QtyCritical - "Qty. on Service Order";
        QtyCritical := QtyCritical - "Additional Demand";
        QtyCritical := QtyCritical - "Qty. on Assy. Comp.";
        QtyCritical := QtyCritical + "Qty. on Assy. Order";
        IF InvMgtSetup."Incl. Qty. on Sales Ret. Order" THEN
          QtyCritical := QtyCritical + "Qty. on Sales Return Order";
      END;
      EXIT(QtyCritical);
    END;

    PROCEDURE CountProcUnitInFilter@1240020006(VAR CurrProcUnit@1240020000 : Record 14000555;ShowDialog@1240020001 : Boolean) ProcCount : Decimal;
    VAR
      ProcCountText@1240020002 : TextConst 'ENU=%1 Procurement Units within the filter.';
    BEGIN
      ProcCount := CurrProcUnit.COUNT;
      IF GUIALLOWED AND ShowDialog THEN
        MESSAGE(STRSUBSTNO(ProcCountText, ProcCount));
      EXIT(ProcCount);
    END;

    PROCEDURE CheckMaxLTHDate@1240020007(VAR CurrProcUnit@1240020001 : Record 14000555;VAR LeadTimeHorizonDate@1240020000 : Date);
    VAR
      MaxLTHDate@1240020002 : Date;
      LocText002@1240020003 : TextConst 'ENU=Proc. Unit %1 %2 %3 has a LTH Date %4 greater than the maximum allowed LTH Date %5.';
    BEGIN
      GetSetup;
      IF AdvForSetup."Max. LTH Days" > 0 THEN BEGIN
        MaxLTHDate := CALCDATE(STRSUBSTNO('<+%1D>',AdvForSetup."Max. LTH Days"),WORKDATE);
        IF (LeadTimeHorizonDate > MaxLTHDate) THEN BEGIN
          IF AdvForSetup."Max. LTH Warning" AND GUIALLOWED THEN
            MESSAGE(
              LocText002,
              CurrProcUnit."Location Code",CurrProcUnit."Item No.",
              CurrProcUnit."Variant Code",LeadTimeHorizonDate,MaxLTHDate);
          LeadTimeHorizonDate := MaxLTHDate;
        END;
      END;
    END;

    PROCEDURE GetLocationMaxLTHDate@1240020022(VAR CurrLocation@1240020001 : Code[10]) MaxLTHDate : Date;
    VAR
      LocText002@1240020003 : TextConst 'ENU=Proc. Unit %1 %2 %3 has a LTH Date %4 greater than the maximum allowed LTH Date %5.';
      LocInvPeriod@1240020004 : Record 14000553;
      StartingDate@1240020005 : Date;
      PeriodCount@1240020006 : Integer;
    BEGIN
      GetSetup;
      IF AdvForSetup."Max. LTH Days" > 0 THEN
        MaxLTHDate := CALCDATE(STRSUBSTNO('<+%1D>', AdvForSetup."Max. LTH Days"), WORKDATE);
      LocInvPeriod.SETRANGE("Location Code", CurrLocation);
      LocInvPeriod.SETRANGE("Period End Closed",TRUE);
      IF LocInvPeriod.FINDLAST THEN
        StartingDate := LocInvPeriod."Starting Date"
      ELSE
        StartingDate := CALCDATE('<-1D>', InvMgtSetup."Usage Start Date");
      PeriodCount := 0;
      LocInvPeriod.SETRANGE("Period End Closed");
      LocInvPeriod.SETFILTER("Starting Date",'>%1',StartingDate);
      IF LocInvPeriod.FIND('-') THEN BEGIN
        REPEAT
          PeriodCount := PeriodCount + 1;
          MaxLTHDate := LocInvPeriod."Ending Date";
        UNTIL (LocInvPeriod.NEXT = 0) OR
              (PeriodCount >= AdvForSetup."Periods to Forecast");
      END;
      EXIT(MaxLTHDate);
    END;

    PROCEDURE FillRateCalcSupplyLines@1240020009(CurrProcUnit@1000 : Record 14000555;OverrideHorizonDate@1240020001 : Date;SupplyHorizonOption@1240020000 : 'Inventory,Supply Horizon') SupplyQty : Decimal;
    BEGIN
      SupplyQty := 0;
      GetSetup;

      WITH CurrProcUnit DO BEGIN
        SETFILTER("Location Filter", CurrProcUnit."Location Code");
        SETFILTER("Date Filter", '..%1', OverrideHorizonDate);
        SETFILTER("Expire Date Filter", '>=%1', WORKDATE);
        SETRANGE("Prod. Order Status Filter", "Prod. Order Status Filter"::Released);
        CALCFIELDS(Inventory);
        SupplyQty := Inventory;

        IF (SupplyHorizonOption = SupplyHorizonOption::Inventory) THEN
          EXIT(SupplyQty);

        CALCFIELDS(
          "Qty. on Purchase Order",
          "Qty. on Vend. Return Order",
          "Qty. on Transfer In",
          "Qty. on Prod. Order",
          "Qty. on Sales Return Order",
          "Qty. on Assy. Order");

        SupplyQty := SupplyQty + ("Qty. on Purchase Order" - "Qty. on Vend. Return Order");

        SupplyQty := SupplyQty + "Qty. on Transfer In";

        // released
        SupplyQty := SupplyQty + "Qty. on Prod. Order";

        IF InvMgtSetup."Incl. Qty. on Sales Ret. Order" THEN BEGIN
          SupplyQty := SupplyQty + "Qty. on Sales Return Order";
        END;

        SupplyQty := SupplyQty + "Qty. on Assy. Order";
      END;

      EXIT(SupplyQty);
    END;

    PROCEDURE FillRateCalcDemandLines@1240020008(CurrProcUnit@1000 : Record 14000555;OverrideHorizonDate@1240020000 : Date;DemandHorizonOption@1240020002 : 'Open Orders Only,Forecast') DemandQty : Decimal;
    BEGIN
      GetSetup;
      DemandQty := 0;

      // open demand is included in the forecast exclude here
      IF (DemandHorizonOption = DemandHorizonOption::Forecast) THEN
        EXIT(DemandQty);

      WITH CurrProcUnit DO BEGIN
        SETFILTER("Location Filter", "Location Code");
        SETFILTER("Date Filter", '..%1', OverrideHorizonDate);
        SETFILTER("Expire Date Filter", '>=%1', WORKDATE);
        SETRANGE("Prod. Order Status Filter", "Prod. Order Status Filter"::Released);
        CALCFIELDS(
          "Qty. on Sales Order",
          "Qty. on Transfer Out",
          "Qty. on Component Lines",
          "Qty. on Service Order",
          "Additional Demand",
          "Qty. on Assy. Comp.");

        DemandQty := DemandQty + "Qty. on Sales Order";

        DemandQty := DemandQty + "Qty. on Transfer Out";

        DemandQty := DemandQty + "Qty. on Component Lines";

        DemandQty := DemandQty + "Qty. on Assy. Comp.";

        DemandQty := DemandQty + "Qty. on Service Order";

        DemandQty := DemandQty + "Additional Demand";

      END;

      EXIT(DemandQty);
    END;

    PROCEDURE StockOutDaysCalc@1240020010(CurrProcUnit@1240020002 : Record 14000555;DayEndDate@1240020001 : Date) QtyExpLessOnOrder : Decimal;
    BEGIN
      QtyExpLessOnOrder := 0;
      WITH CurrProcUnit DO BEGIN
        SETRANGE("Date Filter",0D,DayEndDate);
        SETFILTER("Location Filter","Location Code");
        SETRANGE("Prod. Order Status Filter", "Prod. Order Status Filter"::Released);
        CALCFIELDS("Inventory Net Change");

        QtyExpLessOnOrder := "Inventory Net Change";
        IF QtyExpLessOnOrder <= 0 THEN BEGIN
          QtyExpLessOnOrder := 0;
          EXIT(QtyExpLessOnOrder);
        END;

        CALCFIELDS(
          "Qty. on Sales Order","Qty. on Transfer Out",
          "Qty. on Component Lines","Qty. on Service Order","Additional Demand",
          "Qty. on Sales Return Order", "Qty. on Assy. Comp.");


        QtyExpLessOnOrder := QtyExpLessOnOrder - "Qty. on Sales Order";

        QtyExpLessOnOrder := QtyExpLessOnOrder - "Qty. on Transfer Out";

        QtyExpLessOnOrder := QtyExpLessOnOrder - "Qty. on Component Lines";

        QtyExpLessOnOrder := QtyExpLessOnOrder - "Qty. on Service Order";

        QtyExpLessOnOrder := QtyExpLessOnOrder - "Additional Demand";

        QtyExpLessOnOrder := QtyExpLessOnOrder - "Qty. on Assy. Comp.";

      END;
      EXIT(QtyExpLessOnOrder);
    END;

    PROCEDURE SugTransferBackOrderQty@1240020011(CurrProcUnit@1240020001 : Record 14000555;OverrideHorizonDate@1240020000 : Date) BOQty : Decimal;
    BEGIN
      BOQty := 0;
      WITH CurrProcUnit DO BEGIN
        SETFILTER("Location Filter", "Location Code");
        SETFILTER("Date Filter", '..%1', OverrideHorizonDate);
        SETRANGE("Prod. Order Status Filter", "Prod. Order Status Filter"::Released);
        CALCFIELDS(
          Inventory,"Qty. on Purchase Order","Qty. on Transfer In","Qty. on Prod. Order",
          "Qty. on Sales Order",  "Qty. on Transfer Out","Qty. on Component Lines",
          "Qty. on Service Order","Qty. on Vend. Return Order","Additional Demand",
          "Qty. on Assy. Order","Qty. on Assy. Comp.","Qty. on Sales Return Order");
        IF Inventory < 0 THEN
          BOQty := 0
        ELSE
          BOQty := Inventory;
        BOQty := BOQty + ("Qty. on Purchase Order" - "Qty. on Vend. Return Order");
        BOQty := BOQty + "Qty. on Transfer In";
        BOQty := BOQty + "Qty. on Prod. Order";
        BOQty := BOQty - "Qty. on Sales Order";
        BOQty := BOQty - "Qty. on Transfer Out";
        BOQty := BOQty - "Qty. on Component Lines";
        BOQty := BOQty - "Qty. on Service Order";
        BOQty := BOQty - "Additional Demand";
        BOQty := BOQty - "Qty. on Assy. Comp.";
        BOQty := BOQty + "Qty. on Assy. Order";
        IF InvMgtSetup."Incl. Qty. on Sales Ret. Order" THEN
          BOQty := BOQty + "Qty. on Sales Return Order";
      END;
      IF BOQty > 0 THEN
        BOQty := 0;

      EXIT(BOQty);
    END;

    PROCEDURE SpokesExist@1240020201(VAR CurrProcUnit@1240020000 : Record 14000555) HubLoc : Boolean;
    VAR
      LocProcUnit@1240020001 : Record 14000555;
    BEGIN
      HubLoc := FALSE;
      LocProcUnit.SETFILTER("Location Code", '<>%1', CurrProcUnit."Location Code");
      LocProcUnit.SETRANGE("Item No.", CurrProcUnit."Item No.");
      LocProcUnit.SETRANGE("Variant Code", CurrProcUnit."Variant Code");
      LocProcUnit.SETRANGE("Replenishment Source Type", LocProcUnit."Replenishment Source Type"::Location);
      LocProcUnit.SETRANGE("Replenishment Source Code", CurrProcUnit."Location Code");
      IF NOT LocProcUnit.ISEMPTY THEN
        HubLoc := TRUE;
      EXIT(HubLoc);
    END;

    PROCEDURE GetProductionTemplateIncrDays@1240020012(CurrLocationCode@1240020000 : Code[10]) Days : Integer;
    VAR
      Location@1240020001 : Record 14;
      ProdTemplate@1240020002 : Record 14002677;
    BEGIN
      Days := 0;
      Location.GET(CurrLocationCode);
      IF ProdTemplate.GET(Location."AFP Prod. Template Name") THEN
        Days := ProdTemplate."Planning Increment (Days)";
      EXIT(Days);
    END;

    PROCEDURE GetAssemblyIncrementDays@1240020013() Days : Integer;
    BEGIN
      Days := 0;
      GetSetup;
      EXIT(AdvForSetup."Assembly Increment Days");
    END;

    PROCEDURE CalcFormulaPeriodRequirements@1240020015();
    VAR
      Formula@1240020002 : Record 14002652;
      FormulaPeriod@1240020001 : Record 14002653;
      FormulaPeriods@1240020003 : Integer;
    BEGIN
      IF Formula.FINDSET THEN BEGIN
        FormulaMinPeriods := 99;
        REPEAT
          FormulaPeriod.SETRANGE("Formula Code",Formula.Code);
          IF FormulaPeriod.FINDSET THEN BEGIN
            FormulaPeriods := 0;
            REPEAT
              FormulaPeriods := FormulaPeriods + 1;
            UNTIL FormulaPeriod.NEXT = 0;
            IF FormulaMinPeriods > FormulaPeriods THEN
              FormulaMinPeriods := FormulaPeriods;
            IF FormulaPeriods > FormulaMaxPeriods THEN
              FormulaMaxPeriods := FormulaPeriods;
          END;
        UNTIL Formula.NEXT = 0;
      END;
    END;

    PROCEDURE GetFormulaMaxPeriod@1240020018() : Integer;
    BEGIN
      EXIT(FormulaMaxPeriods);
    END;

    PROCEDURE UsageLedgerEntryLookup@1240020016(VAR CurrProcUnit@1240020000 : Record 14000555;ShowActualUsage@1240020001 : Boolean);
    VAR
      UsageLedgerEntry@1240020002 : Record 14000556;
    BEGIN
      WITH CurrProcUnit DO BEGIN
        UsageLedgerEntry.SETCURRENTKEY("Item No.","Usage Date");
        IF ShowActualUsage THEN
          UsageLedgerEntry.SETFILTER("Location Code","Location Code")
        ELSE
          UsageLedgerEntry.SETFILTER("Location Code", GetUsageLocationFilter(
               "Location Code","Item No.","Variant Code",ShowActualUsage));
        UsageLedgerEntry.SETRANGE("Item No.", "Item No.");
        UsageLedgerEntry.SETRANGE("Variant Code", "Variant Code");
        UsageLedgerEntry.SETFILTER("Usage Date", GETFILTER("Date Filter"));
        PAGE.RUNMODAL(0, UsageLedgerEntry);
      END;
    END;

    PROCEDURE ItemLedgerEntryLookup@1240020017(VAR CurrProcUnit@1240020000 : Record 14000555;ShowActualUsage@1240020001 : Boolean);
    VAR
      ItemLedgerEntry@1240020002 : Record 32;
    BEGIN
      WITH CurrProcUnit DO BEGIN
        ItemLedgerEntry.SETCURRENTKEY("Item No.","Entry Type","Variant Code","Drop Shipment","Location Code","Posting Date");
        IF ShowActualUsage THEN
          ItemLedgerEntry.SETFILTER("Location Code","Location Code")
        ELSE
          ItemLedgerEntry.SETFILTER(
            "Location Code", GetUsageLocationFilter("Location Code","Item No.","Variant Code",ShowActualUsage));
        ItemLedgerEntry.SETRANGE("Item No.", "Item No.");
        ItemLedgerEntry.SETRANGE("Variant Code", "Variant Code");
        PAGE.RUNMODAL(0, ItemLedgerEntry);
      END;
    END;

    PROCEDURE GetVendBuyingCalendarFromSuggOrdHeader@1240020020(VAR CurrSuggOrdHeader@1240020000 : Record 14000565;VAR outVendBuyingCalendar@1240020005 : Record 14000563) : Boolean;
    VAR
      DivisionStartPos@1240020003 : Integer;
      DivisionCode@1240020002 : Code[20];
      LocationCode@1240020001 : Code[20];
    BEGIN
      outVendBuyingCalendar.INIT;
      IF CurrSuggOrdHeader."Procurement Group Code" = '' THEN BEGIN
        DivisionStartPos := STRPOS(CurrSuggOrdHeader."No.", CurrSuggOrdHeader."Location Code");
        IF DivisionStartPos <> 0 THEN
          DivisionStartPos := STRLEN(CurrSuggOrdHeader."Location Code");

        LocationCode := COPYSTR(CurrSuggOrdHeader."No.",1, DivisionStartPos);
        DivisionCode := COPYSTR(CurrSuggOrdHeader."No.",DivisionStartPos+1);
        IF outVendBuyingCalendar.GET(CurrSuggOrdHeader."Buy-from Vendor No.", LocationCode, DivisionCode) THEN
          EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE CheckFutureSupply@1240020019(CurrProcUnit@1240030000 : Record 14000555;CurrHorizonDate@1240020000 : Date) SupplyQtyOutsideLTH : Decimal;
    VAR
      SupplyQtyWithinLTH@1240020007 : Decimal;
      DemandQtyOutsidelTH@1240020001 : Decimal;
    BEGIN
      GetSetup;
      SupplyQtyOutsideLTH := 0;
      IF InvMgtSetup."Future P.O. Additional Days" <= 0 THEN
        EXIT;

      WITH CurrProcUnit DO BEGIN
        SETFILTER("Location Filter", GetLocationFilter(CurrProcUnit,TRUE));
        SETRANGE("Prod. Order Status Filter", "Prod. Order Status Filter"::Released);

        CurrProcUnit.SETFILTER(
          "Date Filter",'%1..%2',
            CurrHorizonDate + 1, CALCDATE(STRSUBSTNO('<+%1D>', InvMgtSetup."Future P.O. Additional Days"),
            CurrHorizonDate));

        // net supply after future demand and future supply
        CALCFIELDS("Qty. on Purchase Order","Qty. on Transfer In","Qty. on Prod. Order","Qty. on Assy. Order",
          "Qty. on Sales Order",
          "Qty. on Transfer Out",
          "Qty. on Component Lines",
          "Qty. on Service Order",
          "Additional Demand",
          "Qty. on Assy. Comp.");

        SupplyQtyOutsideLTH := ("Qty. on Purchase Order" + "Qty. on Transfer In" + "Qty. on Prod. Order" + "Qty. on Assy. Order");
        DemandQtyOutsidelTH := ("Qty. on Sales Order" + "Qty. on Transfer Out" +
           "Qty. on Component Lines" + "Qty. on Service Order" + "Additional Demand" + "Qty. on Assy. Comp.");


        SupplyQtyOutsideLTH := SupplyQtyOutsideLTH - DemandQtyOutsidelTH;
        IF SupplyQtyOutsideLTH < 0 THEN
          SupplyQtyOutsideLTH := 0;
      END;
      EXIT(SupplyQtyOutsideLTH);
    END;

    PROCEDURE RunForecastPeriodPageForEndDate@1240020021() : Date;
    VAR
      ForInvPeriodLookup@1240020001 : Page 14002721;
      ForInvPeriod@1240020000 : Record 14000552;
    BEGIN
      CLEAR(ForInvPeriodLookup);
      ForInvPeriod.SETFILTER("Starting Date", '%1..', CALCDATE('-CM-1M', WORKDATE));
      ForInvPeriodLookup.LOOKUPMODE(TRUE);
      ForInvPeriodLookup.SETTABLEVIEW(ForInvPeriod);
      ForInvPeriodLookup.SETRECORD(ForInvPeriod);
      ForInvPeriodLookup.SetEndDateVisible;
      IF ForInvPeriodLookup.RUNMODAL = ACTION::LookupOK THEN BEGIN
        ForInvPeriodLookup.GETRECORD(ForInvPeriod);
        EXIT(ForInvPeriod."Ending Date");
      END;
    END;

    PROCEDURE RunForecastPeriodPageForStartDate@1240020023() : Date;
    VAR
      ForInvPeriodLookup@1240020001 : Page 14002721;
      ForInvPeriod@1240020000 : Record 14000552;
    BEGIN
      CLEAR(ForInvPeriodLookup);
      ForInvPeriodLookup.LOOKUPMODE(TRUE);
      ForInvPeriodLookup.SETTABLEVIEW(ForInvPeriod);
      ForInvPeriodLookup.SETRECORD(ForInvPeriod);
      ForInvPeriodLookup.SetStartDateVisible;
      IF ForInvPeriodLookup.RUNMODAL = ACTION::LookupOK THEN BEGIN
        ForInvPeriodLookup.GETRECORD(ForInvPeriod);
        EXIT(ForInvPeriod."Starting Date");
      END;
    END;

    PROCEDURE CheckForecastPeriodEndDate@1240020025(VAR CurrEndingDate@1240020001 : Date) : Date;
    VAR
      ForInvPeriod@1240020000 : Record 14000552;
      EndDateCheckText@1240020002 : TextConst 'ENU=You must specify an Ending Date according to the forecast periods.  Use the assisted selection to verify the date.';
    BEGIN
      ForInvPeriod.SETRANGE(Type, ForInvPeriod.Type::" ");
      ForInvPeriod.SETRANGE("Ending Date", CurrEndingDate);
      IF ForInvPeriod.ISEMPTY THEN BEGIN
        ERROR(STRSUBSTNO(EndDateCheckText, CurrEndingDate));
      END;
    END;

    PROCEDURE CheckForecastPeriodStartDate@1240020024(VAR CurrStartingDate@1240020002 : Date) : Date;
    VAR
      ForInvPeriodLookup@1240020001 : Page 14002721;
      ForInvPeriod@1240020000 : Record 14000552;
      StartDateCheckText@1240020003 : TextConst 'ENU=You must specify an Starting Date according to the forecast periods.  Use the assisted selection to verify the date.';
    BEGIN
      ForInvPeriod.SETRANGE(Type, ForInvPeriod.Type::" ");
      ForInvPeriod.SETRANGE("Starting Date", CurrStartingDate);
      IF ForInvPeriod.ISEMPTY THEN BEGIN
        ERROR(STRSUBSTNO(StartDateCheckText, CurrStartingDate));
      END;
    END;

    PROCEDURE GetLeadTimeSource@1240020026() : Text[10];
    BEGIN
      EXIT(LeadTimeSource);
    END;

    PROCEDURE GetLeadTimeDays@1240020027() : Integer;
    BEGIN
      EXIT(outLeadTimeDays);
    END;

    PROCEDURE CheckExpiringInventory@17(CurrLocationCode@1002 : Code[10];CurrItemNo@1001 : Code[50];CurrVariantCode@1000 : Code[10];CurrHorizonDate@1210 : Date) ExpiredQty : Decimal;
    VAR
      ItemLedgEntry@1003 : Record 32;
    BEGIN
      ExpiredQty := 0;
      WITH ItemLedgEntry DO BEGIN
        SETCURRENTKEY("Item No.",Open,"Variant Code",Positive,"Lot No.","Serial No.");
        SETRANGE("Item No.", CurrItemNo);
        SETRANGE(Open,TRUE);
        SETRANGE("Variant Code", CurrVariantCode);
        SETRANGE(Positive,TRUE);
        SETFILTER("Expiration Date", '>%1&<%2', 0D, CurrHorizonDate);
        SETRANGE("Location Code", CurrLocationCode);
        IF ISEMPTY THEN
          EXIT(ExpiredQty);


        CALCSUMS("Remaining Quantity");
        ExpiredQty := "Remaining Quantity";
      END;
      EXIT(ExpiredQty);
    END;

    BEGIN
    END.
  }
}

