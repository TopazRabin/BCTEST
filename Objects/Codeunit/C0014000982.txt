OBJECT Codeunit 14000982 Exp. Doc. Import Valid. Table
{
  OBJECT-PROPERTIES
  {
    Date=06/28/17;
    Time=12:00:00 PM;
    Version List=SE0.60.11;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            IF FilePathName = '' THEN
              ERROR(Text001);

            ImportTextFile;
          END;

  }
  CODE
  {
    VAR
      Text001@1240020002 : TextConst 'ENU=File name must be entered.';
      Text023@1240020001 : TextConst 'ENU=Importing Table: #1##################\';
      Text024@1240020000 : TextConst 'ENU="                 #2##################"';
      InputStream@1240020006 : InStream;
      FileMgt@1240020009 : Codeunit 419;
      FilePathName@1240020007 : Text[250];
      FileFolder@1240020010 : Text;
      FileName@1240020011 : Text;
      ExportDocTable@1240020005 : 'Schedule B,MEX State,CAN State,US State,Sched D,Sched K,IATA,,SCAC,ZIP,Schedule B UOM,Export,License,Inbond,Kimb. Cntry,Kimb. Comm.,Veh. Info,Sched C,Transport Mode,Ltd. Rpt.';
      BlankLines@1240020004 : Integer;
      Window@1240020003 : Dialog;

    PROCEDURE ImportTextFile@1();
    VAR
      ExportDocValidation@1240030004 : Record 14000985;
      ScheduleBCode@1240030001 : Record 14000718;
      SchedBUOM@1240030003 : Record 14000726;
      i@1240030000 : Integer;
      LineCode@1240030005 : Code[250];
      LineDesc@1240030006 : Text[250];
      TestInteger@1240030002 : Integer;
    BEGIN
      WITH ExportDocValidation DO BEGIN
        CASE ExportDocTable OF
          ExportDocTable::"Schedule B":
            IF ScheduleBCode.FIND('-') THEN
              ScheduleBCode.DELETEALL;

          ExportDocTable::"MEX State":
            BEGIN
              SETRANGE(Table,Table::"MEX State");
              IF FIND('-') THEN
                DELETEALL;
            END;

          ExportDocTable::"CAN State":
            BEGIN
              SETRANGE(Table,Table::"CAN State");
              IF FIND('-') THEN
                DELETEALL;
            END;

          ExportDocTable::"US State":
            BEGIN
              SETRANGE(Table,Table::"US State");
              IF FIND('-') THEN
                DELETEALL;
            END;

          ExportDocTable::"Sched D":
            BEGIN
              SETRANGE(Table,Table::Port);
              SETRANGE(Section,1);
              IF FIND('-') THEN
                DELETEALL;
            END;

          ExportDocTable::"Sched K":
            BEGIN
              SETRANGE(Table,Table::Port);
              SETRANGE(Section,2);
              IF FIND('-') THEN
                DELETEALL;
            END;

          ExportDocTable::IATA:
            BEGIN
              SETRANGE(Table,Table::"IATA/SCAC");
              SETRANGE(Section,1,2);
              IF FIND('-') THEN
                DELETEALL;
            END;

          // ExportDocTable::SCAC not used
          // SCAC codes must be obtained from each motor carrier and entered manually on Shipping Agent and/or Export Doc

          ExportDocTable::ZIP:
            BEGIN
              SETRANGE(Table,Table::ZIP);
              IF FIND('-') THEN
                DELETEALL;
            END;

          ExportDocTable::"Schedule B UOM":
            SchedBUOM.DELETEALL;

          ExportDocTable::Export:
            BEGIN
              SETRANGE(Table,Table::Export);
              IF FIND('-') THEN
                DELETEALL;
            END;

          ExportDocTable::License:
            BEGIN
              SETRANGE(Table,Table::License);
              IF FIND('-') THEN
                DELETEALL;
            END;

          ExportDocTable::Inbond:
            BEGIN
              SETRANGE(Table,Table::Inbond);
              IF FIND('-') THEN
                DELETEALL;
            END;

          ExportDocTable::"Kimb. Cntry":
            BEGIN
              SETRANGE(Table,Table::"Kimb. Cntry");
              IF FIND('-') THEN
                DELETEALL;
            END;

          ExportDocTable::"Kimb. Comm.":
            BEGIN
              SETRANGE(Table,Table::"Kimb. Comm.");
              IF FIND('-') THEN
                DELETEALL;
            END;

          ExportDocTable::"Veh. Info":
            BEGIN
              SETRANGE(Table,Table::"Veh. Info");
              SETRANGE(Section,0);
              IF FIND('-') THEN
                DELETEALL;
            END;

          ExportDocTable::"Sched C":
            BEGIN
              SETRANGE(Table,Table::"Sched C");
              IF FIND('-') THEN
                DELETEALL;
            END;

          ExportDocTable::"Transport Mode":
            BEGIN
              SETRANGE(Table,Table::"Transport Mode");
              IF FIND('-') THEN
                DELETEALL;
            END;

          ExportDocTable::"Ltd. Rpt.":
            BEGIN
              SETRANGE(Table,Table::"Ltd. Rpt.");
              IF FIND('-') THEN
                DELETEALL;
            END;
        END;

        Window.OPEN(Text023 + Text024,ExportDocTable,LineCode);

        FileName := FileMgt.GetFileName(FilePathName);
        FileFolder := FileMgt.GetDirectoryName(FilePathName);
        IF NOT UPLOADINTOSTREAM('Click Open',FileFolder,'Text File *.txt| *.txt',FileName,InputStream)
        THEN
          ERROR('Error uploading file to server.');

        WHILE GetTableLine(LineCode,LineDesc) AND (LineCode <> '') DO BEGIN
          Window.UPDATE(2,LineCode);

          CASE ExportDocTable OF
            ExportDocTable::"Schedule B":
              BEGIN
                ScheduleBCode.INIT;
                ScheduleBCode.Code := LineCode;
                i := STRPOS(LineDesc,'*');

                IF i > 0 THEN BEGIN
                  ScheduleBCode.Description := COPYSTR(LineDesc,1,i-1);
                  LineDesc := COPYSTR(LineDesc,i+1);
                  i := STRPOS(LineDesc,'*');

                  IF (i > 0) AND
                     (i <> STRLEN(LineDesc))
                  THEN BEGIN
                    ScheduleBCode."Unit of Measure 1" := COPYSTR(LineDesc,1,i-1);
                    ScheduleBCode."Unit of Measure 2" := COPYSTR(LineDesc,i+1);
                  END ELSE
                    ScheduleBCode."Unit of Measure 1" := LineDesc;

                  ScheduleBCode."Unit of Measure 1" := DELCHR(ScheduleBCode."Unit of Measure 1",'=','*');
                  ScheduleBCode."Unit of Measure 2" := DELCHR(ScheduleBCode."Unit of Measure 2",'=','*');
                END ELSE
                  ScheduleBCode.Description := LineDesc;

                ScheduleBCode.INSERT;
              END;

            ExportDocTable::"MEX State":
              BEGIN
                INIT;
                Table := Table::"MEX State";
                Code := LineCode;
                Description := LineDesc;
                "Description Lookup" := COPYSTR(Description,1,MAXSTRLEN("Description Lookup"));
                INSERT;
              END;

            // CAN States are no longer validated.  This code remains in case they are in the future.

            ExportDocTable::"US State":
              BEGIN
                INIT;
                Table := Table::"US State";
                Code := LineCode;
                Description := LineDesc;
                "Description Lookup" := COPYSTR(Description,1,MAXSTRLEN("Description Lookup"));
                INSERT;
              END;

            ExportDocTable::"Sched D":
              BEGIN
                INIT;
                Table := Table::Port;
                Section := 1;
                Code := LineCode;

                IF STRPOS(LineDesc,',') > 0 THEN BEGIN
                  i := STRLEN(LineDesc);
                  REPEAT
                    i := i - 1;
                  UNTIL (i = 0) OR (COPYSTR(LineDesc,i,1) = ',');
                  "Description 2" := DELCHR(COPYSTR(LineDesc,i+1),'<>');
                  Description := COPYSTR(LineDesc,1,i-1);
                  "Description Lookup" := COPYSTR(Description,1,MAXSTRLEN("Description Lookup"));
                END ELSE BEGIN
                  Description := LineDesc;
                  "Description Lookup" := COPYSTR(Description,1,MAXSTRLEN("Description Lookup"));
                END;
                INSERT;
              END;

            ExportDocTable::"Sched K":
              BEGIN
                INIT;
                Table := Table::Port;
                Section := 2;
                Code := LineCode;

                IF STRPOS(LineDesc,',') > 0 THEN BEGIN
                  i := STRLEN(LineDesc);
                  REPEAT
                    i := i - 1;
                  UNTIL (i = 0) OR (COPYSTR(LineDesc,i,1) = ',');
                  "Description 2" := DELCHR(COPYSTR(LineDesc,i+1),'<>');
                  Description := COPYSTR(LineDesc,1,i-1);
                  "Description Lookup" := COPYSTR(Description,1,MAXSTRLEN("Description Lookup"));
                END ELSE BEGIN
                  Description := LineDesc;
                  "Description Lookup" := COPYSTR(Description,1,MAXSTRLEN("Description Lookup"));
                END;

                INSERT;
              END;

            ExportDocTable::IATA:
              BEGIN
                INIT;
                Table := Table::"IATA/SCAC";
                IF STRLEN(LineCode) = 2 THEN
                  Section := 1
                ELSE
                  Section := 2;
                Code := LineCode;
                Description := LineDesc;
                "Description Lookup" := COPYSTR(Description,1,MAXSTRLEN("Description Lookup"));
                INSERT;
              END;

            // ExportDocTable::SCAC not used
            // SCAC codes must be obtained from each motor carrier and entered manually on Shipping Agent and/or Export Doc

            ExportDocTable::ZIP:
              BEGIN
                INIT;
                Table := Table::ZIP;
                Code := LineCode;
                Description := LineDesc;
                "Description Lookup" := COPYSTR(Description,1,MAXSTRLEN("Description Lookup"));
                INSERT;
              END;

            ExportDocTable::"Schedule B UOM":
              BEGIN
                SchedBUOM.INIT;
                SchedBUOM.Code := LineCode;
                SchedBUOM.Description := LineDesc;
                SchedBUOM.INSERT;
              END;

            ExportDocTable::Export:
              BEGIN
                INIT;
                Table := Table::Export;
                Code := LineCode;
                Description := LineDesc;
                "Description Lookup" := COPYSTR(Description,1,MAXSTRLEN("Description Lookup"));
                INSERT;
              END;

            ExportDocTable::License:
              IF NOT (COPYSTR(LineCode,1,1) IN ['0','1','','','','','','','','']) THEN BEGIN
                INIT;
                Table := Table::License;
                Code := LineCode;
                Description := LineDesc;
                "Description Lookup" := COPYSTR(Description,1,MAXSTRLEN("Description Lookup"));
                INSERT;
              END;

            ExportDocTable::Inbond:
              BEGIN
                INIT;
                Table := Table::Inbond;
                Code := LineCode;
                Description := LineDesc;
                "Description Lookup" := COPYSTR(Description,1,MAXSTRLEN("Description Lookup"));
                INSERT;
              END;

            ExportDocTable::"Kimb. Cntry":
              BEGIN
                INIT;
                Table := Table::"Kimb. Cntry";
                Code := LineCode;
                INSERT;
              END;

            ExportDocTable::"Kimb. Comm.":
              BEGIN
                INIT;
                Table := Table::"Kimb. Comm.";
                Code := LineCode;
                INSERT;
              END;

            ExportDocTable::"Veh. Info":
              IF EVALUATE(TestInteger,COPYSTR(LineCode,6)) THEN BEGIN
                INIT;
                Table := Table::"Veh. Info";
                Section := 0;
                Code := LineCode;
                INSERT;
              END;

            ExportDocTable::"Sched C":
              BEGIN
                INIT;
                Table := Table::"Sched C";
                Code := LineCode;
                Description := LineDesc;
                "Description Lookup" := COPYSTR(Description,1,MAXSTRLEN("Description Lookup"));
                INSERT;
              END;

            ExportDocTable::"Transport Mode":
              BEGIN
                INIT;
              Table := Table::"Transport Mode";
                Code := LineCode;
                Description := LineDesc;
                "Description Lookup" := COPYSTR(Description,1,MAXSTRLEN("Description Lookup"));
                INSERT;
              END;

            ExportDocTable::"Ltd. Rpt.":
              BEGIN
                INIT;
                Table := Table::"Ltd. Rpt.";
                Code := LineCode;
                Description := LineDesc;
                "Description Lookup" := COPYSTR(Description,1,MAXSTRLEN("Description Lookup"));
                INSERT;
              END;
          END;
        END;

        Window.CLOSE;
      END;
    END;

    PROCEDURE GetTableLine@1240030000(VAR LineCode@1240030000 : Code[50];VAR LineDesc@1240030001 : Text[250]) : Boolean;
    VAR
      i@1240030002 : Integer;
      Char@1240030003 : Char;
      HyphenFound@1240030004 : Boolean;
    BEGIN
      i := 1;
      CLEAR(LineCode);
      CLEAR(LineDesc);
      IF InputStream.EOS THEN
        EXIT(FALSE);

      InputStream.READ(Char);

      IF Char IN [10,13,20] THEN
        IF BlankLines = 2 THEN
          EXIT(FALSE)
        ELSE
          BlankLines := BlankLines + 1;

      LineCode := FORMAT(Char);

      REPEAT
        InputStream.READ(Char);
        IF (i < 250) AND (Char <> 10) AND (Char <> 13) THEN
          IF FORMAT(Char) = '-' THEN BEGIN
            HyphenFound := TRUE;
            i := 1;
          END ELSE
            IF HyphenFound THEN
              LineDesc := LineDesc + FORMAT(Char)
            ELSE
              LineCode := LineCode + FORMAT(Char);
        i := i + 1;
      UNTIL (Char = 10);

      IF STRLEN(LineCode) > 0 THEN BEGIN
        Char := LineCode[1];
        IF NOT (Char IN [10,13,20]) THEN
          EXIT(TRUE)
        ELSE
          EXIT(FALSE);
      END ELSE
        EXIT(FALSE);
    END;

    PROCEDURE SetTableToImport@1240030001(Table@1240030000 : Integer;TableFileName@1240030001 : Text[250]);
    BEGIN
      FilePathName := TableFileName;
      ExportDocTable := Table;
    END;

    BEGIN
    END.
  }
}

