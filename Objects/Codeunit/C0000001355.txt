OBJECT Codeunit 1355 G/L Post. Inconsistent Telem.
{
  OBJECT-PROPERTIES
  {
    Date=11/22/17;
    Time=12:00:00 PM;
    Version List=NAVW111.00;
  }
  PROPERTIES
  {
    SingleInstance=Yes;
    EventSubscriberInstance=Manual;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      InconsistentPostingTelemetryCategoryTxt@1000 : TextConst '@@@={Locked};ENU=AL Inconsistent Posting;ESM=AL Inconsistent Posting;FRC=AL Inconsistent Posting;ENC=AL Inconsistent Posting';
      JSONManagement@1001 : Codeunit 5459;
      ErrorTypeTok@1004 : TextConst '@@@={Locked};ENU=Error Type;ESM=Error Type;FRC=Error Type;ENC=Error Type';
      InconsistentPostingTok@1005 : TextConst '@@@={Locked};ENU=Inconsistent Posting;ESM=Inconsistent Posting;FRC=Inconsistent Posting;ENC=Inconsistent Posting';
      FeatureAreaTok@1006 : TextConst '@@@={Locked};ENU=Feature Area;ESM=Feature Area;FRC=Feature Area;ENC=Feature Area';
      SalesDocumentsTok@1007 : TextConst '@@@={Locked};ENU=Sales Documents;ESM=Sales Documents;FRC=Sales Documents;ENC=Sales Documents';
      ErrorInfoTok@1008 : TextConst '@@@={Locked};ENU=ErrorInfo;ESM=ErrorInfo;FRC=ErrorInfo;ENC=ErrorInfo';
      CountPropertyTxt@1009 : TextConst '@@@={Locked};ENU=%1 Count;ESM=%1 Count;FRC=%1 Count;ENC=%1 Count';
      ApplicationAreasTok@1010 : TextConst '@@@={Locked};ENU=Application Areas;ESM=Application Areas;FRC=Application Areas;ENC=Application Areas';
      CompanyInfoCountryTok@1011 : TextConst '@@@={Locked};ENU=Company Information Country;ESM=Company Information Country;FRC=Company Information Country;ENC=Company Information Country';
      ExtensionsTok@1002 : TextConst 'ENU=Extensions;ESM=Extensiones;FRC=Extensions;ENC=Extensions';

    [EventSubscriber(Codeunit,12,OnAfterGLFinishPosting)]
    LOCAL PROCEDURE SendTelemetryInconsistentPostingOnAfterGLFinishPosting@1(GLEntry@1000 : Record 17;IsTransactionConsistent@1001 : Boolean;FirstTransactionNo@1005 : Integer);
    VAR
      GLPostInconsistentTelem@1002 : Codeunit 1355;
      JsonObject@1003 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      IF NOT IsTransactionConsistent THEN BEGIN
        InitializeTelemetryMessage(JsonObject);
        AddHeaderInfo(JsonObject);
        AddExtensionsInfo(JsonObject);

        GLEntry.SETFILTER("Transaction No.",'%1..',FirstTransactionNo);
        AddGLEntryCount(JsonObject,GLEntry);
        AddGLEntries(JsonObject,GLEntry);
        SENDTRACETAG('000019J',InconsistentPostingTelemetryCategoryTxt,VERBOSITY::Error,JSONManagement.WriteObjectToString);
      END;

      UNBINDSUBSCRIPTION(GLPostInconsistentTelem);
    END;

    LOCAL PROCEDURE InitializeTelemetryMessage@7(VAR JsonObject@1000 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject");
    BEGIN
      CLEAR(JSONManagement);
      JSONManagement.InitializeEmptyObject;
      JSONManagement.GetJSONObject(JsonObject);
    END;

    LOCAL PROCEDURE AddHeaderInfo@6(VAR JsonObject@1003 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject");
    VAR
      CompanyInformation@1001 : Record 79;
      JObject@1000 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      AppArea@1002 : Text;
    BEGIN
      JObject := JObject.JObject;
      JSONManagement.AddJPropertyToJObject(JObject,ErrorTypeTok,InconsistentPostingTok);
      JSONManagement.AddJPropertyToJObject(JObject,FeatureAreaTok,SalesDocumentsTok);
      AppArea := APPLICATIONAREA;
      JSONManagement.AddJPropertyToJObject(JObject,ApplicationAreasTok,AppArea);
      IF CompanyInformation.GET THEN
        JSONManagement.AddJPropertyToJObject(JObject,CompanyInfoCountryTok,CompanyInformation."Country/Region Code");
      JSONManagement.AddJObjectToJObject(JsonObject,ErrorInfoTok,JObject);
    END;

    LOCAL PROCEDURE AddGLEntryCount@9(VAR JsonObject@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";VAR GLEntry@1000 : Record 17);
    BEGIN
      JSONManagement.AddJPropertyToJObject(JsonObject,STRSUBSTNO(CountPropertyTxt,GLEntry.TABLENAME),GLEntry.COUNT);
    END;

    LOCAL PROCEDURE AddGLEntry@11(VAR JArray@1002 : DotNet "'Newtonsoft.Json, Version=9.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.Linq.JArray";VAR GLEntry@1001 : Record 17);
    VAR
      GLAccount@1003 : Record 15;
      JObject@1000 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      GLAccount.GET(GLEntry."G/L Account No.");
      JObject := JObject.JObject;
      JSONManagement.AddJPropertyToJObject(JObject,GLEntry.FIELDNAME("Entry No."),GLEntry."Entry No.");
      JSONManagement.AddJPropertyToJObject(JObject,GLEntry.FIELDNAME("G/L Account No."),GLEntry."G/L Account No.");
      JSONManagement.AddJPropertyToJObject(JObject,GLAccount.FIELDNAME("Account Type"),GLAccount."Account Type");
      JSONManagement.AddJPropertyToJObject(JObject,GLAccount.FIELDNAME("Account Category"),GLAccount."Account Category");
      JSONManagement.AddJPropertyToJObject(JObject,GLEntry.FIELDNAME("Posting Date"),GLEntry."Posting Date");
      JSONManagement.AddJPropertyToJObject(JObject,GLEntry.FIELDNAME("Gen. Posting Type"),GLEntry."Gen. Posting Type");
      JSONManagement.AddJPropertyToJObject(JObject,GLEntry.FIELDNAME("Document Type"),GLEntry."Document Type");
      JSONManagement.AddJPropertyToJObject(JObject,GLEntry.FIELDNAME("Document No."),GLEntry."Document No.");
      JSONManagement.AddJPropertyToJObject(JObject,GLEntry.FIELDNAME("Bal. Account No."),GLEntry."Bal. Account No.");
      JSONManagement.AddJPropertyToJObject(JObject,GLEntry.FIELDNAME("Bal. Account Type"),GLEntry."Bal. Account Type");
      JSONManagement.AddJPropertyToJObject(JObject,GLEntry.FIELDNAME(Amount),GLEntry.Amount);
      JSONManagement.AddJPropertyToJObject(JObject,GLEntry.FIELDNAME("Debit Amount"),GLEntry."Debit Amount");
      JSONManagement.AddJPropertyToJObject(JObject,GLEntry.FIELDNAME("Credit Amount"),GLEntry."Credit Amount");
      JSONManagement.AddJPropertyToJObject(JObject,GLEntry.FIELDNAME("Additional-Currency Amount"),
        GLEntry."Additional-Currency Amount");
      JSONManagement.AddJPropertyToJObject(JObject,GLEntry.FIELDNAME("Add.-Currency Debit Amount"),
        GLEntry."Add.-Currency Debit Amount");
      JSONManagement.AddJPropertyToJObject(JObject,GLEntry.FIELDNAME("Add.-Currency Credit Amount"),
        GLEntry."Add.-Currency Credit Amount");
      JSONManagement.AddJPropertyToJObject(JObject,GLEntry.FIELDNAME("Tax Area Code"),GLEntry."Tax Area Code");
      JSONManagement.AddJPropertyToJObject(JObject,GLEntry.FIELDNAME("Tax Group Code"),GLEntry."Tax Group Code");
      JSONManagement.AddJPropertyToJObject(JObject,GLEntry.FIELDNAME("Tax Liable"),GLEntry."Tax Liable");
      JSONManagement.AddJPropertyToJObject(JObject,GLEntry.FIELDNAME("Use Tax"),GLEntry."Use Tax");
      JSONManagement.AddJPropertyToJObject(JObject,GLEntry.FIELDNAME("VAT Amount"),GLEntry."VAT Amount");
      JSONManagement.AddJPropertyToJObject(JObject,GLEntry.FIELDNAME("Dimension Set ID"),GLEntry."Dimension Set ID");
      JSONManagement.AddJPropertyToJObject(JObject,GLEntry.FIELDNAME("System-Created Entry"),GLEntry."System-Created Entry");
      JSONManagement.AddJPropertyToJObject(JObject,GLEntry.FIELDNAME("Transaction No."),GLEntry."Transaction No.");
      JSONManagement.AddJObjectToJArray(JArray,JObject);
    END;

    LOCAL PROCEDURE AddGLEntries@12(VAR JsonObject@1003 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";VAR GLEntry@1000 : Record 17);
    VAR
      JArray@1002 : DotNet "'Newtonsoft.Json, Version=9.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.Linq.JArray";
    BEGIN
      JArray := JArray.JArray;

      IF GLEntry.FINDSET THEN
        REPEAT
          AddGLEntry(JArray,GLEntry);
        UNTIL GLEntry.NEXT = 0;

      JSONManagement.AddJArrayToJObject(JsonObject,GLEntry.TABLENAME,JArray);
    END;

    LOCAL PROCEDURE AddExtensionsInfo@3(VAR JsonObject@1000 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject");
    VAR
      NAVApp@1001 : Record 2000000160;
      JArray@1002 : DotNet "'Newtonsoft.Json, Version=9.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.Linq.JArray";
    BEGIN
      JArray := JArray.JArray;
      NAVApp.SETRANGE(Installed,TRUE);
      IF NAVApp.FINDSET THEN
        REPEAT
          AddExtension(JArray,NAVApp);
        UNTIL NAVApp.NEXT = 0;

      JSONManagement.AddJArrayToJObject(JsonObject,ExtensionsTok,JArray);
    END;

    LOCAL PROCEDURE AddExtension@4(VAR JArray@1000 : DotNet "'Newtonsoft.Json, Version=9.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.Linq.JArray";VAR NAVApp@1001 : Record 2000000160);
    VAR
      JObject@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      JObject := JObject.JObject;
      JSONManagement.AddJPropertyToJObject(JObject,NAVApp.FIELDNAME(Name),NAVApp.Name);
      JSONManagement.AddJPropertyToJObject(JObject,NAVApp.FIELDNAME(Publisher),NAVApp.Publisher);
      JSONManagement.AddJPropertyToJObject(JObject,NAVApp.FIELDNAME("Version Major"),NAVApp."Version Major");
      JSONManagement.AddJPropertyToJObject(JObject,NAVApp.FIELDNAME("Version Minor"),NAVApp."Version Minor");
      JSONManagement.AddJPropertyToJObject(JObject,NAVApp.FIELDNAME("Version Build"),NAVApp."Version Build");
      JSONManagement.AddJPropertyToJObject(JObject,NAVApp.FIELDNAME("Version Revision"),NAVApp."Version Revision");
      JSONManagement.AddJPropertyToJObject(JObject,NAVApp.FIELDNAME(Installed),NAVApp.Installed);
      JSONManagement.AddJObjectToJArray(JArray,JObject);
    END;

    BEGIN
    END.
  }
}

