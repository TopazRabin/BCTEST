OBJECT Codeunit 14000557 Period End Calculation
{
  OBJECT-PROPERTIES
  {
    Date=11/01/20;
    Time=12:00:00 PM;
    Version List=UBP3.03;
  }
  PROPERTIES
  {
    TableNo=14000553;
    OnRun=BEGIN
            InvMgt.CreateLogEntry(
              "Location Code",STRSUBSTNO(Text000,"Starting Date","Ending Date"),UBPLogEntryNo);
            CLEAR(ProcUnit);
            PeriodForecast(Rec,ProcUnit,'');
          END;

  }
  CODE
  {
    VAR
      AdvForSetup@1240030050 : Record 14002651;
      Forecast@1240020002 : Codeunit 14000567;
      UnusualUsageAdjTmp@1240030075 : TEMPORARY Record 14002658;
      CalcLine@14000500 : Record 14000569;
      CalcLineTmp@14000501 : TEMPORARY Record 14000569;
      ForecastBuffer@1240030051 : TEMPORARY Record 14002654;
      ForecastCust@1240030031 : Record 14002601;
      ForecastCustItem@1240030024 : Record 14002602;
      ForItemUsage@1240030010 : Record 14000557;
      Formula@1240030028 : Record 14002652;
      FormulaDetailTmp@1240030053 : TEMPORARY Record 14002655;
      FormulaDetail@1240030103 : Record 14002655;
      FormulaGroup@1240030136 : Record 14002664;
      FormulaPeriod@1240030029 : Record 14002653;
      FormulaTmp@1240030008 : TEMPORARY Record 14002652;
      FormulaPeriodTmp@1240030009 : TEMPORARY Record 14002653;
      InvLocPeriod@14000502 : Record 14000553;
      InvLocPeriod1@1240030020 : TEMPORARY Record 14000553;
      InvLocPeriod2@14000503 : TEMPORARY Record 14000553;
      InvLocPeriod3@14000504 : TEMPORARY Record 14000553;
      InvLocPeriod4@14000505 : TEMPORARY Record 14000553;
      InvLocPeriod5@1240030122 : TEMPORARY Record 14000553;
      InvMgmtSetup@14000506 : Record 14000551;
      Item@14000507 : Record 27;
      ItemClassSetup@14000508 : Record 14000554;
      ItemRanking@1240030056 : Record 14002656;
      ItemUsage@14000510 : Record 14000557;
      ItemUsage2@1240020001 : Record 14000557;
      ItemUsageTemp@14000511 : TEMPORARY Record 14000557;
      ItemUsage3@1000000000 : Record 14000557;
      Location@14000513 : Record 14;
      ProcUnit@14000514 : Record 14000555;
      ProcUnit2@1240020000 : Record 14000555;
      ProcUnitTemp@14000515 : TEMPORARY Record 14000555;
      SporadicUsageLTMult@1240030104 : Record 14002660;
      SporadicUsagePerMult@1240030106 : Record 14002661;
      StockkeepingUnit@14000516 : Record 5700;
      Trend@1240030061 : TEMPORARY Record 14002657;
      UsageRevLine@14000517 : Record 14000560;
      UsageRevLineTemp@14000518 : TEMPORARY Record 14000560;
      VendBuyingCalendar@14000519 : Record 14000563;
      VendBuyingCalendarTemp@14000520 : TEMPORARY Record 14000563;
      UsageLedgEntry@1240030105 : Record 14000556;
      Vendor@1240030135 : Record 23;
      TargetCustServiceLevel@1240030147 : Record 14002701;
      ForecastSummaryView@1240030001 : Record 14000585;
      InvMgt@1240030066 : Codeunit 14000553;
      UBP@1240430068 : Codeunit 14000564;
      Window@14000523 : Dialog;
      AccumPercent@1240030060 : Decimal;
      BaseTrend@1240030064 : Decimal;
      CalcLineNo@1240030037 : Integer;
      ClosedInvPeriods@1240030072 : Integer;
      CountLessDeadStock@14000524 : Integer;
      CountToProcess@14000525 : Integer;
      CustActualUsage@1240030042 : ARRAY [200] OF Decimal;
      CustForcPerStartDate@1240030035 : Date;
      CustForcPerEndDate@1240030036 : Date;
      DaysInPeriod@14000526 : Integer;
      First@1240030000 : Boolean;
      FirstPeriodStartDate@1000000002 : Date;
      ForDays@1240030021 : Integer;
      ForecastModel@1240030030 : 'UBP,Adv. For.,Cust. For.,Adv. and Cust. For.';
      ForecastCustActualUsage@1240030032 : Decimal;
      ForecastUsagePre@1240030092 : Decimal;
      ForEnd@1240030011 : Integer;
      ForError@1240030007 : Decimal;
      ForMeanErrPct@1240030088 : Decimal;
      ForMedianErrPct@1240030089 : Decimal;
      FormulaMaxPeriods@1240030040 : Integer;
      FormulaMinPeriods@1240030100 : Integer;
      FormulaPeriods@1240030039 : Integer;
      ForPerCount@1240030049 : Integer;
      ForPeriodDays@1240030022 : Integer;
      ForPeriods@1240030006 : Integer;
      ForSelMeanErrPct@1240030054 : Decimal;
      ForSelMedianErrPct@1240030087 : Decimal;
      ForTotTrend@1240030003 : Decimal;
      ForTotWeight@1240030004 : Decimal;
      ForTotWeightedUsage@1240030005 : Decimal;
      ForTrendPct@1240030014 : Decimal;
      ForTrendPeriods@1240030019 : Integer;
      ForUsageEnd@1240030018 : Integer;
      ForUsageTrend@1240030012 : Decimal;
      ForUsageNoTrend@1240030013 : Decimal;
      FuturePeriods@1240030108 : Integer;
      HighPeriod@1240030046 : Integer;
      HighUsage@1240030047 : Decimal;
      IncTrend@1240030026 : ARRAY [200] OF Boolean;
      ItemCost@1000000001 : Decimal;
      LastUsagePeriod@1240030044 : Integer;
      LeadTime@1240030107 : Decimal;
      LineNo@1240030038 : Integer;
      LowPeriod@1240030045 : Integer;
      LowUsage@1240030048 : Decimal;
      MinForcDate@1240030102 : Date;
      MinForcPeriods@1240030101 : Integer;
      ModeAve@1240030090 : ARRAY [200] OF Decimal;
      ModeAveCount@1240030093 : ARRAY [200] OF Integer;
      ModeCount@1240030096 : Integer;
      ModeFinished@1240030097 : Boolean;
      ModeSelected@1240030095 : Integer;
      ModeStored@1240030094 : Boolean;
      NetUsage@1240030025 : ARRAY [200] OF Decimal;
      NetUnSmoothedUsage@1240030120 : ARRAY [200] OF Decimal;
      PeriodCount@14000527 : Integer;
      PerEndAdjUsage@1240030041 : ARRAY [200] OF Decimal;
      PerGroup@1240030052 : Integer;
      PeriodNotAvailable@14000528 : Boolean;
      PrevOrderPoint@14000529 : Decimal;
      PrevPeriodDate@1240030002 : Date;
      SeasonCYUsage@1240030083 : Decimal;
      SeasonPYUsage@1240030084 : Decimal;
      SeasonTrendPct@1240030085 : Decimal;
      Steps@1240030065 : Integer;
      TestDate@14000530 : Date;
      TrendFail@1240030062 : Boolean;
      TrendPeriods@1240030063 : Integer;
      UsageIsFrozen@14000531 : Boolean;
      UsagePeriod@1240030043 : Integer;
      WindowProcCount@14000532 : Integer;
      WindowTotalCount@14000533 : Integer;
      Text000@14000534 : TextConst 'ENU=Period End Processing %1-%2';
      Text001@14000535 : TextConst 'ENU=Period Starting Date';
      Text002@14000536 : TextConst 'ENU=Location';
      Text003@14000537 : TextConst 'ENU=Item Usage Calculation';
      Text004@14000538 : TextConst 'ENU=Update Vendor Buying Calendar';
      Text005@14000539 : TextConst 'ENU=Identify Dead Stock';
      Text007@14000541 : TextConst 'ENU=Update Procurement Units';
      Text008@14000542 : TextConst 'ENU=Update Item Usage';
      Text009@14000543 : TextConst 'ENU=Create Calculation Line';
      Text010@14000544 : TextConst 'ENU=Create Usage Review Line';
      Text011@14000545 : TextConst 'ENU=You must setup a dead stock item class.';
      Text012@14000546 : TextConst 'ENU=Stockout days %1';
      Text013@14000547 : TextConst 'ENU=Below Min. Annual Usage %1';
      Text014@14000548 : TextConst 'ENU="Curr. Period Usage %1 is > or = the last %2 periods total usage %3"';
      Text015@1240030055 : TextConst 'ENU=Create Formula Details';
      ZeroMovementCode@1240030058 : Code[10];
      Text021@1240030082 : TextConst 'ENU=Save Unusual Usage Adj.';
      Text022@1240030099 : TextConst 'ENU=Rank Items';
      TotalHits@1240030109 : Decimal;
      AccumHits@1240030110 : Decimal;
      Text023@1240030057 : TextConst 'ENU="Last Closed Period Actual Usage = %1"';
      Text024@1240030059 : TextConst 'ENU=Statistical Formula Selected %1';
      Text025@1240030111 : TextConst 'ENU="Forecast Usage = %1 Forecast Usage Per Day = %2  Forecast Horizon is %3 periods"';
      Text026@1240030112 : TextConst 'ENU="Moving Average = %1"';
      Text028@1240030114 : TextConst 'ENU="Forecast Usage %1 = Net Average Usage %2 + Customer Forecast Usage %3"';
      Text029@1240030115 : TextConst 'ENU=Frozen order point %1';
      Text030@1240030116 : TextConst 'ENU="Order Point %1 = (Forecast Usage Per Day %2 * Lead Time %3) + Safety Allowance % %4"';
      Text031@1240030117 : TextConst 'ENU="Order Point %1 = (Forecast Usage Per Day %2 - Ave. Transfer Usage Per Day %3) * Lead Time %4 + Safety Allowance % %5"';
      Text032@1240030118 : TextConst 'ENU="Order Point %1 = Order Point %2 + (Average Transfer Usage Per Day %3 * Lead Time %4"';
      Text033@1240030119 : TextConst 'ENU="Line Point %1 = Order Point %2 + (Forecast Usage Per Day %3 * Review Cycle Days %4)"';
      Divisor@1240030121 : Decimal;
      NegEntryNo@1240030123 : Integer;
      j@1240030124 : Integer;
      UBPLogEntryNo@1240030125 : Integer;
      ForecastByCustProcUnit@1240030137 : Boolean;
      ForecastByProcUnit@1240030138 : Boolean;
      DispProgress@1240030139 : Boolean;
      EntryNo@1240030140 : Integer;
      ActualArray@1240030141 : ARRAY [200] OF Decimal;
      ForecastArray@1240030142 : ARRAY [200] OF Decimal;
      ActualInd@1240030143 : Integer;
      ForecastInd@1240030144 : Integer;
      DeviationUnits@1240030145 : Decimal;
      DeviationPeriods@1240030146 : Integer;
      Text036@1240030148 : TextConst 'ENU="Order Point %1 = (Forecast Usage Per Day %2 * Lead Time %3) + Safety Allowance Qty. %4"';
      Text037@1240030149 : TextConst 'ENU="Order Point %1 = (Forecast Usage Per Day %2 - Ave. Transfer Usage Per Day %3) * Lead Time %4 + Safety Allowance Qty. %5"';
      Text038@1240030150 : TextConst 'ENU="Order Point %1 = (Frozen Usage Per Day %2 * Lead Time %3) + Safety Allowance Qty. %4"';
      Text039@1240030067 : TextConst 'ENU="Sporadic Target Stock Level = %1"';
      ForecastPeriodDays@1240030068 : Integer;
      LocationFilter@1240030069 : Text[250];
      FilterLocationCode@1240030070 : Code[10];
      FilterItemNo@1240030071 : Code[50];
      FilterVariantCode@1240030113 : Code[10];
      Text040@1240030015 : TextConst 'ENU=Non-Stock Item - Set Sporadic Target Stock Level from %1 to 0.';
      ExternalForecastActive@1240020003 : Boolean;
      Text041@1240020004 : TextConst 'ENU=External Forecasting:  Did not run for %1-%2';

    PROCEDURE PeriodForecast@1240030006(CurrLocInvPeriod@1240030000 : Record 14000553;CurrProcUnit@1240030001 : Record 14000555;CurrCustomerNo@1240030002 : Code[20]);
    VAR
      UnusualUsageAdj@1240020016 : Record 14002658;
      LocItemUsageAdj@1000 : Record 14000558;
      LocUsageTotal@1001 : Decimal;
      ProcUnitPrim@1002 : Record 14000555;
      CreateProcUnit@1240020000 : Codeunit 14000575;
      SporadicRuleCode@1240020001 : Code[10];
      SporadicRule@1240020002 : Record 14002662;
      SporadicPeriodLimit@1240020003 : Integer;
      SporadicAveUsage@1240020004 : Decimal;
      SporadicHitPeriods@1240020005 : Integer;
      StartingDate@1240020006 : Date;
      ForSelFormula@1240020007 : Code[20];
      AdjAveUsage@1240020015 : Decimal;
      AdjEntries@1240020014 : Integer;
      AdjMax@1240020013 : Decimal;
      AdjMin@1240020012 : Decimal;
      AdjYrPeriods@1240020011 : Integer;
      AdjZeroEntries@1240020009 : Integer;
      AdjStartDate@1240020008 : Date;
      i@1240020010 : Integer;
      ExternalForecast@1240020017 : Codeunit 14000570;
    BEGIN
      ForecastByCustProcUnit := FALSE;
      ForecastByProcUnit := FALSE;

      IF (CurrProcUnit."Location Code" <> '') AND
         (CurrCustomerNo <> '') THEN
        ForecastByCustProcUnit := TRUE
      ELSE
        IF CurrProcUnit."Location Code" <> '' THEN
          ForecastByProcUnit := TRUE;

      DispProgress := GUIALLOWED;
      IF ForecastByCustProcUnit OR ForecastByProcUnit THEN
        DispProgress := FALSE;

      InitialSetup(CurrLocInvPeriod);

      IF DispProgress THEN BEGIN
        Window.OPEN(
          '#1########################################\' +
          PADSTR(Text001,30) + '#2########\' +
          PADSTR(Text002,30) + '#3########\' +
          PADSTR(Text003,30) + '@4@@@@@@@@@@@@@@@@@@\' +
          PADSTR(Text004,30) + '@5@@@@@@@@@@@@@@@@@@\' +
          PADSTR(Text005,30) + '@6@@@@@@@@@@@@@@@@@@\' +
          PADSTR(Text007,30) + '@8@@@@@@@@@@@@@@@@@@\' +
          PADSTR(Text008,30) + '@9@@@@@@@@@@@@@@@@@@\' +
          PADSTR(Text009,30) + '@10@@@@@@@@@@@@@@@@@\' +
          PADSTR(Text010,30) + '@11@@@@@@@@@@@@@@@@@\' +
          PADSTR(Text015,30) + '@12@@@@@@@@@@@@@@@@@\' +
          PADSTR(Text021,30) + '@13@@@@@@@@@@@@@@@@@');

        Window.UPDATE(1,STRSUBSTNO(Text000,CurrLocInvPeriod."Starting Date",CurrLocInvPeriod."Ending Date"));
        Window.UPDATE(2,FORMAT(CurrLocInvPeriod."Starting Date"));
        Window.UPDATE(3,Location.Code);
      END;

      ItemUsage.RESET;
      ItemUsage.SETCURRENTKEY("Location Code","Starting Date","Item No.","Variant Code");
      ItemUsage.SETRANGE("Location Code",Location.Code);
      IF ForecastByProcUnit OR ForecastByCustProcUnit THEN BEGIN
        ItemUsage.SETRANGE("Item No.",CurrProcUnit."Item No.");
        ItemUsage.SETRANGE("Variant Code",CurrProcUnit."Variant Code");
      END;
      IF ForecastByCustProcUnit THEN
        ItemUsage.SETRANGE("Source No.",CurrCustomerNo)
      ELSE
        ItemUsage.SETFILTER("Source No.",'=%1','');
      ItemUsage.SETRANGE("Starting Date",InvLocPeriod."Starting Date");
      WindowTotalCount := ItemUsage.COUNT;
      ProcUnitPrim.RESET;
      ProcUnitPrim.SETCURRENTKEY("Location Code", "Usage Location Filter String");
      ProcUnitPrim.SETFILTER("Location Code",Location.Code);
      IF ForecastByProcUnit OR ForecastByCustProcUnit THEN BEGIN
        ProcUnitPrim.SETRANGE("Item No.",CurrProcUnit."Item No.");
        ProcUnitPrim.SETRANGE("Variant Code",CurrProcUnit."Variant Code");
      END;
      IF ProcUnitPrim.FINDSET THEN
        REPEAT
          ItemUsage.SETRANGE("Item No.",ProcUnitPrim."Item No.");
          ItemUsage.SETRANGE("Variant Code",ProcUnitPrim."Variant Code");
          IF ItemUsage.FINDFIRST THEN BEGIN
          ItemUsage.SETRANGE("Date Filter",CurrLocInvPeriod."Starting Date",CurrLocInvPeriod."Ending Date");

          IF ForecastByCustProcUnit THEN
            ItemUsage.SETFILTER("Source No. Filter",'=%1',ItemUsage."Source No.");

          // Calc Usage for Period
          IF CurrCustomerNo <> '' THEN BEGIN
            ItemUsage.SETFILTER(
              "Location Filter",GetUsageLocationFilter(
                ItemUsage."Location Code",ItemUsage."Item No.",ItemUsage."Variant Code",TRUE));
            ItemUsage.CALCFIELDS(
              "Usage Quantity","Adjustment Quantity","Exclude Usage Quantity",
              "Transfer Usage","Drop Ship Usage Quantity",
              "Forecast Cust. Actual Usage");
            ItemUsage."Single Loc. Per. End Adj. Usg." := ItemUsage.AdjustedUsage;
            ItemUsage."Period End Adjusted Usage" := ItemUsage."Single Loc. Per. End Adj. Usg.";
          END ELSE BEGIN
            // Calc Usage Single Location for Period Usage
            ItemUsage.SETFILTER("Location Filter", ProcUnitPrim."Location Code");
            ItemUsage.CALCFIELDS(
              "Usage Quantity","Adjustment Quantity","Exclude Usage Quantity",
              "Transfer Usage","Drop Ship Usage Quantity",
              "Forecast Cust. Actual Usage");
            ItemUsage."Single Loc. Per. End Adj. Usg." := ItemUsage.AdjustedUsage;

            ItemUsage.SETFILTER(
              "Location Filter",GetUsageLocationFilter(
                ItemUsage."Location Code",ItemUsage."Item No.",ItemUsage."Variant Code",FALSE));
            ItemUsage.CALCFIELDS(
              "Usage Quantity","Adjustment Quantity","Exclude Usage Quantity",
              "Transfer Usage","Drop Ship Usage Quantity",
              "Forecast Cust. Actual Usage");
            ItemUsage."Period End Adjusted Usage" := ItemUsage.AdjustedUsage;
          END;

          IF ForecastByCustProcUnit THEN
            ItemUsage."Adjustment Quantity" := 0;
          ForecastCustActualUsage := ItemUsage."Forecast Cust. Actual Usage";
          IF ForecastByCustProcUnit THEN
            ItemUsage."Net Period End Usage" := ItemUsage.AdjustedUsage
          ELSE
            ItemUsage."Net Period End Usage" := ItemUsage.AdjustedUsage - ItemUsage."Forecast Cust. Actual Usage";
          IF ItemUsage."Period End Adjusted Usage" <> 0 THEN
            ItemUsage."Daily Usage Rate" :=
              ItemUsage."Period End Adjusted Usage" / DaysInPeriod
          ELSE
            ItemUsage."Daily Usage Rate" := 0;

          // Calc Average Usage begin
          ItemUsage."Periods to Average" := PeriodCount;
          IF NOT ProcUnit.GET(ItemUsage."Location Code",ItemUsage."Item No.",ItemUsage."Variant Code") THEN BEGIN
            ProcUnitTemp.INIT;
            ProcUnitTemp."Location Code" := ItemUsage."Location Code";
            ProcUnitTemp."Item No." := ItemUsage."Item No.";
            ProcUnitTemp."Variant Code" := ItemUsage."Variant Code";
            ProcUnitTemp.Review := TRUE;
            ProcUnitTemp."Date Created" := TODAY;
            ProcUnitTemp."User ID" := USERID;
            ProcUnitTemp.SetTemp;
            ProcUnitTemp.INSERT(TRUE);
            ProcUnit.COPY(ProcUnitTemp);
          END;
          IF ProcUnit."First Stocked Date" = 0D THEN BEGIN
            ProcUnit."First Stocked Date" := UBP.GetFirstStockedDate(ProcUnit,CurrCustomerNo);
            ProcUnitTemp.COPY(ProcUnit);
            IF NOT ProcUnitTemp.INSERT THEN
              ProcUnitTemp.MODIFY;
          END;

          IF ProcUnit."First Stocked Date" <= InvLocPeriod2."Starting Date" THEN
            ItemUsage.SETRANGE(
              "Date Filter",InvLocPeriod2."Starting Date",InvLocPeriod."Ending Date")
          ELSE BEGIN
            InvLocPeriod3.RESET;
            InvLocPeriod3.SETFILTER("Starting Date",'<=%1',ProcUnit."First Stocked Date");
            InvLocPeriod3.SETRANGE("Location Code",CurrLocInvPeriod."Location Code");
            InvLocPeriod3.SETFILTER("Ending Date",'>=%1',ProcUnit."First Stocked Date");
            InvLocPeriod3.FINDFIRST;
            InvLocPeriod4.RESET;
            InvLocPeriod4.SETRANGE(
              "Starting Date",InvLocPeriod3."Starting Date",InvLocPeriod."Starting Date");
            InvLocPeriod4.SETRANGE("Location Code",CurrLocInvPeriod."Location Code");
            ItemUsage."Periods to Average" := InvLocPeriod4.COUNT;
            ItemUsage.SETRANGE(
              "Date Filter",ProcUnit."First Stocked Date",InvLocPeriod."Ending Date");
          END;
          ItemUsage.SETFILTER(
            "Location Filter",GetUsageLocationFilter(
              ItemUsage."Location Code",ItemUsage."Item No.",ItemUsage."Variant Code",FALSE));
          IF ForecastByCustProcUnit THEN
            ItemUsage.SETFILTER("Source No. Filter",'=%1',CurrCustomerNo);
          ItemUsage.CALCFIELDS(
            "Usage Quantity","Adjustment Quantity","Exclude Usage Quantity",
            "Transfer Usage","Drop Ship Usage Quantity","Forecast Cust. Actual Usage");
          IF ForecastByCustProcUnit THEN
            ItemUsage."Adjustment Quantity" := 0;
          ItemUsage."Total Usage to Average" :=
            ((ItemUsage."Usage Quantity" + ItemUsage."Adjustment Quantity" + ItemUsage."Transfer Usage") -
              ItemUsage."Exclude Usage Quantity");
          IF NOT ProcUnit."Include Drop Ship Usage" THEN
            ItemUsage."Total Usage to Average" :=
              ItemUsage."Total Usage to Average" - ItemUsage."Drop Ship Usage Quantity";
          ItemUsage."Forecast Cust. Usage to Ave." := ItemUsage."Forecast Cust. Actual Usage";
          IF ForecastByCustProcUnit THEN
            ItemUsage."Net Usage to Average" := ItemUsage."Total Usage to Average"
          ELSE
            ItemUsage."Net Usage to Average" :=
              ItemUsage."Total Usage to Average" - ItemUsage."Forecast Cust. Actual Usage";
          IF ItemUsage."Net Usage to Average" <> 0 THEN
            ItemUsage."Net Average Usage" :=
              ItemUsage."Net Usage to Average" / ItemUsage."Periods to Average"
          ELSE
            ItemUsage."Net Average Usage" := 0;
          IF ItemUsage."Forecast Cust. Usage to Ave." <> 0 THEN
            ItemUsage."Forecast Cust. Average Usage" :=
              ItemUsage."Forecast Cust. Usage to Ave." / ItemUsage."Periods to Average"
            ELSE
              ItemUsage."Forecast Cust. Average Usage" := 0;
          IF ItemUsage."Include Drop Ship Usage" THEN
            ItemUsage."Total Usage to Average" :=
              ItemUsage."Total Usage to Average" + ItemUsage."Drop Ship Usage Quantity";
          IF ItemUsage."Total Usage to Average" <> 0 THEN BEGIN
            ItemUsage."Average Usage" :=
              ItemUsage."Total Usage to Average" / ItemUsage."Periods to Average";
            ItemUsage."Average Usage Per Day" :=
              ItemUsage."Average Usage" / (InvLocPeriod."Ending Date" - InvLocPeriod."Starting Date" + 1);
          END ELSE BEGIN
            ItemUsage."Average Usage" := 0;
            ItemUsage."Average Usage Per Day" := 0;
          END;
          IF ItemUsage."Transfer Usage" <> 0 THEN BEGIN
            ItemUsage."Average Transfer Usage" :=
              ItemUsage."Transfer Usage" / ItemUsage."Periods to Average";
            ItemUsage."Average Transfer Usage Per Day" :=
              ItemUsage."Average Transfer Usage" / (InvLocPeriod."Ending Date" - InvLocPeriod."Starting Date" + 1);
          END ELSE BEGIN
            ItemUsage."Average Transfer Usage" := 0;
            ItemUsage."Average Transfer Usage Per Day" := 0;
          END;
          // single loc average usage
          ItemUsage."Single Loc. Avg Usage Per Day" := CalculateSingleLocNetAverageUsage(ItemUsage, ItemUsage, ProcUnit, CurrCustomerNo)/(InvLocPeriod."Ending Date" - InvLocPeriod."Starting Date" + 1);
          // Calc Average Usage end
          IF (ProcUnit."First Stocked Date" <> 0D) THEN BEGIN
            // Calc Annualized Cost begin
            ItemUsage.SETFILTER(
              "Location Filter",GetUsageLocationFilter(
                ItemUsage."Location Code",ItemUsage."Item No.",ItemUsage."Variant Code",FALSE));
            ItemUsage.SETRANGE(
              "Date Filter",CALCDATE('<-1Y+1D>',InvLocPeriod."Ending Date"),InvLocPeriod."Ending Date");
            IF ForecastByCustProcUnit THEN
              ItemUsage.SETFILTER("Source No. Filter",'=%1',CurrCustomerNo);
            ItemUsage.CALCFIELDS(
              "Usage Quantity","Adjustment Quantity","Exclude Usage Quantity",
              "Transfer Usage","Drop Ship Usage Quantity");
            IF ForecastByCustProcUnit THEN
              ItemUsage."Adjustment Quantity" := 0;
            ItemUsage."Annual Adjusted Usage" := ItemUsage.AdjustedUsage;

            // Check for Component COGS
            IF NOT ForecastByCustProcUnit THEN
              ItemUsage."Annual Adjusted Usage" += CheckForComponentUsage(CurrProcUnit,CALCDATE('<-1Y+1D>',InvLocPeriod."Ending Date"),InvLocPeriod."Ending Date",
                GetUsageLocationFilter(CurrProcUnit."Location Code",CurrProcUnit."Item No.",CurrProcUnit."Variant Code",FALSE));

            ItemCost := UBP.GetUnitCost(ProcUnit."Location Code", ProcUnit."Item No.", ProcUnit."Variant Code");

            ItemUsage."Annualized COGS" :=
              ItemUsage."Annual Adjusted Usage" * ItemCost;
            // Calc Annualized Cost end

            // Calc Turns
            ProcUnit.SETFILTER(
              "Location Filter",GetUsageLocationFilter(
              ItemUsage."Location Code",ItemUsage."Item No.",ItemUsage."Variant Code",FALSE));
            ProcUnit.SETFILTER("Date Filter",'..%2',ItemUsage."Starting Date",ItemUsage."Ending Date");
            IF ProcUnit.CALCFIELDS("Inventory Net Change") THEN BEGIN
              ItemUsage."Average Inventory Value" := ROUND(ItemCost * ROUND(ProcUnit."Inventory Net Change",0.01), 0.01);
            END;
            IF ItemUsage."Average Inventory Value" <> 0 THEN
              ItemUsage."Average Turns" :=
                ROUND(ItemUsage."Annualized COGS" / ItemUsage."Average Inventory Value",0.01);

            // Location Turns
            IF ProcUnit.GETFILTER("Location Filter") = ProcUnit."Location Code" THEN BEGIN
              ItemUsage."Loc. Annualized COGS" := ItemUsage."Annualized COGS";
              ItemUsage."Loc. Ave. Inventory Value" := ItemUsage."Average Inventory Value";
              ItemUsage."Loc. Ave. Turns" := ItemUsage."Average Turns";
            END ELSE BEGIN
              ItemUsage3.COPY(ItemUsage);
              ItemUsage3.SETFILTER(
                "Location Filter",'=%1',ItemUsage3."Location Code");
              ItemUsage3.SETRANGE(
                "Date Filter",CALCDATE('<-1Y+1D>',InvLocPeriod."Ending Date"),InvLocPeriod."Ending Date");
              IF ForecastByCustProcUnit THEN
                ItemUsage3.SETFILTER("Source No. Filter",'=%1',CurrCustomerNo);
              ItemUsage3.CALCFIELDS(
                "Usage Quantity","Adjustment Quantity","Exclude Usage Quantity",
                "Transfer Usage","Drop Ship Usage Quantity");
              IF ForecastByCustProcUnit THEN
                ItemUsage."Adjustment Quantity" := 0;


              ItemUsage."Loc. Annual Adjusted Usage" := ItemUsage3.AdjustedUsage;
              IF NOT ForecastByCustProcUnit THEN
                ItemUsage."Loc. Annual Adjusted Usage" += CheckForComponentUsage(CurrProcUnit,CALCDATE('<-1Y+1D>',InvLocPeriod."Ending Date"),InvLocPeriod."Ending Date",
                ItemUsage3."Location Code");
              ItemUsage."Loc. Annualized COGS" :=
                ItemUsage."Loc. Annual Adjusted Usage" * ItemCost;
              ProcUnit2.COPY(ProcUnit);
              ProcUnit2.SETFILTER("Location Filter",'=%1',ProcUnit2."Location Code");
              ProcUnit2.SETFILTER("Date Filter",'..%2',ItemUsage."Starting Date",ItemUsage."Ending Date");
              ProcUnit2.CALCFIELDS("Inventory Net Change");
              ItemUsage."Loc. Ave. Inventory Value" := ROUND(ItemCost * ROUND(ProcUnit2."Inventory Net Change", 0.01), 0.01);
              IF ItemUsage."Loc. Ave. Inventory Value" <> 0 THEN
                ItemUsage."Loc. Ave. Turns" :=
                  ROUND(ItemUsage."Loc. Annualized COGS" / ItemUsage."Loc. Ave. Inventory Value",0.01);
            END;
            // Calc Turns End

            // Calc Annual Hits
            UsageLedgEntry.RESET;
            UsageLedgEntry.SETCURRENTKEY(
              "Location Code","Item No.","Variant Code","Exclude from Usage","Drop Shipment","First Shipment","Usage Date");
            UsageLedgEntry.SETFILTER(
              "Location Code",GetUsageLocationFilter(
                ItemUsage."Location Code",ItemUsage."Item No.",ItemUsage."Variant Code",FALSE));
            UsageLedgEntry.SETRANGE("Item No.",ItemUsage."Item No.");
            UsageLedgEntry.SETRANGE("Variant Code",ItemUsage."Variant Code");
            FirstPeriodStartDate := CALCDATE('<-1Y+1M>',ItemUsage."Starting Date");
            UsageLedgEntry.SETRANGE("Usage Date",FirstPeriodStartDate,ItemUsage."Ending Date");
            UsageLedgEntry.SETRANGE("Exclude from Usage", FALSE);
            IF ForecastByCustProcUnit THEN
              UsageLedgEntry.SETRANGE("Source No.",CurrCustomerNo);
            UsageLedgEntry.CALCSUMS("Usage Hit");
            ItemUsage."Annual Usage Hits" := UsageLedgEntry."Usage Hit";
            // Calc Annual Hits End

            // Calc Annual Average Order Qty
            LocUsageTotal := 0;
            UsageLedgEntry.SETRANGE("Exclude from Usage", FALSE);
            UsageLedgEntry.SETRANGE("Drop Shipment", FALSE);
            UsageLedgEntry.CALCSUMS("Usage Hit",Quantity);
            LocItemUsageAdj.SETCURRENTKEY("Item No.","Location Code","Variant Code","Starting Date","Ending Date","Line No.");
            LocItemUsageAdj.SETRANGE("Item No.", ItemUsage."Item No.");
            LocItemUsageAdj.SETFILTER("Location Code",GetUsageLocationFilter(
                ItemUsage."Location Code",ItemUsage."Item No.",ItemUsage."Variant Code",FALSE));
            LocItemUsageAdj.SETRANGE("Variant Code", ItemUsage."Variant Code");
            LocItemUsageAdj.SETRANGE("Starting Date", FirstPeriodStartDate, ItemUsage."Ending Date");
            LocItemUsageAdj.CALCSUMS("Adjustment Quantity");
            LocUsageTotal := (UsageLedgEntry.Quantity + -LocItemUsageAdj."Adjustment Quantity");
            IF (UsageLedgEntry."Usage Hit" > 0) AND (LocUsageTotal < 0) THEN BEGIN
              ItemUsage."Average Order Qty." := -LocUsageTotal/UsageLedgEntry."Usage Hit";
              Forecast.RoundValueForForecast(ProcUnit, ItemUsage."Average Order Qty.");
            END;
            // Calc Annual Average Order Qty End
          END;

          // Choose the best formula
          IF (ProcUnit."First Stocked Date" <> 0D) AND
             ((ForecastModel = ForecastModel::"Adv. For.") OR
              (ForecastModel = ForecastModel::"Adv. and Cust. For.")) THEN BEGIN
            ItemUsage."Forecast Horizon Period" := 0;
            ItemUsage."Re-For. Formula" := '';
            ItemUsage."Re-For. Non Seasonal Trend %" := 0;
            ItemUsage."Re-For. Usage" := 0;
            ItemUsage."Re-For. Usage Per Day" := 0;
            ItemUsage."Re-For. Median Error %" := 0;
            ItemUsage."Re-For. Seasonal Trend %" := 0;
            CLEAR(PerEndAdjUsage);
            CLEAR(CustActualUsage);
            CLEAR(NetUsage);
            CLEAR(NetUnSmoothedUsage);
            CLEAR(ActualArray);
            CLEAR(ForecastArray);
            ActualInd := 0;
            ForecastInd := 0;
            ForItemUsage.RESET;
            ForItemUsage.SETCURRENTKEY(
              "Location Code","Item No.","Variant Code","Starting Date","Ending Date");
            ForItemUsage.ASCENDING(FALSE);
            ForItemUsage.SETRANGE("Location Code",ItemUsage."Location Code");
            ForItemUsage.SETRANGE("Item No.",ItemUsage."Item No.");
            ForItemUsage.SETRANGE("Variant Code",ItemUsage."Variant Code");
            ForItemUsage.SETFILTER("Starting Date",'<%1',ItemUsage."Starting Date");
            IF ForecastByCustProcUnit THEN
              ForItemUsage.SETRANGE("Source No.",CurrCustomerNo)
            ELSE
              ForItemUsage.SETFILTER("Source No.",'=%1','');
            AdjZeroEntries := 0;
            AdjAveUsage := 0;
            // sporadic >>
            SporadicAveUsage := 0;
            SporadicHitPeriods := 0;
            // sporadic <<
            IF ForItemUsage.FIND('-') THEN BEGIN
              ItemUsage.SETFILTER(
                "Location Filter",GetUsageLocationFilter(
                  ForItemUsage."Location Code",ForItemUsage."Item No.",ForItemUsage."Variant Code",FALSE));
              ItemUsage.SETRANGE(
                "Date Filter",ItemUsage."Starting Date",ItemUsage."Ending Date");
              ItemUsage.CALCFIELDS("Forecast Cust. Actual Usage");
              UnusualUsageAdjTmp.INIT;
              UnusualUsageAdjTmp."Entry No." := ItemUsage."Entry No.";
              UnusualUsageAdjTmp."Location Code" := ItemUsage."Location Code";
              UnusualUsageAdjTmp."Item No." := ItemUsage."Item No.";
              UnusualUsageAdjTmp."Variant Code" := ItemUsage."Variant Code";
              UnusualUsageAdjTmp."Starting Date" := ItemUsage."Starting Date";
              UnusualUsageAdjTmp."Ending Date" := ItemUsage."Ending Date";
              IF ForecastByCustProcUnit THEN BEGIN
                UnusualUsageAdjTmp."Source No." := CurrCustomerNo;
                UnusualUsageAdjTmp."Period End Adjusted Usage" := ItemUsage."Period End Adjusted Usage";
              END ELSE BEGIN
                UnusualUsageAdjTmp."Period End Adjusted Usage" :=
                  ItemUsage."Period End Adjusted Usage" - ItemUsage."Forecast Cust. Actual Usage";
              END;

              ItemUsage.SETFILTER("Location Filter", ItemUsage."Location Code");
              ItemUsage.CALCFIELDS("Forecast Cust. Actual Usage");
              IF ForecastByCustProcUnit THEN BEGIN
                UnusualUsageAdjTmp."Single Loc. Per. End Adj. Usg." := ItemUsage."Single Loc. Per. End Adj. Usg.";
              END ELSE BEGIN
                UnusualUsageAdjTmp."Single Loc. Per. End Adj. Usg." := ItemUsage."Single Loc. Per. End Adj. Usg." - ItemUsage."Forecast Cust. Actual Usage";
              END;
              ItemUsage.SETFILTER("Location Filter",GetUsageLocationFilter(ForItemUsage."Location Code",ForItemUsage."Item No.",ForItemUsage."Variant Code",FALSE));

              UnusualUsageAdjTmp."Single Loc. Usage" := UnusualUsageAdjTmp."Single Loc. Per. End Adj. Usg.";
              UnusualUsageAdjTmp."Single Loc. Usage Adjustment" := 0;

              UnusualUsageAdjTmp."Usage Adjustment" := 0;
              UnusualUsageAdjTmp.Usage := UnusualUsageAdjTmp."Period End Adjusted Usage";
              IF InvMgmtSetup."Usage Start Date" <= UnusualUsageAdjTmp."Starting Date" THEN
                UnusualUsageAdjTmp.INSERT;
              ActualInd := ActualInd + 1;
              ActualArray[ActualInd] := ItemUsage."Period End Adjusted Usage";
              IF UnusualUsageAdjTmp."Period End Adjusted Usage" = 0 THEN
                AdjZeroEntries := AdjZeroEntries + 1;
              AdjAveUsage := AdjAveUsage + UnusualUsageAdjTmp."Period End Adjusted Usage";
              AdjEntries := 1;
              AdjYrPeriods := 1;
              SporadicAveUsage := UnusualUsageAdjTmp."Period End Adjusted Usage";
              IF (SporadicAveUsage <> 0) THEN
                SporadicHitPeriods := 1;

              REPEAT
                AdjEntries := AdjEntries + 1;
                ForItemUsage.SETFILTER(
                  "Location Filter",GetUsageLocationFilter(
                    ForItemUsage."Location Code",ForItemUsage."Item No.",ForItemUsage."Variant Code",FALSE));
                ForItemUsage.SETRANGE(
                  "Date Filter",ForItemUsage."Starting Date",ForItemUsage."Ending Date");
                ForItemUsage.CALCFIELDS("Forecast Cust. Actual Usage");
                UnusualUsageAdjTmp.INIT;
                UnusualUsageAdjTmp."Entry No." := ForItemUsage."Entry No.";
                UnusualUsageAdjTmp."Location Code" := ForItemUsage."Location Code";
                UnusualUsageAdjTmp."Item No." := ForItemUsage."Item No.";
                UnusualUsageAdjTmp."Variant Code" := ForItemUsage."Variant Code";
                UnusualUsageAdjTmp."Starting Date" := ForItemUsage."Starting Date";
                UnusualUsageAdjTmp."Ending Date" := ForItemUsage."Ending Date";
                IF ForecastByCustProcUnit THEN BEGIN
                  UnusualUsageAdjTmp."Source No." := CurrCustomerNo;
                  UnusualUsageAdjTmp."Period End Adjusted Usage" := ForItemUsage."Period End Adjusted Usage";
                END ELSE
                  UnusualUsageAdjTmp."Period End Adjusted Usage" :=
                    ForItemUsage."Period End Adjusted Usage" - ForItemUsage."Forecast Cust. Actual Usage";
                UnusualUsageAdjTmp."Usage Adjustment" := 0;
                UnusualUsageAdjTmp.Usage := UnusualUsageAdjTmp."Period End Adjusted Usage";

                ForItemUsage.SETFILTER("Location Filter", ItemUsage."Location Code");
                ForItemUsage.CALCFIELDS("Forecast Cust. Actual Usage");
                IF ForecastByCustProcUnit THEN BEGIN
                  UnusualUsageAdjTmp."Single Loc. Per. End Adj. Usg." := ForItemUsage."Single Loc. Per. End Adj. Usg.";
                END ELSE BEGIN
                  UnusualUsageAdjTmp."Single Loc. Per. End Adj. Usg." := ForItemUsage."Single Loc. Per. End Adj. Usg." - ForItemUsage."Forecast Cust. Actual Usage";
                END;
                ForItemUsage.SETFILTER("Location Filter",GetUsageLocationFilter(ForItemUsage."Location Code",ForItemUsage."Item No.",ForItemUsage."Variant Code",FALSE));

                UnusualUsageAdjTmp."Single Loc. Usage" := UnusualUsageAdjTmp."Single Loc. Per. End Adj. Usg.";
                UnusualUsageAdjTmp."Single Loc. Usage Adjustment" := 0;

                IF InvMgmtSetup."Usage Start Date" <= UnusualUsageAdjTmp."Starting Date" THEN
                  UnusualUsageAdjTmp.INSERT;
                ActualInd := ActualInd + 1;
                ActualArray[ActualInd] := UnusualUsageAdjTmp."Period End Adjusted Usage";
                ForecastInd := ForecastInd + 1;
                ForecastArray[ForecastInd] := ForItemUsage."Forecast Usage";
                IF AdjEntries <= InvMgmtSetup."No. of Periods in a Year" THEN BEGIN
                  AdjYrPeriods := AdjYrPeriods + 1;
                  AdjAveUsage := AdjAveUsage + UnusualUsageAdjTmp."Period End Adjusted Usage";
                  IF UnusualUsageAdjTmp."Period End Adjusted Usage" = 0 THEN
                    AdjZeroEntries := AdjZeroEntries + 1;
                  // Sporadic >>
                  SporadicRuleCode := AdvForSetup."Def. Sporadic Rule";
                  IF Location."Sporadic Rule" <> '' THEN
                    SporadicRuleCode := Location."Sporadic Rule";
                  IF ProcUnit."Sporadic Rule" <> '' THEN
                    SporadicRuleCode := ProcUnit."Sporadic Rule";
                  SporadicPeriodLimit := InvMgmtSetup."No. of Periods in a Year";
                  IF SporadicRule.GET(SporadicRuleCode) THEN BEGIN
                    IF SporadicRule."Periods of Average Usage" > 0 THEN
                      SporadicPeriodLimit := SporadicRule."Periods of Average Usage";
                  END;
                  IF AdjYrPeriods <= SporadicPeriodLimit THEN BEGIN
                    IF (UnusualUsageAdjTmp."Period End Adjusted Usage" <> 0) THEN BEGIN
                      SporadicAveUsage := SporadicAveUsage + UnusualUsageAdjTmp."Period End Adjusted Usage";
                      SporadicHitPeriods := SporadicHitPeriods + 1;
                    END;
                  END;
                  // Sporadic <<
                END;
              UNTIL (ForItemUsage.NEXT = 0) OR (ForItemUsage."Starting Date" < InvMgmtSetup."Usage Start Date");
              // forecast deviation safety stock
              IF (AdvForSetup."Auto Calc. Safety Stock") AND
                 (AdvForSetup."For. Deviation Calc. Periods" <> 0) THEN BEGIN
                ActualInd := 0;
                ForecastInd := 0;
                DeviationUnits := 0;
                DeviationPeriods := 0;
                REPEAT
                  ActualInd := ActualInd + 1;
                  IF ForecastArray[ActualInd] <> 0 THEN BEGIN
                    IF AdvForSetup."Include Over Forecast Periods" THEN BEGIN
                      IF AdvForSetup."Use Absolute Deviation" THEN
                        DeviationUnits := DeviationUnits + ABS(ActualArray[ActualInd] - ForecastArray[ActualInd])
                      ELSE
                        DeviationUnits := DeviationUnits + (ActualArray[ActualInd] - ForecastArray[ActualInd]);
                      DeviationPeriods := DeviationPeriods + 1;
                    END ELSE
                      IF ForecastArray[ActualInd] <= ActualArray[ActualInd] THEN BEGIN
                        DeviationUnits := DeviationUnits + (ActualArray[ActualInd] - ForecastArray[ActualInd]);
                        DeviationPeriods := DeviationPeriods + 1;
                      END;
                  END;
                UNTIL ActualInd = AdvForSetup."For. Deviation Calc. Periods";
                IF DeviationUnits < 0 THEN
                  DeviationUnits := 0;
                IF DeviationPeriods <> 0 THEN BEGIN
                  ItemUsage."Mean Deviation Units" := DeviationUnits / DeviationPeriods;
                  IF ProcUnit."Safety Stock Calc. Method" =
                    ProcUnit."Safety Stock Calc. Method"::"Forecast Deviation"
                  THEN BEGIN
                    IF NOT TargetCustServiceLevel.GET(ProcUnit."Target Customer Service Level") THEN
                      ItemUsage."Safety Allowance Qty." := ItemUsage."Mean Deviation Units"
                    ELSE BEGIN
                      ItemUsage."Safety Allowance Qty." := ItemUsage."Mean Deviation Units" * TargetCustServiceLevel."Deviation Factor Multiple";
                      Forecast.RoundValueForForecast(ProcUnit, ItemUsage."Safety Allowance Qty.");
                    END;
                  END;
                END ELSE BEGIN
                  ItemUsage."Mean Deviation Units" := 0;
                  ItemUsage."Safety Allowance Qty." := 0;
                END;
              END;
              // forecast deviation safety stock end
            END ELSE BEGIN
              UnusualUsageAdjTmp.INIT;
              UnusualUsageAdjTmp."Entry No." := ItemUsage."Entry No.";
              UnusualUsageAdjTmp."Location Code" := ItemUsage."Location Code";
              UnusualUsageAdjTmp."Item No." := ItemUsage."Item No.";
              UnusualUsageAdjTmp."Variant Code" := ItemUsage."Variant Code";
              UnusualUsageAdjTmp."Starting Date" := ItemUsage."Starting Date";
              UnusualUsageAdjTmp."Ending Date" := ItemUsage."Ending Date";
              IF ForecastByCustProcUnit THEN BEGIN
                UnusualUsageAdjTmp."Source No." := CurrCustomerNo;
                UnusualUsageAdjTmp."Period End Adjusted Usage" := ItemUsage."Period End Adjusted Usage";
              END ELSE
                UnusualUsageAdjTmp."Period End Adjusted Usage" :=
                  ItemUsage."Period End Adjusted Usage" - ItemUsage."Forecast Cust. Actual Usage";
              UnusualUsageAdjTmp."Usage Adjustment" := 0;
              UnusualUsageAdjTmp.Usage := UnusualUsageAdjTmp."Period End Adjusted Usage";
              IF InvMgmtSetup."Usage Start Date" <= UnusualUsageAdjTmp."Starting Date" THEN
                UnusualUsageAdjTmp.INSERT;
              AdjAveUsage := UnusualUsageAdjTmp."Period End Adjusted Usage";
              AdjYrPeriods := 1;
              AdjEntries := 1;
              SporadicAveUsage := UnusualUsageAdjTmp."Period End Adjusted Usage";
              SporadicHitPeriods := 1;
            END;

            ItemUsage."Periods With Sales" := 0;
            ItemUsage."Sporadic Ave. Usage Qty." := 0;
            ItemUsage."Sporadic Target Stock Level" := 0;

            ItemUsage."Periods With Sales" := AdjYrPeriods - AdjZeroEntries;
            // new item no usage
            IF AdjEntries = 0 THEN BEGIN
              ItemUsage.Status := ItemUsage.Status::New
              // add sporadic rule to update the PUC
            END ELSE IF
              // sporadic selection if not enough usage based on re-forecast and minimum formula periods
              AdjEntries < (FormulaMinPeriods + AdvForSetup."Periods to Re-Forecast") THEN BEGIN
                ItemUsage.Status := ItemUsage.Status::"L.T. Formula Req.";
                 // add sporadic rule WorkFlow
                CASE AdvForSetup."New Item Forecast Method" OF
                  AdvForSetup."New Item Forecast Method"::"Moving Average":
                    BEGIN
                      ItemUsage."Sporadic Ave. Usage Qty." := ItemUsage."Average Usage";
                      ItemUsage."Sporadic Target Stock Level" := ItemUsage."Average Usage";
                    END;
                  AdvForSetup."New Item Forecast Method"::"Sporadic Stock Qty.":
                    IF SporadicHitPeriods > 0 THEN BEGIN
                      ItemUsage."Sporadic Ave. Usage Qty." :=
                        SporadicAveUsage/SporadicHitPeriods;
                      IF ItemUsage."Sporadic Ave. Usage Qty." < 0 THEN
                        ItemUsage."Sporadic Ave. Usage Qty." := 0;
                    END;
                END;
              END
            ELSE IF
              // sporadic
              ((AdjYrPeriods < InvMgmtSetup."No. of Periods in a Year") AND
              ((AdjYrPeriods - AdjZeroEntries) < ROUND(
                (FormulaMinPeriods + AdvForSetup."Periods to Re-Forecast") * (AdvForSetup."Pct Year Per. Req. for Formula"),1.0))) OR
              ((AdjYrPeriods - AdjZeroEntries) < ROUND(
                InvMgmtSetup."No. of Periods in a Year" * (AdvForSetup."Pct Year Per. Req. for Formula"),1.0)) THEN BEGIN
                  ItemUsage.Status := ItemUsage.Status::Sporadic;
                  // add sporadic rule WorkFlow
                  IF SporadicHitPeriods > 0 THEN BEGIN
                    ItemUsage."Sporadic Ave. Usage Qty." :=
                      SporadicAveUsage/SporadicHitPeriods;
                    IF ItemUsage."Sporadic Ave. Usage Qty." < 0 THEN
                      ItemUsage."Sporadic Ave. Usage Qty." := 0;
                  END;
              END ELSE BEGIN
                ItemUsage.Status := ItemUsage.Status::Reoccuring;
                // add sporadic rule WorkFlow
              END;
            IF (AdvForSetup."Auto Adj. Unusual Usage") AND
               // zero usage in more than possible to get a formula then don't smooth the usage
               (AdjZeroEntries <= ROUND(AdjYrPeriods * (1-(AdvForSetup."Pct Year Per. Req. for Formula")),1.0)) AND
               (AdjEntries >= InvMgmtSetup."No. of Periods in a Year") THEN BEGIN
              AdjAveUsage := AdjAveUsage / (InvMgmtSetup."No. of Periods in a Year" - AdjZeroEntries);
              AdjMax := AdjAveUsage * (AdvForSetup."Max. Unusual Adj. %" / 100);
              AdjMin := AdjAveUsage * (AdvForSetup."Min. Unusual Adj. %" / 100);
              CLEAR(ModeAve);
              CLEAR(ModeAveCount);
              UnusualUsageAdjTmp.RESET;
              UnusualUsageAdjTmp.SETCURRENTKEY("Location Code","Item No.","Variant Code","Starting Date");
              UnusualUsageAdjTmp.SETRANGE("Location Code",ItemUsage."Location Code");
              UnusualUsageAdjTmp.SETRANGE("Item No.",ItemUsage."Item No.");
              UnusualUsageAdjTmp.SETRANGE("Variant Code",ItemUsage."Variant Code");
              IF ForecastByCustProcUnit THEN
                UnusualUsageAdjTmp.SETRANGE("Source No.",CurrCustomerNo)
              ELSE
                UnusualUsageAdjTmp.SETFILTER("Source No.",'=%1','');
              IF UnusualUsageAdjTmp.FINDSET THEN
                REPEAT
                  IF UnusualUsageAdjTmp."Period End Adjusted Usage" > AdjMax THEN BEGIN
                    UnusualUsageAdjTmp."Usage Adjustment" := AdjMax - UnusualUsageAdjTmp."Period End Adjusted Usage";
                    UnusualUsageAdjTmp.Usage := AdjMax;
                  END;
                  IF UnusualUsageAdjTmp."Period End Adjusted Usage" < AdjMin THEN BEGIN
                    UnusualUsageAdjTmp."Usage Adjustment" := AdjMin - UnusualUsageAdjTmp."Period End Adjusted Usage";
                    UnusualUsageAdjTmp.Usage := AdjMin;
                  END;
                  IF UnusualUsageAdjTmp."Usage Adjustment" <> 0 THEN BEGIN
                    Forecast.RoundValueForForecast(ProcUnit, UnusualUsageAdjTmp.Usage);
                    UnusualUsageAdjTmp.MODIFY;
                  END;
                  IF ((ItemUsage.Status = ItemUsage.Status::Sporadic) OR
                      (ItemUsage.Status = ItemUsage.Status::"L.T. Formula Req.")) THEN BEGIN
                    // get start date factor in leap year
                    StartingDate := GetPeriodStartDate(ItemUsage."Ending Date");
                    IF (UnusualUsageAdjTmp."Starting Date" >= StartingDate) THEN BEGIN
                    IF UnusualUsageAdjTmp.Usage <> 0 THEN BEGIN
                      i := 0;
                      ModeStored := FALSE;
                      REPEAT
                        i := i + 1;
                        IF ModeAve[i] = 0 THEN BEGIN
                          ModeAve[i] := UnusualUsageAdjTmp.Usage;
                          ModeAveCount[i] := ModeAveCount[i] + 1;
                          ModeStored := TRUE;
                        END ELSE BEGIN
                          IF ModeAve[i] = UnusualUsageAdjTmp.Usage THEN BEGIN
                            ModeAveCount[i] := ModeAveCount[i] + 1;
                            ModeStored := TRUE;
                          END;
                        END;
                      UNTIL ModeStored;
                      END;
                    END;
                  END;
                UNTIL UnusualUsageAdjTmp.NEXT = 0;
              IF (ItemUsage.Status = ItemUsage.Status::Sporadic) OR
                 (ItemUsage.Status = ItemUsage.Status::"L.T. Formula Req.") THEN BEGIN
                i := 0;
                ModeFinished := FALSE;
                ModeCount := 0;
                REPEAT
                  i := i + 1;
                  IF ModeAveCount[i] <> 0 THEN BEGIN
                    IF ModeAveCount[i] > ModeCount THEN BEGIN
                      ModeCount := ModeAveCount[i];
                      ModeSelected := i;
                    END;
                  END ELSE
                    ModeFinished := TRUE;
                UNTIL ModeFinished;
                IF ((ModeCount >= 1) AND (ModeSelected <> 0)) THEN BEGIN
                  IF (ItemUsage."Sporadic Ave. Usage Qty." < ModeAve[ModeSelected]) THEN
                    ItemUsage."Sporadic Ave. Usage Qty." := ModeAve[ModeSelected];
                END;
              END;
            END;

            IF NOT AdvForSetup."Check Sporadic Frozen Formula" THEN
              IF ((ItemUsage.Status = ItemUsage.Status::Sporadic) OR
                  (ItemUsage.Status = ItemUsage.Status::"L.T. Formula Req."))AND
                 (ProcUnit."Frozen Formula" <> '') AND
                 (ProcUnit."Frozen Formula Expiration Date" >= ItemUsage."Ending Date") THEN
                ItemUsage.Status := ItemUsage.Status::Reoccuring;

            IF (ItemUsage.Status = ItemUsage.Status::Sporadic) OR
               (ItemUsage.Status = ItemUsage.Status::"L.T. Formula Req.") THEN BEGIN
              ItemUsage."Sporadic Median Usage Qty." := CheckMedian;
              SporadicRuleCode := AdvForSetup."Def. Sporadic Rule";
              IF Location."Sporadic Rule" <> '' THEN
                SporadicRuleCode := Location."Sporadic Rule";
              IF ProcUnit."Sporadic Rule" <> '' THEN
                SporadicRuleCode := ProcUnit."Sporadic Rule";
              SporadicUsagePerMult.SETRANGE("Sporadic Code", SporadicRuleCode);
              SporadicUsagePerMult.SETFILTER("Min. Periods With Usage",'<=%1',SporadicHitPeriods);
              SporadicUsagePerMult.SETFILTER("Max. Periods With Usage",'>=%1',SporadicHitPeriods);
              IF NOT SporadicUsagePerMult.FINDFIRST THEN BEGIN
                SporadicUsagePerMult.SETRANGE("Max. Periods With Usage");
                IF NOT SporadicUsagePerMult.FINDLAST THEN
                  SporadicUsagePerMult.INIT;
              END;
              CASE AdvForSetup."Sporadic Base Calc. Method" OF
                AdvForSetup."Sporadic Base Calc. Method"::"Ave. of Per. With Sales":
                  ItemUsage."Sporadic Target Stock Level" :=
                    ItemUsage."Sporadic Ave. Usage Qty." * SporadicUsagePerMult."Usage Multiplier";
                AdvForSetup."Sporadic Base Calc. Method"::"Median Usage":
                  ItemUsage."Sporadic Target Stock Level" :=
                    ItemUsage."Sporadic Median Usage Qty." * SporadicUsagePerMult."Usage Multiplier";
              END;
              IF ProcUnit."Replenishment Source Type" = ProcUnit."Replenishment Source Type"::Location THEN BEGIN
                IF InvMgmtSetup."Roll Up Via Repl. Path" THEN
                  LeadTime := GetSourceUnitLeadTime(ProcUnit)
                ELSE
                  LeadTime := 0
              END ELSE
                LeadTime := UBP.CalcLeadTimeDays(ProcUnit);
              SporadicUsageLTMult.SETRANGE("Sporadic Code", SporadicRuleCode);
              SporadicUsageLTMult.SETFILTER("Min. Vendor Lead Time",'<=%1',LeadTime);
              SporadicUsageLTMult.SETFILTER("Max. Vendor Lead Time",'>=%1',LeadTime);
              IF SporadicUsageLTMult.FINDFIRST THEN BEGIN
                IF ItemUsage."Sporadic Target Stock Level" <> 0 THEN
                  CASE AdvForSetup."Sporadic Base Calc. Method" OF
                    AdvForSetup."Sporadic Base Calc. Method"::"Ave. of Per. With Sales":
                      ItemUsage."Sporadic Target Stock Level" :=
                        ItemUsage."Sporadic Target Stock Level" +
                             (ItemUsage."Sporadic Ave. Usage Qty." * SporadicUsageLTMult."Usage Multiplier");
                    AdvForSetup."Sporadic Base Calc. Method"::"Median Usage":
                      ItemUsage."Sporadic Target Stock Level" :=
                        ItemUsage."Sporadic Target Stock Level" +
                             (ItemUsage."Sporadic Median Usage Qty." * SporadicUsageLTMult."Usage Multiplier");
                  END;
              END;
              IF ItemUsage."Sporadic Target Stock Level" < 0 THEN
                ItemUsage."Sporadic Target Stock Level" := 0;

              Forecast.RoundValueForForecast(ProcUnit, ItemUsage."Sporadic Target Stock Level");

            END ELSE BEGIN
              UnusualUsageAdjTmp.RESET;
              UnusualUsageAdjTmp.SETCURRENTKEY(
                "Location Code","Item No.","Variant Code","Starting Date","Ending Date");
              UnusualUsageAdjTmp.ASCENDING(FALSE);
              UnusualUsageAdjTmp.SETRANGE("Location Code",ItemUsage."Location Code");
              UnusualUsageAdjTmp.SETRANGE("Item No.",ItemUsage."Item No.");
              UnusualUsageAdjTmp.SETRANGE("Variant Code",ItemUsage."Variant Code");
              IF ForecastByCustProcUnit THEN
                UnusualUsageAdjTmp.SETRANGE("Source No.",CurrCustomerNo)
              ELSE
                UnusualUsageAdjTmp.SETFILTER("Source No.",'=%1','');
              IF UnusualUsageAdjTmp.FIND('-') THEN BEGIN
                UsagePeriod := 0;
                REPEAT
                  UsagePeriod := UsagePeriod + 1;
                  NetUsage[UsagePeriod] := UnusualUsageAdjTmp.Usage;
                  NetUnSmoothedUsage[UsagePeriod] := UnusualUsageAdjTmp."Period End Adjusted Usage";
                UNTIL (UnusualUsageAdjTmp.NEXT = 0) OR
                      (UsagePeriod = FormulaMaxPeriods);

                LastUsagePeriod := UsagePeriod;
                FormulaTmp.RESET;
                FormulaTmp.SETRANGE(Released,TRUE);
                FormulaTmp.SETRANGE(External, FALSE);  // filter out external for our selection
                FormulaTmp.SETFILTER("Formula Periods",'<=%1',LastUsagePeriod - AdvForSetup."Periods to Re-Forecast");

                IF (ProcUnit."Frozen Formula Group" <> '') AND
                   (ProcUnit."Frozen Formula Group Exp. Date" >= ItemUsage."Ending Date") THEN
                  IF FormulaGroup.GET(ProcUnit."Frozen Formula Group") THEN
                    IF FormulaGroup."Minimum Formula Periods" <= (LastUsagePeriod - AdvForSetup."Periods to Re-Forecast") THEN
                      FormulaTmp.SETRANGE("Formula Group Code",ProcUnit."Frozen Formula Group");

                IF (ProcUnit."Frozen Formula" <> '') AND
                   (ProcUnit."Frozen Formula Expiration Date" >= ItemUsage."Ending Date") THEN BEGIN
                  IF FormulaTmp.GET(ProcUnit."Frozen Formula") THEN BEGIN
                    // allow frozen even if periods have not been established
                    //IF FormulaTmp."Formula Periods" <= (LastUsagePeriod - AdvForSetup."Periods to Re-Forecast") THEN BEGIN
                      FormulaTmp.SETRANGE("Formula Periods");
                      FormulaTmp.SETRANGE(Released);
                      FormulaTmp.SETRANGE("Formula Group Code");
                      FormulaTmp.SETRANGE(Code, ProcUnit."Frozen Formula");
                      // buffer frozen external to process after internal processes are complete
                      IF FormulaTmp.External THEN BEGIN
                          // store buffer for pucs to qualify
                      END;
                  END;
                END;

                // Calc each period group (PerGroup)
                ForecastBuffer.RESET;
                ForecastBuffer.DELETEALL;
                PerGroup := 0;
                REPEAT
                  IF FormulaTmp.FINDSET THEN BEGIN
                    REPEAT
                      IF NOT FormulaTmp.External THEN BEGIN
                        FormulaPeriodTmp.SETRANGE("Formula Code",FormulaTmp.Code);
                        FormulaPeriodTmp.FINDSET;
                        ForError := 0;
                        ForPeriods := 0;
                        ForTrendPeriods := 0;
                        ForTotTrend := 0;
                        ForTotWeight := 0;
                        ForTotWeightedUsage := 0;
                        ForUsageTrend := 0;
                        ForUsageNoTrend := 0;
                        ForUsageEnd := 1;
                        CLEAR(IncTrend);
                        LowPeriod := 0;
                        HighPeriod := 0;
                        SeasonCYUsage := 0;
                        SeasonPYUsage := 0;
                        IF FormulaTmp."Exclude Low Usage Period" OR FormulaTmp."Exclude High Usage Period" THEN
                          BEGIN
                            LowPeriod := 0;
                            HighPeriod := 0;
                            HighUsage := 0;
                            LowUsage := 999999999;
                            FormulaPeriodTmp.FINDSET;
                            ForPerCount := 1;
                            REPEAT
                              IF FormulaTmp."Exclude Low Usage Period" THEN
                                IF LowUsage > GetUsage(ForPerCount + PerGroup) THEN BEGIN
                                  LowUsage := GetUsage(ForPerCount + PerGroup);
                                  LowPeriod := ForPerCount;
                                END;
                              IF FormulaTmp."Exclude High Usage Period" THEN
                                IF HighUsage < GetUsage(ForPerCount + PerGroup) THEN BEGIN
                                  HighUsage := GetUsage(ForPerCount + PerGroup);
                                  HighPeriod := ForPerCount;
                                END;
                              IF ForPerCount < FormulaTmp."Formula Periods" THEN
                                FormulaPeriodTmp.NEXT;
                              ForPerCount := ForPerCount + 1;
                            UNTIL ForPerCount > FormulaTmp."Formula Periods";
                          END;
                        FormulaPeriodTmp.FINDSET;
                        ForPeriods := 0;
                        REPEAT
                          ForPeriods := ForPeriods + 1;
                          IF (ForPeriods <> LowPeriod) AND (ForPeriods <> HighPeriod) THEN BEGIN
                            IF FormulaPeriodTmp."Include In Trend" THEN
                              ForTrendPeriods := ForTrendPeriods + 1;
                            IF FormulaTmp."Exclude Zero Usage Periods" THEN BEGIN
                              IF NetUnSmoothedUsage[ForPeriods + PerGroup] <> 0 THEN BEGIN
                                ForTotWeight := ForTotWeight + FormulaPeriodTmp.Weight;
                                ForTotWeightedUsage :=
                                  ForTotWeightedUsage + (FormulaPeriodTmp.Weight * NetUnSmoothedUsage[ForPeriods + PerGroup]);
                              END;
                            END ELSE BEGIN
                              ForTotWeight := ForTotWeight + FormulaPeriodTmp.Weight;
                              ForTotWeightedUsage :=
                                ForTotWeightedUsage + (FormulaPeriodTmp.Weight * GetUsage(ForPeriods + PerGroup));
                              IF FormulaPeriodTmp."Include In Trend" THEN
                                IncTrend[ForPeriods] := TRUE;
                            END;
                          END;
                          CASE FormulaPeriodTmp."Seasonal Trend" OF
                            FormulaPeriodTmp."Seasonal Trend"::"Prior Season":
                              BEGIN
                                SeasonPYUsage := SeasonPYUsage + GetUsage(ForPeriods + PerGroup);
                              END;
                            FormulaPeriodTmp."Seasonal Trend"::"Curr. Season":
                              BEGIN
                                SeasonCYUsage := SeasonCYUsage + GetUsage(ForPeriods + PerGroup);
                              END;
                          END;
                          ForEnd := FormulaPeriodTmp.NEXT;
                          IF ForEnd <> 0 THEN
                            IF ForPeriods = LastUsagePeriod THEN BEGIN
                              ForEnd := 0;
                              ForUsageEnd := 0;
                            END;
                        UNTIL ForEnd = 0;

                        ForecastBuffer.INIT;
                        ForecastBuffer."Formula Code" := FormulaTmp.Code;
                        ForecastBuffer.Period := PerGroup;

                        IF (ForUsageEnd <> 0) THEN BEGIN
                          // Calc Seasonal Trend
                          IF (SeasonCYUsage <> 0) AND (SeasonPYUsage <> 0) THEN BEGIN
                            SeasonTrendPct := (SeasonCYUsage - SeasonPYUsage) / SeasonPYUsage;
                            ForecastBuffer."Seasonal Trend" := SeasonTrendPct * 100;
                            IF ForecastBuffer."Seasonal Trend" > AdvForSetup."Max. Seasonal Trend %" THEN
                              ForecastBuffer."Seasonal Trend" := AdvForSetup."Max. Seasonal Trend %";
                            IF ForecastBuffer."Seasonal Trend" < (AdvForSetup."Max. Seasonal Trend %" * -1) THEN
                              ForecastBuffer."Seasonal Trend" := AdvForSetup."Max. Seasonal Trend %" * -1;
                            ForUsageNoTrend := ForUsageNoTrend + (ForUsageNoTrend * (ForecastBuffer."Seasonal Trend" / 100));
                          END ELSE
                            SeasonTrendPct := 0;
                        END;

                        IF (ForUsageEnd <> 0) AND
                            (ForTotWeightedUsage <> 0) THEN BEGIN
                          ForUsageNoTrend := ForTotWeightedUsage / ForTotWeight;
                          // Calc Seasonal Trend
                          IF (SeasonCYUsage <> 0) AND (SeasonPYUsage <> 0) THEN BEGIN
                            SeasonTrendPct := (SeasonCYUsage - SeasonPYUsage) / SeasonPYUsage;
                            ForecastBuffer."Seasonal Trend" := SeasonTrendPct * 100;
                            IF ForecastBuffer."Seasonal Trend" > AdvForSetup."Max. Seasonal Trend %" THEN
                              ForecastBuffer."Seasonal Trend" := AdvForSetup."Max. Seasonal Trend %";
                            IF ForecastBuffer."Seasonal Trend" < (AdvForSetup."Max. Seasonal Trend %" * -1) THEN
                              ForecastBuffer."Seasonal Trend" := AdvForSetup."Max. Seasonal Trend %" * -1;
                          END ELSE
                            SeasonTrendPct := 0;

                          ForUsageNoTrend := ForUsageNoTrend + (ForUsageNoTrend * (ForecastBuffer."Seasonal Trend" / 100));

                          // Calc Non Seasonal Trend % begin
                          i := 0;
                          TrendFail := FALSE;
                          TrendPeriods := 0;
                          ForTotTrend := 0;
                          Trend.DELETEALL;
                          REPEAT
                            i := i + 1;
                            IF IncTrend[i] THEN
                              IF (GetUsage(i + PerGroup) <> 0) AND (GetUsage(i + PerGroup + 1) <> 0) THEN BEGIN
                                Trend."Trend Percent" :=
                                  (GetUsage(i + PerGroup) - GetUsage(i + PerGroup + 1)) / GetUsage(i + PerGroup + 1);
                                TrendPeriods := TrendPeriods + 1;
                                Trend.Period := TrendPeriods;
                                Trend.INSERT;
                              END ELSE
                                TrendFail := TRUE;
                          UNTIL i >= ForPeriods;
                          Trend.RESET;
                          Trend.SETCURRENTKEY(Trend."Trend Percent");
                          IF Trend.FINDSET THEN BEGIN
                            BaseTrend := Trend."Trend Percent";
                            IF BaseTrend < 0 THEN BEGIN
                              REPEAT
                                IF Trend."Trend Percent" >= 0 THEN
                                  TrendFail := TRUE;
                              UNTIL Trend.NEXT = 0;
                            END ELSE
                              REPEAT
                                IF Trend."Trend Percent" <= 0 THEN
                                  TrendFail := TRUE;
                              UNTIL Trend.NEXT = 0;
                          END ELSE
                            TrendFail := TRUE;

                          // Find Mean
                          IF NOT TrendFail THEN BEGIN
                            ForTrendPct := 0;
                            j := 0;
                            Trend.RESET;
                            IF Trend.FINDSET THEN
                              REPEAT
                                ForTrendPct := ForTrendPct + Trend."Trend Percent";
                                j := j + 1;
                              UNTIL Trend.NEXT = 0;
                            ForTrendPct := ForTrendPct / j;
                          END ELSE
                            ForTrendPct := 0;

                          ForUsageTrend := ForUsageNoTrend + (ForUsageNoTrend * ForTrendPct);
                          ForecastBuffer."Error Units Trend" := ABS(GetUsage(1 + PerGroup) - ForUsageTrend);
                          ForecastBuffer."Error Units No Trend" := ABS(GetUsage(1 + PerGroup) - ForUsageNoTrend);
                        END;
                        ForecastBuffer."Net Usage" := (GetUsage(1 + PerGroup));

                        IF ForTotWeight <> 0 THEN
                          ForecastBuffer."Weighted Average" := ForTotWeightedUsage / ForTotWeight
                        ELSE
                          ForecastBuffer."Weighted Average" := 0;

                        // use trend usage or net usage for the error units calculations
                        // Error Units Trend is less than Error Units no trend then
                          // If Trend usage is less than net usage use the trend else use either the smoothed or unsmoothed
                        // Error Units Trend greater Error Units no trend then
                          // If No Trend usage is less than net usage use the trend else use either the smoothed or unsmoothed usage

                        IF (ForecastBuffer."Error Units Trend" < ForecastBuffer."Error Units No Trend") THEN BEGIN
                          IF ForUsageTrend < ForecastBuffer."Net Usage" THEN
                            Divisor := ForUsageTrend
                          ELSE
                            Divisor := ForecastBuffer."Net Usage";
                          ForecastBuffer."Re-Forecast Error Units" := ForecastBuffer."Error Units Trend";
                          IF Divisor <> 0 THEN
                            ForecastBuffer."Re-Forecast Error %" :=
                              (ForecastBuffer."Re-Forecast Error Units" / Divisor) * 100
                          ELSE
                            ForecastBuffer."Re-Forecast Error %" := 0;
                          ForecastBuffer."Re-Forecast Usage" := ForUsageTrend;
                          ForecastBuffer."Re-Forecast Usage Per Day" :=
                            ForecastBuffer."Re-Forecast Usage" /
                              (InvLocPeriod."Ending Date" - InvLocPeriod."Starting Date" + 1);
                          ForecastBuffer."Re-Forecast Trend % Used" := ForTrendPct * 100;
                        END ELSE BEGIN
                          IF ForUsageNoTrend < ForecastBuffer."Net Usage" THEN
                            Divisor := ForUsageNoTrend
                          ELSE
                            Divisor := ForecastBuffer."Net Usage";
                          ForecastBuffer."Re-Forecast Error Units" := ForecastBuffer."Error Units No Trend";
                          IF Divisor <> 0 THEN
                            ForecastBuffer."Re-Forecast Error %" :=
                              (ForecastBuffer."Re-Forecast Error Units" / Divisor) * 100
                          ELSE
                            ForecastBuffer."Re-Forecast Error %" := 0;
                          ForecastBuffer."Re-Forecast Usage" := ForUsageNoTrend;
                          ForecastBuffer."Re-Forecast Usage Per Day" :=
                            ForecastBuffer."Re-Forecast Usage" /
                              (InvLocPeriod."Ending Date" - InvLocPeriod."Starting Date" + 1);
                          ForecastBuffer."Re-Forecast Trend % Used" := 0;
                        END;

                        ForecastBuffer.INSERT;
                        IF ProcUnit."Track All Formula Calculations" THEN
                          SaveFormulaDetail(ForecastBuffer,1);
                      END ELSE BEGIN
                      END;
                    UNTIL FormulaTmp.NEXT = 0;
                  END;
                  PerGroup := PerGroup + 1;
                UNTIL PerGroup > AdvForSetup."Periods to Re-Forecast";


                // Calc Forecast Error Percent
                ForecastBuffer.RESET;
                ForecastBuffer.ASCENDING(FALSE);
                IF ForecastBuffer.FINDSET THEN
                  REPEAT
                    IF ForecastBuffer.Period = AdvForSetup."Periods to Re-Forecast" THEN BEGIN
                      ForecastUsagePre := ForecastBuffer."Re-Forecast Usage";
                      IF ProcUnit."Track All Formula Calculations" THEN
                        SaveFormulaDetail(ForecastBuffer,2);
                    END ELSE BEGIN
                      ForecastBuffer."Current Per. For. Usage" := ForecastUsagePre;
                      ForecastUsagePre := ForecastBuffer."Re-Forecast Usage";
                      ForecastBuffer."Current Per. For. Error Units" :=
                        ABS(ForecastBuffer."Current Per. For. Usage" - ForecastBuffer."Net Usage");
                      Divisor := 0;
                      ForecastBuffer."Current Per. For. Error %" := 0;
                      CASE TRUE OF
                        (ForecastBuffer."Net Usage" = 0) AND (ForecastBuffer."Current Per. For. Usage" = 0):
                        BEGIN
                          ForecastBuffer."Current Per. For. Error %" := 0;
                        END;
                        (ForecastBuffer."Net Usage" = 0) AND (ForecastBuffer."Current Per. For. Usage" > 0):
                        BEGIN
                          ForecastBuffer."Current Per. For. Error %" := 100;
                        END;
                        (ForecastBuffer."Net Usage" > 0) AND (ForecastBuffer."Current Per. For. Usage" = 0):
                        BEGIN
                          ForecastBuffer."Current Per. For. Error %" := 100;
                        END;
                        ELSE BEGIN
                          IF ForecastBuffer."Net Usage" < ForecastBuffer."Current Per. For. Usage" THEN
                            Divisor := ForecastBuffer."Net Usage"
                          ELSE
                            Divisor := ForecastBuffer."Current Per. For. Usage";
                          IF Divisor <> 0 THEN
                            ForecastBuffer."Current Per. For. Error %" :=
                              ABS(ForecastBuffer."Current Per. For. Error Units" / Divisor) * 100
                        END;
                      END;
                      // To-Do: set a min/max forecast error due to smoothed usage
                      ForecastBuffer.MODIFY;
                      IF ProcUnit."Track All Formula Calculations" THEN
                        SaveFormulaDetail(ForecastBuffer,2);
                    END;
                  UNTIL ForecastBuffer.NEXT = 0;

                // Find Mean and Median Forecast Error for Each Formula
                ForecastBuffer.RESET;
                ForecastBuffer.ASCENDING(TRUE);
                ForecastBuffer.SETFILTER(Period,'<>%1',AdvForSetup."Periods to Re-Forecast");
                IF ForecastBuffer.FIND('-') THEN BEGIN
                  ForSelFormula := '';
                  ForSelMedianErrPct := 999999999;
                  ForSelMeanErrPct := 0;
                  IF FormulaTmp.FINDSET THEN
                    REPEAT
                      ForecastBuffer.RESET;
                      ForecastBuffer.SETCURRENTKEY("Formula Code",ForecastBuffer."Current Per. For. Error %");
                      ForecastBuffer.SETFILTER(Period,'<>%1',AdvForSetup."Periods to Re-Forecast");
                      ForecastBuffer.SETRANGE("Formula Code",FormulaTmp.Code);
                      ForecastBuffer.CALCSUMS("Current Per. For. Error %");
                      ForMeanErrPct := ForecastBuffer."Re-Forecast Error %" / AdvForSetup."Periods to Re-Forecast";
                      IF ForecastBuffer.FINDSET THEN BEGIN
                        IF AdvForSetup."Periods to Re-Forecast" MOD 2 = 0 THEN BEGIN
                          Steps := ((AdvForSetup."Periods to Re-Forecast" / 2) -1);
                          IF Steps <> 0 THEN
                            ForecastBuffer.NEXT(Steps);
                          ForMedianErrPct := ForecastBuffer."Current Per. For. Error %";
                          ForecastBuffer.NEXT;
                          ForMedianErrPct := (ForMedianErrPct + ForecastBuffer."Current Per. For. Error %") / 2;
                        END ELSE BEGIN
                          IF AdvForSetup."Periods to Re-Forecast" > 1 THEN BEGIN
                            Steps := ROUND(AdvForSetup."Periods to Re-Forecast" / 2,1,'<');
                            ForecastBuffer.NEXT(Steps);
                            ForMedianErrPct := ForecastBuffer."Current Per. For. Error %";
                          END ELSE BEGIN
                            IF AdvForSetup."Periods to Re-Forecast" = 1 THEN BEGIN
                              ForMedianErrPct := ForecastBuffer."Current Per. For. Error %";
                            END;
                          END;
                        END;
                        IF ForMedianErrPct < ForSelMedianErrPct THEN BEGIN
                          ForSelMedianErrPct := ForMedianErrPct;
                          ForSelMeanErrPct := ForMeanErrPct;
                          ForSelFormula := ForecastBuffer."Formula Code";
                        END;
                      END;
                      IF (ProcUnit."Track All Formula Calculations") OR (ExternalForecastActive) THEN
                        SaveFormulaDetail(ForecastBuffer,3);
                    UNTIL FormulaTmp.NEXT = 0;

                  ForecastBuffer.GET(ForSelFormula,0);
                  ItemUsage."Re-For. Seasonal Trend %" := ForecastBuffer."Seasonal Trend";
                  ItemUsage."Re-For. Formula" := ForecastBuffer."Formula Code";
                  // Smooth Single Loc. Usage >>
                  IF (AdvForSetup."Auto Adj. Unusual Usage") THEN
                    SmoothSingleLocUsage(ItemUsage."Re-For. Formula", CurrCustomerNo, ItemUsage,ProcUnit);
                  // Smooth Singel Loc. Usage <<
                  IF ForecastBuffer."Error Units Trend" < ForecastBuffer."Error Units No Trend" THEN BEGIN
                    ItemUsage."Re-For. Non Seasonal Trend %" := ForecastBuffer."Re-Forecast Trend % Used";
                    ItemUsage."Re-For. Usage" := ForecastBuffer."Re-Forecast Usage";
                    ItemUsage."Re-For. Usage Per Day" := ForecastBuffer."Re-Forecast Usage Per Day";
                    ItemUsage."Re-For. Median Error %" := ForSelMedianErrPct;
                  END ELSE BEGIN
                    ItemUsage."Re-For. Non Seasonal Trend %" := 0;
                    ItemUsage."Re-For. Usage" := ForecastBuffer."Re-Forecast Usage";
                    ItemUsage."Re-For. Usage Per Day" := ForecastBuffer."Re-Forecast Usage Per Day";
                    ItemUsage."Re-For. Median Error %" := ForSelMedianErrPct;
                  END;
                  IF (ProcUnit."Track All Formula Calculations") OR (ExternalForecastActive) THEN
                    SaveFormulaDetail(ForecastBuffer,4);
                END;
              END;
            END;
          END;
          // Choose formula end

          // Calc Order Point and Line Point - Begin
          ItemUsage."Order Point" := 0;
          ItemUsage."Line Point" := 0;
          ItemUsage."Calc. Lead Time (Days)" := UBP.CalcLeadTimeDays(ProcUnit);

          // Determine Forecast Period
          ItemUsage."Forecast Horizon Period" := 0;
          ForDays := 0;
          IF ItemUsage."Calc. Lead Time (Days)" <> 0 THEN BEGIN
            InvLocPeriod1.RESET;
            InvLocPeriod1.FINDSET;
            REPEAT
              ForPeriodDays := ForecastPeriodDays;
              ForDays := ForDays + ForPeriodDays;
              ItemUsage."Forecast Horizon Period" := ItemUsage."Forecast Horizon Period" + 1;
              CustForcPerStartDate := InvLocPeriod1."Starting Date";
              CustForcPerEndDate := InvLocPeriod1."Ending Date";
              InvLocPeriod1.NEXT;
            UNTIL ForDays >= ItemUsage."Calc. Lead Time (Days)";
          END ELSE
            ItemUsage."Forecast Horizon Period" := 1;
          // Determine Forecast Period end

          CASE ForecastModel OF
            ForecastModel::UBP:
              BEGIN
                ItemUsage."Forecast Usage" := ItemUsage."Average Usage";
                ItemUsage."Forecast Usage Per Day" := ItemUsage."Average Usage Per Day";
              END;
            ForecastModel::"Adv. For.":
              BEGIN
                IF (ItemUsage."Re-For. Non Seasonal Trend %" <> 0) AND
                   (ItemUsage."Forecast Horizon Period" > 1) THEN
                  ItemUsage."Forecast Usage" :=
                    ItemUsage."Re-For. Usage" +
                    (ItemUsage."Re-For. Usage" * (ItemUsage."Re-For. Non Seasonal Trend %" *
                    (ItemUsage."Forecast Horizon Period" - 1)) / 100)
                ELSE
                  ItemUsage."Forecast Usage" := ItemUsage."Re-For. Usage";
                ItemUsage."Forecast Days" := ForecastPeriodDays;
                ItemUsage."Forecast Usage Per Day" := ItemUsage."Forecast Usage" / ForecastPeriodDays;

                UpdateCalcLine(
                  STRSUBSTNO(
                    Text023,ROUND(ItemUsage."Period End Adjusted Usage",0.01)),CurrCustomerNo);
                UpdateCalcLine(
                  STRSUBSTNO(
                    Text024,ItemUsage."Re-For. Formula"),CurrCustomerNo);
                UpdateCalcLine(
                  STRSUBSTNO(
                    Text025,
                    ROUND(ItemUsage."Forecast Usage",0.00001),
                    ROUND(ItemUsage."Forecast Usage Per Day",0.00001),
                    ROUND(ItemUsage."Forecast Horizon Period",1.0)),CurrCustomerNo);
              END;
            ForecastModel::"Adv. and Cust. For.":
              BEGIN
                IF (ItemUsage."Re-For. Non Seasonal Trend %" <> 0) AND
                   (ItemUsage."Forecast Horizon Period" > 1) THEN BEGIN
                  ItemUsage."Forecast Usage" :=
                    ItemUsage."Re-For. Usage" +
                    (ItemUsage."Re-For. Usage" *
                    ((ItemUsage."Re-For. Non Seasonal Trend %" * (ItemUsage."Forecast Horizon Period" - 1)) / 100))
                END ELSE
                  ItemUsage."Forecast Usage" := ItemUsage."Re-For. Usage";
                ItemUsage."Forecast Days" := ForecastPeriodDays;
                ItemUsage."Forecast Usage Per Day" := ItemUsage."Forecast Usage" / ForecastPeriodDays;
                IF NOT ForecastByCustProcUnit THEN BEGIN
                  UpdateCalcLine(
                    STRSUBSTNO(
                      Text023,ROUND(ItemUsage."Period End Adjusted Usage",0.01)),CurrCustomerNo);
                  IF ItemUsage."Re-For. Formula" <> '' THEN
                    UpdateCalcLine(
                      STRSUBSTNO(
                        Text024,ItemUsage."Re-For. Formula"),CurrCustomerNo)
                  ELSE
                    UpdateCalcLine(
                      STRSUBSTNO(
                        Text039,
                          ROUND(ItemUsage."Sporadic Target Stock Level",0.01)),CurrCustomerNo);
                END;
              END;
            ForecastModel::"Cust. For.":
              BEGIN
                ItemUsage."Forecast Usage" := ItemUsage."Net Average Usage";
                ItemUsage."Forecast Days" := ForecastPeriodDays;
                ItemUsage."Forecast Usage Per Day" :=
                  ItemUsage."Forecast Usage" / ForecastPeriodDays;
                UpdateCalcLine(
                  STRSUBSTNO(
                    Text028,
                    ROUND(ItemUsage."Forecast Usage",0.00001),
                    ROUND(ItemUsage."Net Average Usage",0.00001),
                    ROUND(ItemUsage."Customer Forecast",0.01)),CurrCustomerNo);
              END;
          END;

          IF NOT ForecastByCustProcUnit THEN BEGIN
            ItemUsage."Calc. Safety Allowance %" := InvMgmtSetup."Safety Allowance %";
            IF (ProcUnit."Frozen Safety Expiration Date" >= CurrLocInvPeriod."Ending Date") AND
               (ProcUnit."Frozen Safety Allowance %" <> 0)
            THEN
              ItemUsage."Calc. Safety Allowance %" := ProcUnit."Frozen Safety Allowance %";
            IF (ProcUnit."Frozen Usage Expiration Date" >= CurrLocInvPeriod."Ending Date") AND
               (ProcUnit."Frozen Usage per Day" <> 0)
            THEN BEGIN
              ItemUsage."Calc. Average Usage Per Day" := ProcUnit."Frozen Usage per Day";
              UsageIsFrozen := TRUE;
            END ELSE BEGIN
              ItemUsage."Calc. Average Usage Per Day" := ItemUsage."Forecast Usage Per Day";
              UsageIsFrozen := FALSE;
            END;

            ItemUsage."Adj. After Close" := FALSE;
            ItemUsage."Item Class Ranking" := 0;
            ItemUsage."Nonstock Unit" := ProcUnit."Nonstock Unit";
            ItemUsage."Include Drop Ship Usage" := ProcUnit."Include Drop Ship Usage";

            CheckForReview;
          END;

          IF ((ItemUsage.Status = ItemUsage.Status::Sporadic) OR
              (ItemUsage.Status = ItemUsage.Status::"L.T. Formula Req."))AND
             (InvMgmtSetup."Roll Up Via Repl. Path") AND
             (ProcUnit."Nonstock Unit")
            THEN BEGIN
              UpdateCalcLine(STRSUBSTNO(Text040,ItemUsage."Sporadic Target Stock Level"),CurrCustomerNo);
              ItemUsage."Sporadic Target Stock Level" := 0;
            END;

          ItemUsageTemp.COPY(ItemUsage);
          ItemUsageTemp.INSERT;

          WindowProcCount := WindowProcCount + 1;
          IF DispProgress THEN
            IF WindowProcCount MOD 50 = 0 THEN
              Window.UPDATE(4,ROUND(10000 * (WindowProcCount / WindowTotalCount),1));
        END;
        UNTIL ProcUnitPrim.NEXT = 0;

      IF DispProgress THEN
        Window.UPDATE(4,10000);

      IF DispProgress THEN
        Window.UPDATE(5,10000);

      WindowProcCount := 0;

      ProcUnitTemp.RESET;
      IF DispProgress THEN
        WindowTotalCount := ProcUnitTemp.COUNT;

      IF ProcUnitTemp.FINDSET THEN
        REPEAT
          IF ProcUnit.GET(
            ProcUnitTemp."Location Code",ProcUnitTemp."Item No.",ProcUnitTemp."Variant Code") THEN BEGIN
            ProcUnit.COPY(ProcUnitTemp);
            IF ProcUnit."Replenishment Source Type" <> ProcUnit."Replenishment Source Type"::" " THEN
              ProcUnit.VALIDATE("Replenishment Source Code",ProcUnit."Replenishment Source Code");
            ProcUnit.MODIFY;
          END ELSE BEGIN
            ProcUnit.COPY(ProcUnitTemp);
            ProcUnit.SetAutoInsert;
            ProcUnit.VALIDATE("Replenishment Source Code",ProcUnit."Replenishment Source Code");
            ProcUnit.INSERT(TRUE);
            CreateProcUnit.CheckReplPath(ProcUnit);
          END;

          WindowProcCount := WindowProcCount + 1;
          IF DispProgress THEN
            IF WindowProcCount MOD 50 = 0 THEN
              Window.UPDATE(8,ROUND(10000 * (WindowProcCount / WindowTotalCount),1));
        UNTIL ProcUnitTemp.NEXT = 0;

      IF DispProgress THEN
        Window.UPDATE(8,10000);

      // Update Item Usage Table
      WindowProcCount := 0;
      ItemUsageTemp.RESET;

      IF DispProgress THEN
        WindowTotalCount := ItemUsageTemp.COUNT;

      IF ItemUsageTemp.FINDSET THEN
        REPEAT
          ItemUsage.COPY(ItemUsageTemp);
          ItemUsage.MODIFY;
          WindowProcCount := WindowProcCount + 1;
          IF DispProgress THEN
            IF WindowProcCount MOD 50 = 0 THEN
              Window.UPDATE(9,ROUND(10000 * (WindowProcCount / WindowTotalCount),1));
        UNTIL ItemUsageTemp.NEXT = 0;

      IF DispProgress THEN
        Window.UPDATE(9,10000);

      // write formula detail if reforecasting and tracking formula
      IF (ForecastByProcUnit) AND
         (ProcUnit."Track All Formula Calculations" OR ExternalForecastActive)
       THEN BEGIN
        // Write Formula Detail
        IF (ForecastModel = ForecastModel::"Adv. For.") OR
           (ForecastModel = ForecastModel::"Adv. and Cust. For.")THEN BEGIN
          FormulaDetail.RESET;
          FormulaDetail.SETRANGE("Location Code",CurrLocInvPeriod."Location Code");
          FormulaDetail.SETRANGE("Item No.", ProcUnit."Item No.");
          FormulaDetail.SETRANGE("Variant Code", ProcUnit."Variant Code");
          IF NOT FormulaDetail.ISEMPTY THEN
            FormulaDetail.DELETEALL;
          IF DispProgress THEN
            WindowTotalCount := FormulaDetailTmp.COUNT;
          IF FormulaDetailTmp.FINDSET THEN BEGIN
            WindowProcCount := 0;
            REPEAT
              FormulaDetail.COPY(FormulaDetailTmp);
              FormulaDetail.INSERT;
              WindowProcCount := WindowProcCount + 1;
              IF DispProgress THEN
                IF WindowProcCount MOD 50 = 0 THEN
                  Window.UPDATE(12,ROUND(10000 * (WindowProcCount / WindowTotalCount),1));
            UNTIL FormulaDetailTmp.NEXT = 0;
          END;
        END;
      END;

      IF (NOT ForecastByCustProcUnit) AND (NOT ForecastByProcUnit) THEN BEGIN
        // Write Calculation Line
        WindowProcCount := 0;
        CalcLineTmp.RESET;
        IF CalcLineTmp.FINDSET THEN BEGIN
          CalcLine.SETRANGE("Location Code",CurrLocInvPeriod."Location Code");
          CalcLine.DELETEALL;
          IF DispProgress THEN
            WindowTotalCount := CalcLineTmp.COUNT;
          REPEAT
            IF (CalcLine."Location Code" <> CalcLineTmp."Location Code") OR
               (CalcLine."Item No." <> CalcLineTmp."Item No.") OR
               (CalcLine."Variant Code" <> CalcLineTmp."Variant Code") THEN
              CalcLineNo := 0;
            CalcLine.COPY(CalcLineTmp);
            CalcLineNo := CalcLineNo + 1;
            CalcLine."Line No." := CalcLineNo;
            CalcLine.INSERT;
            WindowProcCount := WindowProcCount + 1;
            IF DispProgress THEN
              IF WindowProcCount MOD 50 = 0 THEN
                Window.UPDATE(10,ROUND(10000 * (WindowProcCount / WindowTotalCount),1));
          UNTIL CalcLineTmp.NEXT = 0;
        END;

        IF DispProgress THEN
          Window.UPDATE(10,10000);

        // Write Item Review Lines
        WindowProcCount := 0;
        UsageRevLine.SETRANGE("Location Code",Location.Code);
        UsageRevLine.DELETEALL;
        UsageRevLineTemp.RESET;
        IF DispProgress THEN
          WindowTotalCount := UsageRevLineTemp.COUNT;
        IF UsageRevLineTemp.FINDSET THEN
          REPEAT
            UsageRevLine.COPY(UsageRevLineTemp);
            UsageRevLine.INSERT;
            WindowProcCount := WindowProcCount + 1;
            IF DispProgress THEN
              IF WindowProcCount MOD 50 = 0 THEN
                Window.UPDATE(11,ROUND(10000 * (WindowProcCount / WindowTotalCount),1));
          UNTIL UsageRevLineTemp.NEXT = 0;
        IF DispProgress THEN
          Window.UPDATE(11,10000);

        // Write Formula Detail
        IF (ForecastModel = ForecastModel::"Adv. For.") OR
           (ForecastModel = ForecastModel::"Adv. and Cust. For.")THEN BEGIN
          FormulaDetail.RESET;
          FormulaDetail.SETRANGE("Location Code",CurrLocInvPeriod."Location Code");
          IF NOT FormulaDetail.ISEMPTY THEN
            FormulaDetail.DELETEALL;
          IF DispProgress THEN
            WindowTotalCount := FormulaDetailTmp.COUNT;
          IF FormulaDetailTmp.FINDSET THEN BEGIN
            WindowProcCount := 0;
            REPEAT
              FormulaDetail.COPY(FormulaDetailTmp);
              FormulaDetail.INSERT;
              WindowProcCount := WindowProcCount + 1;
              IF DispProgress THEN
                IF WindowProcCount MOD 50 = 0 THEN
                  Window.UPDATE(12,ROUND(10000 * (WindowProcCount / WindowTotalCount),1));
            UNTIL FormulaDetailTmp.NEXT = 0;
          END;
        END;
        IF DispProgress THEN
          Window.UPDATE(12,10000 * 1);

        UnusualUsageAdj.RESET;
        //UnusualUsageAdj.SETCURRENTKEY(
        //  "Location Code","Item No.","Variant Code","Starting Date");
        UnusualUsageAdj.SETRANGE("Location Code",CurrLocInvPeriod."Location Code");
        IF NOT UnusualUsageAdj.ISEMPTY THEN
          UnusualUsageAdj.DELETEALL;
        UnusualUsageAdj.SETRANGE("Location Code");

        // Save Unusual Usage Adj
        UnusualUsageAdjTmp.RESET;
        IF UnusualUsageAdjTmp.FINDSET THEN BEGIN
          WindowProcCount := 0;
          IF DispProgress THEN
            WindowTotalCount := UnusualUsageAdjTmp.COUNT;
          REPEAT
            UnusualUsageAdj.INIT;
            UnusualUsageAdj.COPY(UnusualUsageAdjTmp);
            UnusualUsageAdj.INSERT;
            WindowProcCount := WindowProcCount + 1;
            IF DispProgress THEN
              IF WindowProcCount MOD 50 = 0 THEN
                Window.UPDATE(13,ROUND(10000 * (WindowProcCount / WindowTotalCount),1));
          UNTIL UnusualUsageAdjTmp.NEXT = 0;
        END;
        IF DispProgress THEN
          Window.UPDATE(13,10000 * 1);

        InvLocPeriod."Period End Closed" := TRUE;
        InvLocPeriod.MODIFY;

        Location."Last Closed Period Date" := InvLocPeriod."Ending Date";
        Location."Re-Close Last Closed Period" := FALSE;
        Location.MODIFY;

        ForecastSummaryView.RESET;
        IF ForecastSummaryView.FINDSET THEN
          REPEAT
            IF NOT ForecastSummaryView."Re-Calculate Required" THEN BEGIN
              ForecastSummaryView."Re-Calculate Required" := TRUE;
              ForecastSummaryView.MODIFY;
            END;
          UNTIL ForecastSummaryView.NEXT = 0;

        IF DispProgress THEN
          Window.CLOSE;

        InvMgt.CloseLogEntry(UBPLogEntryNo,'');
      END;

      IF ForecastByProcUnit OR ForecastByCustProcUnit THEN BEGIN
        // Write Calc Lines
        CalcLine.RESET;
        CalcLine.SETRANGE("Location Code",CurrProcUnit."Location Code");
        CalcLine.SETRANGE("Item No.",CurrProcUnit."Item No.");
        CalcLine.SETRANGE("Variant Code",CurrProcUnit."Variant Code");
        IF ForecastByCustProcUnit THEN
          CalcLine.SETRANGE("Source No.",CurrCustomerNo);
        IF NOT CalcLine.ISEMPTY THEN
          CalcLine.DELETEALL;
        CalcLineNo := 0;
        CalcLineTmp.RESET;
        IF CalcLineTmp.FINDSET THEN
          REPEAT
            CalcLine.COPY(CalcLineTmp);
            CalcLineNo := CalcLineNo + 1;
            CalcLine."Line No." := CalcLineNo;
            CalcLine.INSERT;
          UNTIL CalcLineTmp.NEXT = 0;

        // Write Unusual Usage Adj
        UnusualUsageAdj.RESET;
        //UnusualUsageAdj.SETCURRENTKEY(
        //  "Location Code","Item No.","Variant Code","Starting Date","Ending Date");
        UnusualUsageAdj.SETRANGE("Location Code",CurrProcUnit."Location Code");
        UnusualUsageAdj.SETRANGE("Item No.",CurrProcUnit."Item No.");
        UnusualUsageAdj.SETRANGE("Variant Code",CurrProcUnit."Variant Code");
        IF ForecastByCustProcUnit THEN
          UnusualUsageAdj.SETRANGE("Source No.",CurrCustomerNo)
        ELSE
         UnusualUsageAdj.SETFILTER("Source No.",'=%1','');
        UnusualUsageAdj.DELETEALL;

        UnusualUsageAdj.RESET;
        UnusualUsageAdj.SETRANGE("Location Code",CurrProcUnit."Location Code");
        IF UnusualUsageAdj.FINDLAST THEN
          EntryNo := UnusualUsageAdj."Entry No."
        ELSE
          EntryNo := 0;
        UnusualUsageAdjTmp.RESET;
        IF UnusualUsageAdjTmp.FINDSET THEN
          REPEAT
            UnusualUsageAdj.INIT;
            UnusualUsageAdj.COPY(UnusualUsageAdjTmp);
            EntryNo := EntryNo + 1;
            UnusualUsageAdj."Entry No." := EntryNo;
            UnusualUsageAdj.INSERT;
          UNTIL UnusualUsageAdjTmp.NEXT = 0;
      END;

      // External Forecasting

      // external forecast configured and automatic
      IF (NOT ExternalForecastActive) AND NOT (AdvForSetup."Auto External Forecast") THEN
        EXIT;

      // No collaborative
      IF (CurrCustomerNo <> '') THEN
        EXIT;

      IF AdvForSetup."Auto External Forecast" THEN BEGIN
        COMMIT;
        CLEAR(ExternalForecast);
        CurrLocInvPeriod.SETRANGE("Starting Date", CurrLocInvPeriod."Starting Date");
        CurrLocInvPeriod.SETRANGE("Location Code", CurrLocInvPeriod."Location Code");
        IF ForecastByProcUnit THEN BEGIN
          ExternalForecast.SetPreSetFilters(ProcUnitPrim, CurrLocInvPeriod);
        END ELSE BEGIN
          ProcUnitPrim.RESET;
          ExternalForecast.SetPreSetFilters(ProcUnitPrim, CurrLocInvPeriod);
        END;
        IF NOT ExternalForecast.RUN THEN BEGIN
          InvMgt.CreateLogEntry(CurrLocInvPeriod."Location Code", STRSUBSTNO(Text041,CurrLocInvPeriod."Starting Date",CurrLocInvPeriod."Ending Date"),UBPLogEntryNo);
          InvMgt.CloseLogEntry(UBPLogEntryNo, COPYSTR(GETLASTERRORTEXT(), 1, 250));
        END;
      END;
      // External Forecasting
    END;

    LOCAL PROCEDURE UpdateCalcLine@2(Formula@14000501 : Text[250];SourceNo@1240030000 : Code[20]);
    BEGIN
      EXIT;

      CalcLineTmp.INIT;
      CalcLineTmp."Location Code" := ProcUnit."Location Code";
      CalcLineTmp."Item No." := ProcUnit."Item No.";
      CalcLineTmp."Variant Code" := ProcUnit."Variant Code";
      IF SourceNo <> '' THEN
        CalcLineTmp."Source No." := SourceNo;
      LineNo := LineNo + 1;
      CalcLineTmp."Line No." := LineNo;
      IF STRLEN(Formula) > 150 THEN BEGIN
        CalcLineTmp.Formula := COPYSTR(Formula,1,140);
        CalcLineTmp.INSERT;
        LineNo := LineNo + 1;
        CalcLineTmp."Line No." := LineNo;
        CalcLineTmp.Formula := COPYSTR(Formula,141,STRLEN(Formula) - 140);
        CalcLineTmp.INSERT;
      END ELSE BEGIN
        CalcLineTmp.Formula := Formula;
        CalcLineTmp.INSERT;
      END;
    END;

    LOCAL PROCEDURE CheckForReview@3();
    BEGIN
      IF ProcUnitTemp."Nonstock Unit" THEN
        EXIT;
      UsageRevLineTemp."Location Code" := ItemUsage."Location Code";
      UsageRevLineTemp."Item No." := ItemUsage."Item No.";
      UsageRevLineTemp."Variant Code" := ItemUsage."Variant Code";
      UsageRevLineTemp."Review Reason" := '';

      IF (ItemUsage."Total Stockout Days" >= InvMgmtSetup."Maximum Stockout Days") THEN BEGIN
        UsageRevLineTemp."Review Reason" := STRSUBSTNO(Text012,ItemUsage."Total Stockout Days");
        UsageRevLineTemp.INSERT;
      END;

      IF (ProcUnit."Frozen Usage Expiration Date" < InvLocPeriod."Ending Date") THEN BEGIN
        IF (ItemUsage."Annual Adjusted Usage" <> 0) AND
           (ItemUsage."Annual Adjusted Usage" <= InvMgmtSetup."Min. Annual Unit Sales")
        THEN BEGIN
          UsageRevLineTemp."Review Reason" := STRSUBSTNO(Text013,ItemUsage."Annual Adjusted Usage");
          UsageRevLineTemp.INSERT;
        END;

        IF (ItemUsage."Periods to Average" >= InvMgmtSetup."No. of Periods for Avg. Usage") AND
           (ItemUsage."Period End Adjusted Usage" >= InvMgmtSetup."No. of Periods for Avg. Usage") AND
           (ItemUsage."Period End Adjusted Usage" >=
           (ItemUsage."Total Usage to Average" - ItemUsage."Period End Adjusted Usage"))
        THEN BEGIN
          UsageRevLineTemp."Review Reason" :=
            STRSUBSTNO(
              Text014,ItemUsage."Period End Adjusted Usage",ItemUsage."Periods to Average" - 1,
              (ItemUsage."Total Usage to Average" - ItemUsage."Period End Adjusted Usage"));
          UsageRevLineTemp.INSERT;
        END;
      END;
    END;

    PROCEDURE CustomerForecast@1240030000() ForecastQty@1240030001 : Decimal;
    VAR
      ForecastEntry@1240030000 : Record 14002603;
    BEGIN
      ForecastEntry.RESET;
      ForecastEntry.SETCURRENTKEY(
        "Customer No.","Location Code","Item No.","Variant Code","Starting Date");
      ForecastEntry.SETFILTER(
        "Location Code",GetUsageLocationFilter(
          ItemUsage."Location Code",ItemUsage."Item No.",ItemUsage."Variant Code",FALSE));
      ForecastEntry.SETRANGE("Item No.",ItemUsage."Item No.");
      ForecastEntry.SETRANGE("Variant Code",ItemUsage."Variant Code");
      ForecastEntry.SETRANGE("Starting Date",CustForcPerStartDate,CustForcPerEndDate);
      ForecastEntry.CALCSUMS(Quantity);
      EXIT(ForecastEntry.Quantity);
    END;

    PROCEDURE SaveFormulaDetail@1240030001(ForecastBuffer@1240030000 : Record 14002654;Version@1240030002 : Integer);
    BEGIN
      FormulaDetailTmp.INIT;
      CASE Version OF
        // usage and forecast base
        1:  FormulaDetailTmp.TRANSFERFIELDS(ForecastBuffer);
        // error pct base
        2:  FormulaDetailTmp.TRANSFERFIELDS(ForecastBuffer);
        3: // median error base for selection
        BEGIN
          FormulaDetailTmp."Formula Code" := ForecastBuffer."Formula Code";
          FormulaDetailTmp."Mean Error %" := ForMeanErrPct;
          FormulaDetailTmp."Median Error %" := ForMedianErrPct;
        END;
        4: // selected formula
        BEGIN
          FormulaDetailTmp."Formula Code" := ForecastBuffer."Formula Code";
          FormulaDetailTmp."Mean Error %" := ForSelMeanErrPct;
          FormulaDetailTmp."Median Error %" := ForSelMedianErrPct;
        END;
      END;

      FormulaDetailTmp."Location Code" := ItemUsage."Location Code";
      FormulaDetailTmp."Item No." := ItemUsage."Item No.";
      FormulaDetailTmp."Variant Code" := ItemUsage."Variant Code";
      FormulaDetailTmp.Version := Version;
      FormulaDetailTmp.INSERT;
    END;

    PROCEDURE InitialSetup@1240030004(CurrLocInvPeriod@1240030000 : Record 14000553);
    VAR
      AdjPeriods@1240020000 : Integer;
    BEGIN
      Location.GET(CurrLocInvPeriod."Location Code");

      InvMgmtSetup.GET;
      InvMgmtSetup.TESTFIELD("Usage Start Date");
      InvMgmtSetup.TESTFIELD("No. of Periods in a Year");


      // Check for Advanced Forecasting
      IF Location."Enable Adv. Forecasting" THEN BEGIN
        Formula.RESET;
        //Formula.SETRANGE(Released,TRUE);  -- allow frozen unreleased -- filtered in temp
        //Formula.SETRANGE(External, FALSE);  -- allow frozen external forecasts -- filtered in temp
        IF Formula.FINDSET THEN BEGIN
          ForecastModel := ForecastModel + 1;  // Advanced Forecasting
          FormulaDetailTmp.DELETEALL;
          FormulaMinPeriods := 99;
          REPEAT
            FormulaTmp.INIT;
            FormulaTmp.COPY(Formula);
            FormulaTmp.INSERT(FALSE);
            FormulaPeriod.RESET;
            FormulaPeriod.SETRANGE("Formula Code",Formula.Code);
            IF FormulaPeriod.FINDSET THEN BEGIN
              FormulaPeriods := 0;
              REPEAT
                FormulaPeriodTmp.COPY(FormulaPeriod);
                FormulaPeriodTmp.INSERT;
                FormulaPeriods := FormulaPeriods + 1;
              UNTIL FormulaPeriod.NEXT = 0;
              IF FormulaMinPeriods > FormulaPeriods THEN
                FormulaMinPeriods := FormulaPeriods;
              IF FormulaPeriods > FormulaMaxPeriods THEN
                FormulaMaxPeriods := FormulaPeriods;
            END;
            IF Formula.External THEN BEGIN
              IF (Formula."API URI" <> '') AND (Formula."API Key ID" <> '') THEN BEGIN
                ExternalForecastActive := TRUE;
              END;
            END;
          UNTIL Formula.NEXT = 0;
          AdvForSetup.GET;
          AdvForSetup.TESTFIELD("Periods to Re-Forecast");
          // if upgraded this field may be zero
          IF AdvForSetup."Pct Year Per. Req. for Formula" <= 0 THEN
            AdvForSetup."Pct Year Per. Req. for Formula" := 0.666;
          IF AdvForSetup."Auto Adj. Unusual Usage" THEN BEGIN
            AdvForSetup.TESTFIELD("Max. Unusual Adj. %");
            AdvForSetup.TESTFIELD("Min. Unusual Adj. %");
          END;
          FormulaMaxPeriods := FormulaMaxPeriods + AdvForSetup."Periods to Re-Forecast";
        END;
        UsageLedgEntry.RESET;
        IF UsageLedgEntry.FINDFIRST THEN BEGIN
          IF UsageLedgEntry."Entry No." < 0 THEN
            NegEntryNo := UsageLedgEntry."Entry No."
          ELSE
            NegEntryNo := 0;
        END;
      END;

      // Check for Customer Forecasting
      IF Location."Enable Cust. Forecasting" THEN BEGIN
        ForecastCust.RESET;
        ForecastCust.SETRANGE(Released,TRUE);
        IF NOT ForecastCust.ISEMPTY THEN BEGIN
          ForecastCustItem.SETRANGE("Location Code",CurrLocInvPeriod."Location Code");
          IF NOT ForecastCustItem.ISEMPTY THEN
            ForecastModel := ForecastModel + 2;
        END;
      END;

      InvLocPeriod.RESET;
      InvLocPeriod.SETFILTER("Starting Date",'>%1',CurrLocInvPeriod."Starting Date");
      InvLocPeriod.SETRANGE("Location Code",CurrLocInvPeriod."Location Code");
      InvLocPeriod.FINDSET;
      ForecastPeriodDays := (InvLocPeriod."Ending Date" - InvLocPeriod."Starting Date") + 1;
      REPEAT
        InvLocPeriod1.COPY(InvLocPeriod);
        InvLocPeriod1.INSERT;
      UNTIL InvLocPeriod.NEXT = 0;

      InvLocPeriod.RESET;
      InvLocPeriod.SETFILTER("Starting Date",'%1..',InvMgmtSetup."Usage Start Date");
      InvLocPeriod.SETRANGE("Location Code",CurrLocInvPeriod."Location Code");
      InvLocPeriod.FINDSET;
      REPEAT
        InvLocPeriod2.COPY(InvLocPeriod);
        InvLocPeriod2.INSERT;
        InvLocPeriod3.COPY(InvLocPeriod);
        InvLocPeriod3.INSERT;
        InvLocPeriod4.COPY(InvLocPeriod);
        InvLocPeriod4.INSERT;
        InvLocPeriod5.COPY(InvLocPeriod);
        InvLocPeriod5.INSERT;
        IF ((ForecastModel = ForecastModel::"Adv. For.") OR
            (ForecastModel = ForecastModel::"Adv. and Cust. For.")) AND
            (InvLocPeriod."Period End Closed") THEN
          ClosedInvPeriods := ClosedInvPeriods + 1;
        IF InvLocPeriod."Starting Date" >= CurrLocInvPeriod."Starting Date" THEN
          FuturePeriods := FuturePeriods + 1;
      UNTIL InvLocPeriod.NEXT = 0;

      IF ClosedInvPeriods <> 0 THEN BEGIN
        IF (ForecastModel = ForecastModel::"Adv. For.") OR
           (ForecastModel = ForecastModel::"Adv. and Cust. For.") THEN BEGIN
          UnusualUsageAdjTmp.DELETEALL;
          IF (ClosedInvPeriods >= FormulaMaxPeriods) AND
             (ClosedInvPeriods >= InvMgmtSetup."No. of Periods in a Year") THEN BEGIN
            IF FormulaMaxPeriods < InvMgmtSetup."No. of Periods in a Year" THEN
              AdjPeriods := InvMgmtSetup."No. of Periods in a Year"
            ELSE
              AdjPeriods := FormulaMaxPeriods;
            MinForcPeriods := FormulaMinPeriods + AdvForSetup."Periods to Re-Forecast";
            InvLocPeriod2.RESET;
            InvLocPeriod2.SETCURRENTKEY("Location Code","Starting Date","Period End Closed");
            InvLocPeriod2.SETRANGE("Period End Closed",TRUE);
            InvLocPeriod2.ASCENDING(FALSE);
            InvLocPeriod2.FIND('-');
            REPEAT
              //AdjStartDate := InvLocPeriod2."Starting Date";
              AdjPeriods := AdjPeriods - 1;
              MinForcPeriods := MinForcPeriods - 1;
              IF MinForcPeriods = 0 THEN
                MinForcDate := InvLocPeriod2."Ending Date";
            UNTIL (InvLocPeriod2.NEXT = 0) OR
                  (AdjPeriods = 0);
          END ELSE BEGIN
            AdjPeriods := InvMgmtSetup."No. of Periods in a Year";
            MinForcPeriods := FormulaMinPeriods + AdvForSetup."Periods to Re-Forecast";
            InvLocPeriod2.RESET;
            InvLocPeriod2.SETCURRENTKEY("Location Code","Starting Date","Period End Closed");
            InvLocPeriod2.SETRANGE("Period End Closed",TRUE);
            InvLocPeriod2.ASCENDING(FALSE);
            InvLocPeriod2.FIND('-');
            REPEAT
              //AdjStartDate := InvLocPeriod2."Starting Date";
              MinForcPeriods := MinForcPeriods - 1;
              AdjPeriods := AdjPeriods - 1;
              IF MinForcPeriods = 0 THEN
                MinForcDate := InvLocPeriod2."Ending Date";
            UNTIL (InvLocPeriod2.NEXT = 0) OR
                  (AdjPeriods = 0);
          END;
        END;
      END;

      InvLocPeriod.GET(CurrLocInvPeriod."Starting Date",CurrLocInvPeriod."Location Code");

      DaysInPeriod := 1;
      TestDate := InvLocPeriod."Starting Date";
      REPEAT
        TestDate := CALCDATE('<+1D>',TestDate);
        DaysInPeriod := DaysInPeriod + 1;
      UNTIL TestDate = InvLocPeriod."Ending Date";

      InvLocPeriod2.RESET;
      InvLocPeriod2.SETRANGE("Location Code",CurrLocInvPeriod."Location Code");
      InvLocPeriod2.GET(CurrLocInvPeriod."Starting Date",CurrLocInvPeriod."Location Code");
      PeriodCount := 1;
      PeriodNotAvailable := FALSE;
      PrevPeriodDate := 0D;
      REPEAT
        IF InvLocPeriod2.NEXT(-1) <> 0 THEN BEGIN
          IF PeriodCount = 1 THEN
            PrevPeriodDate := InvLocPeriod2."Starting Date";
          PeriodCount := PeriodCount + 1
        END ELSE
          PeriodNotAvailable := TRUE;
      UNTIL (PeriodCount = InvMgmtSetup."No. of Periods for Avg. Usage") OR
            (PeriodNotAvailable = TRUE);
    END;

    PROCEDURE GetUsageLocationFilter@1240030003(CurrLocationCode@1240030000 : Code[10];CurrItemNo@1240030001 : Code[50];CurrVariantCode@1240030002 : Code[10];CurrSingleLocation@1240030003 : Boolean) Rest : Text[250];
    BEGIN
      IF (CurrLocationCode = FilterLocationCode) AND
         (CurrItemNo = FilterItemNo) AND
         (CurrVariantCode = FilterVariantCode) THEN
        EXIT(LocationFilter);

      FilterLocationCode := CurrLocationCode;
      FilterItemNo := CurrItemNo;
      FilterVariantCode := CurrVariantCode;
      LocationFilter :=
        UBP.GetUsageLocationFilter(
          CurrLocationCode,CurrItemNo,CurrVariantCode,CurrSingleLocation);
      EXIT(LocationFilter);
    END;

    PROCEDURE CalcTopLevelLeadTime@1240030002(CurrProcUnit@1240030000 : Record 14000555) Resp : Integer;
    VAR
      LocProcUnit@1240030001 : Record 14000555;
      LocProcUnit2@1240030002 : Record 14000555;
    BEGIN
      LocProcUnit2.COPY(CurrProcUnit);
      REPEAT
        IF NOT LocProcUnit.GET(
          LocProcUnit2."Replenishment Source Code",LocProcUnit2."Item No.",LocProcUnit2."Variant Code")
        THEN
          EXIT(UBP.CalcLeadTimeDays(CurrProcUnit));
        LocProcUnit2.COPY(LocProcUnit);
      UNTIL LocProcUnit."Replenishment Source Type" <> LocProcUnit."Replenishment Source Type"::Location;
      EXIT(UBP.CalcLeadTimeDays(LocProcUnit));
    END;

    PROCEDURE GetUsage@1240020000(CurrIndex@1240020000 : Integer) ReturnUsage : Decimal;
    BEGIN
      IF AdvForSetup."Auto. Adj. Sea. Usage" THEN
        EXIT(NetUsage[CurrIndex])
      ELSE
        IF (FormulaTmp."Formula Group Code" = AdvForSetup."Seasonal Formula Group") OR FormulaTmp."Seasonal Formula" THEN
          EXIT(NetUnSmoothedUsage[CurrIndex])
        ELSE
          EXIT(NetUsage[CurrIndex]);
    END;

    PROCEDURE CheckMedian@1240020001() Resp : Decimal;
    VAR
      InpArray@1240020004 : ARRAY [100] OF Decimal;
      MedArray@1240020000 : ARRAY [100] OF Decimal;
      ActIdx@1240020003 : Integer;
      MedIdx@1240020001 : Integer;
      MedFinished@1240020002 : Boolean;
      ci@1240020005 : Integer;
      cj@1240020006 : Integer;
      ck@1240020009 : Integer;
      MaxQty@1240020008 : Decimal;
      LocFinished@1240020007 : Boolean;
      PerWithUsage@1240020010 : Integer;
    BEGIN
      IF AdvForSetup."Sporadic Base Calc. Method" = AdvForSetup."Sporadic Base Calc. Method"::"Ave. of Per. With Sales" THEN
        EXIT(0);

      ci := 0;
      PerWithUsage := 0;
      CLEAR(InpArray);
      CLEAR(MedArray);
      REPEAT
        ci := ci + 1;
        InpArray[ci] := ActualArray[ci];
        IF ActualArray[ci] <> 0 THEN
          PerWithUsage := PerWithUsage + 1;
      UNTIL ci = InvMgmtSetup."No. of Periods in a Year";

      IF PerWithUsage = 0 THEN
        EXIT(0);

      LocFinished := FALSE;
      MaxQty := 0;
      ci := 0;
      cj := 0;
      ck := 0;
      REPEAT
        REPEAT
          ci := ci + 1;
          IF InpArray[ci] <> 0 THEN BEGIN
            IF (InpArray[ci] > MaxQty) OR
               (MaxQty = 0)
            THEN BEGIN
              MaxQty := InpArray[ci];
              cj := ci;
            END;
          END;
        UNTIL ci = InvMgmtSetup."No. of Periods in a Year";
        ck := ck + 1;
        MedArray[ck] := MaxQty;
        InpArray[cj] := 0;
        ci := 0;
        MaxQty := 0;
      UNTIL ck = PerWithUsage;

      IF ck = 1 THEN BEGIN
        IF MedArray[ck] >= 0 THEN
          EXIT(MedArray[ck])
        ELSE
          EXIT(0);
      END;
      IF ck = 2 THEN BEGIN
        IF ((MedArray[1] + MedArray[2]) / 2) >= 0 THEN
          EXIT((MedArray[1] + MedArray[2]) / 2)
        ELSE
          EXIT(0);
      END;

      ci := 0;
      IF ck MOD 2 <> 0 THEN BEGIN
        ci := ROUND(ck / 2,1.0,'>');
        IF MedArray[ci] >= 0 THEN
          EXIT(MedArray[ci])
        ELSE
          EXIT(0);
      END ELSE
        IF ROUND((MedArray[ck / 2] + MedArray[(ck / 2) + 1]) / 2,0.1) >= 0 THEN
          EXIT(ROUND((MedArray[ck / 2] + MedArray[(ck / 2) + 1]) / 2,0.1))
        ELSE
          EXIT(0);
    END;

    LOCAL PROCEDURE CheckForComponentUsage@7(VAR CurrProcUnit@1000 : Record 14000555;StartDate@1002 : Date;EndDate@1003 : Date;LocationFilter@1001 : Text[1000]) ConsumedUsage : Decimal;
    VAR
      ItemLedgEntry@1004 : Record 32;
      ProdCompLine@1005 : Record 99000772;
      AssyCompLine@1006 : Record 90;
    BEGIN
      InvMgmtSetup.GET;
      IF InvMgmtSetup."Consider Comp. Cons. as Usage" OR InvMgmtSetup."Consider Neg. Adj. as Usage" THEN
        EXIT;
      IF NOT InvMgmtSetup."Record Turns for Components" THEN
        EXIT;

      ConsumedUsage := 0;
      AssyCompLine.SETRANGE(Type, AssyCompLine.Type::Item);
      AssyCompLine.SETRANGE("No.", CurrProcUnit."Item No.");
      AssyCompLine.SETRANGE("Variant Code", CurrProcUnit."Variant Code");
      IF NOT AssyCompLine.ISEMPTY THEN BEGIN
        ItemLedgEntry.SETRANGE("Entry Type", ItemLedgEntry."Entry Type"::"Assembly Consumption");
        ItemLedgEntry.SETRANGE("Item No.", CurrProcUnit."Item No.");
        ItemLedgEntry.SETRANGE("Variant Code", CurrProcUnit."Variant Code");
        ItemLedgEntry.SETFILTER("Location Code", LocationFilter);
        ItemLedgEntry.SETRANGE("Posting Date", StartDate, EndDate);
        ItemLedgEntry.CALCSUMS("Invoiced Quantity");
        ConsumedUsage := -ItemLedgEntry."Invoiced Quantity";
      END;

      ProdCompLine.SETRANGE(Type, ProdCompLine.Type::Item);
      ProdCompLine.SETRANGE("No.", CurrProcUnit."Item No.");
      ProdCompLine.SETRANGE("Variant Code", CurrProcUnit."Variant Code");
      IF NOT ProdCompLine.ISEMPTY THEN BEGIN
        ItemLedgEntry.SETRANGE("Entry Type", ItemLedgEntry."Entry Type"::Consumption);
        ItemLedgEntry.SETRANGE("Item No.", CurrProcUnit."Item No.");
        ItemLedgEntry.SETRANGE("Variant Code", CurrProcUnit."Variant Code");
        ItemLedgEntry.SETFILTER("Location Code", LocationFilter);
        ItemLedgEntry.SETRANGE("Posting Date", StartDate, EndDate);
        ItemLedgEntry.CALCSUMS("Invoiced Quantity");
        ConsumedUsage += -ItemLedgEntry."Invoiced Quantity";
      END;

      EXIT(ConsumedUsage);
    END;

    LOCAL PROCEDURE CalculateSingleLocNetAverageUsage@1240020002(CurrItemUsageCopy@1240020000 : Record 14000557;VAR CurrItemUsage@1240020002 : Record 14000557;VAR CurrProcUnit@1240020001 : Record 14000555;VAR CurrCustomerNo@1240020004 : Code[20]) SingleLocAvgUsage : Decimal;
    BEGIN
      SingleLocAvgUsage := 0;
      CurrItemUsageCopy.COPYFILTERS(CurrItemUsage);
      CurrItemUsageCopy.SETFILTER("Location Filter", ItemUsage."Location Code");
      CurrItemUsageCopy.CALCFIELDS("Usage Quantity","Adjustment Quantity","Exclude Usage Quantity",
        "Transfer Usage","Drop Ship Usage Quantity");
      IF ForecastByCustProcUnit THEN
        CurrItemUsageCopy."Adjustment Quantity" := 0;
      SingleLocAvgUsage :=
          ((CurrItemUsageCopy."Usage Quantity" + CurrItemUsageCopy."Adjustment Quantity" + CurrItemUsageCopy."Transfer Usage") -
            CurrItemUsageCopy."Exclude Usage Quantity");
      IF NOT CurrProcUnit."Include Drop Ship Usage" THEN
        SingleLocAvgUsage :=
          SingleLocAvgUsage - CurrItemUsageCopy."Drop Ship Usage Quantity";
      IF CurrItemUsageCopy."Periods to Average" <> 0 THEN
        SingleLocAvgUsage := SingleLocAvgUsage / CurrItemUsageCopy."Periods to Average";
      EXIT(SingleLocAvgUsage);
    END;

    LOCAL PROCEDURE GetSourceUnitLeadTime@1240020003(VAR CurrProcUnit@1240030000 : Record 14000555) SourceLeadTime : Integer;
    VAR
      LocProcUnit@1240030002 : Record 14000555;
      i@1240030003 : Integer;
      LocationCode@1240030001 : Code[10];
      Text001@1240030004 : TextConst 'ENU=Replenishment Path Loop: Location %1 Item %2 %3';
      SourceLocation@1240020000 : Record 14;
    BEGIN
      SourceLeadTime := 0;
      LocationCode := CurrProcUnit."Replenishment Source Code";

      i := 0;
      LocProcUnit.SETRANGE("Item No.", CurrProcUnit."Item No.");
      LocProcUnit.SETRANGE("Variant Code", CurrProcUnit."Variant Code");
      REPEAT
        LocProcUnit.SETRANGE("Location Code", LocationCode);
        LocProcUnit.FIND('-');
        IF (LocProcUnit."Replenishment Source Type" = LocProcUnit."Replenishment Source Type"::Location) THEN BEGIN
          LocationCode := LocProcUnit."Replenishment Source Code";
          i := i + 1;
          IF i > 50 THEN
            EXIT(SourceLeadTime);
        END;
      UNTIL LocProcUnit."Replenishment Source Type" <> LocProcUnit."Replenishment Source Type"::Location;

      IF (SourceLocation.Code <> LocProcUnit."Location Code") AND (LocProcUnit."Location Code" <> '') THEN
        SourceLocation.GET(LocProcUnit."Location Code");

      IF (LocProcUnit."Nonstock Unit") OR (SourceLocation."Sporadic Spoke Hub Lead Time") THEN
        SourceLeadTime := UBP.CalcLeadTimeDays(LocProcUnit);

      EXIT(SourceLeadTime);
    END;

    LOCAL PROCEDURE GetPeriodStartDate@1240020004(CurrDateToTest@1240020002 : Date) : Date;
    VAR
      tempdate@1240020000 : Date;
      UBP@1240020001 : Codeunit 14000564;
    BEGIN
      // get starting date for last year's next period from current item usage ending date
      // adjust for leap year
      IF (DATE2DMY(CurrDateToTest, 2) = 2) THEN BEGIN
        IF UBP.IsLeapYear(CALCDATE('<-1Y+1D>', CurrDateToTest)) THEN BEGIN
          EXIT(CALCDATE('<-1Y+2D>', CurrDateToTest));
        END ELSE BEGIN
          EXIT(CALCDATE('<-1Y+1D>', CurrDateToTest));
        END;
      END ELSE BEGIN
        EXIT(CALCDATE('<-1Y+1D>', CurrDateToTest));
      END;
    END;

    LOCAL PROCEDURE SmoothSingleLocUsage@1000000000(VAR CurrFormula@1240020001 : Code[20];VAR CurrCustomerNo@1240020002 : Code[20];VAR ItemUsage@1240020003 : Record 14000557;VAR CurrProcUnit@1240020008 : Record 14000555);
    VAR
      i@1240020000 : Integer;
      AdjAveUsage@1240020004 : Decimal;
      AdjZeroEntries@1240020005 : Integer;
      AdjMax@1240020006 : Decimal;
      AdjMin@1240020007 : Decimal;
    BEGIN
      // Smoothing >>
      {
      // loop usage to find (Yearly min/max average)
      // calculate min & max percents from average from the past year
      // adjust the usage for all periods by that min/max
      // store in unusual usage adjust
      }
      UnusualUsageAdjTmp.RESET;
      UnusualUsageAdjTmp.SETCURRENTKEY("Location Code","Item No.","Variant Code","Starting Date");
      UnusualUsageAdjTmp.SETRANGE("Location Code",ItemUsage."Location Code");
      UnusualUsageAdjTmp.SETRANGE("Item No.",ItemUsage."Item No.");
      UnusualUsageAdjTmp.SETRANGE("Variant Code",ItemUsage."Variant Code");
      //UnusualUsageAdjTmp.SETRANGE("Starting Date", CurrLocInvPeriod."Starting Date");
      IF ForecastByCustProcUnit THEN
        UnusualUsageAdjTmp.SETRANGE("Source No.", CurrCustomerNo)
      ELSE
        UnusualUsageAdjTmp.SETFILTER("Source No.",'=%1','');
      AdjAveUsage := 0;
      IF UnusualUsageAdjTmp.FIND('+') THEN BEGIN
        REPEAT
          AdjAveUsage := AdjAveUsage + UnusualUsageAdjTmp."Single Loc. Per. End Adj. Usg.";
          IF UnusualUsageAdjTmp."Single Loc. Per. End Adj. Usg." = 0 THEN
            AdjZeroEntries := AdjZeroEntries + 1;
          i := i + 1;
       UNTIL (UnusualUsageAdjTmp.NEXT(-1) = 0) OR (i >= InvMgmtSetup."No. of Periods in a Year");
      END;
      IF i < InvMgmtSetup."No. of Periods in a Year" THEN
        EXIT;
      // can't qualify a formula no need to smooth usage
      IF i < ROUND(InvMgmtSetup."No. of Periods in a Year" * (AdvForSetup."Pct Year Per. Req. for Formula"),1.0) THEN
        EXIT;
      IF (InvMgmtSetup."No. of Periods in a Year" - AdjZeroEntries) > 0 THEN BEGIN
        AdjAveUsage := AdjAveUsage / (InvMgmtSetup."No. of Periods in a Year" - AdjZeroEntries);
      END;
      AdjMax := AdjAveUsage * (AdvForSetup."Max. Unusual Adj. %" / 100);
      AdjMin := AdjAveUsage * (AdvForSetup."Min. Unusual Adj. %" / 100);

      IF UnusualUsageAdjTmp.FIND('+') THEN BEGIN
        i := 0;
        REPEAT
          IF UnusualUsageAdjTmp."Single Loc. Per. End Adj. Usg." > AdjMax THEN BEGIN
            UnusualUsageAdjTmp."Single Loc. Usage Adjustment" := AdjMax - UnusualUsageAdjTmp."Single Loc. Per. End Adj. Usg.";
            UnusualUsageAdjTmp."Single Loc. Usage" := AdjMax;
          END;
          IF UnusualUsageAdjTmp."Single Loc. Per. End Adj. Usg."  < AdjMin THEN BEGIN
            UnusualUsageAdjTmp."Single Loc. Usage Adjustment" := AdjMin - UnusualUsageAdjTmp."Single Loc. Per. End Adj. Usg.";
            UnusualUsageAdjTmp."Single Loc. Usage" := AdjMin;
          END;
          Forecast.RoundValueForForecast(CurrProcUnit, UnusualUsageAdjTmp."Single Loc. Usage");
          IF UnusualUsageAdjTmp."Single Loc. Usage Adjustment" <> 0 THEN
            UnusualUsageAdjTmp.MODIFY(FALSE);
          i := i + 1;
        UNTIL (UnusualUsageAdjTmp.NEXT(-1) = 0);
      END;
      // Smoothing <<
    END;

    BEGIN
    END.
  }
}

