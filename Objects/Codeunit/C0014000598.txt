OBJECT Codeunit 14000598 Item Usage Review
{
  OBJECT-PROPERTIES
  {
    Date=12/15/20;
    Time=12:00:00 PM;
    Version List=UBP3.03.01;
  }
  PROPERTIES
  {
    TableNo=14097469;
    OnRun=VAR
            ItemUsageReviewBatchType@1000 : Record 14097468;
          BEGIN
            ItemUsageReviewBatchType.GET("Batch Type");
            ItemUsageReviewBatchType.TESTFIELD("Posting Codeunit ID", 14000598);
            AdjustUsageAndForecast("Batch Type", "Batch Name");
          END;

  }
  CODE
  {
    VAR
      AdvForSetup@1240020010 : Record 14002651;
      ForecastAdj@1240020014 : Record 14002707;
      ForcInvPer@1240020022 : Record 14000552;
      ItemUsageReview@1240020000 : Record 14097467;
      ItemUsageReviewPrev@1240020002 : Record 14097467;
      ItemUsageAdj@1240020001 : Record 14000558;
      ProcUnit@1240020027 : Record 14000555;
      UsageAdjReason@1240020018 : Record 14000559;
      ProgWindow@1240020003 : Dialog;
      Text001@1240020004 : TextConst 'ENU=Location';
      Text002@1240020005 : TextConst 'ENU=Item';
      Text003@1240020006 : TextConst 'ENU=Adjustments';
      NewValue@1240020007 : Decimal;
      PrevValue@1240020008 : Decimal;
      Period@1240020009 : Integer;
      HistStartDateArray@1240020011 : ARRAY [52] OF Date;
      HistEndDateArray@1240020015 : ARRAY [52] OF Date;
      ForcStartDateArray@1240020012 : ARRAY [52] OF Date;
      i@1240020013 : Integer;
      Counter@1240020023 : Integer;
      EntryNo@1240020016 : Integer;
      LineNo@1240020017 : Integer;
      Text004@1240020019 : TextConst 'ENU=USAGEREV';
      Text005@1240020020 : TextConst 'ENU=Cre. By Usage Review';
      Text006@1240020021 : TextConst 'ENU=Usage Review Adjustment';
      Text007@1240020024 : TextConst 'ENU=Do you wish to post all adjustments?';
      Text008@1240020025 : TextConst 'ENU=Adjustments not posted.';
      Text009@1240020026 : TextConst 'ENU=%1 Adjustments Posted.';
      Reforecast@1240020028 : Boolean;
      TempReforecastProcUnit@1000 : TEMPORARY Record 14000555;

    PROCEDURE AdjustUsageAndForecast@1240020000(BatchType@1240020000 : Code[10];BatchName@1240020001 : Code[10]);
    VAR
      ReforecastItem@1001 : Codeunit 14000571;
      UpdateProcUnitLocFilters@1000 : Codeunit 14000581;
    BEGIN
      IF GUIALLOWED THEN
        IF NOT CONFIRM(Text007,FALSE) THEN BEGIN
          MESSAGE(Text008);
          EXIT;
        END;

      IF GUIALLOWED THEN
        ProgWindow.OPEN(
          PADSTR(Text001,15) + '#1########\' +
          PADSTR(Text002,15) + '#2############################\' +
          PADSTR(Text003,15) + '#3########');

      AdvForSetup.GET;

      TempReforecastProcUnit.DELETEALL;

      ItemUsageReview.RESET;
      ItemUsageReview.LOCKTABLE;
      ItemUsageReview.SETCURRENTKEY("Item No.","Location Code","Variant Code",Type);
      ItemUsageReview.SETRANGE(Type,ItemUsageReview.Type::"Usage Adjust");
      ItemUsageReview.SETRANGE("Batch Type", BatchType);
      ItemUsageReview.SETRANGE("Batch Name", BatchName);
      ItemUsageReview.SETRANGE(Changed,TRUE);
      IF ItemUsageReview.FIND('-') THEN BEGIN
        Reforecast := FALSE;
        LoadDateArray;
        REPEAT
          ItemUsageReviewPrev.RESET;
          ItemUsageReviewPrev.SETCURRENTKEY("Item No.","Location Code","Variant Code",Type);
          ItemUsageReviewPrev.SETRANGE("Item No.",ItemUsageReview."Item No.");
          ItemUsageReviewPrev.SETRANGE("Location Code",ItemUsageReview."Location Code");
          ItemUsageReviewPrev.SETRANGE("Variant Code",ItemUsageReview."Variant Code");
          ItemUsageReviewPrev.SETRANGE(Type,ItemUsageReview.Type::"Usage Prev.");
          ItemUsageReviewPrev.FINDFIRST;

          Period := 0;
          REPEAT
            Period := Period + 1;
            NewValue := ItemUsageReview.GetField(Period);
            PrevValue := ItemUsageReviewPrev.GetField(Period);
            IF NewValue <> PrevValue THEN BEGIN
              MakeAdjustment(Period,PrevValue,NewValue);
              Reforecast := TRUE;
            END;
          UNTIL Period = ItemUsageReview."History Periods" + ItemUsageReviewPrev."Forecast Periods";
          IF GUIALLOWED THEN BEGIN
            ProgWindow.UPDATE(1,ItemUsageReview."Location Code");
            ProgWindow.UPDATE(2,ItemUsageReview."Item No.");
          END;
          IF Reforecast THEN BEGIN
            ProcUnit.GET(
              ItemUsageReview."Location Code",ItemUsageReview."Item No.",ItemUsageReview."Variant Code");
            ProcUnit."Reforecast Item" := TRUE;
            ProcUnit."Change Reforecast Required" := TRUE;
            ProcUnit.MODIFY;

            TempReforecastProcUnit.INIT;
            TempReforecastProcUnit := ProcUnit;
            TempReforecastProcUnit.INSERT;
            ItemUsageReview.MARK(TRUE);
          END;
        UNTIL ItemUsageReview.NEXT = 0;
      END;

      ItemUsageReview.MARKEDONLY(TRUE);
      ItemUsageReview.DELETEALL;
      ItemUsageReview.RESET;

      IF TempReforecastProcUnit.FINDSET THEN BEGIN
        REPEAT
          CLEAR(UpdateProcUnitLocFilters);
          UpdateProcUnitLocFilters.ByLocation('',TempReforecastProcUnit."Item No.");
          CLEAR(ReforecastItem);
          ReforecastItem.ByItem(TempReforecastProcUnit."Item No.");
        UNTIL TempReforecastProcUnit.NEXT = 0;
      END;

      IF GUIALLOWED THEN
        ProgWindow.CLOSE;

      IF GUIALLOWED THEN
        MESSAGE(Text009,Counter);
    END;

    PROCEDURE MakeAdjustment@1240020002(CurrPeriod@1240020000 : Integer;CurrPrevValue@1240020001 : Decimal;CurrNewValue@1240020002 : Decimal);
    BEGIN
      IF CurrPeriod <= ItemUsageReview."History Periods" THEN BEGIN
        ItemUsageAdj.RESET;
        ItemUsageAdj.SETCURRENTKEY(
          "Item No.","Location Code","Variant Code","Starting Date","Ending Date","Line No.");
        ItemUsageAdj.SETRANGE("Item No.",ItemUsageReview."Item No.");
        ItemUsageAdj.SETRANGE("Location Code",ItemUsageReview."Location Code");
        ItemUsageAdj.SETRANGE("Variant Code",ItemUsageReview."Variant Code");
        ItemUsageAdj.SETRANGE("Starting Date",HistStartDateArray[CurrPeriod]);
        ItemUsageAdj.SETRANGE("Ending Date",HistEndDateArray[CurrPeriod]);
        IF ItemUsageAdj.FINDLAST THEN
          LineNo := ItemUsageAdj."Line No."
        ELSE
          LineNo := 0;
        ItemUsageAdj.RESET;
        ItemUsageAdj.INIT;
        ItemUsageAdj."Location Code" := ItemUsageReview."Location Code";
        ItemUsageAdj."Item No." := ItemUsageReview."Item No.";
        ItemUsageAdj."Variant Code" := ItemUsageReview."Variant Code";
        ItemUsageAdj."Starting Date" := HistStartDateArray[CurrPeriod];
        ItemUsageAdj."Ending Date" := HistEndDateArray[CurrPeriod];
        LineNo := LineNo + 10000;
        ItemUsageAdj."Line No." := LineNo;
        ItemUsageAdj."Adjustment Quantity" := CurrNewValue - CurrPrevValue;
        IF NOT UsageAdjReason.GET(UsageAdjReason.Type::"Usage Adjustment",Text004) THEN BEGIN
          UsageAdjReason.Type := UsageAdjReason.Type::"Usage Adjustment";
          UsageAdjReason.Code := Text004;
          UsageAdjReason.Description := Text005;
          UsageAdjReason.INSERT;
        END;
        ItemUsageAdj.Reason := UsageAdjReason.Code;
        ItemUsageAdj."Adjusted By" := USERID;
        ItemUsageAdj."Adjusted Date" := TODAY;
        ItemUsageAdj."Original Location Code" := ItemUsageReview."Location Code";;
        ItemUsageAdj."Original Item No." := ItemUsageReview."Item No.";
        ItemUsageAdj."Original Variant Code" := ItemUsageReview."Variant Code";
        ItemUsageAdj.INSERT;
        Counter := Counter + 1;
        IF GUIALLOWED THEN
          ProgWindow.UPDATE(3,Counter);
      END ELSE BEGIN
        ForecastAdj.RESET;
        IF ForecastAdj.FINDLAST THEN
          EntryNo := ForecastAdj."Entry No."
        ELSE
          EntryNo := 0;
        ForecastAdj.INIT;
        EntryNo := EntryNo + 1;
        ForecastAdj."Entry No." := EntryNo;
        ForecastAdj."Location Code" := ItemUsageReview."Location Code";
        ForecastAdj."Item No." := ItemUsageReview."Item No.";
        ForecastAdj."Variant Code" := ItemUsageReview."Variant Code";
        ForecastAdj."Starting Date" := ForcStartDateArray[Period - ItemUsageReview."History Periods"];
        ForecastAdj.Quantity := CurrNewValue - CurrPrevValue;
        ForecastAdj."User ID" := USERID;
        ForecastAdj."Date Adjusted" := TODAY;
        ForecastAdj."Time Adjusted" := TIME;
        ForecastAdj."Adjustment Note" := Text006;
        ForecastAdj.INSERT;
        Counter := Counter + 1;
        IF GUIALLOWED THEN
          ProgWindow.UPDATE(3,Counter);
      END;
    END;

    PROCEDURE LoadDateArray@1240020003();
    BEGIN
      ForcInvPer.RESET;
      ForcInvPer.SETRANGE(Type,ForcInvPer.Type::" ");
      ForcInvPer.SETFILTER("Starting Date",'%1..',ItemUsageReview."Starting Date");
      ForcInvPer.FINDSET;
      i := 0;
      CLEAR(HistStartDateArray);
      CLEAR(HistEndDateArray);
      REPEAT
        i := i + 1;
        HistStartDateArray[i] := ForcInvPer."Starting Date";
        HistEndDateArray[i] := ForcInvPer."Ending Date";
      UNTIL (ForcInvPer.NEXT = 0) OR
            (i = ItemUsageReview."History Periods");

      i := 0;
      CLEAR(ForcStartDateArray);
      REPEAT
        i := i + 1;
        ForcStartDateArray[i] := ForcInvPer."Starting Date";
      UNTIL (ForcInvPer.NEXT = 0) OR
            (i = ItemUsageReview."Forecast Periods");
    END;

    LOCAL PROCEDURE CheckForReviewOrigUsageReviews@3();
    BEGIN
      // -- Old usage review from CU deprecated
      {
      IF ProcUnitTemp."Nonstock Unit" THEN
        EXIT;
      UsageRevLineTemp."Location Code" := ItemUsage."Location Code";
      UsageRevLineTemp."Item No." := ItemUsage."Item No.";
      UsageRevLineTemp."Variant Code" := ItemUsage."Variant Code";
      UsageRevLineTemp."Review Reason" := '';

      IF (ItemUsage."Total Stockout Days" >= InvMgmtSetup."Maximum Stockout Days") THEN BEGIN
        UsageRevLineTemp."Review Reason" := STRSUBSTNO(Text012,ItemUsage."Total Stockout Days");
        UsageRevLineTemp.INSERT;
      END;

      IF (ProcUnit."Frozen Usage Expiration Date" < InvLocPeriod."Ending Date") THEN BEGIN
        IF (ItemUsage."Annual Adjusted Usage" <> 0) AND
           (ItemUsage."Annual Adjusted Usage" <= InvMgmtSetup."Min. Annual Unit Sales")
        THEN BEGIN
          UsageRevLineTemp."Review Reason" := STRSUBSTNO(Text013,ItemUsage."Annual Adjusted Usage");
          UsageRevLineTemp.INSERT;
        END;

        IF (ItemUsage."Periods to Average" >= InvMgmtSetup."No. of Periods for Avg. Usage") AND
           (ItemUsage."Period End Adjusted Usage" >= InvMgmtSetup."No. of Periods for Avg. Usage") AND
           (ItemUsage."Period End Adjusted Usage" >=
           (ItemUsage."Total Usage to Average" - ItemUsage."Period End Adjusted Usage"))
        THEN BEGIN
          UsageRevLineTemp."Review Reason" :=
            STRSUBSTNO(
              Text014,ItemUsage."Period End Adjusted Usage",ItemUsage."Periods to Average" - 1,
              (ItemUsage."Total Usage to Average" - ItemUsage."Period End Adjusted Usage"));
          UsageRevLineTemp.INSERT;
        END;
      END;
      }
      //
    END;

    PROCEDURE SetLockOnReview@1240020001(VAR CurrItemUsageReview@1240020000 : Record 14097467;ModifyRec@1240020002 : Boolean) : Boolean;
    VAR
      ItemUsageReview2@1240020001 : Record 14097467;
    BEGIN
      ItemUsageReview2.SETRANGE("Location Code", CurrItemUsageReview."Location Code");
      ItemUsageReview2.SETRANGE("Item No.", CurrItemUsageReview."Item No.");
      ItemUsageReview2.SETFILTER("Variant Code", CurrItemUsageReview."Variant Code");
      ItemUsageReview2.SETRANGE("Batch Type", CurrItemUsageReview."Batch Type");
      ItemUsageReview2.SETFILTER("Batch Name", '<>%1', CurrItemUsageReview."Batch Name");
      IF ItemUsageReview2.ISEMPTY THEN BEGIN
        CurrItemUsageReview.VALIDATE(Locked, FALSE);
        ItemUsageReview2."Locked Description" := '';
        IF ModifyRec THEN
          CurrItemUsageReview.MODIFY(FALSE);
        EXIT(FALSE);
      END ELSE BEGIN
        CurrItemUsageReview.VALIDATE(Locked, TRUE);
        //CurrItemUsageReview."Locked Description" := 'Locked by other batch, only 1 active adjustment can occur at a time.';
        IF ModifyRec THEN
          CurrItemUsageReview.MODIFY(FALSE);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE ShowLockedOnReview@1240020009(VAR CurrItemUsageReview@1240020000 : Record 14097467) : Boolean;
    VAR
      ItemUsageReview2@1240020001 : Record 14097467;
    BEGIN
      ItemUsageReview2.SETRANGE("Location Code", CurrItemUsageReview."Location Code");
      ItemUsageReview2.SETRANGE("Item No.", CurrItemUsageReview."Item No.");
      ItemUsageReview2.SETFILTER("Variant Code", CurrItemUsageReview."Variant Code");
      ItemUsageReview2.SETRANGE("Batch Type", CurrItemUsageReview."Batch Type");
      ItemUsageReview2.SETFILTER("Batch Name", '<>%1', CurrItemUsageReview."Batch Name");
      PAGE.RUN(0,ItemUsageReview2);
    END;

    PROCEDURE OpenBatchFromList@1240020007(VAR ItemUsageReviewBatch@1240020000 : Record 14097469);
    VAR
      ItemUsageReviewBatchType@1240020001 : Record 14097468;
    BEGIN
      ItemUsageReviewBatch.TESTFIELD("Batch Type");
      ItemUsageReviewBatchType.GET(ItemUsageReviewBatch."Batch Type");
      ItemUsageReviewBatchType.TESTFIELD("Batch Run ID");
      ItemUsageReviewBatch.TESTFIELD("Batch Name");

      ItemUsageReview.FILTERGROUP := 2;
      ItemUsageReview.SETRANGE("Batch Type",ItemUsageReviewBatchType."Batch Type");
      ItemUsageReview.SETRANGE("Batch Name",ItemUsageReviewBatch."Batch Name");
      ItemUsageReview.FILTERGROUP := 0;
      PAGE.RUN(ItemUsageReviewBatchType."Batch Run ID",ItemUsageReview);
    END;

    PROCEDURE LookupBatchName@6(VAR CurrBatchType@1240020001 : Code[10];VAR CurrBatchName@1240020004 : Code[10];VAR CurrItemUsageReview@1240020000 : Record 14097467) : Boolean;
    VAR
      ItemUsageReviewBatch@1240020003 : Record 14097469;
    BEGIN
      COMMIT;
      ItemUsageReviewBatch.SETRANGE("Batch Type", CurrBatchType);
      IF PAGE.RUNMODAL(0,ItemUsageReviewBatch) = ACTION::LookupOK THEN BEGIN
        CurrItemUsageReview.RESET;
        CurrItemUsageReview.FILTERGROUP := 2;
        CurrBatchName := ItemUsageReviewBatch."Batch Name";
        CurrItemUsageReview.SETRANGE("Batch Type", ItemUsageReviewBatch."Batch Type");
        CurrItemUsageReview.SETRANGE("Batch Name", ItemUsageReviewBatch."Batch Name");
        CurrItemUsageReview.FILTERGROUP := 0;
        IF CurrItemUsageReview.FINDSET THEN;
      END;
    END;

    PROCEDURE CreateBatchTypes@1240020004();
    BEGIN
      SetupBatchType('FCLASTX','Usage Review for x periods with forecast',14097514,14000584,TRUE,14000598);
      SetupBatchType('FORECAST','Forecast Review',14097456,14000587,TRUE,14002702);
    END;

    LOCAL PROCEDURE SetupBatchType@1240020006(BatchType@1240020002 : Code[10];ProcessDesc@1240020001 : Text[250];RunID@1240020000 : Integer;ExecuteID@1000 : Integer;UseRequestForm@1001 : Boolean;PostingID@1002 : Integer);
    VAR
      ItemUsageReviewBatchType@1240020003 : Record 14097468;
    BEGIN
      IF NOT ItemUsageReviewBatchType.GET(BatchType) THEN BEGIN
        ItemUsageReviewBatchType.INIT;
        ItemUsageReviewBatchType."Batch Type" := BatchType;
        ItemUsageReviewBatchType.Description := ProcessDesc;
        ItemUsageReviewBatchType."Batch Run ID" := RunID;
        ItemUsageReviewBatchType."Execution Report ID" := ExecuteID;
        ItemUsageReviewBatchType."Use Request" := UseRequestForm;
        ItemUsageReviewBatchType."Posting Codeunit ID" := PostingID;
        ItemUsageReviewBatchType.INSERT;
      END;
    END;

    LOCAL PROCEDURE FindBestKey@1(CurrRecRef@1000 : RecordRef;CurrFilterGroup@1001 : Boolean) : Integer;
    VAR
      tmprecInteger@1010 : TEMPORARY Record 2000000026;
      KeyRef@1009 : KeyRef;
      FldRef@1008 : FieldRef;
      BestKey@1007 : Integer;
      BestKeyScore@1006 : Integer;
      Score@1005 : Integer;
      Qty@1004 : Integer;
      i@1003 : Integer;
      j@1002 : Integer;
    BEGIN
      //The function returns the index of the best key to use given the applied filters.
      BestKey := 1;

      //Enumerate all fields with filter. Temporary record used for speed.
      FOR i := 1 TO CurrRecRef.FIELDCOUNT DO BEGIN
        FldRef := CurrRecRef.FIELDINDEX(i);
        j := 0;
        IF NOT CurrFilterGroup THEN
          j := 255;
        WHILE (NOT tmprecInteger.GET(FldRef.NUMBER)) AND (j <= 255) DO BEGIN
          IF CurrFilterGroup THEN
            CurrRecRef.FILTERGROUP(j);
          IF FldRef.GETFILTER <> '' THEN BEGIN
            tmprecInteger.INIT;
            tmprecInteger.Number := FldRef.NUMBER;
            tmprecInteger.INSERT(FALSE);
          END;
          j += 1;
        END;
        CLEAR(FldRef);
      END;
      CurrRecRef.FILTERGROUP(0);

      //Loop through all keys to find best match.
      FOR i := 1 TO CurrRecRef.KEYCOUNT DO BEGIN
        CLEAR(Score);
        CLEAR(Qty);
        KeyRef := CurrRecRef.KEYINDEX(i);
        FOR j := 1 TO KeyRef.FIELDCOUNT DO BEGIN
          FldRef := KeyRef.FIELDINDEX(j);
          IF tmprecInteger.GET(FldRef.NUMBER) THEN BEGIN
            //Score for Placement:
            Score += POWER(2, 20 - j);
            //Score for Quantity:
            Qty += 1;
            Score += POWER(2, 20 - j) * (Qty - 1)
          END;
          CLEAR(FldRef);
        END;
        IF Score > BestKeyScore THEN BEGIN
          BestKey := i;
          BestKeyScore := Score;
        END;
      END;

      EXIT(BestKey);
    END;

    PROCEDURE SetKey@2(VAR CurrRecRef@1000 : RecordRef) : Text[1024];
    BEGIN
      CurrRecRef.CURRENTKEYINDEX(FindBestKey(CurrRecRef,FALSE));
      EXIT(CurrRecRef.GETVIEW());
    END;

    PROCEDURE ExecuteBatchType@4(VAR ItemUsageReviewBatch@1002 : Record 14097469);
    VAR
      ItemUsageReviewBatchType@1001 : Record 14097468;
      ItemUsageReviewBatch2@1000 : Record 14097469;
      XMLParamText@1240020000 : Text;
      IStream@1240020001 : InStream;
      BatchRecRef@1240020002 : RecordRef;
      ErrorTxt01@1240020003 : TextConst 'ENU=Request option page could not be loaded for this batch %1 report %2!';
    BEGIN
      ItemUsageReviewBatchType.GET(ItemUsageReviewBatch."Batch Type");
      ItemUsageReviewBatch2.COPY(ItemUsageReviewBatch);
      ItemUsageReviewBatch2.SETRANGE("Batch Type", ItemUsageReviewBatch."Batch Type");
      ItemUsageReviewBatch2.SETRANGE("Batch Name", ItemUsageReviewBatch."Batch Name");
      // pre 2015 >>
      //REPORT.RUNMODAL(ItemUsageReviewBatchType."Execution Report ID", ItemUsageReviewBatchType."Use Request", FALSE, ItemUsageReviewBatch2);
      // pre 2015 <<
      // 2015+
      IF RunReportRequestPage(ItemUsageReviewBatchType, ItemUsageReviewBatch2) THEN BEGIN
        ItemUsageReviewBatch2.CALCFIELDS(XML);
        IF ItemUsageReviewBatch2.XML.HASVALUE THEN BEGIN
          CLEAR(BatchRecRef);
          BatchRecRef.GETTABLE(ItemUsageReviewBatch2);
          BatchRecRef.SETVIEW(ItemUsageReviewBatch2.GETVIEW);
          ItemUsageReviewBatch2.XML.CREATEINSTREAM(IStream, TEXTENCODING::UTF8);
          IStream.READTEXT(XMLParamText);
          REPORT.EXECUTE(ItemUsageReviewBatchType."Execution Report ID", XMLParamText,BatchRecRef);
        END ELSE
          ERROR(ErrorTxt01, ItemUsageReviewBatch2."Batch Name", ItemUsageReviewBatchType."Execution Report ID");
      END;
      // 2015+ <<
    END;

    PROCEDURE RunReportRequestPage@18(VAR ItemUsageReviewBatchType@1240020001 : Record 14097468;VAR ItemUsageReviewBatch@1240020002 : Record 14097469) ExecuteReport : Boolean;
    VAR
      Params@1000 : Text;
      ErrorTxt01@1240020000 : TextConst 'ENU=Execution report is not correct on this batch type!';
    BEGIN
      // 2015+
      ExecuteReport := FALSE;
      IF ItemUsageReviewBatchType."Execution Report ID" = 0 THEN
        ERROR(ErrorTxt01);
      Params := REPORT.RUNREQUESTPAGE(ItemUsageReviewBatchType."Execution Report ID", GetReportParameters(ItemUsageReviewBatch));
      IF Params <> '' THEN BEGIN
        ExecuteReport := TRUE;
        SetReportParameters(ItemUsageReviewBatch,Params);
      END;
      EXIT(ExecuteReport);
      // 2015+
    END;

    LOCAL PROCEDURE GetReportParameters@17(VAR ItemUsageReviewBatch@1240020000 : Record 14097469) : Text;
    VAR
      InStr@1000 : InStream;
      Params@1001 : Text;
    BEGIN
      // 2015+
      ItemUsageReviewBatch.CALCFIELDS(XML);
      IF ItemUsageReviewBatch.XML.HASVALUE THEN BEGIN
        ItemUsageReviewBatch.XML.CREATEINSTREAM(InStr,TEXTENCODING::UTF8);
        InStr.READ(Params);
      END;
      EXIT(Params);
      // 2015+
    END;

    LOCAL PROCEDURE SetReportParameters@20(VAR ItemUsageReviewBatch@1240020000 : Record 14097469;Params@1002 : Text);
    VAR
      OutStr@1001 : OutStream;
    BEGIN
      // 2015+
      IF Params <> '' THEN BEGIN
        ItemUsageReviewBatch.XML.CREATEOUTSTREAM(OutStr,TEXTENCODING::UTF8);
        OutStr.WRITE(Params);
        ItemUsageReviewBatch.MODIFY(FALSE);
      END;
      // 2015+
    END;

    BEGIN
    END.
  }
}

