OBJECT Codeunit 14098056 Create Historical Data
{
  OBJECT-PROPERTIES
  {
    Date=05/01/20;
    Time=12:00:00 PM;
    Version List=UBP3.02.01;
  }
  PROPERTIES
  {
    OnRun=VAR
            LogEntryNo@1240020000 : Integer;
            MfgSetup@1240020001 : Record 99000765;
            LogDesc@1240020002 : TextConst 'ENU="Historical Data Creation Started "';
          BEGIN
            IsAFP := TRUE;
            ShowDialog := GUIALLOWED;
            VersionInt := GetVersion;
            CountryVersionText := GetLocalVersion;
            InventoryManagement.CreateLogEntry('', LogDesc, LogEntryNo);
            CASE CountryVersionText OF
              'US', 'W1', 'NA':
              BEGIN
              END;
              ELSE
                BEGIN
                  ERROR('Not a North America or Worldwide Application DB\Stopping Demo Tool.  Check the application management codeunit version!');
                END;
            END;
            DefaultInvPostGroupCode := 'FINISHED';
            DefaultAFPDocNo := 'AFP001';
            IF AFPProdTemplate.FIND('-') THEN;
            DefVATPostGroupCode := 'VAT25';
            DefTaxPostGroupCode := 'NONTAXABLE';
            DefGenProdPostGroupCode := 'RETAIL';
            DefGenBusPostGroupCode := 'DOMESTIC';
            DefVendorPostGroupCode := 'DOMESTIC';
            DefReplProdGroupCode := 'PROD1';
            CustRandomSeed := DefCustomer.COUNT;
            DefCustomer.SETRANGE(Blocked, DefCustomer.Blocked::" ");
            DefCustomer.SETFILTER("Customer Posting Group", '<>%1', '');
            DefCustomer.SETRANGE("IC Partner Code", '');
            IF NOT DefCustomer.GET('10000') THEN
              DefCustomer.FIND('-');
            VendRandomSeed := DefVendor.COUNT;
            DefVendor.SETRANGE(Blocked, DefVendor.Blocked::" ");
            DefVendor.SETRANGE("IC Partner Code", '');
            IF NOT DefVendor.GET('20000') THEN
              DefVendor.FIND('-');
            EVALUATE(DefLotAccumPeriod, '7D');
            MfgActive := TRUE;
            IF NOT MfgSetup.GET() THEN
                MfgActive := FALSE
            ELSE BEGIN
                IF MfgSetup."Normal Starting Time" = 0T THEN
                    MfgActive := FALSE;
            END;
            SetSimOrderNoSeries;
            SetSalesOrderNoSeries;
            Code;
            InventoryManagement.CloseLogEntry(LogEntryNo, '');
          END;

  }
  CODE
  {
    VAR
      AdvForecastSetup@1015 : Record 14002651;
      InvMgtSetup@1240020015 : Record 14000551;
      ForecastInventoryPeriod@1001 : Record 14000552;
      HistoricalUsage@1240020000 : Record 14097490;
      Item@1240020002 : Record 27;
      ItemCategory@1240020007 : Record 5722;
      ItemUOM@1240020003 : Record 5404;
      ItemLedgerEntry@1240020005 : Record 32;
      Location@1240020006 : Record 14;
      ProcUnit@1240020001 : Record 14000555;
      UOM@1240020004 : Record 204;
      Vendor@1240020008 : Record 23;
      PurchaseHdr@1240020016 : Record 38;
      PurchaseLine@1240020017 : Record 39;
      ItemJournalBatch@1003 : Record 233;
      ItemJnlLine@1004 : Record 83;
      ItemJnlManagement@1005 : Codeunit 240;
      InventoryManagement@1240020019 : Codeunit 14000553;
      TempSalesHeaderPost@1240020026 : TEMPORARY Record 36;
      Window@1240020010 : Dialog;
      EntryNo@1240020009 : Integer;
      TotalCount@1240020011 : Integer;
      CurrentCount@1240020012 : Integer;
      Period@1240020013 : Integer;
      PeriodQty@1240020014 : Decimal;
      LineNo@1240020018 : Integer;
      PeriodStartDate@1000 : Date;
      PeriodCount@1002 : Integer;
      DocumentNo@1007 : Code[20];
      IsAFP@1008 : Boolean;
      AppMgt@1010 : Codeunit 1;
      ShowDialog@1012 : Boolean;
      VersionInt@1013 : Integer;
      ItemJnlPostLine@1006 : Codeunit 22;
      DefaultInvPostGroupCode@1009 : Code[10];
      DefaultAFPDocNo@1014 : Code[10];
      AFPProdPlanName@1017 : Record 14002678;
      AFPProdTemplate@1240020027 : Record 14002677;
      CountryVersionText@1016 : Text[20];
      DefVATPostGroupCode@1011 : Code[10];
      DefTaxPostGroupCode@1018 : Code[10];
      DefGenProdPostGroupCode@1020 : Code[10];
      DefVendorPostGroupCode@1019 : Code[10];
      DefGenBusPostGroupCode@1021 : Code[10];
      DefCustomer@1240020020 : Record 18;
      DefVendor@1240020021 : Record 23;
      DefReplProdGroupCode@1240020022 : Code[10];
      CustRandomSeed@1240020023 : Integer;
      VendRandomSeed@1240020024 : Integer;
      DefLotAccumPeriod@1240020025 : DateFormula;
      HeaderCount@1022 : Integer;
      LineCount@1023 : Integer;
      MfgActive@1240020028 : Boolean;

    PROCEDURE Code@5();
    VAR
      SalesQty@1000 : Decimal;
      PurchQty@1003 : Decimal;
      i@1001 : Integer;
      SalesShipDate@1002 : Date;
      PurchExpRcptDate@1004 : Date;
      TempBOMItem@1240020000 : TEMPORARY Record 27;
    BEGIN
      HistoricalUsage.RESET;
      TotalCount := HistoricalUsage.COUNT;
      IF TotalCount = 0 THEN
        EXIT;

      // usage start can be set in the process steps, inventory management setup, or inline with the data

      InvMgtSetup.GET;
      AdvForecastSetup.GET;

      SetPeriodStartDateFromHistoricalUsage;

      IF PeriodStartDate = 0D THEN BEGIN
       PeriodStartDate := InvMgtSetup."Usage Start Date";
      END;

      IF HistoricalUsage.FINDSET THEN BEGIN
        OpenWindow;
        LineCount := 0;
        REPEAT
          IF (HistoricalUsage."Replenishment Source Type" = HistoricalUsage."Replenishment Source Type"::Production) AND
            (NOT MfgActive) THEN BEGIN
            HistoricalUsage."Replenishment Source Type" := HistoricalUsage."Replenishment Source Type"::Assembly;
            HistoricalUsage."Replenishment Source Code" := '';
          END;
          ConfigureLocation(HistoricalUsage."Location Code");
          SetupInventoryPostingGroup(HistoricalUsage."Location Code");
          ConfigureItem;
          COMMIT;
          ConfigureProcUnit;
          Period := 0;
          REPEAT
            Period := Period + 1;
            PeriodQty := GetQuantity(Period);
            IF PeriodQty <> 0 THEN BEGIN
              IF IsAFP THEN BEGIN
                CreateSalesOrderLines(HistoricalUsage."Source No.", HistoricalUsage."Location Code", GetDate(Period), PeriodQty,TRUE);
              END ELSE BEGIN
                InsertAbsoluteValueLedgerEntryUsage;
              END;
            END;
          UNTIL Period = 48;

          FOR i:= 1 TO 6 DO BEGIN
            CASE i OF
              1:
              BEGIN
                SalesQty := HistoricalUsage."Sales Order Qty. Period 1";
                PurchQty := HistoricalUsage."Purch. Order Qty. Period 1";
              END;
              2:
              BEGIN
                SalesQty := HistoricalUsage."Sales Order Qty. Period 2";
                PurchQty := HistoricalUsage."Purch. Order Qty. Period 2";
              END;
              3:
              BEGIN
                SalesQty := HistoricalUsage."Sales Order Qty. Period 3";
                PurchQty := HistoricalUsage."Purch. Order Qty. Period 3";
              END;
              4:
              BEGIN
                SalesQty := HistoricalUsage."Sales Order Qty. Period 4";
                PurchQty := HistoricalUsage."Purch. Order Qty. Period 4";
              END;
              5:
              BEGIN
                SalesQty := HistoricalUsage."Sales Order Qty. Period 5";
                PurchQty := HistoricalUsage."Purch. Order Qty. Period 5";
              END;
              6:
              BEGIN
                SalesQty := HistoricalUsage."Sales Order Qty. Period 6";
                PurchQty := HistoricalUsage."Purch. Order Qty. Period 6";
              END;
            END;
            SalesShipDate := CALCDATE('<-CM+' + FORMAT(i-1) + 'M+2W>', WORKDATE);
            IF SalesQty <> 0 THEN BEGIN
              CreateSalesOrderLines(HistoricalUsage."Source No.", HistoricalUsage."Location Code", SalesShipDate, SalesQty, FALSE);
            END;
            PurchExpRcptDate :=  CALCDATE('<-CM+' + FORMAT(i-1) + 'M+2W+1D>', WORKDATE);
            IF PurchQty <> 0 THEN BEGIN
              CreatePurchOrderLines(HistoricalUsage."Replenishment Source Code", HistoricalUsage."Location Code", PurchExpRcptDate, PurchQty);
            END;
          END;

          CurrentCount := CurrentCount + 1;
          UpDateWindow;
        UNTIL HistoricalUsage.NEXT = 0;

        // Post Sales Orders
        BatchPostSales;

        CloseWindow;
        COMMIT;
      END;

      IF IsAFP THEN BEGIN
        //PostItemJournal;
        //COMMIT; ??
        //ItemJnlLine.INIT;
        //ItemJnlLine."Journal Template Name" := ItemJournalBatch."Journal Template Name";
        //ItemJnlLine."Journal Batch Name" := ItemJournalBatch.Name;
        //ItemJnlLine.VALIDATE("Entry Type",ItemJnlLine."Entry Type"::"Positive Adjmt.");
        //ItemJnlManagement.SetName(ItemJournalBatch.Name,ItemJnlLine);
        //IF VersionInt < 4 THEN
        // DocumentNo := 'AFP002'
        //ELSE
        //  DocumentNo := '';
      END ELSE BEGIN
        ItemLedgerEntry.RESET;
        //ItemLedgerEntry.LOCKTABLe;
        IF ItemLedgerEntry.FIND('+') THEN
          EntryNo := ItemLedgerEntry."Entry No."
        ELSE
          EntryNo := 0;
      END;

      HistoricalUsage.RESET;
      HistoricalUsage.MODIFYALL(HistoricalUsage."Last Record",FALSE);
      HistoricalUsage.SETCURRENTKEY("Location Code","Item No.","Period Start Date");

      OpenWindow;
      ProcUnit.RESET;
      CurrentCount := 0;
      TotalCount := ProcUnit.COUNT;
      IF ProcUnit.FIND('-') THEN BEGIN
        REPEAT

          // adjust on hand
          HistoricalUsage.SETRANGE("Location Code",ProcUnit."Location Code");
          HistoricalUsage.SETRANGE("Item No.",ProcUnit."Item No.");
          IF HistoricalUsage.FIND('+') THEN BEGIN
            HistoricalUsage."Last Record" := TRUE;
            HistoricalUsage.MODIFY;
            ProcUnit.SETFILTER("Location Filter",'%1',ProcUnit."Location Code");
            ProcUnit.CALCFIELDS(Inventory,"Qty. on Purchase Order");
            IF ProcUnit.Inventory <> HistoricalUsage."On Hand Qty." THEN BEGIN
              IF IsAFP THEN BEGIN
                AdjustOnHandAFP;
              END ELSE BEGIN
                AdjustOnHandAbsoluteValue;
              END;
            END;
          END;
          //AdjustPurchPeriodQty(HistoricalUsage."Purch. Order Qty. Period 1" + HistoricalUsage."Purch. Order Qty. Period 2" + HistoricalUsage."Purch. Order Qty. Period 3");
          IF ProcUnit."Replenishment Source Type" IN [ProcUnit."Replenishment Source Type"::Assembly,ProcUnit."Replenishment Source Type"::Production] THEN BEGIN
            IF NOT TempBOMItem.GET(ProcUnit."Item No.") THEN BEGIN
              TempBOMItem.INIT;
              TempBOMItem."No." := ProcUnit."Item No.";
              TempBOMItem.INSERT
            END;
          END;
          CreateSKU(ProcUnit);
          CurrentCount := CurrentCount + 1;
          UpDateWindow;
        UNTIL ProcUnit.NEXT = 0;

        BOMSEtup(TempBOMItem);

        CloseWindow;
      END;
    END;

    PROCEDURE SetupItemJnl@33();
    BEGIN
      // Set UP Item Journal
      IF IsAFP THEN BEGIN
        ItemJnlLine.INIT;
        ItemJnlLine."Journal Template Name" := ItemJournalBatch."Journal Template Name";
        ItemJnlLine."Journal Batch Name" := ItemJournalBatch.Name;
        ItemJnlLine.VALIDATE("Entry Type",ItemJnlLine."Entry Type"::Sale);
        ItemJnlManagement.SetName(ItemJournalBatch.Name,ItemJnlLine);

        IF VersionInt < 4 THEN
          DocumentNo := DefaultAFPDocNo
        ELSE
          DocumentNo := '';
      END ELSE BEGIN
        ItemLedgerEntry.RESET;
        ItemLedgerEntry.SETFILTER("Entry No.",'<%1',0);
        IF ItemLedgerEntry.FIND('+') THEN
          EntryNo := ItemLedgerEntry."Entry No."
        ELSE
          EntryNo := -10000000;
        ItemLedgerEntry.RESET;
      END;
    END;

    PROCEDURE SetPeriodStartDateFromHistoricalUsage@11();
    VAR
      PeriodDateToCheck@1240020000 : Date;
    BEGIN
      // set period dates backward if not correctly set
      //PeriodStartDate := 0D;
      HistoricalUsage.RESET;
      IF HistoricalUsage.FIND('-') THEN BEGIN
        REPEAT
          IF (HistoricalUsage."Period Start Date" <> 0D) THEN BEGIN
            IF PeriodStartDate = 0D THEN
              PeriodStartDate := HistoricalUsage."Period Start Date"
            ELSE
              IF HistoricalUsage."Period Start Date" < PeriodStartDate THEN
                PeriodStartDate := HistoricalUsage."Period Start Date";
          END;
        UNTIL HistoricalUsage.NEXT = 0;

        IF PeriodStartDate = 0D THEN
          EXIT;

        // create inventory periods
        PeriodCount := 0;
        PeriodDateToCheck := PeriodStartDate;
        ForecastInventoryPeriod.RESET;
        ForecastInventoryPeriod.SETRANGE(Type,ForecastInventoryPeriod.Type::" ");
        REPEAT
          PeriodCount := PeriodCount + 1;
          ForecastInventoryPeriod.Type := ForecastInventoryPeriod.Type::" ";
          ForecastInventoryPeriod."Starting Date" := PeriodStartDate;
          ForecastInventoryPeriod."Ending Date" := CALCDATE('<+1M-1D>', PeriodDateToCheck);
          IF ForecastInventoryPeriod.INSERT THEN;
          ForecastInventoryPeriod.Type := ForecastInventoryPeriod.Type::Calculate;
          IF ForecastInventoryPeriod.INSERT THEN;
          PeriodDateToCheck := CALCDATE('<+1M>', PeriodDateToCheck);
          IF PeriodCount = 1 THEN BEGIN
            IF (InvMgtSetup."Usage Start Date" = 0D) OR (ForecastInventoryPeriod."Starting Date" < InvMgtSetup."Usage Start Date") THEN BEGIN
              InvMgtSetup."Usage Start Date" := ForecastInventoryPeriod."Starting Date";
              InvMgtSetup.MODIFY(FALSE);
            END;
          END;
        UNTIL PeriodCount = 72;
      END ELSE
        ERROR('No Historical Usage found.');
    END;

    PROCEDURE ConfigureLocation@13(LocationCode@1000 : Code[10]);
    BEGIN
      IF NOT Location.GET(HistoricalUsage."Location Code") THEN BEGIN
        Location.INIT;
        Location.Code := HistoricalUsage."Location Code";
        Location."Carrying Cost %" := 20;
        Location."Ordering Cost" := 5;
        Location."Enable Adv. Forecasting" := TRUE;
        Location."Enable Cust. Forecasting" := TRUE;
        Location."Auto Process Day End" := TRUE;
        Location."Auto Process Period End" := TRUE;
        Location."Def. Repl. Source Type" := Location."Def. Repl. Source Type"::Vendor;
        Location."Vend. Surplus Calc. Add Days" := 30;
        Location."Vend. Surplus Calc. Add Pct." := 30;
        Location."Loc. Surplus Calc. Add Days" := 30;
        Location."Loc. Surplus Calc. Add Pct." := 30;
        Location."Sporadic Rule" := AdvForecastSetup."Def. Sporadic Rule";
        Location."Roll Up Order Quantity Rule" := Location."Roll Up Order Quantity Rule"::MaxSOQ;
        IF MfgActive THEN
        Location."Enable AFP Production" := TRUE;
        Location."Enable Assembly Forecast" := TRUE;
        Location."Auto Process Prod. Plan" := TRUE;

        // setup new afp production template
        Location."AFP Prod. Template Name" := AFPProdTemplate.Name;
        Location.INSERT;
      END;
      CreateNewLocInvPeriods(Location);
    END;

    PROCEDURE SetupInventoryPostingGroup@17(LocationCode@1002 : Code[10]);
    VAR
      InventoryPostingSetup@1000 : Record 5813;
      InventoryPostingSetup2@1001 : Record 5813;
    BEGIN
      // Setup Inventory Posting Group
      IF NOT InventoryPostingSetup.GET(LocationCode,DefaultInvPostGroupCode) THEN BEGIN
        IF InventoryPostingSetup.FIND('-') THEN BEGIN
          InventoryPostingSetup2.TRANSFERFIELDS(InventoryPostingSetup, TRUE);
          InventoryPostingSetup2."Location Code" := LocationCode;
          InventoryPostingSetup2."Invt. Posting Group Code" := DefaultInvPostGroupCode;
          InventoryPostingSetup2.INSERT;
        END ELSE BEGIN
          InventoryPostingSetup.INIT;
          InventoryPostingSetup."Location Code" := LocationCode;
          InventoryPostingSetup."Invt. Posting Group Code" := DefaultInvPostGroupCode;
          CASE CountryVersionText OF
            'US':
            BEGIN
              InventoryPostingSetup."Cap. Overhead Variance Account" := '57400';
              InventoryPostingSetup."Capacity Variance Account" := '57100';
              InventoryPostingSetup."Inventory Account" := '14200';
              InventoryPostingSetup."Inventory Account (Interim)" := '14201';
              InventoryPostingSetup."Material Variance Account" := '57100';
              InventoryPostingSetup."Mfg. Overhead Variance Account" := '57400';
              InventoryPostingSetup."Subcontracted Variance Account" := '57200';
              InventoryPostingSetup."WIP Account" := '14600';
            END;
            'W1':
            BEGIN
              InventoryPostingSetup."Cap. Overhead Variance Account" := '7893';
              InventoryPostingSetup."Capacity Variance Account" := '7891';
              InventoryPostingSetup."Inventory Account" := '2110';
              InventoryPostingSetup."Inventory Account (Interim)" := '2111';
              InventoryPostingSetup."Material Variance Account" := '7890';
              InventoryPostingSetup."Mfg. Overhead Variance Account" := '7894';
              InventoryPostingSetup."Subcontracted Variance Account" := '7892';
              InventoryPostingSetup."WIP Account" := '2140';
            END;
          END;
          InventoryPostingSetup.INSERT;
        END;
      END;
    END;

    PROCEDURE ConfigureItem@19();
    VAR
      LeadTimeDateFormula@1240020000 : DateFormula;
    BEGIN
      IF NOT Item.GET(HistoricalUsage."Item No.") THEN BEGIN
        Item.INIT;
        Item."No." := HistoricalUsage."Item No.";
        Item.Description := HistoricalUsage.Description;
        Item."Base Unit of Measure" := HistoricalUsage."Base UOM Code";
        CreateUOM(Item."No.",Item."Base Unit of Measure",1);

        IF Item."Purch. Unit of Measure" = '' THEN BEGIN
          IF HistoricalUsage."Sales UOM"  = '' THEN
            Item."Purch. Unit of Measure" := Item."Base Unit of Measure"
          ELSE
            Item."Purch. Unit of Measure" := HistoricalUsage."Purchase UOM Code";
          CreateUOM(Item."No.",Item."Purch. Unit of Measure",HistoricalUsage."Purch. Qty Per UOM");
        END;

        IF Item."Sales Unit of Measure" = '' THEN BEGIN
          IF HistoricalUsage."Sales UOM"  = '' THEN
            Item."Sales Unit of Measure" := Item."Base Unit of Measure"
          ELSE
            Item."Sales Unit of Measure" := HistoricalUsage."Sales UOM";
          CreateUOM(Item."No.",Item."Sales Unit of Measure",HistoricalUsage."Sales Qty. Per UOM");
        END;

        Item."Order Multiple" := HistoricalUsage."Order Multiple";
        Item."Minimum Order Quantity" := HistoricalUsage."Order Minimum";

        Item."Unit Price" := HistoricalUsage.Price;
        Item."Costing Method" := Item."Costing Method"::Average;
        Item."Unit Cost" := HistoricalUsage.Cost;
        Item."Standard Cost" := HistoricalUsage.Cost;
        Item."Last Direct Cost" := HistoricalUsage.Cost;
        Item."Unit Price" := HistoricalUsage.Price;
        Item."Net Weight" := 10;
        Item."Gross Weight" := 10;
        Item."Unit Volume" := 50;

        Item."Reordering Policy" := Item."Reordering Policy"::"Lot-for-Lot";
        Item."Vendor No." := Vendor."No.";
        Item."Lot Accumulation Period" := DefLotAccumPeriod;

        CASE HistoricalUsage."Replenishment Source Type" OF
          HistoricalUsage."Replenishment Source Type"::Vendor:
            BEGIN
              SetupVendor(HistoricalUsage."Replenishment Source Code");
              Item."Replenishment System" := Item."Replenishment System"::Purchase;
              Item."Vendor No." := Vendor."No.";
              IF NOT EVALUATE(LeadTimeDateFormula, FORMAT(HistoricalUsage."Lead Time Days") + 'D') THEN
                IF EVALUATE(LeadTimeDateFormula, FORMAT(InvMgtSetup."Default Lead Time (Days)") + 'D') THEN
                  Item."Lead Time Calculation" := LeadTimeDateFormula;
            END;
          HistoricalUsage."Replenishment Source Type"::Assembly:
            BEGIN
              Item."Replenishment System" := Item."Replenishment System"::Assembly;
            END;
          HistoricalUsage."Replenishment Source Type"::Production:
            BEGIN
              Item."Replenishment System" := Item."Replenishment System"::"Prod. Order";
            END;
        END;

        Item."Item Category Code" := HistoricalUsage.Category;
        SetupItemCategory(Item."Item Category Code");

        // use templates?
        Item."Gen. Prod. Posting Group" := DefGenProdPostGroupCode;
        CASE UPPERCASE(CountryVersionText) OF
          'US':
          BEGIN
            Item."Tax Group Code" := DefTaxPostGroupCode;
            Item."Inventory Posting Group" := DefaultInvPostGroupCode;
          END;
          'W1':
          BEGIN
            Item."VAT Prod. Posting Group" := DefVATPostGroupCode;
            Item."Inventory Posting Group" := DefaultInvPostGroupCode;
          END;
        END;
        Item.INSERT;
      END;
    END;

    PROCEDURE ConfigureProcUnit@27();
    BEGIN
      IF NOT ProcUnit.GET(HistoricalUsage."Location Code",HistoricalUsage."Item No.",'') THEN BEGIN
        ProcUnit.INIT;
        ProcUnit."Location Code" := HistoricalUsage."Location Code";
        ProcUnit."Item No." := HistoricalUsage."Item No.";
        ProcUnit."Variant Code" := '';
        ProcUnit.INSERT(TRUE);
        ProcUnit."Sporadic Rule" := HistoricalUsage."Sporadic Rule";
        ProcUnit."Frozen Formula" := HistoricalUsage."Frozen Formula";
        ProcUnit."Frozen Formula Group" := HistoricalUsage."Frozen Formula Group";
        ProcUnit."Safety Stock Days" := HistoricalUsage."Safety Stock Days";
        ProcUnit."First Stocked Date" := HistoricalUsage."First Stocked Date";
        IF HistoricalUsage.Nonstock <> '' THEN
          ProcUnit."Nonstock Unit" := TRUE;

        ProcUnit."Replenishment Source Type" := HistoricalUsage."Replenishment Source Type";

        IF (HistoricalUsage."Replenishment Source Type" = HistoricalUsage."Replenishment Source Type"::Vendor) THEN BEGIN
          ProcUnit."Replenishment Source Code" := HistoricalUsage."Replenishment Source Code";
          ProcUnit."Replenishment Model" := ProcUnit."Replenishment Model"::"Lead Time Horizon";
          ProcUnit."Order Qty. Method" := ProcUnit."Order Qty. Method"::EOQ;
          ProcUnit."Frozen Lead Time (Days)" := HistoricalUsage."Lead Time Days";
          ProcUnit."Frozen Lead Time Expir. Date" := CALCDATE('<+1Y>',WORKDATE);
        END;

        IF (HistoricalUsage."Replenishment Source Type" = HistoricalUsage."Replenishment Source Type"::Location) THEN BEGIN
          ProcUnit."Replenishment Source Code" := HistoricalUsage."Replenishment Source Code";
          ProcUnit."Replenishment Model" := ProcUnit."Replenishment Model"::"Min/Max";
          ProcUnit."Order Qty. Method" := 0;
          ProcUnit."Minimum Days Supply" := 14;
          ProcUnit."Maximum Days Supply" := 21;
        END;
      END;
      ProcUnit.MODIFY;
    END;

    LOCAL PROCEDURE BOMSEtup@1240020006(VAR TempItem@1240020003 : TEMPORARY Record 27);
    VAR
      CreateHistoricalData@1240020002 : Codeunit 14098056;
      ProcUnit@1240020001 : Record 14000555;
      BomLines@1240020000 : Record 14097493;
    BEGIN
      IF TempItem.FIND('-') THEN BEGIN
        REPEAT
          ProcUnit.SETRANGE("Item No.", TempItem."No.");
          ProcUnit.SETFILTER("Replenishment Source Type", '%1|%2',  ProcUnit."Replenishment Source Type"::Production, ProcUnit."Replenishment Source Type"::Assembly);
          IF ProcUnit.FIND('-') THEN BEGIN
            REPEAT
              CASE ProcUnit."Replenishment Source Type" OF
                ProcUnit."Replenishment Source Type"::Production:
                BEGIN
                  ConfigureBOM(TempItem."No.");
                  IF (ProcUnit."Replenishment Source Code" <> DefReplProdGroupCode) THEN BEGIN
                    ProcUnit.VALIDATE("Replenishment Source Code", DefReplProdGroupCode);
                    ProcUnit.MODIFY(FALSE);
                  END;
                END;
                ProcUnit."Replenishment Source Type"::Assembly:
                BEGIN
                  ConfigureAssemblyBOM(TempItem."No.");
                  IF (ProcUnit."Replenishment Source Code" <> '' ) THEN BEGIN
                    ProcUnit."Replenishment Source Code" := '';
                    ProcUnit.MODIFY(FALSE);
                  END;
                END;
              END;
            UNTIL ProcUnit.NEXT = 0;
          END;
        UNTIL TempItem.NEXT = 0;
      END;
    END;

    PROCEDURE ConfigureBOM@1240020002(ParentItemNo@1240020000 : Code[20]) : Boolean;
    VAR
      BOMLine@1240020002 : Record 14097493;
      ProdBOMHdr@1240020003 : Record 99000771;
      ProdBOMLine@1240020001 : Record 99000772;
    BEGIN
      IF Item."No." <> ParentItemNo THEN
        Item.GET(ParentItemNo);

      BOMLine.SETRANGE("Parent Item No.", Item."No.");
      BOMLine.SETFILTER("No.", '<>%1', '');
      IF BOMLine.FIND('-') THEN BEGIN
        IF NOT ProdBOMHdr.GET(Item."No.") THEN BEGIN
          ProdBOMHdr.INIT;
          ProdBOMHdr."No." := Item."No.";
          ProdBOMHdr."Unit of Measure Code" := Item."Base Unit of Measure";
          ProdBOMHdr.INSERT(TRUE);
        END ELSE BEGIN
          ProdBOMHdr.VALIDATE(Status,ProdBOMHdr.Status::"Under Development");
          ProdBOMHdr.MODIFY(FALSE);
        END;
        REPEAT
          ProdBOMLine.SETRANGE("Production BOM No.", Item."No.");
          ProdBOMLine.SETRANGE(Type, ProdBOMLine.Type::Item);
          ProdBOMLine.SETRANGE("No.", BOMLine."No.");
          IF NOT ProdBOMLine.FIND('-') THEN BEGIN
            ProdBOMLine.INIT;
            ProdBOMLine."Production BOM No." := ProdBOMHdr."No.";
            LineNo := LineNo + 10000;
            ProdBOMLine."Line No." := LineNo;
            ProdBOMLine.INSERT(TRUE);
          END;
          ProdBOMLine.VALIDATE(Type,ProdBOMLine.Type::Item);
          ProdBOMLine.VALIDATE("No.",BOMLine."No.");
          ProdBOMLine.VALIDATE("Quantity per",BOMLine."Quantity per");
          ProdBOMLine.MODIFY(TRUE);
        UNTIL BOMLine.NEXT = 0;
        ProdBOMHdr.VALIDATE(Status,ProdBOMHdr.Status::Certified);
        ProdBOMHdr.MODIFY(TRUE);

        IF Item."Production BOM No." <> ProdBOMHdr."No." THEN BEGIN
          Item.VALIDATE("Production BOM No.", ProdBOMHdr."No.");
          Item.VALIDATE("Reordering Policy", Item."Reordering Policy"::"Lot-for-Lot");
          Item.VALIDATE("Order Tracking Policy", Item."Order Tracking Policy"::"Tracking & Action Msg.");
          Item.VALIDATE("Lot Accumulation Period", DefLotAccumPeriod);
          Item.MODIFY(FALSE);
        END;
        EXIT(TRUE);
      END ELSE
        EXIT(FALSE);
    END;

    PROCEDURE ConfigureAssemblyBOM@1240020001(ParentItemNo@1240020000 : Code[20]) : Boolean;
    VAR
      BOMLine@1240020001 : Record 14097493;
      ItemComp@1240020002 : Record 27;
      ChangeToAssembly@1240020003 : Boolean;
      BOMComponent@1240020004 : Record 90;
    BEGIN
      IF Item."No." <> ParentItemNo THEN
        Item.GET(ParentItemNo);
      LineNo := 0;

      BOMLine.SETRANGE("Parent Item No.", Item."No.");
      BOMLine.SETFILTER("No.", '<>%1', '');
      IF BOMLine.FIND('-') THEN BEGIN
        REPEAT
          LineNo := LineNo + 10000;
          IF ItemComp.GET(BOMLine."No.") THEN BEGIN

            BOMComponent.SETRANGE("Parent Item No.", Item."No.");
            BOMComponent.SETRANGE(Type, BOMComponent.Type::Item);
            BOMComponent.SETRANGE("No.", BOMLine."No.");
            IF NOT BOMComponent.FIND('-') THEN BEGIN
              BOMComponent.INIT;
              BOMComponent."Parent Item No." := Item."No.";
              BOMComponent."Line No." := LineNo;
              BOMComponent.Type := BOMComponent.Type::Item;
              BOMComponent.VALIDATE("No.",ItemComp."No.");
              BOMComponent."Quantity per" := BOMLine."Quantity per";
              BOMComponent.INSERT(TRUE);
            END ELSE BEGIN
              BOMComponent."Quantity per" := BOMLine."Quantity per";
              BOMComponent.MODIFY(FALSE);
            END;
          END;
        UNTIL BOMLine.NEXT = 0;
        EXIT(TRUE);
      END ELSE
        EXIT(FALSE);
    END;

    PROCEDURE SetupVendor@22(VendNo@1000 : Code[20]);
    BEGIN
      IF NOT Vendor.GET(VendNo) THEN BEGIN
        Vendor.INIT;
        Vendor."No." := VendNo;
        Vendor."Gen. Bus. Posting Group" := DefGenBusPostGroupCode;
        Vendor."Vendor Posting Group" := DefVendorPostGroupCode;
        Vendor.INSERT;
      END;
    END;

    PROCEDURE SetupItemCategory@23(ItemCatCode@1000 : Code[10]);
    BEGIN
      IF NOT ItemCategory.GET(ItemCatCode) THEN BEGIN
        ItemCategory.INIT;
        ItemCategory.Code := ItemCatCode;
        ItemCategory.INSERT;
      END;
    END;

    PROCEDURE CreateUOM@1240020000(ItemNo@1240020000 : Code[50];UOMCode@1240020001 : Code[10];QtyPer@1240020002 : Decimal);
    BEGIN
      IF UOMCode = '' THEN
        EXIT;
      IF ItemUOM.GET(ItemNo,UOMCode) THEN
        EXIT;

      IF NOT UOM.GET(UOMCode) THEN BEGIN
        UOM.INIT;
        UOM.Code := UOMCode;
        UOM.INSERT;
      END;

      ItemUOM.INIT;
      ItemUOM."Item No." := ItemNo;
      ItemUOM.Code := UOMCode;
      ItemUOM."Qty. per Unit of Measure" := QtyPer;
      ItemUOM.INSERT;
    END;

    PROCEDURE GetDate@1240020005(Per@1240020000 : Integer) RetDate : Date;
    BEGIN
      IF Per = 1 THEN
        RetDate := PeriodStartDate
      ELSE
        RetDate := CALCDATE(STRSUBSTNO('+%1M',Per - 1),PeriodStartDate);
    END;

    PROCEDURE GetQuantity@1240020004(Per@1240020000 : Integer) RetQuantity : Decimal;
    BEGIN
      CASE Per OF
        1: EXIT(HistoricalUsage."Period 1");
        2: EXIT(HistoricalUsage."Period 2");
        3: EXIT(HistoricalUsage."Period 3");
        4: EXIT(HistoricalUsage."Period 4");
        5: EXIT(HistoricalUsage."Period 5");
        6: EXIT(HistoricalUsage."Period 6");
        7: EXIT(HistoricalUsage."Period 7");
        8: EXIT(HistoricalUsage."Period 8");
        9: EXIT(HistoricalUsage."Period 9");
        10: EXIT(HistoricalUsage."Period 10");
        11: EXIT(HistoricalUsage."Period 11");
        12: EXIT(HistoricalUsage."Period 12");
        13: EXIT(HistoricalUsage."Period 13");
        14: EXIT(HistoricalUsage."Period 14");
        15: EXIT(HistoricalUsage."Period 15");
        16: EXIT(HistoricalUsage."Period 16");
        17: EXIT(HistoricalUsage."Period 17");
        18: EXIT(HistoricalUsage."Period 18");
        19: EXIT(HistoricalUsage."Period 19");
        20: EXIT(HistoricalUsage."Period 20");
        21: EXIT(HistoricalUsage."Period 21");
        22: EXIT(HistoricalUsage."Period 22");
        23: EXIT(HistoricalUsage."Period 23");
        24: EXIT(HistoricalUsage."Period 24");
        25: EXIT(HistoricalUsage."Period 25");
        26: EXIT(HistoricalUsage."Period 26");
        27: EXIT(HistoricalUsage."Period 27");
        28: EXIT(HistoricalUsage."Period 28");
        29: EXIT(HistoricalUsage."Period 29");
        30: EXIT(HistoricalUsage."Period 30");
        31: EXIT(HistoricalUsage."Period 31");
        32: EXIT(HistoricalUsage."Period 32");
        33: EXIT(HistoricalUsage."Period 33");
        34: EXIT(HistoricalUsage."Period 34");
        35: EXIT(HistoricalUsage."Period 35");
        36: EXIT(HistoricalUsage."Period 36");
        37: EXIT(HistoricalUsage."Period 37");
        38: EXIT(HistoricalUsage."Period 38");
        39: EXIT(HistoricalUsage."Period 39");
        40: EXIT(HistoricalUsage."Period 40");
        41: EXIT(HistoricalUsage."Period 41");
        42: EXIT(HistoricalUsage."Period 42");
        43: EXIT(HistoricalUsage."Period 43");
        44: EXIT(HistoricalUsage."Period 44");
        45: EXIT(HistoricalUsage."Period 45");
        46: EXIT(HistoricalUsage."Period 46");
        47: EXIT(HistoricalUsage."Period 47");
        48: EXIT(HistoricalUsage."Period 48");
      END;
    END;

    PROCEDURE SetItemLedgerUpdate@1();
    BEGIN
    END;

    PROCEDURE CreateAFPItemJournalUsage@2();
    BEGIN
      ItemJnlLine.INIT;
      //ItemJnlLine.SetUpNewLine(ItemJnlLine);
      //ItemJnlLine."Journal Template Name" := ItemJournalBatch."Journal Template Name";
      //ItemJnlLine."Journal Batch Name" := ItemJournalBatch.Name;
      ItemJnlLine.VALIDATE("Posting Date",GetDate(Period));
      LineNo := LineNo + 1;
      ItemJnlLine."Line No." := LineNo;
      ItemJnlLine."Source Code" := 'ITEMJNL';
      IF DocumentNo <> '' THEN
        ItemJnlLine."Document No." := DocumentNo
      ELSE
        ItemJnlLine."Document No." := COPYSTR(FORMAT(LineNo),1,20);//STRSUBSTNO('S-%1',HistoricalUsage."Item No.") + ' ' + FORMAT(LineNo);
      ItemJnlLine.VALIDATE("Entry Type",ItemJnlLine."Entry Type"::Sale);
      ItemJnlLine.VALIDATE("Item No.",HistoricalUsage."Item No.");
      ItemJnlLine.VALIDATE("Location Code",HistoricalUsage."Location Code");

      IF (HistoricalUsage."Source No." = '') AND (HistoricalUsage."Source Type" = HistoricalUsage."Source Type"::" ") THEN BEGIN
        ItemJnlLine."Source Type" := ItemJnlLine."Source Type"::Customer;
        ItemJnlLine."Source No." := DefCustomer."No.";
      END ELSE BEGIN
        ItemJnlLine."Source Type" := HistoricalUsage."Source Type";
        ItemJnlLine."Source No." := HistoricalUsage."Source No.";
      END;

      //ItemJnlLine."Source No." := STRSUBSTNO('S-%1',HistoricalUsage."Item No.");
      // specific g/L? - use item
      //ItemJnlLine.VALIDATE("Gen. Prod. Posting Group", GenProdPostGroup);
      ItemJnlLine.VALIDATE(Quantity,GetQuantity(Period));
      ItemJnlLine.VALIDATE("Unit Amount", HistoricalUsage.Cost);
      //ItemJnlLine."First Shipment" := TRUE;
      //ItemJnlLine.INSERT(TRUE);
      ItemJnlPostLine.RunWithCheck(ItemJnlLine);
    END;

    PROCEDURE AdjustOnHandAFP@47();
    BEGIN
      ItemJnlLine.INIT;
      //ItemJnlLine.SetUpNewLine(ItemJnlLine);
      //ItemJnlLine."Journal Template Name" := ItemJournalBatch."Journal Template Name";
      //ItemJnlLine."Journal Batch Name" := ItemJournalBatch.Name;
      // what should be the inventory date?  does it matter?
      ItemJnlLine.VALIDATE("Posting Date",PeriodStartDate);
      LineNo := LineNo + 1;
      ItemJnlLine."Line No." := LineNo;
      ItemJnlLine."Source Code" := 'ITEMJNL';
      ItemJnlLine.VALIDATE("Entry Type",ItemJnlLine."Entry Type"::"Positive Adjmt.");
      ItemJnlLine.VALIDATE("Item No.",HistoricalUsage."Item No.");
      ItemJnlLine.VALIDATE("Location Code",HistoricalUsage."Location Code");
      //ItemJnlLine."Source No." := STRSUBSTNO('Adj-%1',HistoricalUsage."Item No.");
      IF DocumentNo <> '' THEN
        ItemJnlLine."Document No." := DocumentNo
      ELSE
        ItemJnlLine."Document No." := COPYSTR(STRSUBSTNO('Adj-%1',HistoricalUsage."Item No."),1,20);
      ItemJnlLine.VALIDATE("Unit Amount", HistoricalUsage.Cost);
      // specific g/L?
      //ItemJnlLine.VALIDATE("Gen. Prod. Posting Group", GenProdPostGroup);
      ItemJnlLine.VALIDATE(Quantity,(HistoricalUsage."On Hand Qty." - ProcUnit.Inventory));
      //ItemJnlLine.INSERT(TRUE);
      ItemJnlPostLine.RunWithCheck(ItemJnlLine);
    END;

    PROCEDURE InsertAbsoluteValueLedgerEntryUsage@3();
    BEGIN
      EntryNo := EntryNo + 1;
      ItemLedgerEntry.INIT;
      ItemLedgerEntry."Entry No." := EntryNo;
      ItemLedgerEntry."Item No." := HistoricalUsage."Item No.";
      ItemLedgerEntry."Posting Date" := GetDate(Period);
      ItemLedgerEntry."Entry Type" := ItemLedgerEntry."Entry Type"::Sale;
      ItemLedgerEntry."Location Code" := HistoricalUsage."Location Code";
      ItemLedgerEntry.Quantity := - GetQuantity(Period);
      ItemLedgerEntry."Remaining Quantity" := 0;
      ItemLedgerEntry."Invoiced Quantity" := 0;
      ItemLedgerEntry."Qty. per Unit of Measure" := 1;
      ItemLedgerEntry."Unit of Measure Code" := HistoricalUsage."Base UOM Code";
      ItemLedgerEntry."Item Category Code" := HistoricalUsage.Category;
      ItemLedgerEntry."First Shipment" := TRUE;
      ItemLedgerEntry.INSERT;
    END;

    PROCEDURE AdjustOnHandAbsoluteValue@43();
    BEGIN
      ItemLedgerEntry.INIT;
      EntryNo := EntryNo + 1;
      ItemLedgerEntry."Entry No." := EntryNo;
      ItemLedgerEntry."Item No." := ProcUnit."Item No.";
      ItemLedgerEntry."Posting Date" := PeriodStartDate;
      ItemLedgerEntry."Location Code" := ProcUnit."Location Code";
      ItemLedgerEntry.Quantity := HistoricalUsage."On Hand Qty." - ProcUnit.Inventory;
      IF ItemLedgerEntry.Quantity > 0 THEN
        ItemLedgerEntry."Entry Type" := ItemLedgerEntry."Entry Type"::"Positive Adjmt."
      ELSE
        ItemLedgerEntry."Entry Type" := ItemLedgerEntry."Entry Type"::"Negative Adjmt.";
      ItemLedgerEntry."Remaining Quantity" := 0;
      ItemLedgerEntry."Invoiced Quantity" := 0;
      ItemLedgerEntry."Variant Code" := '';
      ItemLedgerEntry."Qty. per Unit of Measure" := 1;
      ItemLedgerEntry."Unit of Measure Code" := Item."Base Unit of Measure";
      ItemLedgerEntry.INSERT;
    END;

    LOCAL PROCEDURE OpenWindow@59();
    BEGIN
      IF NOT ShowDialog THEN
        EXIT;

      Window.OPEN('@1@@@@@@@@@@@@@@@@@@@@@@@@@@@');
    END;

    LOCAL PROCEDURE UpDateWindow@56();
    BEGIN
      IF NOT ShowDialog THEN
        EXIT;

      IF CurrentCount MOD 100 = 0 THEN
        Window.UPDATE(1,ROUND(10000 * (CurrentCount / TotalCount),1));
    END;

    PROCEDURE CloseWindow@6();
    BEGIN
      IF NOT ShowDialog THEN
        EXIT;

      Window.CLOSE;
    END;

    PROCEDURE SetIsAFP@36(inIsAFP@1000 : Boolean);
    BEGIN
      IsAFP := inIsAFP;
    END;

    PROCEDURE PostItemJournal@4();
    BEGIN
      IF NOT IsAFP THEN
        EXIT;
      //CODEUNIT.RUN(CODEUNIT::"Item Jnl.-Post",ItemJnlLine);
    END;

    PROCEDURE GetVersion@10() LocVersionInt : Integer;
    VAR
      Pos@1001 : Integer;
      LocVersionText@1002 : Text[250];
    BEGIN
      LocVersionText := AppMgt.ApplicationVersion;
      Pos := STRPOS(LocVersionText, '.');
      Pos := Pos - 1;
      LocVersionText := FORMAT(LocVersionText[Pos]);
      IF NOT EVALUATE(LocVersionInt, LocVersionText) THEN
        LocVersionInt := 0;
      EXIT(LocVersionInt);
    END;

    PROCEDURE GetLocalVersion@20() LocVersionText : Text;
    VAR
      Pos@1001 : Integer;
    BEGIN
      LocVersionText := AppMgt.ApplicationVersion;
      LocVersionText := DELCHR(LocVersionText, '<');
      LocVersionText := COPYSTR(LocVersionText, 1, 2);
      EXIT(LocVersionText);
    END;

    PROCEDURE AdjustQtyOnHand@16(QtyOnHand@1000 : Decimal);
    BEGIN
      // adjust on hand
      HistoricalUsage.SETRANGE("Location Code",ProcUnit."Location Code");
      HistoricalUsage.SETRANGE("Item No.",ProcUnit."Item No.");
      IF HistoricalUsage.FIND('+') THEN BEGIN
        HistoricalUsage."Last Record" := TRUE;
        HistoricalUsage.MODIFY;
        ProcUnit.SETFILTER("Location Filter",'%1',ProcUnit."Location Code");
        ProcUnit.CALCFIELDS(Inventory,"Qty. on Purchase Order");

        IF ProcUnit.Inventory <> QtyOnHand THEN BEGIN
          IF IsAFP THEN BEGIN
            AdjustOnHandAFP;
          END ELSE BEGIN
            AdjustOnHandAbsoluteValue;
          END;
        END;
      END;
    END;

    PROCEDURE AdjustPurchPeriodQty@8(TotalQtyOnPO@1000 : Decimal);
    BEGIN
      // adjust purchase periods
      IF ProcUnit."Qty. on Purchase Order" <> TotalQtyOnPO THEN BEGIN
        Item.GET(ProcUnit."Item No.");
        IF Item."Vendor No." <> '' THEN BEGIN
          PurchaseHdr.SETCURRENTKEY(PurchaseHdr."Buy-from Vendor No.");
          PurchaseHdr.SETRANGE("Buy-from Vendor No.",Item."Vendor No.");
          IF NOT PurchaseHdr.FIND('-') THEN BEGIN
            PurchaseHdr."Document Type" := PurchaseHdr."Document Type"::Order;
            PurchaseHdr."No." := '';
            PurchaseHdr.INSERT(TRUE);
            PurchaseHdr.VALIDATE("Buy-from Vendor No.",Item."Vendor No.");
            PurchaseHdr.MODIFY;
          END;
          PurchaseLine.SETRANGE("Document Type",PurchaseHdr."Document Type");
          PurchaseLine.SETRANGE("Document No.",PurchaseHdr."No.");
          IF PurchaseLine.FIND('+') THEN
            LineNo := PurchaseLine."Line No."
          ELSE
            LineNo := 0;
          LineNo := LineNo + 1000;
          PurchaseLine."Document Type" := PurchaseHdr."Document Type";
          PurchaseLine."Document No." := PurchaseHdr."No.";
          PurchaseLine."Line No." := LineNo;
          PurchaseLine."Buy-from Vendor No." := PurchaseHdr."Buy-from Vendor No.";
          PurchaseLine.VALIDATE(Type,PurchaseLine.Type::Item);
          PurchaseLine.VALIDATE("No.",Item."No.");
          PurchaseLine.VALIDATE("Unit of Measure Code",ProcUnit."Purchase Unit of Measure");
          PurchaseLine.VALIDATE("Location Code",ProcUnit."Location Code");
          PurchaseLine.VALIDATE(Quantity,(TotalQtyOnPO - ProcUnit."Qty. on Purchase Order"));
          PurchaseLine."Expected Receipt Date" := CALCDATE('<+2W>', WORKDATE);
          PurchaseLine.INSERT;
        END ELSE
          ERROR('Item Card %1 has no Vendor.',Item."No.");
      END;
    END;

    PROCEDURE CreateSalesOrderLines@12(CurrCustNo@1002 : Code[20];CurrLocCode@1003 : Code[10];CurrShipDate@1000 : Date;CurrQtyOnSO@1001 : Decimal;PostOrder@1240020000 : Boolean);
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1005 : Record 37;
      Customer@1006 : Record 18;
    BEGIN
      LineCount := LineCount + 1;
      IF NOT Customer.GET(CurrCustNo) THEN BEGIN
        RANDOMIZE(LineCount);
        Customer.RESET;
        Customer.SETRANGE("IC Partner Code", '');
        Customer.SETRANGE(Blocked, Customer.Blocked::" ");
        Customer.FIND('-');
        IF Customer.NEXT(RANDOM(CustRandomSeed - 1)) = 0 THEN
          Customer.GET(DefCustomer."No.");
      END;

      SalesHeader.INIT;
      SalesHeader."Document Type" := SalesHeader."Document Type"::Order;
      IF PostOrder THEN
        SalesHeader."Posting Date" := CurrShipDate
      ELSE
        SalesHeader."Posting Date" := WORKDATE;
      SalesHeader."No." := '';
      SalesHeader.INSERT(TRUE);
      SalesHeader.SetHideValidationDialog(TRUE);
      SalesHeader.VALIDATE("Sell-to Customer No.", Customer."No.");
      SalesHeader.VALIDATE("Location Code", CurrLocCode);
      SalesHeader.VALIDATE("Shipment Date", CurrShipDate);
      SalesHeader.VALIDATE("Tax Area Code", '');
      SalesHeader.MODIFY(FALSE);

      SalesLine.INIT;
      SalesLine."Document Type" := SalesHeader."Document Type";
      SalesLine."Document No." := SalesHeader."No.";
      SalesLine."Line No." := 10000;
      SalesLine.SetSalesHeader(SalesHeader);
      SalesLine.SetHideValidationDialog(TRUE);
      SalesLine.INSERT(TRUE);
      SalesLine.SetSalesHeader(SalesHeader);
      SalesLine.SetHideValidationDialog(TRUE);
      SalesLine.VALIDATE(Type, SalesLine.Type::Item);
      SalesLine.VALIDATE("No.",Item."No.");
      SalesLine.VALIDATE("Unit of Measure Code",Item."Base Unit of Measure");  // assume the usage is in base UOM
      SalesLine.VALIDATE("Tax Area Code", '');
      //SalesLine.VALIDATE("Location Code",SalesHeader."Location Code");
      SalesLine.VALIDATE(Quantity, CurrQtyOnSO);
      //SalesLine.Validate("Shipment Date", ShipDate);
      SalesLine.MODIFY(FALSE);

      IF PostOrder THEN BEGIN
        TempSalesHeaderPost.INIT;
        TempSalesHeaderPost."Document Type" := SalesHeader."Document Type";
        TempSalesHeaderPost."No." := SalesHeader."No.";
        TempSalesHeaderPost.INSERT(FALSE);
      END;
    END;

    PROCEDURE CreatePurchOrderLines@29(CurrVendNo@1004 : Code[20];CurrLocCode@1003 : Code[10];CurrExpRcptDate@1002 : Date;CurrQtyOnPO@1001 : Decimal);
    VAR
      PurchHeader@1000 : Record 38;
      PurchLine@1005 : Record 39;
      locVendor@1006 : Record 23;
    BEGIN
      LineCount := LineCount + 1;
      IF NOT locVendor.GET(CurrVendNo) THEN BEGIN
        locVendor.GET(DefVendor."No.");
        RANDOMIZE(LineCount);
        locVendor.RESET;
        locVendor.SETRANGE(Blocked, locVendor.Blocked::" ");
        locVendor.SETRANGE("IC Partner Code", '');
        locVendor.FIND('-');
        IF locVendor.NEXT(RANDOM(VendRandomSeed-1)) = 0 THEN
          locVendor.GET(DefVendor."No.");
      END;

      PurchHeader.INIT;
      PurchHeader."Document Type" := PurchHeader."Document Type"::Order;
      PurchHeader."Posting Date" := WORKDATE;
      PurchHeader."No." := '';
      PurchHeader.INSERT(TRUE);
      PurchHeader.SetHideValidationDialog(TRUE);
      PurchHeader.VALIDATE("Buy-from Vendor No.", locVendor."No.");
      PurchHeader.VALIDATE("Location Code", CurrLocCode);
      PurchHeader.VALIDATE("Expected Receipt Date", CurrExpRcptDate);
      PurchHeader.MODIFY(FALSE);

      PurchLine.INIT;
      PurchLine."Document Type" := PurchHeader."Document Type";
      PurchLine."Document No." := PurchHeader."No.";
      PurchLine."Line No." := 10000;
      PurchLine.SetPurchHeader(PurchHeader);
      PurchLine.INSERT(TRUE);
      PurchLine.SetPurchHeader(PurchHeader);
      PurchLine.VALIDATE(Type, PurchLine.Type::Item);
      PurchLine.VALIDATE("No.",Item."No.");
      //PurchLine.VALIDATE("Location Code",PurchHeader."Location Code");
      PurchLine.VALIDATE(Quantity, CurrQtyOnPO);
      //PurchLine.Validate("Shipment Date", ShipDate);
      PurchLine.MODIFY(FALSE);
    END;

    PROCEDURE CreateNewLocInvPeriods@1240030000(Location@1240030000 : Record 14);
    VAR
      InventoryPeriod@1240030001 : Record 14000552;
      LocInvPeriod@1240030002 : Record 14000553;
    BEGIN
      InventoryPeriod.RESET;
      InventoryPeriod.SETFILTER(Type,'<>%1',InventoryPeriod.Type::Calculate);
      IF InventoryPeriod.FIND('-') THEN
        REPEAT
          LocInvPeriod.INIT;
          LocInvPeriod."Starting Date" := InventoryPeriod."Starting Date";
          LocInvPeriod."Location Code" := Location.Code;
          LocInvPeriod."Ending Date" := InventoryPeriod."Ending Date";
          IF LocInvPeriod.INSERT THEN;
        UNTIL InventoryPeriod.NEXT = 0;
    END;

    PROCEDURE NotInUseKitSetup@9();
    BEGIN
      {
      // Create Assembly Setup
      LineNo := 0;

      Item.GET('KT08-05-447');
      LineNo := LineNo + 1;
      BOMComponent.INIT;
      BOMComponent."Parent Item No." := Item."No.";
      BOMComponent."Line No." := LineNo;
      BOMComponent.Type := BOMComponent.Type::Item;
      ItemComp.GET('KC10-71-447');
      BOMComponent.VALIDATE("No.",ItemComp."No.");
      BOMComponent."Unit of Measure Code" := ItemComp."Base Unit of Measure";
      BOMComponent."Quantity per" := 1;
      BOMComponent.INSERT;

      LineNo := LineNo + 1;
      BOMComponent.INIT;
      BOMComponent."Parent Item No." := Item."No.";
      BOMComponent."Line No." := LineNo;
      BOMComponent.Type := BOMComponent.Type::Item;
      ItemComp.GET('KC11-81-447');
      BOMComponent.VALIDATE("No.",ItemComp."No.");
      BOMComponent."Unit of Measure Code" := ItemComp."Base Unit of Measure";
      BOMComponent."Quantity per" := 2;
      BOMComponent.INSERT;

      LineNo := LineNo + 1;
      BOMComponent.INIT;
      BOMComponent."Parent Item No." := Item."No.";
      BOMComponent."Line No." := LineNo;
      BOMComponent.Type := BOMComponent.Type::Item;
      ItemComp.GET('KC08-24-550');
      BOMComponent.VALIDATE("No.",ItemComp."No.");
      BOMComponent."Unit of Measure Code" := ItemComp."Base Unit of Measure";
      BOMComponent."Quantity per" := 3;
      BOMComponent.INSERT;

      ProcUnit.RESET;
      ProcUnit.SETRANGE("Item No.",Item."No.");
      IF ProcUnit.FIND('-') THEN
        REPEAT
          ProcUnit.VALIDATE(
            "Replenishment Source Type",ProcUnit."Replenishment Source Type"::Assembly);
          ProcUnit.MODIFY;
        UNTIL ProcUnit.NEXT = 0;

      AdvForcSetup.GET;
      AdvForcSetup."Assembly Increment Days" := 7;
      AdvForcSetup."Assembly Max. Increments" := 26;
      AdvForcSetup."Maintain Target Stock" := TRUE;
      AdvForcSetup.MODIFY;
      }
    END;

    PROCEDURE NotInUseProdSetup@1240030001();
    BEGIN
      {
      // Production
      ProdBOMHdr.INIT;
      ProdBOMHdr."No." := 'PD08-05-447';
      ProdBOMHdr."Unit of Measure Code" := 'PCS';
      ProdBOMHdr.INSERT(TRUE);

      ProdBOMLine.INIT;
      ProdBOMLine."Production BOM No." := ProdBOMHdr."No.";
      LineNo := LineNo + 10000;
      ProdBOMLine."Line No." := LineNo;
      ProdBOMLine.INSERT(TRUE);
      ProdBOMLine.VALIDATE(Type,ProdBOMLine.Type::Item);
      ProdBOMLine.VALIDATE("No.",'PI10-71-447');
      ProdBOMLine.VALIDATE("Quantity per",1);
      ProdBOMLine.MODIFY(TRUE);

      ProdBOMLine.INIT;
      ProdBOMLine."Production BOM No." := ProdBOMHdr."No.";
      LineNo := LineNo + 10000;
      ProdBOMLine."Line No." := LineNo;
      ProdBOMLine.INSERT(TRUE);
      ProdBOMLine.VALIDATE(Type,ProdBOMLine.Type::Item);
      ProdBOMLine.VALIDATE("No.",'PC11-81-447');
      ProdBOMLine.VALIDATE("Quantity per",2);
      ProdBOMLine.MODIFY(TRUE);

      ProdBOMLine.INIT;
      ProdBOMLine."Production BOM No." := ProdBOMHdr."No.";
      LineNo := LineNo + 10000;
      ProdBOMLine."Line No." := LineNo;
      ProdBOMLine.INSERT(TRUE);
      ProdBOMLine.VALIDATE(Type,ProdBOMLine.Type::Item);
      ProdBOMLine.VALIDATE("No.",'PC24-08-550');
      ProdBOMLine.VALIDATE("Quantity per",3);
      ProdBOMLine.MODIFY(TRUE);

      ProdBOMHdr.VALIDATE(Status,ProdBOMHdr.Status::Certified);
      ProdBOMHdr.MODIFY(TRUE);

      Item.GET('PD08-05-447');
      Item.VALIDATE("Production BOM No.",'PD08-05-447');
      Item.MODIFY;

      ProcUnit.RESET;
      ProcUnit.SETRANGE("Item No.",Item."No.");
      IF ProcUnit.FIND('-') THEN
        REPEAT
          ProcUnit.VALIDATE(
            "Replenishment Source Type",ProcUnit."Replenishment Source Type"::Production);
            ProcUnit.VALIDATE("Replenishment Source Code",'GROUP1');
          ProcUnit.MODIFY;
        UNTIL ProcUnit.NEXT = 0;

      ProdBOMHdr.INIT;
      ProdBOMHdr."No." := 'PI10-71-447';
      ProdBOMHdr."Unit of Measure Code" := 'PCS';
      ProdBOMHdr.INSERT(TRUE);

      ProdBOMLine.INIT;
      ProdBOMLine."Production BOM No." := ProdBOMHdr."No.";
      LineNo := LineNo + 10000;
      ProdBOMLine."Line No." := LineNo;
      ProdBOMLine.INSERT(TRUE);
      ProdBOMLine.VALIDATE(Type,ProdBOMLine.Type::Item);
      ProdBOMLine.VALIDATE("No.",'PC25-08-550');
      ProdBOMLine.VALIDATE("Quantity per",1);
      ProdBOMLine.MODIFY(TRUE);

      ProdBOMLine.INIT;
      ProdBOMLine."Production BOM No." := ProdBOMHdr."No.";
      LineNo := LineNo + 10000;
      ProdBOMLine."Line No." := LineNo;
      ProdBOMLine.INSERT(TRUE);
      ProdBOMLine.VALIDATE(Type,ProdBOMLine.Type::Item);
      ProdBOMLine.VALIDATE("No.",'PC26-08-550');
      ProdBOMLine.VALIDATE("Quantity per",2);
      ProdBOMLine.MODIFY(TRUE);

      ProdBOMHdr.VALIDATE(Status,ProdBOMHdr.Status::Certified);
      ProdBOMHdr.MODIFY(TRUE);

      Item.GET('PI10-71-447');
      Item.VALIDATE("Production BOM No.",'PI10-71-447');
      Item.MODIFY;

      ProcUnit.RESET;
      ProcUnit.SETRANGE("Item No.",Item."No.");
      IF ProcUnit.FIND('-') THEN
        REPEAT
          ProcUnit.VALIDATE(
            "Replenishment Source Type",ProcUnit."Replenishment Source Type"::Production);
            ProcUnit.VALIDATE("Replenishment Source Code",'GROUP1');
          ProcUnit.MODIFY;
        UNTIL ProcUnit.NEXT = 0;
      }
    END;

    PROCEDURE NotInUseCreateCollaborative@14();
    BEGIN
      {
      UsageLedgerEntry.RESET;
      UsageLedgerEntry.FIND('+');
      EntryNo := UsageLedgerEntry."Entry No.";
      UsageLedgerEntry.SETFILTER("Item No.",'10-*|12-*|13-*|14-*|15-*|16-*|17-*');
      IF UsageLedgerEntry.FIND('-') THEN
        REPEAT
          UsageLedgerEntry2.COPY(UsageLedgerEntry);
          EntryNo := EntryNo + 1;
          UsageLedgerEntry2."Entry No." := EntryNo;
          UsageLedgerEntry2.Quantity := ROUND(UsageLedgerEntry.Quantity * 0.6,1.0);
          UsageLedgerEntry2."Source No." := '10000';
          UsageLedgerEntry2."Original Source No." := '10000';
          UsageLedgerEntry2.INSERT;
        UNTIL (UsageLedgerEntry.NEXT = 0) OR
              (UsageLedgerEntry."Entry No." >= 3551);

      UsageLedgerEntry.RESET;
      IF UsageLedgerEntry.FIND('-') THEN
        REPEAT
          UsageLedgerEntry."First Shipment" := TRUE;
          UsageLedgerEntry."Usage Hit" := 1;
          UsageLedgerEntry.MODIFY;
        UNTIL UsageLedgerEntry.NEXT = 0;
      }
    END;

    LOCAL PROCEDURE CheckAssemblySetup@1240020003();
    BEGIN
      IF AdvForecastSetup.GET THEN BEGIN
        IF AdvForecastSetup."Assembly Increment Days" = 0 THEN BEGIN
          AdvForecastSetup."Assembly Increment Days" := 7;
          AdvForecastSetup."Assembly Max. Increments" := 26;
          AdvForecastSetup."Maintain Target Stock" := TRUE;
          AdvForecastSetup.MODIFY;
        END;
      END;
    END;

    LOCAL PROCEDURE CreateSKU@26(VAR CurrProcUnit@1240020000 : Record 14000555);
    VAR
      StockkeepingUnit@1240020001 : Record 5700;
      locItem@1240020002 : Record 27;
    BEGIN
      locItem.GET(ProcUnit."Item No.");
      IF NOT StockkeepingUnit.GET(CurrProcUnit."Location Code",locItem."No.",CurrProcUnit."Variant Code") THEN BEGIN
        StockkeepingUnit.INIT;
        StockkeepingUnit."Item No." := locItem."No.";
        StockkeepingUnit."Location Code" := CurrProcUnit."Location Code";
        StockkeepingUnit."Variant Code" := CurrProcUnit."Variant Code";
        StockkeepingUnit."Shelf No." := locItem."Shelf No.";
        StockkeepingUnit."Standard Cost" := locItem."Standard Cost";
        StockkeepingUnit."Last Direct Cost" := locItem."Last Direct Cost";
        StockkeepingUnit."Unit Cost" := locItem."Unit Cost";
        StockkeepingUnit."Vendor No." := locItem."Vendor No.";
        StockkeepingUnit."Vendor Item No." := locItem."Vendor Item No.";
        StockkeepingUnit."Lead Time Calculation" := locItem."Lead Time Calculation";
        StockkeepingUnit."Reorder Point" := locItem."Reorder Point";
        StockkeepingUnit."Maximum Inventory" := locItem."Maximum Inventory";
        StockkeepingUnit."Reorder Quantity" := locItem."Reorder Quantity";
        StockkeepingUnit."Lot Size" := locItem."Lot Size";
        StockkeepingUnit."Reordering Policy" := locItem."Reordering Policy";
        StockkeepingUnit."Include Inventory" := locItem."Include Inventory";
        StockkeepingUnit."Assembly Policy" := locItem."Assembly Policy";
        StockkeepingUnit."Manufacturing Policy" := locItem."Manufacturing Policy";
        StockkeepingUnit."Discrete Order Quantity" := locItem."Discrete Order Quantity";
        StockkeepingUnit."Minimum Order Quantity" := locItem."Minimum Order Quantity";
        StockkeepingUnit."Maximum Order Quantity" := locItem."Maximum Order Quantity";
        StockkeepingUnit."Safety Stock Quantity" := locItem."Safety Stock Quantity";
        StockkeepingUnit."Order Multiple" := locItem."Order Multiple";
        StockkeepingUnit."Safety Lead Time" := locItem."Safety Lead Time";
        StockkeepingUnit."Flushing Method" := locItem."Flushing Method";

        CASE ProcUnit."Replenishment Source Type" OF
          ProcUnit."Replenishment Source Type"::Vendor:
            BEGIN
              StockkeepingUnit."Replenishment System" := StockkeepingUnit."Replenishment System"::Purchase;
            END;
          ProcUnit."Replenishment Source Type"::Location:
            BEGIN
              StockkeepingUnit."Replenishment System" := StockkeepingUnit."Replenishment System"::Transfer;
            END;
          ProcUnit."Replenishment Source Type"::Assembly:
            BEGIN
              StockkeepingUnit."Replenishment System" := StockkeepingUnit."Replenishment System"::Assembly;
            END;
          ProcUnit."Replenishment Source Type"::Production:
            BEGIN
              StockkeepingUnit."Replenishment System" := StockkeepingUnit."Replenishment System"::"Prod. Order";
            END;
        END;

        StockkeepingUnit."Time Bucket" := locItem."Time Bucket";
        StockkeepingUnit."Rescheduling Period" := locItem."Rescheduling Period";
        StockkeepingUnit."Lot Accumulation Period" := locItem."Lot Accumulation Period";
        StockkeepingUnit."Dampener Period" := locItem."Dampener Period";
        StockkeepingUnit."Dampener Quantity" := locItem."Dampener Quantity";
        StockkeepingUnit."Overflow Level" := locItem."Overflow Level";
        StockkeepingUnit."Last Date Modified" := WORKDATE;
        StockkeepingUnit."Special Equipment Code" := locItem."Special Equipment Code";
        StockkeepingUnit."Put-away Template Code" := locItem."Put-away Template Code";
        StockkeepingUnit."Phys Invt Counting Period Code" :=
          locItem."Phys Invt Counting Period Code";
        StockkeepingUnit."Put-away Unit of Measure Code" :=
          locItem."Put-away Unit of Measure Code";
        StockkeepingUnit."Use Cross-Docking" := locItem."Use Cross-Docking";
        StockkeepingUnit.INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE SetSimOrderNoSeries@1240020007();
    VAR
      MfgSetup@1240020000 : Record 99000765;
      NoSeries@1240020001 : Record 308;
    BEGIN
      MfgSetup.GET;
      IF NoSeries.GET('M-SIM') THEN BEGIN
        MfgSetup."Simulated Order Nos." := 'M-SIM';
        MfgSetup.MODIFY(FALSE);
      END;
    END;

    LOCAL PROCEDURE SetSalesOrderNoSeries@7();
    VAR
      SalesSetup@1240020000 : Record 311;
      NoSeries@1240020001 : Record 308;
      NoSeriesLine@1000 : Record 309;
    BEGIN
      // make sure enough lines to post
      SalesSetup.GET;
      IF NoSeries.GET(SalesSetup."Order Nos.") THEN BEGIN
        NoSeriesLine.SETRANGE("Series Code", NoSeries.Code);
        IF NoSeriesLine.FINDSET THEN BEGIN
          REPEAT
            NoSeriesLine."Warning No." := '';
            NoSeriesLine."Ending No." := '';
            NoSeriesLine.MODIFY(FALSE);
          UNTIL NoSeriesLine.NEXT = 0;
        END;
      END;

      IF NoSeries.GET(SalesSetup."Posted Shipment Nos.") THEN BEGIN
        NoSeriesLine.SETRANGE("Series Code", NoSeries.Code);
        IF NoSeriesLine.FINDSET THEN BEGIN
          REPEAT
            NoSeriesLine."Warning No." := '';
            NoSeriesLine."Ending No." := '';
            NoSeriesLine.MODIFY(FALSE);
          UNTIL NoSeriesLine.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE BatchPostSales@1240020016();
    VAR
      SalesPost@1240020000 : Codeunit 80;
      SalesHeader@1240020001 : Record 36;
    BEGIN
      IF TempSalesHeaderPost.FINDSET THEN BEGIN
        COMMIT;
        REPEAT
          SalesHeader.GET(TempSalesHeaderPost."Document Type", TempSalesHeaderPost."No.");
          //SalesPost.SetPostingDate(FALSE,FALSE,);
          SalesHeader.MODIFY(FALSE);
          SalesHeader.Ship := TRUE;
          IF (SalesHeader."Shipping Advice" <> SalesHeader."Shipping Advice"::Complete) THEN BEGIN
            HeaderCount := HeaderCount + 1;
            // 1/3 of orders to randomize , 2/3 ship complete
            IF ((HeaderCount MOD 3) = 0) THEN
              RandomizeShipmentQuantity(SalesHeader);
          END;
          COMMIT;
          CLEAR(SalesPost);
          IF NOT SalesPost.RUN(SalesHeader) THEN BEGIN
            //MESSAGE('%1 didnt Post %2', SalesHeader."Document Type", SalesHeader."No.");
          END;
          // post all previous entries as long as its historical usage - we randomized for the data to support historical fill rates
          IF (SalesHeader."Posting Date" < CALCDATE('<-CM>', WORKDATE)) AND ((HeaderCount MOD 3)=0) THEN BEGIN
            SalesHeader.GET(SalesHeader."Document Type", SalesHeader."No.");
            SalesHeader.Ship := TRUE;
            SalesHeader.Invoice := TRUE;
            COMMIT;
            CLEAR(SalesPost);
            IF NOT SalesPost.RUN(SalesHeader) THEN BEGIN
              //MESSAGE('%1 didnt Post %2', SalesHeader."Document Type", SalesHeader."No.");
            END;
          END;
        UNTIL TempSalesHeaderPost.NEXT = 0;
        COMMIT;
      END;
    END;

    LOCAL PROCEDURE RandomizeShipmentQuantity@15(VAR CurrSalesHeader@1001 : Record 36);
    VAR
      SalesLine@1002 : Record 37;
      Percent@1004 : Integer;
    BEGIN
      LineCount := 0;
      SalesLine.SETRANGE("Document Type", CurrSalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.", CurrSalesHeader."No.");
      SalesLine.SETRANGE(Type, SalesLine.Type::Item);
      SalesLine.SETFILTER("No.", '<>%1', '');
      SalesLine.SETFILTER(Quantity, '<>%1', 0);
      IF SalesLine.FINDSET THEN BEGIN
        LineCount := LineCount + 1;
        RANDOMIZE(LineCount);
        Percent := RANDOM(100);
        SalesLine.VALIDATE("Qty. to Ship", ROUND(((Percent/100)*SalesLine."Qty. to Ship"),1.0,'>'));
        SalesLine.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE FullShipmentQuantity@1240020008(VAR CurrSalesHeader@1001 : Record 36);
    VAR
      SalesLine@1002 : Record 37;
    BEGIN
      LineCount := 0;
      SalesLine.SETRANGE("Document Type", CurrSalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.", CurrSalesHeader."No.");
      SalesLine.SETRANGE(Type, SalesLine.Type::Item);
      SalesLine.SETFILTER("No.", '<>%1', '');
      SalesLine.SETFILTER(Quantity, '<>%1', 0);
      IF SalesLine.FINDSET THEN BEGIN
        SalesLine.VALIDATE("Qty. to Ship", SalesLine."Outstanding Quantity");
      END;
    END;

    BEGIN
    {
      04/22/2015:  Remove the Adjust Purchase Qty
      06/24/2015:  Add Default Setup values to the onRun.  Add US vs. W1 Tax settings.
      12/28/2015:  Add Safety Stock Days and First Stocked Date.
      06/03/2016:  Add details for standard NAV configuration.  StockKeeping units.
                   Item setup data will be set based on the first record found.
    }
    END.
  }
}

