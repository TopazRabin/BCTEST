OBJECT Codeunit 14050003 UPSlink Manifest Mgt
{
  OBJECT-PROPERTIES
  {
    Date=03/05/18;
    Time=12:00:00 PM;
    Version List=SE0.60.19;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ShippingAgent@1240030000 : Record 291;
      PackingStation@1240030001 : Record 14000709;
      ShippingSetup@1240030002 : Record 14000707;
      ShippingAgentAccount@1240030003 : Record 14050005;
      ShippingAgentService@1240030004 : Record 14000708;
      UPSlinkSetup@1240030010 : Record 14050001;
      UPSPackageGroupingTmp@1240030009 : TEMPORARY Record 14050008;
      Shipping@1240030007 : Codeunit 14000701;
      ShippingSetupRetrieved@1240030008 : Boolean;

    PROCEDURE BuildUPSManifest@1(CurrentPackage@1240030000 : Record 14000701;Posted@1240030001 : Boolean;ShipmentNo@1240030002 : Code[35];ManifestNo@1240030011 : Code[20]) : Integer;
    VAR
      UPSOptionPage@1240030003 : Record 14000761;
      UPSPostedOptionPage@1240030004 : Record 14000762;
      UPSManifest@1240030005 : Record 14050007;
      UPSManifest2@1240030006 : Record 14050007;
      AmountText@1240030007 : Text[30];
      EntryNo@1240030008 : Integer;
      ActualWeight@1240030009 : Decimal;
      Precision@1240030010 : Decimal;
    BEGIN
      IF CurrentPackage."Manual Shipment" THEN
        EXIT;

      UPSManifest.RESET;
      UPSManifest.SETCURRENTKEY("Package No.");
      UPSManifest.SETRANGE("Package No.",CurrentPackage."No.");

      IF UPSManifest.FIND('-') THEN
        REPEAT
          IF UPSManifest2.GET(UPSManifest."Entry No.") THEN
            UPSManifest2.DELETE;
        UNTIL UPSManifest.NEXT = 0;

      GetShippingSetup;
      GetUPSlinkSetup;
      GetShippingAgentService(
        CurrentPackage."Shipping Agent Code",CurrentPackage."Shipping Agent Service",
        CurrentPackage."World Wide Service");

      IF Posted THEN BEGIN
        UPSPostedOptionPage.GET(CurrentPackage."No.");
        UPSOptionPage.Type := UPSOptionPage.Type::Package;
        UPSOptionPage.TRANSFERFIELDS(UPSPostedOptionPage);
      END ELSE
        UPSOptionPage.GET(UPSOptionPage.Type::Package,CurrentPackage."No.",0,0);

      UPSManifest.RESET;
      UPSManifest.LOCKTABLE;

      IF UPSManifest.FIND('+') THEN
        EntryNo := UPSManifest."Entry No." + 1
      ELSE
        EntryNo := 1;

      UPSManifest.INIT;
      UPSManifest."Entry No." := EntryNo;

      IF CurrentPackage."Packing Date" = 0D THEN
        CurrentPackage."Packing Date" := WORKDATE;

      UPSManifest."Manifest No." := ManifestNo;
      UPSManifest."Shipper Account Number" := CurrentPackage."Shipping Agent Account No.";
      UPSManifest."Shipment Number" := ShipmentNo;
      UPSManifest."First Package" := ShipmentNo = CurrentPackage."External Tracking No.";
      UPSManifest."Total Packages" := CurrentPackage."Total Packages";
      UPSManifest."Package Tracking Number" := CurrentPackage."External Tracking No.";

      IF CurrentPackage."World Wide Service" OR
         CurrentPackage."UPS Canadian Service" OR
         CurrentPackage."UPS Puerto Rico Service"
      THEN BEGIN
        IF UPSOptionPage."Call Tag Type" <> UPSOptionPage."Call Tag Type"::"Exchange Return" THEN
          CurrentPackage.TESTFIELD("Export Document No.");

        IF CurrentPackage."UPS Canadian Service" THEN
          UPSManifest."International Service Type" := UPSManifest."International Service Type"::Canadian
        ELSE
          IF CurrentPackage."World Wide Service" THEN
            UPSManifest."International Service Type" :=
              UPSManifest."International Service Type"::International
          ELSE
            UPSManifest."International Service Type" :=
              UPSManifest."International Service Type"::"Puerto Rican";
      END;

      IF CurrentPackage.COD AND
         NOT CurrentPackage."World Wide Service" AND NOT CurrentPackage."UPS Canadian Service"
      THEN
        UPSManifest.COD := TRUE;

      UPSManifest."Shipping Agent Code" := CurrentPackage."Shipping Agent Code";
      UPSManifest."Shipping Agent Service" := CurrentPackage."Shipping Agent Service";

      IF ShippingAgentService."Service Indicator" = '15' THEN
        UPSManifest."UPS Service Type" := '14'
      ELSE
        IF ShippingAgentService."Service Indicator" = '04' THEN
          UPSManifest."UPS Service Type" := '65'
        ELSE
          UPSManifest."UPS Service Type" := ShippingAgentService."Service Indicator";

      UPSManifest."Consignee Company Name" := CurrentPackage."Ship-to Name";
      UPSManifest."Consignee Address3" := CurrentPackage."Ship-to Name 2";
      UPSManifest."Consignee Address1" := CurrentPackage."Ship-to Address";
      UPSManifest."Consignee Address2" := CurrentPackage."Ship-to Address 2";

      UPSManifest."Consignee City" := CurrentPackage."Ship-to City";
      UPSManifest."Consignee State" := CurrentPackage."Ship-to State";
      UPSManifest."Consignee Postal Code" :=
        COPYSTR(DELCHR(CurrentPackage."Ship-to ZIP Code",'=','-'),1,9);
      UPSManifest."Consignee Phone" := CurrentPackage."Ship-to Phone No.";

      IF UPSlinkSetup."Online Address Validation" THEN BEGIN
        UPSManifest2.RESET;
        UPSManifest2.SETCURRENTKEY(
          "Consignee Address1","Consignee Address2","Consignee City","Consignee State");

        UPSManifest2.SETRANGE("Consignee Address1",UPSManifest."Consignee Address1");
        UPSManifest2.SETRANGE("Consignee Address2",UPSManifest."Consignee Address2");

        UPSManifest2.SETRANGE("Consignee City",UPSManifest."Consignee City");
        UPSManifest2.SETRANGE("Consignee State",UPSManifest."Consignee State");
        UPSManifest2.SETFILTER("Book Number",'<>%1','');
        UPSManifest2.SETFILTER(
           "Consignee Postal Code",'%1..',COPYSTR(UPSManifest."Consignee Postal Code",1,5));

        IF UPSManifest2.FIND('+') THEN BEGIN
          IF UPSManifest2."Address Validation Results" IN
             [UPSManifest2."Address Validation Results"::"Not Validated",
              UPSManifest2."Address Validation Results"::Invalid]
          THEN
            UPSManifest."Address Validation Results" :=
              UPSManifest."Address Validation Results"::Pending
          ELSE BEGIN
            UPSManifest."Address Validation Results" := UPSManifest2."Address Validation Results";
            UPSManifest."Address Validation Date" := UPSManifest2."Address Validation Date";
          END;
        END ELSE
          UPSManifest."Address Validation Results" := UPSManifest."Address Validation Results"::Pending;
      END;
      Precision := 0.1;
      CurrentPackage.ClearTotalValueFields;

      IF CurrentPackage.Closed THEN BEGIN  // Not an opened posted package being reported
        UPSOptionPage.TESTFIELD("Oversized Package",FALSE);
        UPSOptionPage.TESTFIELD("Oversized Package 2",FALSE);
        UPSOptionPage.TESTFIELD("Oversized Package 3",FALSE);
      END;

      IF ShippingSetup."Default Weight Units" = ShippingSetup."Default Weight Units"::KGS THEN BEGIN
        IF Posted THEN
          ActualWeight := ROUND(ShippingSetup.KiloToPound(CurrentPackage.GetPostedWeight),Precision,'>')
        ELSE
          ActualWeight := ROUND(ShippingSetup.KiloToPound(CurrentPackage.GetWeight),Precision,'>');
      END ELSE BEGIN
        IF Posted THEN
          ActualWeight := ROUND(CurrentPackage.GetPostedWeight,Precision,'>')
        ELSE
          ActualWeight := ROUND(CurrentPackage.GetWeight,Precision,'>');
      END;

      IF UPSOptionPage."Large Package" AND
         (CurrentPackage."Oversize Actual Weight" > 0)
      THEN
        ActualWeight := CurrentPackage."Oversize Actual Weight";

      IF ShippingSetup."Default Weight Units" = ShippingSetup."Default Weight Units"::LBS THEN
        AmountText := Integer2Text(ROUND(ActualWeight,0.1,'>') * 10)
      ELSE
        AmountText := Integer2Text(ROUND(ShippingSetup.PoundToKilo(ActualWeight),0.1,'>') * 10);

      UPSManifest."Package Actual Weight" := '+' + PADSTR('',7 - STRLEN(AmountText),'0') + AmountText;

      IF CurrentPackage."Use Dim Weight" THEN BEGIN
        IF ShippingSetup."Default Weight Units" = ShippingSetup."Default Weight Units"::LBS THEN
          AmountText := Integer2Text(ROUND(CurrentPackage."Dimensional Weight",0.1,'>') * 10)
        ELSE
          AmountText :=
            Integer2Text(
              ROUND(ShippingSetup.PoundToKilo(CurrentPackage."Dimensional Weight"),0.1,'>') * 10);

        UPSManifest."Package Published Weight" := '+' + PADSTR('',7 - STRLEN(AmountText),'0') + AmountText;
      END ELSE
        UPSManifest."Package Published Weight" := '+0000000';

      IF CurrentPackage."Calculation Length" > 0 THEN BEGIN
        AmountText := Integer2Text(ROUND(CurrentPackage."Calculation Length",0.1,'>') * 100);
        UPSManifest."Package Length" := '+' + PADSTR('',8 - STRLEN(AmountText),'0') + AmountText;
      END ELSE
        UPSManifest."Package Length" := '+00000000';

      IF CurrentPackage."Calculation Width" > 0 THEN BEGIN
        AmountText := Integer2Text(ROUND(CurrentPackage."Calculation Width",0.1,'>') * 100);
        UPSManifest."Package Width" :=
          '+' + PADSTR('',8 - STRLEN(AmountText),'0') + AmountText;
      END ELSE
        UPSManifest."Package Width" := '+00000000';

      IF CurrentPackage."Calculation Height" > 0 THEN BEGIN
        AmountText := Integer2Text(ROUND(CurrentPackage."Calculation Height",0.1,'>') * 100);
        UPSManifest."Package Height" :=
          '+' + PADSTR('',8 - STRLEN(AmountText),'0') + AmountText;
      END ELSE
        UPSManifest."Package Height" := '+00000000';

      IF (UPSOptionPage."Call Tag Type" <> UPSOptionPage."Call Tag Type"::None) AND
         (UPSOptionPage."Call Tag Type" <> UPSOptionPage."Call Tag Type"::"Exchange Outbound") THEN
        UPSManifest."Return Service" := TRUE;

      IF ShippingSetup."Default Weight Units" = ShippingSetup."Default Weight Units"::KGS THEN
        UPSManifest."UOM Weight" := 'KGS'
      ELSE
        UPSManifest."UOM Weight" := 'LBS';
      UPSManifest."UOM Dim" := 'IN';
      UPSManifest."Package No." := CurrentPackage."No.";
      UPSManifest."Date Shipped" := CurrentPackage."Packing Date";
      UPSManifest."World Ease Master No." := UPSOptionPage."World Ease Master No.";
      UPSManifest."World Ease Package No." := UPSOptionPage."World Ease Package No.";
      UPSManifest."Package Calculation Weight" := CurrentPackage."Calculation Weight";
      UPSManifest."Package Calculation Volume" := CurrentPackage."Calculation Volume";
      UPSManifest."Package Calculation Value" := CurrentPackage."Calculation Value";
      UPSManifest."Shipping Cost" := CurrentPackage."Shipping Cost";
      UPSManifest."Shipping Charge" := CurrentPackage."Shipping Charge";
      UPSManifest."Insured Value" := CurrentPackage."Calculation Insured Value";

      UPSManifest.INSERT;

      EXIT(EntryNo);
    END;

    LOCAL PROCEDURE GetShippingSetup@50();
    BEGIN
      IF NOT ShippingSetupRetrieved THEN BEGIN
        ShippingSetup.GET;
        ShippingSetupRetrieved := TRUE;
      END;
    END;

    LOCAL PROCEDURE GetShippingAgentService@14(ShippingAgentCode@1240030000 : Code[10];ShippingAgentServiceCode@1240030001 : Code[30];WorldWideService@1240030002 : Boolean);
    BEGIN
      IF (ShippingAgentService.Code <> ShippingAgentCode) OR
         (ShippingAgentService."World Wide Service" <> WorldWideService) OR
         (ShippingAgentService.Code <> ShippingAgentServiceCode) OR
         (ShippingAgentServiceCode = '')
      THEN
        ShippingAgentService.GET(ShippingAgentCode,ShippingAgentServiceCode,WorldWideService);
    END;

    LOCAL PROCEDURE GetShippingAgentAccount@22(ShippingAgentAccountNo@1240030000 : Code[10]) : Boolean;
    BEGIN
      IF (ShippingAgentAccountNo <> '') AND
         (ShippingAgentAccount."Account No." = ShippingAgentAccountNo)
      THEN
        EXIT(TRUE)
      ELSE
        IF ShippingAgentAccount.GET(ShippingAgentAccountNo) THEN
          EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetPackingStation@1240030005();
    BEGIN
      IF PackingStation.Code = '' THEN
        PackingStation.GetPackingStation;
    END;

    LOCAL PROCEDURE Integer2Text@4(CalcInteger@1240030000 : Integer) : Text[30];
    VAR
      TempText@1240030001 : Text[30];
      ThousandChar@1240030002 : Text[1];
    BEGIN
      ThousandChar := COPYSTR(FORMAT(1000.1),2,1);
      TempText := FORMAT(CalcInteger);
      TempText := DELCHR(TempText,'=',ThousandChar);
      TempText := CONVERTSTR(TempText,',','.');
      EXIT(TempText);
    END;

    PROCEDURE GroupShipments@13(ManifestHeader@1240030000 : Record 14000712);
    VAR
      ManifestLine@1240030001 : Record 14000713;
      ManifestLineTmp@1240030006 : TEMPORARY Record 14000713;
      PostedPackage@1240030002 : Record 14000704;
      Package@1240030003 : Record 14000701;
      UPSPostedOptionPage@1240030004 : Record 14000762;
      UPSOptionPage@1240030005 : Record 14000761;
      PrevShippingAgentService@1240030007 : Code[30];
      PrevShipToAddress@1240030008 : Text[35];
      PrevShipToZipCode@1240030009 : Code[20];
      PrevShippingAgentAccountNo@1240030010 : Code[10];
    BEGIN
      UPSPackageGroupingTmp.RESET;
      UPSPackageGroupingTmp.DELETEALL;

      ManifestLine.RESET;
      ManifestLine.SETCURRENTKEY(
        "Manifest No.","Shipping Agent Account No.","Shipping Agent Code","World Wide Service",
        "Shipping Agent Service","Ship-to Address","Ship-to ZIP Code");

      ManifestLine.SETRANGE("Manifest No.",ManifestHeader."No.");
      ManifestLine.SETRANGE(Type,ManifestLine.Type::Package,ManifestLine.Type::"Miscellaneous Package");
      IF ManifestLine.FIND('-') THEN
        REPEAT
          IF GetShippingAgentAccount(ManifestLine."Shipping Agent Account No.") THEN BEGIN
            ManifestLineTmp := ManifestLine;
            ManifestLineTmp.INSERT;
          END;
        UNTIL ManifestLine.NEXT = 0;

      ManifestLineTmp.SETCURRENTKEY(
        "Manifest No.","Shipping Agent Account No.","Shipping Agent Code","World Wide Service",
        "Shipping Agent Service","Ship-to Address","Ship-to ZIP Code");

      IF ManifestLineTmp.FIND('-') THEN BEGIN
        PrevShippingAgentService := ManifestLineTmp."Shipping Agent Service" ;
        PrevShipToAddress := ManifestLineTmp."Ship-to Address" ;
        PrevShipToZipCode := ManifestLineTmp."Ship-to ZIP Code";
        PrevShippingAgentAccountNo := ManifestLineTmp."Shipping Agent Account No.";

        REPEAT
          IF (ManifestLineTmp."Shipping Agent Service" <> PrevShippingAgentService) OR
             (ManifestLineTmp."Ship-to Address" <> PrevShipToAddress) OR
             (ManifestLineTmp."Ship-to ZIP Code" <> PrevShipToZipCode) OR
             (ManifestLineTmp."Shipping Agent Account No." <> PrevShippingAgentAccountNo)
          THEN BEGIN
            GroupPackages(ManifestHeader."No.",PrevShippingAgentAccountNo);
            UPSPackageGroupingTmp.RESET;
            UPSPackageGroupingTmp.DELETEALL;

            PrevShippingAgentService := ManifestLineTmp."Shipping Agent Service" ;
            PrevShipToAddress := ManifestLineTmp."Ship-to Address" ;
            PrevShipToZipCode := ManifestLineTmp."Ship-to ZIP Code";
            PrevShippingAgentAccountNo := ManifestLineTmp."Shipping Agent Account No.";
          END;

          UPSPackageGroupingTmp.INIT;
          UPSPackageGroupingTmp."No." := ManifestLineTmp."No.";

          IF Package.GET(ManifestLineTmp."No.") THEN BEGIN
            UPSOptionPage.GET(UPSOptionPage.Type::Package,ManifestLineTmp."No.",0,0);
            UPSPackageGroupingTmp.TransferFromPackage(Package);
            UPSPackageGroupingTmp.TransferFromOptionPage(UPSOptionPage);
          END ELSE BEGIN
            PostedPackage.GET(ManifestLineTmp."No.");
            UPSPostedOptionPage.GET(PostedPackage."No.");
            UPSPackageGroupingTmp.TransferFromPostedPackage(PostedPackage);
            UPSPackageGroupingTmp.TransferFromPostedOptionPage(UPSPostedOptionPage);
          END;

          IF UPSPackageGroupingTmp.INSERT THEN;
        UNTIL ManifestLineTmp.NEXT = 0;

        GroupPackages(ManifestHeader."No.",PrevShippingAgentAccountNo);
        UPSPackageGroupingTmp.RESET;
        UPSPackageGroupingTmp.DELETEALL;
      END;
    END;

    LOCAL PROCEDURE GroupPackages@15(ManifestNo@1240030000 : Code[20];ShippingAgentAccountNo@1240030025 : Code[20]);
    VAR
      ManifestLine@1240030021 : Record 14000713;
      ShippingAgentService@1240030001 : Record 14000708;
      ShippingZone@1240030002 : Record 14000766;
      Package@1240030003 : Record 14000701;
      PostedPackage@1240030004 : Record 14000704;
      HundredWgtListRate@1240030005 : Record 14050019;
      UPSTransaction@1240030015 : Codeunit 14050001;
      TotalWeight@1240030007 : Decimal;
      RatePerPound@1240030008 : Decimal;
      LargePackageFee@1240030023 : Decimal;
      NoOfPackages@1240030009 : Integer;
      NoOfLargePackages@1240030018 : Integer;
      UPSShipmentNo@1240030010 : Code[35];
      SaturdayDeliveryCharge@1240030022 : Decimal;
      SaturdayPickupCharge@1240030017 : Decimal;
      LargePackageSurcharge@1240030014 : Decimal;
      CWTDASurcharge@1240030012 : Decimal;
      CWTResidentialSurcharge@1240030013 : Decimal;
      DASurcharge@1240030019 : Decimal;
      HWShippingCost@1240030020 : Decimal;
      TotalCostbeforeHW@1240030011 : Decimal;
      TotalAccBeforeHW@1240030016 : Decimal;
      HundredWeightService@1240030024 : Record 14000765;
      TotalCalcWeight@1240030026 : Decimal;
    BEGIN
      GetShippingAgentAccount(ShippingAgentAccountNo);

      IF ShippingAgentAccount."Rate Type" = ShippingAgentAccount."Rate Type"::"Base Rates"
      THEN BEGIN
        HundredWeightService.RESET;
        HundredWeightService.SETRANGE(Tier,ShippingAgentAccount."Hundred Weight Tier");
      END ELSE BEGIN
        HundredWgtListRate.RESET;
        HundredWgtListRate.SETRANGE(Tier,ShippingAgentAccount."Hundred Weight Tier");
      END;

      ManifestLine.RESET;
      ManifestLine.SETCURRENTKEY(
        "Manifest No.",Type,"Shipping Agent Account No.","Shipping Agent Code","World Wide Service",
        "Shipping Agent Service");
      ManifestLine.SETRANGE("Manifest No.",ManifestNo);
      ManifestLine.SETRANGE("Shipping Agent Account No.",ShippingAgentAccountNo);

      UPSPackageGroupingTmp.RESET;
      UPSPackageGroupingTmp.SETCURRENTKEY("First Package No.");

      REPEAT
        TotalWeight := 0;
        NoOfPackages := 0;
        TotalCostbeforeHW := 0;
        TotalAccBeforeHW := 0;
        NoOfLargePackages := 0;

        UPSPackageGroupingTmp.FIND('-');
        REPEAT
          NoOfPackages := NoOfPackages + 1;
        UNTIL UPSPackageGroupingTmp.NEXT = 0;

        IF NoOfPackages > 1 THEN BEGIN
          UPSPackageGroupingTmp.FIND('-');
          // Find all packages with shipment fields matching the first package
          FilterShipment(UPSPackageGroupingTmp);
        END;

        IF UPSPackageGroupingTmp.FIND('-') THEN BEGIN
          UPSShipmentNo := UPSPackageGroupingTmp."External Tracking No.";
          NoOfPackages := 0;
          IF ShippingAgentAccount."Rate Type" = ShippingAgentAccount."Rate Type"::"Base Rates"
          THEN BEGIN
            HundredWeightService.SETRANGE(
              "Service Indicator",UPSPackageGroupingTmp."Service Indicator");
            HundredWeightService.SETRANGE(Zone,UPSPackageGroupingTmp."UPS Zone");

            IF NOT HundredWeightService.FIND('-') THEN
              HundredWeightService.INIT;
          END ELSE BEGIN
            HundredWgtListRate.SETRANGE(
              "Service Indicator",UPSPackageGroupingTmp."Service Indicator");
            HundredWgtListRate.SETRANGE(Zone,UPSPackageGroupingTmp."UPS Zone");

            IF NOT HundredWgtListRate.FIND('-') THEN
              HundredWgtListRate.INIT;
          END;

          REPEAT
            TotalCalcWeight := TotalCalcWeight + UPSPackageGroupingTmp."Calculation Weight (LBS)";
            TotalWeight := TotalWeight + UPSPackageGroupingTmp."Calculation Weight (LBS)";

            NoOfPackages := NoOfPackages + 1;
            TotalCostbeforeHW := TotalCostbeforeHW + UPSPackageGroupingTmp."Shipping Cost";
            TotalAccBeforeHW := TotalAccBeforeHW + UPSPackageGroupingTmp."Accessorial Charge";

            IF UPSPackageGroupingTmp."Large Package" THEN
              NoOfLargePackages := NoOfLargePackages + 1;
            IF UPSPackageGroupingTmp.Miscellaneous THEN
              ManifestLine.SETRANGE(Type,ManifestLine.Type::"Miscellaneous Package")
            ELSE
              ManifestLine.SETRANGE(Type,ManifestLine.Type::Package);

            ManifestLine.SETRANGE("No.", UPSPackageGroupingTmp."No.");
            ManifestLine.FIND('-');
            ManifestLine."UPS Shipment No." :=  UPSShipmentNo;
            ManifestLine.MODIFY;
          UNTIL UPSPackageGroupingTmp.NEXT = 0;

          IF ShippingAgentAccount."Rate Type" = ShippingAgentAccount."Rate Type"::"Base Rates" THEN
            IF TotalCalcWeight / NoOfPackages < HundredWeightService."Min Wgt. Per Package" * NoOfPackages
            THEN
              TotalCalcWeight := HundredWeightService."Min Wgt. Per Package" * NoOfPackages
          ELSE
            IF TotalCalcWeight / NoOfPackages < HundredWgtListRate."Min Wgt. Per Package" * NoOfPackages
            THEN
              TotalCalcWeight := HundredWgtListRate."Min Wgt. Per Package" * NoOfPackages;

          UPSPackageGroupingTmp.FIND('-');
          IF UPSPackageGroupingTmp."Shipping Agent Service" <> ShippingAgentService.Code THEN
            ShippingAgentService.GET(
              UPSPackageGroupingTmp."Shipping Agent Code",UPSPackageGroupingTmp."Shipping Agent Service",
              UPSPackageGroupingTmp."World Wide Service");

          IF NOT
             ShippingZone.GET(
               ShippingAgentService."Service Indicator",UPSPackageGroupingTmp."UPS Zone")
          THEN
            ShippingZone.INIT;

          IF (UPSPackageGroupingTmp."Call Tag Type" = UPSPackageGroupingTmp."Call Tag Type"::None) AND
             ShippingAgentService."UPS Hundred Weight Available" AND
             ShippingAgentAccount."Check for Hundred Weight" AND
             (ShippingZone."Minimum Hundred Weight" > 0) AND
             (TotalWeight >= ShippingZone."Minimum Hundred Weight")
          THEN BEGIN
            RatePerPound :=
              UPSTransaction.GetHundredWeight(
                ShippingAgentService,ShippingAgentAccount."Hundred Weight Tier",
                UPSPackageGroupingTmp."UPS Zone",TotalWeight,UPSPackageGroupingTmp."Residential Delivery",
                NoOfPackages,TRUE,TotalCalcWeight);

            UPSTransaction.GetHWAccessorials(
              UPSPackageGroupingTmp."Saturday Delivery",UPSPackageGroupingTmp."Saturday Pickup",
              UPSPackageGroupingTmp."Residential Delivery",NoOfPackages,
              UPSPackageGroupingTmp."Ship-to ZIP Code",ShippingAgentService."Service Indicator",
              SaturdayDeliveryCharge,SaturdayPickupCharge,CWTResidentialSurcharge,CWTDASurcharge,
              DASurcharge,LargePackageFee,ShippingAgentService);

            LargePackageSurcharge := 0;
            IF UPSPackageGroupingTmp."Large Package" THEN
              LargePackageSurcharge := LargePackageFee;

            IF (RatePerPound > 0) AND
               ((UPSPackageGroupingTmp."Shipping Payment Type" <>
                 UPSPackageGroupingTmp."Shipping Payment Type"::Prepaid) OR
                (UPSPackageGroupingTmp."UPS Hundred Weight") OR
                (TotalCostbeforeHW >=
                 (RatePerPound * TotalWeight) +
                 UPSTransaction.GetSurcharge(
                   ShippingAgentService,RatePerPound * TotalWeight) +
                 TotalAccBeforeHW +
                 ((CWTResidentialSurcharge + CWTDASurcharge + SaturdayPickupCharge -
                   SaturdayDeliveryCharge) * NoOfPackages) +
                 (LargePackageSurcharge * NoOfLargePackages)))
            THEN
              REPEAT
                IF Package.GET(UPSPackageGroupingTmp."No.") THEN BEGIN
                  Package."Base Charge" :=
                    ROUND(
                      ROUND(
                        Package."Calculation Weight (LBS)",0.1,'>') * RatePerPound) +
                        LargePackageSurcharge + CWTDASurcharge;

                  Package.Surcharge :=
                    UPSTransaction.GetSurcharge(ShippingAgentService,Package."Base Charge");

                  IF NOT Package."UPS Hundred Weight" THEN
                    Package."Accessorial Charge" :=
                      Package."Accessorial Charge" + CWTResidentialSurcharge + SaturdayPickupCharge -
                      SaturdayDeliveryCharge;

                  Package."Shipping Cost" :=
                    Package."Base Charge" + Package."Accessorial Charge" + Package.Surcharge;

                  HWShippingCost := Package."Shipping Cost";
                  Package."UPS Hundred Weight" := TRUE;
                  Package.MODIFY;
                END ELSE BEGIN
                  IF PostedPackage.GET(UPSPackageGroupingTmp."No.") THEN BEGIN
                    PostedPackage."Base Charge" :=
                      ROUND(
                        ROUND(
                          PostedPackage."Calculation Weight (LBS)",0.1,'>') * RatePerPound) +
                          LargePackageSurcharge + CWTDASurcharge;

                    PostedPackage.Surcharge :=
                      UPSTransaction.GetSurcharge(ShippingAgentService,PostedPackage."Base Charge");
                    IF NOT PostedPackage."UPS Hundred Weight" THEN
                      PostedPackage."Accessorial Charge" :=
                        PostedPackage."Accessorial Charge" + CWTResidentialSurcharge +
                        SaturdayPickupCharge - SaturdayDeliveryCharge;

                    PostedPackage."Shipping Cost" :=
                      PostedPackage."Base Charge" + PostedPackage."Accessorial Charge" +
                      PostedPackage.Surcharge;

                    HWShippingCost := PostedPackage."Shipping Cost";
                    PostedPackage."UPS Hundred Weight" := TRUE;
                    PostedPackage.MODIFY;
                  END;
                END;

                ManifestLine.SETRANGE("No.", UPSPackageGroupingTmp."No.");
                IF UPSPackageGroupingTmp.Miscellaneous THEN
                  ManifestLine.SETRANGE(Type,ManifestLine.Type::"Miscellaneous Package")
                ELSE
                  ManifestLine.SETRANGE(Type,ManifestLine.Type::Package);

                ManifestLine.FIND('-');
                ManifestLine."Shipping Cost" :=  HWShippingCost;
                ManifestLine.MODIFY;
              UNTIL UPSPackageGroupingTmp.NEXT = 0;
          END;
          UPSPackageGroupingTmp.MODIFYALL("Package Grouped",TRUE);
        END;

        UPSPackageGroupingTmp.RESET;
        UPSPackageGroupingTmp.SETRANGE("Package Grouped",FALSE);
      UNTIL NOT UPSPackageGroupingTmp.FIND('-');
    END;

    LOCAL PROCEDURE FilterShipment@17(VAR UPSPackageGrouping@1240030000 : Record 14050008);
    BEGIN
      WITH UPSPackageGrouping DO BEGIN
        IF "World Wide Service" OR "UPS Canadian Service" OR "UPS Puerto Rico Service" THEN BEGIN
          SETRANGE("Export Document No.","Export Document No.");
          SETRANGE("Call Tag Type","Call Tag Type");
        END ELSE
          IF "Call Tag Type" <> "Call Tag Type"::None THEN
            SETRANGE("External Tracking No.","External Tracking No.")
          ELSE BEGIN
            SETRANGE("Currency Code","Currency Code");
            SETRANGE("Shipping Payment Type","Shipping Payment Type");
            SETRANGE("Ship-to Address","Ship-to Address");
            SETRANGE("Ship-to Address 2","Ship-to Address 2");

            SETRANGE("Ship-to City","Ship-to City");
            SETRANGE("Ship-to Contact","Ship-to Contact");
            SETRANGE("Ship-to Country Code","Ship-to Country Code");

            SETRANGE("Ship-to Fax No.","Ship-to Fax No.");
            SETRANGE("Ship-to Name","Ship-to Name");
            SETRANGE("Ship-to Phone No.","Ship-to Phone No.");

            SETRANGE("Ship-to State","Ship-to State");
            SETRANGE("Ship-to ZIP Code","Ship-to ZIP Code");
            SETRANGE("Third Party Ship. Account No.","Third Party Ship. Account No.");

            SETRANGE("Call Tag Type","Call Tag Type"::None);

            IF "Delivery Notification" THEN
              SETRANGE("Delivery Notification Email","Delivery Notification Email");

            IF "Shipment Level Advisory Info" THEN BEGIN
              SETRANGE("Shipment Level Advisory Info",TRUE);
              SETRANGE("Ship Notification Type","Ship Notification Type");
              SETRANGE("Ship Notification Memo","Ship Notification Memo");

              IF "Exception Notification" OR
                 ("Ship Notification Type" = "Ship Notification Type"::Email)
              THEN BEGIN
                SETRANGE("Reply To Email Address","Reply To Email Address");
                SETRANGE("Failure Email","Failure Email");
                SETRANGE("Email Subject","Email Subject");

                IF "Ship Notification" THEN
                  SETRANGE("Ship Notification Email","Ship Notification Email");
                IF "Exception Notification" THEN
                  SETRANGE("Exception Notification Email","Exception Notification Email");
              END;

              IF "Ship Notification Type" = "Ship Notification Type"::Fax THEN BEGIN
                SETRANGE("Ship Notification Fax No.","Ship Notification Fax No.");
                SETRANGE("Ship Notification Attn Name","Ship Notification Attn Name");
                SETRANGE("Ship Notification Phone","Ship Notification Phone");
              END;
            END;

            SETRANGE("UPS Letter","UPS Letter");  // DocInd TRUE
            SETRANGE("Extended Area Surcharge","Extended Area Surcharge");
            SETRANGE("Receiver Location ID","Receiver Location ID");

            SETRANGE("Residential Delivery","Residential Delivery");
            SETRANGE("Saturday Delivery","Saturday Delivery");
            SETRANGE("Saturday Pickup","Saturday Pickup");

            SETRANGE("Ship. Ref. Type 1","Ship. Ref. Type 1");
            SETRANGE("Ship. Ref. Type 2","Ship. Ref. Type 2");
            SETRANGE("Ship. Ref. No. 1","Ship. Ref. No. 1");
            SETRANGE("Ship. Ref. No. 2","Ship. Ref. No. 2");

            SETRANGE("Third Party Address","Third Party Address");
            SETRANGE("Third Party Address 2","Third Party Address 2");
            SETRANGE("Third Party City","Third Party City");
            SETRANGE("Third Party Contact","Third Party Contact");
            SETRANGE("Third Party Country Code","Third Party Country Code");

            SETRANGE("Third Party Name","Third Party Name");
            SETRANGE("Third Party Phone No.","Third Party Phone No.");
            SETRANGE("Third Party State","Third Party State");
            SETRANGE("Third Party ZIP Code","Third Party ZIP Code");
            SETRANGE("Third Party Tax ID","Third Party Tax ID");

            SETRANGE("Ship-to Tax ID","Ship-to Tax ID");
            SETRANGE("UPS Carbon Neutral", "UPS Carbon Neutral");
          END;
      END;
    END;

    LOCAL PROCEDURE FormatDate@1240030000(DatetoFormat@1240030001 : Date) DateFormatted : Text[8];
    BEGIN
      DateFormatted := FORMAT(DatetoFormat);
      DateFormatted :=
        '20' + COPYSTR(DateFormatted,7,2) + COPYSTR(DateFormatted,1,2) + COPYSTR(DateFormatted,4,2);
    END;

    LOCAL PROCEDURE FormatTime@1240030001(TimetoFormat@1240030000 : Time) TimeFormatted : Text[12];
    VAR
      hour@1240030002 : Integer;
    BEGIN
      TimeFormatted := FORMAT(TimetoFormat);
      IF COPYSTR(TimeFormatted,1,1) = ' ' THEN
        EVALUATE(hour,COPYSTR(TimeFormatted,2,1))
      ELSE
        EVALUATE(hour,COPYSTR(TimeFormatted,1,2));
      IF (STRPOS(TimeFormatted,'PM') > 0) AND
         (hour < 12)
      THEN
        hour := hour + 12;
      IF STRLEN(TimeFormatted) = 12 THEN
        TimeFormatted := FORMAT(hour) + COPYSTR(TimeFormatted,5,2) + COPYSTR(TimeFormatted,8,2)
      ELSE
        TimeFormatted := FORMAT(hour) + COPYSTR(TimeFormatted,4,2) + COPYSTR(TimeFormatted,7,2);
      IF STRLEN(TimeFormatted) < 6 THEN
        TimeFormatted := '0' + TimeFormatted;
    END;

    LOCAL PROCEDURE GetUPSlinkSetup@1240030006();
    BEGIN
      IF UPSlinkSetup."Primary Account No." = '' THEN
        UPSlinkSetup.GET;
    END;

    BEGIN
    END.
  }
}

