OBJECT Codeunit 23044610 DSHIP Scale Mgmt. Singleton
{
  OBJECT-PROPERTIES
  {
    Date=03/11/19;
    Time=[ 3:08:00 PM];
    Version List=DSHIP2.2.2;
  }
  PROPERTIES
  {
    SingleInstance=Yes;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      sScaleDevicePath@1000000000 : Text;
      tcHIDError@1000000001 : TextConst 'ENU=There was an error with the scale. \%1;ESM=Hubo un error en la escala. \%1;FRC=Une erreur lors de avec le scale. \%1;ENC=There was an error with the scale. \%1';
      tcStableWeight@1000000004 : TextConst 'ENU=Stable Weight';
      tcNoScale@1000000002 : TextConst 'ENU=NullDevice';
      optLabelType@1000000003 : Option;

    PROCEDURE getScaleDevicePath@1000000000() : Text;
    BEGIN
      //<FUNC>
      //  Description: Returns the instance stored scales' device path
      //  Called From:
      //  Side Effect:
      //</FUNC>

      EXIT(sScaleDevicePath);
    END;

    PROCEDURE setScaleDevicePath@1000000001(psScaleDevicePath@1000000000 : Text);
    BEGIN
      //<FUNC>
      //  Description: Sets the scales' device path for the instance
      //  Called From:
      //  Side Effect:
      //</FUNC>

      sScaleDevicePath := psScaleDevicePath;
    END;

    PROCEDURE getWeight@1000000002(pbForceUI@1000000002 : Boolean;VAR pdWeight@1000000000 : Decimal;VAR pcodWeightUOM@1000000001 : Code[20]) rbStableWeight : Boolean;
    VAR
      ldnHidPos@1000000005 : DotNet "'DynamicShip.HIDPOS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.HidPosScale.HidPosManager" RUNONCLIENT;
      lsScaleDevicePath@1000000004 : Text;
      lsReading@1000000003 : Text;
      lsLastError@1000000006 : Text;
    BEGIN
      //<FUNC>
      //  Description: Gets the current weight from the scale.
      //  Called From:
      //  Side Effect: Sets the scale's device path on first run via UI.
      //</FUNC>

      lsScaleDevicePath := getScaleDevicePath;
      ldnHidPos := ldnHidPos.HidPosManager();
      //can be used to turn on event logs to help debugging
      //ldnHidPos.EnableLogging(TRUE);
      lsReading := ldnHidPos.GetWeight(500, pbForceUI, lsScaleDevicePath);
      setScaleDevicePath(lsScaleDevicePath);
      rbStableWeight := parseScaleReading(lsReading, pdWeight, pcodWeightUOM);

      IF ( ldnHidPos.GetLastError() <> '' ) THEN
        lsLastError := ldnHidPos.GetLastError();

      CLEAR(ldnHidPos);

      IF ( lsLastError <> '' ) THEN
        ERROR(tcHIDError, lsLastError);

      EXIT(rbStableWeight);
    END;

    PROCEDURE selectScaleUI@1000000007();
    VAR
      ldnDeviceForm@1000000002 : DotNet "'DynamicShip.HIDPOS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.HidPosScale.ScaleSelectForm" RUNONCLIENT;
      ldnHidPos@1000000001 : DotNet "'DynamicShip.HIDPOS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.HidPosScale.HidPosManager" RUNONCLIENT;
      lsScaleDevicePath@1000000000 : Text;
      lsLastError@1000000003 : Text;
    BEGIN
      //<FUNC>
      //  Description: Launches a dotnet UI to select and set the scale
      //  Called From:
      //  Side Effect:
      //</FUNC>

      ldnHidPos := ldnHidPos.HidPosManager();
      ldnDeviceForm := ldnDeviceForm.ScaleSelectForm();
      lsScaleDevicePath := ldnDeviceForm.GetScale();
      IF ( lsScaleDevicePath <> '' ) THEN BEGIN
        IF ( ldnHidPos.GetLastError() <> '' ) THEN
          lsLastError := ldnHidPos.GetLastError()
        ELSE
          setScaleDevicePath(lsScaleDevicePath);
      END;

      CLEAR(ldnHidPos);
      CLEAR(ldnDeviceForm);

      IF ( lsLastError <> '' ) THEN
        ERROR(tcHIDError, lsLastError);
    END;

    LOCAL PROCEDURE parseScaleReading@1000000005(psReading@1000000002 : Text;VAR pdWeight@1000000001 : Decimal;VAR pcodWeightUOM@1000000000 : Code[20]) : Boolean;
    BEGIN
      //<FUNC>
      //  Description: Interprets the scale reading into desired values
      //  Called From:
      //  Side Effect: Returns false if the weight is not stable
      //</FUNC>

      {
        Posible status's returned by the scale:
        '',  //Dummy placeholder
        'Fault',
        'Zero Weight',
        'Motion',
        'Stable Weight',
        'Under Zero',
        'Over Capacity',
        'Cal Required',
        'Zero Required',
        'Geo Entry'
      }
      IF ( STRLEN(psReading) > 0 ) THEN BEGIN
        EVALUATE(pdWeight, SELECTSTR(1, psReading));
        pcodWeightUOM := SELECTSTR(2, psReading);
        EXIT(SELECTSTR(3, psReading) = tcStableWeight);
      END;
    END;

    PROCEDURE tareWeight@1000000003();
    VAR
      ldnHidPos@1000000001 : DotNet "'DynamicShip.HIDPOS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.HidPosScale.HidPosManager" RUNONCLIENT;
      lsScaleDevicePath@1000000000 : Text;
      lsLastError@1000000002 : Text;
    BEGIN
      //<FUNC>
      //  Description: Tare the scale
      //  Called From:
      //  Side Effect:
      //</FUNC>

      lsScaleDevicePath := getScaleDevicePath;

      IF ( lsScaleDevicePath = '' ) THEN BEGIN
        selectScaleUI;
        lsScaleDevicePath := getScaleDevicePath;
      END;

      ldnHidPos := ldnHidPos.HidPosManager();
      IF ( ldnHidPos.OpenDevice(lsScaleDevicePath) ) THEN
        ldnHidPos.Tare();

      IF ( ldnHidPos.GetLastError() <> '' ) THEN
        lsLastError := ldnHidPos.GetLastError();

      CLEAR(ldnHidPos);

      IF ( lsLastError <> '' ) THEN
        ERROR(tcHIDError, lsLastError);
    END;

    PROCEDURE getLabelType@1000000004(VAR poptLabelType@1000000000 : Option);
    BEGIN
      //<FUNC>
      //  Description: Returns the label type to use for R601
      //  Called From: R601
      //  Side Effect: None
      //</FUNC>

      poptLabelType := optLabelType;
    END;

    PROCEDURE setLabelType@1000000006(VAR poptLabelType@1000000000 : Option);
    BEGIN
      //<FUNC>
      //  Description: Sets the label type to use for R601
      //  Called From: R601
      //  Side Effect: None
      //</FUNC>

      optLabelType := poptLabelType;
    END;

    BEGIN
    {
      ************************
      Copyright Notice
      This objects content is copyright of Insight Works 2011.  All rights reserved.
      Any redistribution or reproduction of part or all of the contents in any form is prohibited.
      ************************
    }
    END.
  }
}

