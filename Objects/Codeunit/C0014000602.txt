OBJECT Codeunit 14000602 Receive Management
{
  OBJECT-PROPERTIES
  {
    Date=11/12/18;
    Time=12:00:00 PM;
    Version List=SE0.60.19.02,TPZ2666;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ReceiveStation@1240030005 : Record 14000608;
      ReceiveSetup@1240030006 : Record 14000607;
      Receiving@1240030000 : Codeunit 14000601;
      ScalesComm@1240030001 : Codeunit 37031002;
      LabelMgt@1240030002 : Codeunit 14000841;
      Window@1240030003 : Dialog;
      MessageLine@1240030004 : Text[250];
      Initialized@1240030007 : Boolean;
      Text002@1002 : TextConst 'ENU=No Receive Added';
      Text003@1003 : TextConst 'ENU=Receive does not exist %1';
      Text004@1004 : TextConst 'ENU=Receive %1 is not closed';
      Text005@1005 : TextConst 'ENU=Wrong Location %1';
      Text006@1006 : TextConst 'ENU=Receive Already in %1';
      Text007@1007 : TextConst 'ENU=Multi Document setup is different';
      Text008@1008 : TextConst 'ENU=Receive is for %1';
      Text009@1009 : TextConst 'ENU=No Receives within filter';
      Text010@1010 : TextConst 'ENU=UOM Received must be %1';
      Text011@1011 : TextConst 'ENU=%1 must be equal to Document Line';
      Text016@1016 : TextConst 'ENU=Quantity must be entered.';
      Text017@1017 : TextConst 'ENU=Quantity cannot be less than already received';
      Text018@1018 : TextConst 'ENU=Documents must be selected';
      Text019@1019 : TextConst 'ENU=Over Receive';
      Text020@1020 : TextConst 'ENU=Wrong Selection';
      Text021@1021 : TextConst 'ENU=Duplicate Serial Number on %1 Receive %2 is received but not ordered.';
      Text022@1022 : TextConst 'ENU=No Receive Open';
      Text023@1023 : TextConst 'ENU=No Weight from Scale';
      Text024@1024 : TextConst 'ENU=Receive Open';
      Text025@1025 : TextConst 'ENU=Receive %1 is open';
      Text027@1027 : TextConst 'ENU=No Receive Opened';
      Text029@1029 : TextConst 'ENU=Receive exist in other Receive';
      Text030@1030 : TextConst 'ENU=Receive is not for this Order';
      Text031@1031 : TextConst 'ENU=No Receive Exists';
      Text033@1033 : TextConst 'ENU=No Receive Copied';
      Text034@1034 : TextConst 'ENU=Over Receive %1 Receives created';
      Text035@1035 : TextConst 'ENU=Too Few Receives %1 of %2';
      Text036@1036 : TextConst 'ENU=Receive Numbering are wrong.';
      Text037@1037 : TextConst 'ENU=Not Received Complete';
      Text038@1038 : TextConst 'ENU=Over Received';
      Text039@1039 : TextConst 'ENU=%1 Not Received Complete';
      Text040@1040 : TextConst 'ENU=%1 Over Received';
      Text041@1041 : TextConst 'ENU=Negative Salesase lines for %1 %2 not supported for set Quantity.';
      Text042@1042 : TextConst 'ENU=More received %1 %2 than on order.';
      Text043@1043 : TextConst 'ENU=Negative purchase lines for %1 %2 not supported for set Quantity.';
      Text044@1044 : TextConst 'ENU=Negative transfer lines for item %1 not supported for set Quantity.';
      Text045@1045 : TextConst 'ENU=Receives Already Exists';
      Text046@1046 : TextConst 'ENU=Nothing to receive';
      Text048@1048 : TextConst 'ENU=Must be greather than 0';
      Text069@1069 : TextConst 'ENU=There is no Base Unit of Measure for Item %1';
      Text070@1070 : TextConst 'ENU=Orders cannot be added when open Receives exist';
      Text072@1072 : TextConst 'ENU=No order added';
      Text073@1073 : TextConst 'ENU=No available documents';
      Text074@1074 : TextConst 'ENU=No document added';
      Text075@1075 : TextConst 'ENU=Order %1 not found';
      Text076@1076 : TextConst 'ENU=%1 is not released.';
      Text077@1077 : TextConst 'ENU=%1 has open Receives.';
      Text078@1078 : TextConst 'ENU=Order is already in Multi Document';
      Text079@1079 : TextConst 'ENU=%1 must be %2';
      Text080@1080 : TextConst 'ENU=No Current Receive';
      Text081@1081 : TextConst 'ENU=No Current Purch Order';
      Text083@1083 : TextConst 'ENU=No Warehouse Receipt Lines.';
      Text084@1084 : TextConst 'ENU=Has not been initialized.';
      Text085@1240030008 : TextConst 'ENU=Multi Package has not been split.';
      Text086@1240030009 : TextConst 'ENU=Package not found.';
      Text087@1240030010 : TextConst 'ENU=No Item in Package %1.';
      Text089@1240030012 : TextConst 'ENU=No Package added';
      Text090@1240030013 : TextConst 'ENU=No Lines with Action Required.';
      Text091@1240030014 : TextConst 'ENU=Item Action Required';
      Text092@1240030015 : TextConst 'ENU=Location must be selected on source.';
      Text093@1240030016 : TextConst 'ENU=No Receive Bin Types.';
      Text094@1240030017 : TextConst 'ENU=No Recceive Bin found.';
      Text095@1240030018 : TextConst 'ENU=Force Closed is not allowed on this document.';
      Text096@1240030019 : TextConst 'ENU=Over Receive is not possible with Subcontracting.';
      Text097@1240030020 : TextConst 'ENU=No Serial or Lot to scan.';
      Text001@1001 : TextConst 'ENU=Put-away %1 and %2 must be combined.';
      Text012@1012 : TextConst 'ENU=Code missing.';
      Text013@1013 : TextConst 'ENU=Could not apply completely.';
      Text014@1014 : TextConst 'ENU=Document is not for a single location.';
      Text015@1015 : TextConst 'ENU=Nothing to receive.';
      Text026@1026 : TextConst 'ENU=Must be a Directed Put-away Location.';
      Text028@1028 : TextConst 'ENU=No Bins found.';
      Text032@1032 : TextConst 'ENU=Documents cannot be added to an Auto Created Document';
      Text047@1047 : TextConst 'ENU=No Document created.';
      Text049@1049 : TextConst 'ENU=Create new %1 for %2 %3 %4';
      Text050@1050 : TextConst 'ENU=This type of document %1 %2 cannot be auto created.';
      Text051@1240030011 : TextConst 'ENU=Not finished entering Item Tracking';
      ForceCreatePrintPutAway@1000000000 : Boolean;

    PROCEDURE AddReceiveToReceive@39(VAR Receive@1240030000 : Record 14000601;VAR ReceiveControl@1240030001 : Record 14000611;ReceiveNo@1240030002 : Code[20]) : Boolean;
    VAR
      Receive2@1240030005 : Record 14000601;
      ReceiveLine@1240030006 : Record 14000602;
      ReceiveInput@1240030003 : Record 14000615;
      EReceiveEnterReceiveNo@1240030004 : Page 14050052;
    BEGIN
      TestInitialized;
      IF ReceiveNo = '' THEN BEGIN
        CLEAR(ReceiveInput);
        ReceiveInput."Source Type" := ReceiveControl."Source Type";
        ReceiveInput."Source Subtype" := ReceiveControl."Source Subtype";
        ReceiveInput."Source ID" := ReceiveControl."Source ID";
        ReceiveInput."Multi Document No." := ReceiveControl."Multi Document No.";

        CLEAR(EReceiveEnterReceiveNo);
        EReceiveEnterReceiveNo.LOOKUPMODE(TRUE);
        EReceiveEnterReceiveNo.SetReceiveInput(ReceiveInput);
        IF EReceiveEnterReceiveNo.RUNMODAL = ACTION::LookupOK THEN BEGIN
        EReceiveEnterReceiveNo.GetReceiveInput(ReceiveInput);
        IF (ReceiveInput."Receive No." <> '') AND
           (COPYSTR(ReceiveInput."Receive No.",1,2) <> '//')
        THEN
            ReceiveNo := ReceiveInput."Receive No.";
        END;

        IF ReceiveNo = '' THEN BEGIN
          ReceiveControl."Error Message" := Text002;
          EXIT(FALSE);
        END;

        ReceiveNo := GetReceiveNo(ReceiveNo);
      END;

      IF NOT Receive2.GET(ReceiveNo) THEN BEGIN
        ReceiveControl."Error Message" := STRSUBSTNO(Text003,ReceiveNo);
        EXIT(FALSE);
      END;

      IF NOT Receive2.Closed THEN BEGIN
        ReceiveControl."Error Message" := STRSUBSTNO(Text004,ReceiveNo);
        EXIT(FALSE);
      END;

      IF ReceiveSetup."Location Receiving" THEN
        IF Receive2."Location Code" <> ReceiveStation."Location Code" THEN BEGIN
          ReceiveControl."Error Message" :=
            STRSUBSTNO(Text005,Receive2."Location Code");
          EXIT(FALSE);
        END;

      IF Receive2."Multi Document Receive" THEN
        IF Receive2."Original Receive No." <> '' THEN
          IF Receive2."Original Receive No." <> Receive2."No." THEN BEGIN
            Receive2.GET(Receive2."Original Receive No.");
            ReceiveNo := Receive2."No.";
          END;

      ReceiveLine.RESET;
      ReceiveLine.SETCURRENTKEY(Type,"No.");
      ReceiveLine.SETRANGE(Type,ReceiveLine.Type::Receive);
      ReceiveLine.SETRANGE("No.",ReceiveNo);
      IF ReceiveLine.FIND('-') THEN BEGIN
        ReceiveControl."Error Message" := STRSUBSTNO(Text006,ReceiveLine."Receive No.");
        EXIT(FALSE);
      END;

      IF Receive2."Multi Document Receive" THEN BEGIN
        IF Receive2."Multi Document Receive" <> ReceiveControl."Multi Document Receive" THEN BEGIN
          ReceiveControl."Error Message" := Text007;
          EXIT(FALSE);
        END;

        IF Receive2."Multi Document No." <> ReceiveControl."Multi Document No." THEN BEGIN
          ReceiveControl."Error Message" := Text007;
          EXIT(FALSE);
        END;
      END ELSE BEGIN
        IF (Receive2."Source Type" <> ReceiveControl."Source Type") OR
           (Receive2."Source Subtype" <> ReceiveControl."Source Subtype") OR
           (Receive2."Source ID" <> ReceiveControl."Source ID")
        THEN BEGIN
          ReceiveControl."Error Message" :=
            STRSUBSTNO(
              Text008,
              ReceiveControl.FormatSource(
                Receive2."Source Type",Receive2."Source Subtype",Receive2."Source ID"));
          EXIT(FALSE);
        END;
      END;

      IF NOT ReceiveControl."Receive Open" THEN
        CreateReceive(Receive,ReceiveControl);

      ReceiveLine.RESET;
      ReceiveLine.SETRANGE("Receive No.",Receive."No.");
      IF ReceiveLine.FIND('+') THEN
        ReceiveLine."Line No." := ReceiveLine."Line No." + 10000
      ELSE
        ReceiveLine."Line No." := 10000;
      ReceiveLine."Receive No." := Receive."No.";
      ReceiveLine.INIT;
      ReceiveLine."Source Type" := Receive."Source Type";
      ReceiveLine."Source Subtype" := Receive."Source Subtype";
      ReceiveLine."Source ID" := Receive."Source ID";
      ReceiveLine.INSERT(TRUE);
      ReceiveLine.VALIDATE(Type,ReceiveLine.Type::Receive);
      ReceiveLine.VALIDATE("No.",ReceiveNo);
      ReceiveLine.VALIDATE(Quantity,1);
      ReceiveLine.MODIFY(TRUE);

      EXIT(TRUE);
    END;

    PROCEDURE AddAllReceivesToReceive@45(VAR Receive@1240030000 : Record 14000601;VAR ReceiveControl@1240030001 : Record 14000611);
    VAR
      Receive2@1240030004 : Record 14000601;
      Receive3@1240030005 : Record 14000601;
      ReceiveLine@1240030006 : Record 14000602;
      ReceiveLine2@1240030007 : Record 14000602;
    BEGIN
      TestInitialized;
      Receive2.RESET;
      Receive2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Receive2.SETRANGE("Source Type",ReceiveControl."Source Type");
      Receive2.SETRANGE("Source Subtype",ReceiveControl."Source Subtype");
      IF ReceiveControl."Multi Document Receive" THEN
        Receive2.SETFILTER("Source ID",ReceiveControl."Multi Document No.")
      ELSE
        Receive2.SETRANGE("Source ID",ReceiveControl."Source ID");
      IF ReceiveControl."Receive Open" THEN
        Receive2.SETFILTER("No.",'<>%1',Receive."No.");
      IF ReceiveSetup."Location Receiving" THEN
        Receive2.SETRANGE("Location Code",ReceiveStation."Location Code");
      IF Receive2.FIND('-') THEN
        REPEAT
          Receive3 := Receive2;

          IF Receive2."Original Receive No." <> '' THEN
            IF Receive2."Original Receive No." <> Receive2."No." THEN
              Receive2.GET(Receive2."Original Receive No.");

          ReceiveLine2.RESET;
          ReceiveLine2.SETCURRENTKEY(Type,"No.");
          ReceiveLine2.SETRANGE(Type,ReceiveLine2.Type::Receive);
          ReceiveLine2.SETRANGE("No.",Receive2."No.");
          IF NOT ReceiveLine2.FIND('-') THEN BEGIN
            ReceiveLine2.RESET;
            ReceiveLine2.SETRANGE("Receive No.",Receive2."No.");
            ReceiveLine2.SETRANGE(Type,ReceiveLine2.Type::Receive);
            IF NOT ReceiveLine2.FIND('-') THEN BEGIN
              IF NOT ReceiveControl."Receive Open" THEN BEGIN
                CreateReceive(Receive,ReceiveControl);
                Receive2.SETFILTER("No.",'<>%1',Receive."No.");
              END;

              ReceiveLine.RESET;
              ReceiveLine.SETRANGE("Receive No.",Receive."No.");
              IF ReceiveLine.FIND('+') THEN
                ReceiveLine."Line No." := ReceiveLine."Line No." + 10000
              ELSE
                ReceiveLine."Line No." := 10000;
              ReceiveLine."Receive No." := Receive."No.";
              ReceiveLine.INIT;
              ReceiveLine."Source Type" := Receive."Source Type";
              ReceiveLine."Source Subtype" := Receive."Source Subtype";
              ReceiveLine."Source ID" := Receive."Source ID";
              ReceiveLine.INSERT(TRUE);
              ReceiveLine.VALIDATE(Type,ReceiveLine.Type::Receive);
              ReceiveLine.VALIDATE("No.",Receive2."No.");
              ReceiveLine.VALIDATE(Quantity,1);
              ReceiveLine.MODIFY(TRUE);
            END;
          END;

          Receive2 := Receive3;
        UNTIL Receive2.NEXT = 0;

      Receive.GET(Receive."No.");
      Receive.ClearTotalValueFields;
      Receive.TotalNetWeight;
    END;

    PROCEDURE AddMultipleReceivesToReceive@11(VAR Receive@1240030000 : Record 14000601;VAR ReceiveControl@1240030001 : Record 14000611) : Boolean;
    VAR
      Receive3@1240030005 : Record 14000601;
      ReceiveInput@1240030003 : Record 14000615;
      ERecEnterRecNoFilter@1240030002 : Page 14050061;
      ReceiveNo@1240030006 : Code[20];
      InputLine@1240030007 : Code[50];
      ReceivesAdded@1240030008 : Integer;
      Finished@1240030009 : Boolean;
      LoopFinished@1240030010 : Boolean;
    BEGIN
      TestInitialized;
      ReceivesAdded := 0;

      CLEAR(ReceiveInput);
      ReceiveInput."Source Type" := ReceiveControl."Source Type";
      ReceiveInput."Source Subtype" := ReceiveControl."Source Subtype";
      ReceiveInput."Source ID" := ReceiveControl."Source ID";
      ReceiveInput."Multi Document No." := ReceiveControl."Multi Document No.";

      LoopFinished := FALSE;
      REPEAT
        CLEAR(ReceiveInput);
        ReceiveInput."Receives Added" := ReceivesAdded;
        CLEAR(ERecEnterRecNoFilter);
        ERecEnterRecNoFilter.LOOKUPMODE(TRUE);
        ERecEnterRecNoFilter.SetReceiveInput(ReceiveInput);
        IF ERecEnterRecNoFilter.RUNMODAL = ACTION::LookupOK THEN BEGIN
        ERecEnterRecNoFilter.GetReceiveInput(ReceiveInput);
        InputLine := ReceiveInput."Receive No. Filter";
        IF (InputLine = '') OR (COPYSTR(InputLine,1,2) = '//') THEN
          LoopFinished := TRUE;
        END ELSE
          LoopFinished := TRUE;

        IF NOT LoopFinished THEN BEGIN
          Finished := TRUE;

          REPEAT
            IF STRPOS(InputLine,'..') <> 0 THEN BEGIN
              IF Finished THEN BEGIN
                Receive3.RESET;
                Receive3.SETFILTER("No.",InputLine);
                Receive3.SETRANGE("Source Type",ReceiveControl."Source Type");
                Receive3.SETRANGE("Source Subtype",ReceiveControl."Source Subtype");
                IF ReceiveControl."Multi Document Receive" THEN
                  Receive3.SETRANGE("Source ID",'')
                ELSE
                  Receive3.SETRANGE("Source ID",ReceiveControl."Source ID");
                Receive3.SETRANGE("Exist in Other Receive",FALSE);
                Receive3.SETRANGE("External Tracking No.",'');
                IF ReceiveSetup."Location Receiving" THEN
                  Receive3.SETRANGE("Location Code",ReceiveStation."Location Code");
                IF NOT Receive3.FIND('-') THEN BEGIN
                  Window.CLOSE;
                  ReceiveControl."Error Message" := Text009;
                  EXIT(FALSE);
                END;
              END;

              ReceiveNo := Receive3."No.";
              Finished := FALSE;
            END ELSE
              ReceiveNo := COPYSTR(InputLine,1,20);

            ReceiveNo := GetReceiveNo(ReceiveNo);

            IF NOT AddReceiveToReceive(Receive,ReceiveControl,ReceiveNo)
            THEN BEGIN
              Window.CLOSE;
              EXIT(FALSE);
            END ELSE
              ReceivesAdded := ReceivesAdded + 1;

            IF STRPOS(InputLine,'..') <> 0 THEN
              Finished := Receive3.NEXT = 0;
          UNTIL Finished;

          COMMIT;
        END;
      UNTIL LoopFinished;

      IF ReceivesAdded = 0 THEN BEGIN
        ReceiveControl."Error Message" := Text002;
        EXIT(FALSE);
      END ELSE
        EXIT(TRUE);
    END;

    PROCEDURE AddSelectedReceivesToReceive@27(VAR Receive@1240030000 : Record 14000601;VAR ReceiveControl@1240030001 : Record 14000611) : Boolean;
    VAR
      Receive2@1240030004 : Record 14000601;
      SelectReceives@1240030005 : Page 14000619;
    BEGIN
      TestInitialized;
      Receive2.RESET;
      Receive2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Receive2.SETRANGE("Source Type",ReceiveControl."Source Type");
      Receive2.SETRANGE("Source Subtype",ReceiveControl."Source Subtype");
      IF ReceiveControl."Multi Document Receive" THEN
        Receive2.SETFILTER("Source ID",ReceiveControl."Multi Document No.")
      ELSE
        Receive2.SETRANGE("Source ID",ReceiveControl."Source ID");
      Receive2.SETRANGE(Closed,TRUE);
      Receive2.SETRANGE("Exist in Other Receive",FALSE);
      Receive2.SETRANGE("Original Exist in Other Rec.",FALSE);
      IF ReceiveSetup."Location Receiving" THEN
        Receive2.SETRANGE("Location Code",ReceiveStation."Location Code");

      CLEAR(SelectReceives);
      SelectReceives.SetReceiveInfo(Receive,ReceiveStation,ReceiveSetup,ReceiveControl);
      SelectReceives.SETTABLEVIEW(Receive2);
      SelectReceives.RUNMODAL;

      SelectReceives.GetReceiveInfo(Receive,ReceiveControl);
    END;

    PROCEDURE CreateReceive@3(VAR Receive@1240030000 : Record 14000601;VAR ReceiveControl@1240030001 : Record 14000611) : Boolean;
    VAR
      Receive2@1240030004 : Record 14000601;
      ReceiveLine@1240030005 : Record 14000602;
    BEGIN
      TestInitialized;
      IF ReceiveControl."Receive Open" THEN BEGIN
        ReceiveLine.RESET;
        ReceiveLine.SETRANGE("Receive No.",Receive."No.");
        IF NOT ReceiveLine.FIND('-') THEN
          EXIT(FALSE);
      END;

      IF ReceiveControl."Multi Document Receive" THEN BEGIN
        Receive2.RESET;
        Receive2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
        Receive2.SETRANGE("Source Type",ReceiveControl."Source Type");
        Receive2.SETRANGE("Source Subtype",ReceiveControl."Source Subtype");
        Receive2.SETFILTER("Source ID",ReceiveControl."Multi Document No.");
        IF ReceiveSetup."Location Receiving" THEN
          Receive2.SETRANGE("Location Code",ReceiveStation."Location Code");
        Receive2.SETRANGE("Multi Document Receive Split",FALSE);
        Receive2.SETRANGE("Original Receive No.",'');
        IF Receive2.FIND('+') THEN BEGIN
          ReceiveControl."Error Message" := Text085;
          EXIT(FALSE);
        END;
      END;

      Receive.RESET;
      Receive.INIT;
      Receive.VALIDATE(Receive."No.",'');
      Receive."Source Type" := ReceiveControl."Source Type";
      Receive."Source Subtype" := ReceiveControl."Source Subtype";
      Receive."Source ID" := ReceiveControl."Source ID";
      IF ReceiveControl."Multi Document Receive" THEN BEGIN
        Receive."Multi Document Receive" := TRUE;
        Receive."Multi Document No." := ReceiveControl."Multi Document No.";
      END;

      IF ReceiveControl."Total Receive Count" = 0 THEN BEGIN
        Receive2.RESET;
        Receive2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
        Receive2.SETRANGE("Source Type",ReceiveControl."Source Type");
        Receive2.SETRANGE("Source Subtype",ReceiveControl."Source Subtype");
        IF ReceiveControl."Multi Document Receive" THEN
          Receive2.SETFILTER("Source ID",ReceiveControl."Multi Document No.")
        ELSE
          Receive2.SETRANGE("Source ID",ReceiveControl."Source ID");
        IF ReceiveSetup."Location Receiving" THEN
          Receive2.SETRANGE("Location Code",ReceiveStation."Location Code");
        IF Receive2.FIND('+') THEN BEGIN
          ReceiveControl."Total Receive Count" := Receive2."Total Receives";
          ReceiveControl."Last Receive No." := Receive2."Receive No.";
        END ELSE BEGIN
          ReceiveControl."Total Receive Count" := 1;
          ReceiveControl."Last Receive No." := 0;
        END;
      END;

      IF ReceiveControl."Last Receive No." < ReceiveControl."Total Receive Count" THEN BEGIN
        Receive."Receive No." := ReceiveControl."Last Receive No." + 1;
        Receive."Total Receives" := ReceiveControl."Total Receive Count";
      END ELSE BEGIN
        Receive."Receive No." := 1;
        Receive."Total Receives" := 1;
      END;
      Receive.INSERT(TRUE);

      ReceiveControl."Last Receive No." := ReceiveControl."Last Receive No." + 1;
      Receive.ClearTotalValueFields;
      Receive.TotalNetWeight;

      ReceiveControl."Receive Open" := TRUE;

      EXIT(TRUE);
    END;

    PROCEDURE CreateReceiveLine@4(VAR Receive@1240030000 : Record 14000601;VAR ReceiveControl@1240030001 : Record 14000611;LineUOM@1240030002 : Code[10];LineQuantity@1240030003 : Decimal;FixedQuantity@1240030004 : Decimal) : Boolean;
    VAR
      ReceiveLine@1240030007 : Record 14000602;
      ReceiveLine2@1240030008 : Record 14000602;
      FastReceiveLineTmp@1240030005 : TEMPORARY Record 14000609;
      ItemUnitOfMeasure@1240030012 : Record 5404;
      SerialNoInformation@1240030014 : Record 6504;
      LotNoInformation@1240030015 : Record 6505;
      ReceiveInput@1240030016 : Record 14000615;
      OverReceive@1240030006 : Page 14000633;
      EReceiveEnterQuantity@1240030009 : Page 14050053;
      QuantityToAdd@1240030011 : Decimal;
      QuantityToAddBase@1240030013 : Decimal;
    BEGIN
      TestInitialized;
      IF ReceiveControl."Input Serial Number" <> '' THEN
        IF (ReceiveControl."Input Unit of Measure Code" <> '') AND
           (ReceiveControl."Input Unit of Measure Code" <> LineUOM)
        THEN BEGIN
          ReceiveControl."Error Message" := STRSUBSTNO(Text010,LineUOM);
          EXIT(FALSE);
        END;

      IF (ReceiveStation."Enter Quantities" OR
          ReceiveControl."Input Always Enter Quantity" OR
          ReceiveControl."Always Enter Quantity") AND
         (ReceiveControl."Input Serial Number" = '') AND
         ((LineQuantity <> 1) OR
          NOT ReceiveStation."Do Not Enter Quantity of One") AND
         (FixedQuantity = 0)
      THEN BEGIN
        ReceiveInput.INIT;
        ReceiveInput.Type := ReceiveControl."Input Type";
        ReceiveInput."No." := ReceiveControl."Input No.";
        ReceiveInput."Variant Code" := ReceiveControl."Input Variant Code";
        IF ReceiveControl."Input Unit of Measure Code" <> '' THEN
          ReceiveInput."Unit of Measure" := ReceiveControl."Input Unit of Measure Code"
        ELSE
          ReceiveInput."Unit of Measure" := LineUOM;
        ReceiveInput.Description := ReceiveControl."Input Description";
        ReceiveControl.CalculateBackOrderQty(ReceiveInput,ReceiveStation."Sales Order Qty. Date Calc.");

        ReceiveLine.RESET;
        ReceiveLine.SETRANGE("Receive No.",Receive."No.");
        ReceiveLine.SETRANGE(Type,ReceiveControl."Input Type");
        ReceiveLine.SETRANGE("No.",ReceiveControl."Input No.");
        ReceiveLine.SETRANGE("Variant Code",ReceiveControl."Input Variant Code");
        IF ReceiveControl."Input Unit of Measure Code" <> '' THEN
          ReceiveLine.SETRANGE("Unit of Measure Code",ReceiveControl."Input Unit of Measure Code")
        ELSE
          ReceiveLine.SETRANGE("Unit of Measure Code",LineUOM);
        ReceiveInput."Already Received Quantity" := 0;
        IF ReceiveLine.FIND('-') THEN
          REPEAT
            IF ReceiveControl."Receive Serial Number" AND
               (ReceiveLine."Unit of Measure Code" <> LineUOM)
            THEN BEGIN
              ReceiveControl."Error Message" :=
                STRSUBSTNO(
                  Text011,ReceiveLine.FIELDNAME("Unit of Measure Code"));
              EXIT(FALSE);
            END;
            ReceiveInput."Already Received Quantity" :=
              ReceiveInput."Already Received Quantity" + ReceiveLine.Quantity;
          UNTIL ReceiveLine.NEXT = 0;

        ReceiveInput.Quantity := 0;
        CLEAR(EReceiveEnterQuantity);
        EReceiveEnterQuantity.LOOKUPMODE(TRUE);
        EReceiveEnterQuantity.SetReceiveInput(ReceiveInput);
        IF EReceiveEnterQuantity.RUNMODAL <> ACTION::LookupOK THEN BEGIN
          ReceiveControl."Error Message" := Text016;
          EXIT(FALSE);
        END ELSE
          EReceiveEnterQuantity.GetReceiveInput(ReceiveInput);

        IF (ReceiveControl."Receive Serial Number" OR ReceiveControl."Receive Lot Number" OR
            ReceiveControl."Receive Warranty Date" OR ReceiveControl."Receive Expiration Date") AND
           (ReceiveInput.Quantity <= ReceiveInput."Already Received Quantity") AND
           NOT ReceiveStation."Accumulate Qty when Entered"
        THEN BEGIN
          ReceiveControl."Error Message" := Text017;
          EXIT(FALSE);
        END;

        IF ReceiveStation."Accumulate Qty when Entered" THEN
          QuantityToAdd := ReceiveInput.Quantity
        ELSE
          QuantityToAdd := ReceiveInput.Quantity - ReceiveInput."Already Received Quantity";
      END ELSE
        IF FixedQuantity <> 0 THEN
          QuantityToAdd := FixedQuantity
        ELSE
          QuantityToAdd := 1;

      IF ReceiveControl."Input Unit of Measure Code" <> '' THEN BEGIN
        IF NOT ItemUnitOfMeasure.GET(
                 ReceiveControl."Input No.",ReceiveControl."Input Unit of Measure Code")
        THEN
          ItemUnitOfMeasure.INIT;
      END ELSE
        IF NOT ItemUnitOfMeasure.GET(ReceiveControl."Input No.",LineUOM) THEN
          ItemUnitOfMeasure.INIT;
      QuantityToAddBase := ItemUnitOfMeasure."Qty. per Unit of Measure" * QuantityToAdd;

      IF ReceiveControl."Auto Create Document" THEN BEGIN
        IF NOT InsertOverReceiveLine(ReceiveControl,FastReceiveLineTmp,LineUOM,QuantityToAddBase) THEN
          EXIT(FALSE);
      END ELSE BEGIN
        ReceiveControl."Over Receive" := FALSE;
        IF ReceiveStation."Allow Over Receive" AND
           (ReceiveControl."Source Type" IN [DATABASE::"Sales Header",DATABASE::"Purchase Header"])
        THEN BEGIN
          FastReceiveLineTmp.RESET;
          FastReceiveLineTmp.DELETEALL;
          UpdateFastReceiveLines(
            ReceiveControl,FastReceiveLineTmp,FALSE,FALSE,TRUE,
            ReceiveControl."Input Type",ReceiveControl."Input No.",ReceiveControl."Input Variant Code");
          IF QuantityToAddBase > FastReceiveLineTmp."Rem. Qty. to Receive (Base)" THEN BEGIN
            IF CheckForSubcontracting(ReceiveControl) THEN
              ERROR(Text096);

            CLEAR(OverReceive);
            OverReceive.LOOKUPMODE(TRUE);
            OverReceive.InitForm(
              ReceiveControl,FastReceiveLineTmp,ReceiveSetup,ReceiveStation,QuantityToAdd);
            IF OverReceive.RUNMODAL = ACTION::LookupOK THEN BEGIN
              IF NOT InsertOverReceiveLine(
                       ReceiveControl,FastReceiveLineTmp,LineUOM,
                       QuantityToAddBase - FastReceiveLineTmp."Rem. Qty. to Receive (Base)")
              THEN
                EXIT(FALSE);

              ReceiveControl."Over Receive" := TRUE;
            END;
          END;
        END;
      END;

      IF ReceiveControl."Show Serial No. Info. Card" AND
         (ReceiveControl."Input Serial Number" <> '') AND
         (ReceiveControl."Input Type" = ReceiveControl."Input Type"::Item)
      THEN BEGIN
        IF NOT SerialNoInformation.GET(
                 ReceiveControl."Input No.",ReceiveControl."Input Variant Code",
                 ReceiveControl."Input Serial Number")
        THEN BEGIN
          SerialNoInformation.INIT;
          SerialNoInformation.VALIDATE("Item No.",ReceiveControl."Input No.");
          SerialNoInformation.VALIDATE("Variant Code",ReceiveControl."Input Variant Code");
          SerialNoInformation.VALIDATE("Serial No.",ReceiveControl."Input Serial Number");
          SerialNoInformation.INSERT(TRUE);

          COMMIT;
        END;

        PAGE.RUNMODAL(0,SerialNoInformation);
      END;

      IF ReceiveControl."Show Lot No. Info. Card" AND
         (ReceiveControl."Input Lot Number" <> '') AND
         (ReceiveControl."Input Type" = ReceiveControl."Input Type"::Item)
      THEN BEGIN
        IF NOT LotNoInformation.GET(
                 ReceiveControl."Input No.",ReceiveControl."Input Variant Code",
                 ReceiveControl."Input Lot Number")
        THEN BEGIN
          LotNoInformation.INIT;
          LotNoInformation.VALIDATE("Item No.",ReceiveControl."Input No.");
          LotNoInformation.VALIDATE("Variant Code",ReceiveControl."Input Variant Code");
          LotNoInformation.VALIDATE("Lot No.",ReceiveControl."Input Lot Number");
          LotNoInformation.INSERT(TRUE);

          COMMIT;
        END;

        PAGE.RUNMODAL(0,LotNoInformation);
      END;

      FastReceiveLineTmp.RESET;
      FastReceiveLineTmp.DELETEALL;
      IF ReceiveSetup."Select Multi Document Source" AND Receive."Multi Document Receive" THEN BEGIN
        IF ReceiveControl.LookupSelectedSourceID(
             Receive,FastReceiveLineTmp,0,ReceiveControl."Input Type",ReceiveControl."Input No.",
             ReceiveControl."Input Variant Code",QuantityToAdd)
        THEN BEGIN
          FastReceiveLineTmp.RESET;
          FastReceiveLineTmp.SETFILTER("Qty. to Receive (Base)",'<>0');
          IF NOT FastReceiveLineTmp.FIND('-') THEN BEGIN
            ReceiveControl."Error Message" := Text018;
            EXIT(FALSE);
          END;
        END ELSE
          CLEAR(FastReceiveLineTmp);
      END;

      ReceiveLine.RESET;
      ReceiveLine.SETRANGE("Receive No.",Receive."No.");
      ReceiveLine.SETRANGE(Type,ReceiveControl."Input Type");
      ReceiveLine.SETRANGE("No.",ReceiveControl."Input No.");
      ReceiveLine.SETRANGE("Variant Code",ReceiveControl."Input Variant Code");
      IF ReceiveControl."Input Unit of Measure Code" <> '' THEN
        ReceiveLine.SETRANGE("Unit of Measure Code",ReceiveControl."Input Unit of Measure Code")
      ELSE
        ReceiveLine.SETRANGE("Unit of Measure Code",LineUOM);
      ReceiveLine.SETFILTER("Serial No.",'=%1','');
      ReceiveLine.SETFILTER("Lot No.",'=%1','');
      ReceiveLine.SETRANGE("Warranty Date",0D);
      ReceiveLine.SETRANGE("Expiration Date",0D);
      ReceiveLine.SETRANGE("Put-away Location Code",ReceiveControl."Put-away Location Code");
      ReceiveLine.SETRANGE("Put-away Bin Code",ReceiveControl."Put-away Bin Code");
      IF ReceiveSetup."Select Multi Document Source" AND Receive."Multi Document Receive" THEN
        ReceiveLine.SETRANGE("Selected Source ID",FastReceiveLineTmp."From Source ID");
      IF ReceiveLine.FIND('-') AND
         NOT ReceiveControl."Receive Serial Number" AND NOT ReceiveControl."Receive Lot Number" AND
         NOT ReceiveControl."Receive Warranty Date" AND NOT ReceiveControl."Receive Expiration Date"
      THEN BEGIN
        IF ReceiveControl."Over Receive" THEN
          ReceiveLine.VALIDATE("Over Receive",TRUE);
        ReceiveLine.VALIDATE(Quantity,ReceiveLine.Quantity + QuantityToAdd);
        IF ReceiveLine.OverReceiveError THEN BEGIN
          ReceiveControl."Error Message" := Text019;
          EXIT(FALSE);
        END;
        ReceiveLine.MODIFY(TRUE);
      END ELSE BEGIN
        ReceiveLine.RESET;
        ReceiveLine.SETRANGE("Receive No.",Receive."No.");
        IF ReceiveLine.FIND('+') THEN
          ReceiveLine."Line No." := ReceiveLine."Line No." + 10000
        ELSE
          ReceiveLine."Line No." := 10000;
        ReceiveLine."Receive No." := Receive."No.";
        ReceiveLine.INIT;
        ReceiveLine."Source Type" := Receive."Source Type";
        ReceiveLine."Source Subtype" := Receive."Source Subtype";
        ReceiveLine."Source ID" := Receive."Source ID";
        ReceiveLine.VALIDATE(Type,ReceiveControl."Input Type");
        ReceiveLine.VALIDATE("No.",ReceiveControl."Input No.");
        IF ReceiveControl."Input Variant Code" <> '' THEN
          ReceiveLine.VALIDATE("Variant Code",ReceiveControl."Input Variant Code");
        IF ReceiveControl."Over Receive" THEN
          ReceiveLine.VALIDATE("Over Receive",TRUE);
        IF ReceiveControl."Input No." <> '' THEN
          ReceiveLine.VALIDATE(Quantity,QuantityToAdd)
        ELSE
          ReceiveLine.VALIDATE(Quantity,0);
        IF ReceiveControl."Input Unit of Measure Code" <> '' THEN
          ReceiveLine.VALIDATE("Unit of Measure Code",ReceiveControl."Input Unit of Measure Code")
        ELSE
          ReceiveLine.VALIDATE("Unit of Measure Code",LineUOM);
        IF ReceiveLine.OverReceiveError THEN BEGIN
          ReceiveControl."Error Message" := Text019;
          EXIT(FALSE);
        END;

        IF ReceiveControl."Receive Lot Number" AND (ReceiveControl."Input Lot Number" <> '') THEN
          ReceiveLine.VALIDATE("Lot No.",ReceiveControl."Input Lot Number");

        IF ReceiveControl."Receive Warranty Date" AND (ReceiveControl."Input Warranty Date" <> 0D) THEN
          ReceiveLine.VALIDATE("Warranty Date",ReceiveControl."Input Warranty Date");

        IF ReceiveControl."Receive Expiration Date" AND (ReceiveControl."Input Expiration Date" <> 0D) THEN
          ReceiveLine.VALIDATE("Expiration Date",ReceiveControl."Input Expiration Date");

        ReceiveLine.VALIDATE("Scanned No.",ReceiveControl."Scanned No.");
        ReceiveLine.VALIDATE("Put-away Location Code",ReceiveControl."Put-away Location Code");
        ReceiveLine.VALIDATE("Put-away Zone Code",ReceiveControl."Put-away Zone Code");
        ReceiveLine.VALIDATE("Put-away Bin Code",ReceiveControl."Put-away Bin Code");

        IF ReceiveControl."Receive Serial Number" AND (ReceiveControl."Input Serial Number" = '')
        THEN BEGIN
          ReceiveInput.Quantity := 0;
          WHILE ReceiveInput.Quantity < QuantityToAdd DO BEGIN
            ReceiveInput.Quantity := ReceiveInput.Quantity + 1;
            ReceiveLine.VALIDATE(Quantity,1);
            IF ReceiveInput.Quantity > 1 THEN
              ReceiveLine."Line No." := ReceiveLine."Line No." + 10000;
            IF ReceiveLine.OverReceiveError THEN BEGIN
              ReceiveControl."Error Message" := Text019;
              EXIT(FALSE);
            END;

            IF ReceiveSetup."Select Multi Document Source" AND Receive."Multi Document Receive" AND
               (FastReceiveLineTmp."From Source ID" <> '')
            THEN BEGIN
              IF FastReceiveLineTmp."Qty. to Receive (Base)" >= ReceiveLine."Quantity (Base)" THEN BEGIN
                ReceiveLine.VALIDATE("Selected Source ID",FastReceiveLineTmp."From Source ID");
                FastReceiveLineTmp."Qty. to Receive (Base)" :=
                  FastReceiveLineTmp."Qty. to Receive (Base)" - ReceiveLine."Quantity (Base)";
              END ELSE BEGIN
                IF FastReceiveLineTmp."Quantity (Base)" <> 0 THEN
                  ERROR(Text020);

                IF FastReceiveLineTmp.NEXT = 0 THEN
                  ERROR(Text020);

                ReceiveLine.VALIDATE("Selected Source ID",FastReceiveLineTmp."From Source ID");
                FastReceiveLineTmp."Qty. to Receive (Base)" :=
                  FastReceiveLineTmp."Qty. to Receive (Base)" - ReceiveLine."Quantity (Base)";

                IF FastReceiveLineTmp."Quantity (Base)" < 0 THEN
                  ERROR(Text020);
              END;
            END;

            ReceiveLine.INSERT(TRUE);
          END;
        END ELSE BEGIN
          IF ReceiveControl."Input Serial Number" <> '' THEN BEGIN
            ReceiveLine2.RESET;
            ReceiveLine2.SETCURRENTKEY("No.","Serial No.");
            ReceiveLine2.SETRANGE("No.",ReceiveControl."Input No.");
            ReceiveLine2.SETRANGE("Serial No.",ReceiveControl."Input Serial Number");
            IF ReceiveLine2.FIND('-') THEN BEGIN
              ReceiveControl."Error Message" :=
                STRSUBSTNO(
                  Text021,
                  ReceiveControl.FormatSource(
                    ReceiveLine2."Source Type",ReceiveLine2."Source Subtype",ReceiveLine2."Source ID"),
                  ReceiveLine2."Receive No.");
              EXIT(FALSE);
            END;

            ReceiveLine.VALIDATE("Serial No.",ReceiveControl."Input Serial Number");
          END;

          IF ReceiveSetup."Select Multi Document Source" AND Receive."Multi Document Receive" AND
             (FastReceiveLineTmp."From Source ID" <> '')
          THEN BEGIN
            REPEAT
              IF FastReceiveLineTmp."Qty. to Receive (Base)" <> ReceiveLine."Quantity (Base)" THEN BEGIN
                IF FastReceiveLineTmp."Qty. per Unit of Measure" <>
                   ReceiveLine."Qty. per Unit of Measure"
                THEN BEGIN
                  IF ReceiveLine."Qty. per Unit of Measure" = 0 THEN
                    ReceiveLine."Qty. per Unit of Measure" := 1;
                  ReceiveLine.VALIDATE(
                    Quantity,
                    ROUND(
                      ReceiveLine."Qty. per Unit of Measure" /
                      FastReceiveLineTmp."Qty. to Receive (Base)",0.00001));
                END ELSE
                  ReceiveLine.VALIDATE(Quantity,FastReceiveLineTmp."Qty. to Receive");
                ReceiveLine.VALIDATE("Quantity (Base)",FastReceiveLineTmp."Qty. to Receive (Base)");
              END;
              ReceiveLine.VALIDATE("Selected Source ID",FastReceiveLineTmp."From Source ID");

              ReceiveLine.INSERT(TRUE);

              ReceiveLine."Line No." := ReceiveLine."Line No." + 10000;
            UNTIL FastReceiveLineTmp.NEXT = 0;
          END ELSE
            ReceiveLine.INSERT(TRUE);
        END;
      END;

      Receive.GET(Receive."No.");
      Receive.ClearTotalValueFields;
      Receive.TotalNetWeight;

      IF ReceiveSetup."Enable Label Printing" THEN
        LabelMgt.PrintReceiveLineLabel(
          ReceiveLine,QuantityToAdd,QuantityToAdd * ReceiveLine."Qty. per Unit of Measure",FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE CloseReceive@8(VAR Receive@1240030000 : Record 14000601;ShippingAgent@1240030001 : Record 291;ScaleInterface@1240030002 : Record 14000746;VAR ReceiveControl@1240030003 : Record 14000611;PrintLabel@1240030004 : Boolean) : Boolean;
    VAR
      ReceiveLine@1240030008 : Record 14000602;
    BEGIN
      TestInitialized;
      IF NOT ReceiveControl."Receive Open" THEN BEGIN
        IF NOT ReceiveSetup.ReceiveDetail(Receive."Source Type",Receive."Source Subtype")
        THEN BEGIN
          IF NOT ReceiveControl."Receive Open" THEN BEGIN
            CreateReceive(Receive,ReceiveControl);
            COMMIT;
          END;
        END ELSE BEGIN
          ReceiveControl."Error Message" := Text022;
          EXIT(FALSE);
        END;
      END;

      Receive.GET(Receive."No.");
      Receive."Receive Date" := WORKDATE;
      ReceiveLine.RESET;
      ReceiveLine.SETRANGE("Receive No.",Receive."No.");
      IF NOT ReceiveLine.FIND('-') AND
         ReceiveSetup.ReceiveDetail(Receive."Source Type",Receive."Source Subtype")
      THEN BEGIN
        Receive.DELETE(TRUE);
        ReceiveControl."Receive Open" := FALSE;
        CLEAR(Receive);
        Receive.INIT;
        Receive."No." := '';
        EXIT(FALSE);
      END ELSE BEGIN
        IF (ReceiveStation."Scale Inferface Code" <> '') AND ReceiveStation."Use Scale on Close Receive"
        THEN BEGIN
          IF ReceiveControl."Scale Weight" <> 0 THEN BEGIN
            Receive.VALIDATE("Scale Weight",ReceiveControl."Scale Weight");
          END ELSE BEGIN
            IF NOT ScalesComm.GetReceiveWeight(ScaleInterface,Receive) THEN BEGIN
              ReceiveControl."Error Message" := Text023;
              EXIT(FALSE);
            END;
          END;
        END ELSE
          IF ReceiveStation."Manually Enter Weight" THEN
            IF ReceiveControl."Manual Weight" <> 0 THEN
              Receive.VALIDATE("Override Weight",ReceiveControl."Manual Weight")
            ELSE
              WeightOverride(Receive);

        IF ReceiveStation."Manually Enter Dimensions" THEN
          VolumeOverride(Receive);
      END;

      Receiving.CloseReceive(Receive,PrintLabel);

      ReceiveControl."Receive Open" := FALSE;

      EXIT(TRUE);
    END;

    PROCEDURE OpenReceive@23(VAR Receive@1240030000 : Record 14000601;VAR ReceiveControl@1240030001 : Record 14000611) : Boolean;
    VAR
      Receive2@1240030004 : Record 14000601;
      ReceiveInput@1240030003 : Record 14000615;
      EReceiveEnterReceiveNo@1240030002 : Page 14050052;
      ReceiveNo@1240030005 : Code[250];
    BEGIN
      TestInitialized;
      IF ReceiveControl."Receive Open" THEN BEGIN
        ReceiveControl."Error Message" := Text024;
        EXIT(FALSE);
      END;

      Receive2.RESET;
      Receive2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Receive2.SETRANGE("Source Type",ReceiveControl."Source Type");
      Receive2.SETRANGE("Source Subtype",ReceiveControl."Source Subtype");
      IF ReceiveControl."Multi Document Receive" THEN
        Receive2.SETFILTER("Source ID",ReceiveControl."Multi Document No.")
      ELSE
        Receive2.SETRANGE("Source ID",ReceiveControl."Source ID");
      Receive2.SETRANGE(Closed,FALSE);
      IF ReceiveSetup."Location Receiving" THEN
        Receive2.SETRANGE("Location Code",ReceiveStation."Location Code");
      IF Receive2.FIND('-') THEN BEGIN
        ReceiveControl."Error Message" := STRSUBSTNO(Text025,Receive2."No.");
        EXIT(FALSE);
      END;

      CLEAR(ReceiveInput);
      ReceiveInput."Source Type" := ReceiveControl."Source Type";
      ReceiveInput."Source Subtype" := ReceiveControl."Source Subtype";
      ReceiveInput."Source ID" := ReceiveControl."Source ID";
      ReceiveInput."Multi Document No." := ReceiveControl."Multi Document No.";

      CLEAR(EReceiveEnterReceiveNo);
      EReceiveEnterReceiveNo.LOOKUPMODE(TRUE);
      EReceiveEnterReceiveNo.SetReceiveInput(ReceiveInput);
      IF EReceiveEnterReceiveNo.RUNMODAL = ACTION::LookupOK THEN BEGIN
      EReceiveEnterReceiveNo.GetReceiveInput(ReceiveInput);
        ReceiveNo := ReceiveInput."Receive No.";
      END ELSE BEGIN
        ReceiveControl."Error Message" := Text027;
        EXIT(FALSE);
      END;

      IF ReceiveNo = '' THEN BEGIN
        ReceiveControl."Error Message" := Text027;
        EXIT(FALSE);
      END;

      IF COPYSTR(ReceiveNo,1,2) = '//' THEN BEGIN
        ReceiveControl."Error Message" := Text027;
        EXIT(FALSE);
      END;

      ReceiveNo := GetReceiveNo(ReceiveNo);

      IF NOT Receive2.GET(ReceiveNo) THEN BEGIN
        ReceiveControl."Error Message" := STRSUBSTNO(Text003,ReceiveNo);
        EXIT(FALSE);
      END;

      Receive2.CALCFIELDS("Exist in Other Receive");
      IF Receive2."Exist in Other Receive"THEN BEGIN
        ReceiveControl."Error Message" := Text029;
        EXIT(FALSE);
      END;

      IF ReceiveControl."Multi Document Receive" THEN BEGIN
        IF NOT ((Receive2."Multi Document No." = ReceiveControl."Source ID") OR
                (STRPOS(Receive2."Multi Document No.",'|' + ReceiveControl."Source ID") <> 0) OR
                (STRPOS(Receive2."Multi Document No.",ReceiveControl."Source ID" + '|') <> 0))
        THEN BEGIN
          ReceiveControl."Error Message" := Text030;
          EXIT(FALSE);
        END;

        IF Receive2."Original Receive No." <> '' THEN BEGIN
          ReceiveNo := Receive2."Original Receive No.";

          Receive.GET(ReceiveNo);
        END ELSE BEGIN
          Receive.RESET;
          Receive.SETCURRENTKEY("Original Receive No.");
          Receive.SETRANGE("Original Receive No.",Receive2."No.");
          Receive.FIND('-');
        END;
      END ELSE BEGIN
        IF (Receive2."Source Type" <> ReceiveControl."Source Type") OR
           (Receive2."Source Subtype" <> ReceiveControl."Source Subtype") OR
           (Receive2."Source ID" <> ReceiveControl."Source ID")
        THEN BEGIN
          ReceiveControl."Error Message" :=
            STRSUBSTNO(
              Text008,
              ReceiveControl.FormatSource(
                Receive2."Source Type",Receive2."Source Subtype",Receive2."Source ID"));
          EXIT(FALSE);
        END;

        Receive.GET(ReceiveNo);
      END;

      Receiving.OpenReceive(Receive);

      ReceiveControl."Receive Open" := TRUE;

      EXIT(TRUE);
    END;

    PROCEDURE CopyLastReceive@42(VAR Receive@1240030000 : Record 14000601;VAR ReceiveControl@1240030001 : Record 14000611;PrintLabel@1240030002 : Boolean) : Boolean;
    VAR
      Receive2@1240030004 : Record 14000601;
      ReceiveInput@1240030003 : Record 14000615;
      EReceiveNoOfCopies@1240030008 : Page 14050051;
      NoOfReceives@1240030006 : Integer;
      CreatedReceives@1240030007 : Integer;
    BEGIN
      TestInitialized;
      Receive2.RESET;
      Receive2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Receive2.SETRANGE("Source Type",ReceiveControl."Source Type");
      Receive2.SETRANGE("Source Subtype",ReceiveControl."Source Subtype");
      IF ReceiveControl."Multi Document Receive" THEN
        Receive2.SETFILTER("Source ID",ReceiveControl."Multi Document No.")
      ELSE
        Receive2.SETRANGE("Source ID",ReceiveControl."Source ID");
      Receive2.SETRANGE(Closed,TRUE);
      IF ReceiveSetup."Location Receiving" THEN
        Receive2.SETRANGE("Location Code",ReceiveStation."Location Code");
      IF NOT Receive2.FIND('+') THEN BEGIN
        ReceiveControl."Error Message" := Text031;
        EXIT(FALSE);
      END;
      IF Receive2."Original Receive No." <> '' THEN BEGIN
        Receive2.GET(Receive2."Original Receive No.");
        Receive2."Source Type" := ReceiveControl."Source Type";
        Receive2."Source Subtype" := ReceiveControl."Source Subtype";
        Receive2."Source ID" := ReceiveControl."Source ID";
      END;

      CLEAR(EReceiveNoOfCopies);
      EReceiveNoOfCopies.LOOKUPMODE(TRUE);
      IF EReceiveNoOfCopies.RUNMODAL = ACTION::LookupOK THEN BEGIN
      EReceiveNoOfCopies.GetReceiveInput(ReceiveInput);
      NoOfReceives := ReceiveInput."No. of Copies";
      END ELSE
        EXIT(FALSE);

      IF NoOfReceives < 1 THEN BEGIN
        ReceiveControl."Error Message" := Text033;
        EXIT(FALSE);
      END;

      CreatedReceives := Receive2.CopyReceive(NoOfReceives,FALSE,PrintLabel);

      IF CreatedReceives < NoOfReceives THEN
        ReceiveControl."Error Message" := STRSUBSTNO(Text034,CreatedReceives);

      Receive2.FIND('+');
      Receive := Receive2;
      ReceiveControl."Last Receive No." := Receive."Receive No.";
      ReceiveControl."Total Receive Count" := Receive."Total Receives";
      Receive.ClearTotalValueFields;
      Receive.TotalNetWeight;

      EXIT(TRUE);
    END;

    PROCEDURE CheckReceiveOpen@24(VAR Receive@1240030000 : Record 14000601;VAR ReceiveControl@1240030001 : Record 14000611);
    VAR
      Receive2@1240030004 : Record 14000601;
      OpenReceiveFound@1240030007 : Boolean;
      ClosedReceiveFound@1240030008 : Boolean;
      FinishedSearch@1240030009 : Boolean;
    BEGIN
      TestInitialized;
      Receive2.RESET;
      Receive2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Receive2.SETRANGE("Source Type",ReceiveControl."Source Type");
      Receive2.SETRANGE("Source Subtype",ReceiveControl."Source Subtype");
      Receive2.SETRANGE("Source ID",ReceiveControl."Source ID");
      Receive2.SETRANGE(Closed,FALSE);
      Receive2.SETRANGE("Multi Document Receive",FALSE);
      IF ReceiveSetup."Location Receiving" THEN
        Receive2.SETRANGE("Location Code",ReceiveStation."Location Code");
      OpenReceiveFound := Receive2.FIND('-');
      IF NOT OpenReceiveFound THEN BEGIN
        Receive2.RESET;
        Receive2.SETRANGE("Source Type",ReceiveControl."Source Type");
        Receive2.SETRANGE("Source Subtype",ReceiveControl."Source Subtype");
        Receive2.SETFILTER("Multi Document No.",'*' + ReceiveControl."Source ID" + '*');
        Receive2.SETRANGE(Closed,FALSE);
        Receive2.SETRANGE("Multi Document Receive",TRUE);
        IF ReceiveSetup."Location Receiving" THEN
          Receive2.SETRANGE("Location Code",ReceiveStation."Location Code");
        IF Receive2.FIND('-') THEN BEGIN
          FinishedSearch := FALSE;
          REPEAT
            IF (Receive2."Multi Document No." = ReceiveControl."Source ID") OR
               (STRPOS(Receive2."Multi Document No.",'|' + ReceiveControl."Source ID") <> 0) OR
               (STRPOS(Receive2."Multi Document No.",ReceiveControl."Source ID" + '|') <> 0)
            THEN
              OpenReceiveFound := TRUE;

            IF NOT OpenReceiveFound THEN
              FinishedSearch := Receive2.NEXT = 0;
          UNTIL OpenReceiveFound OR FinishedSearch;
        END;
      END;

      IF OpenReceiveFound THEN BEGIN
        Receive.GET(Receive2."No.");
        Receive.ClearTotalValueFields;
        Receive.TotalNetWeight;
        ReceiveControl."Receive Open" := TRUE;
        ReceiveControl."Last Receive No." := Receive."Receive No.";
        ReceiveControl."Total Receive Count" := Receive."Total Receives";
        IF Receive."Multi Document Receive" THEN
          ReceiveControl."Multi Document No." := Receive."Multi Document No.";
        ReceiveControl."Multi Document Receive" := Receive."Multi Document Receive";
      END ELSE BEGIN
        Receive2.RESET;
        Receive2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
        Receive2.SETRANGE("Source Type",ReceiveControl."Source Type");
        Receive2.SETRANGE("Source Subtype",ReceiveControl."Source Subtype");
        Receive2.SETRANGE("Source ID",ReceiveControl."Source ID");
        Receive2.SETRANGE(Closed,TRUE);
        Receive2.SETRANGE("Multi Document Receive",FALSE);
        IF ReceiveSetup."Location Receiving" THEN
          Receive2.SETRANGE("Location Code",ReceiveStation."Location Code");
        ClosedReceiveFound := Receive2.FIND('+');
        IF NOT ClosedReceiveFound THEN BEGIN
          Receive2.RESET;
          Receive2.SETFILTER("Multi Document No.",'*' + ReceiveControl."Source ID" + '*');
          Receive2.SETRANGE(Closed,TRUE);
          Receive2.SETRANGE("Multi Document Receive",TRUE);
          IF ReceiveSetup."Location Receiving" THEN
            Receive2.SETRANGE("Location Code",ReceiveStation."Location Code");
          IF Receive2.FIND('+') THEN BEGIN
            FinishedSearch := FALSE;
            REPEAT
              IF (Receive2."Multi Document No." = ReceiveControl."Source ID") OR
                 (STRPOS(Receive2."Multi Document No.",'|' + ReceiveControl."Source ID") <> 0) OR
                 (STRPOS(Receive2."Multi Document No.",ReceiveControl."Source ID" + '|') <> 0)
              THEN
                ClosedReceiveFound := TRUE;

              IF NOT ClosedReceiveFound THEN
                FinishedSearch := Receive2.NEXT = 0;
            UNTIL ClosedReceiveFound OR FinishedSearch;
          END;
        END;

        IF ClosedReceiveFound THEN BEGIN
          ReceiveControl."Last Receive No." := Receive2."Receive No.";
          ReceiveControl."Total Receive Count" := Receive2."Total Receives";
          IF Receive2."Multi Document Receive" THEN
            ReceiveControl."Multi Document No." := Receive2."Multi Document No.";
          ReceiveControl."Multi Document Receive" := Receive2."Multi Document Receive";
        END ELSE
          IF ReceiveStation."Always Enter Total Receives" THEN
            ChangeTotalReceiveCount(Receive,ReceiveControl);
        Receive.INIT;
        ReceiveControl."Receive Open" := FALSE;
        CLEAR(Receive);
      END;
    END;

    PROCEDURE CloseOrder@12(ShippingAgent@1240030000 : Record 291;VAR ReceiveControl@1240030001 : Record 14000611;PrintOrder@1240030002 : Boolean;ForceClose@1240030003 : Boolean) : Boolean;
    VAR
      Receive@1240030007 : Record 14000601;
      SalesHeader@1240030004 : Record 36;
      PurchHeader@1240030008 : Record 38;
      PurchHeader2@1240030011 : Record 38;
      TransferHeader@1240030006 : Record 5740;
      WhseRcptHdr@1240020000 : Record 7316;
      WhseRcptLine@1240030012 : Record 7317;
      SalesPost@1240030005 : Codeunit 80;
      PurchPost@1240030009 : Codeunit 90;
      TransferPost@1240030016 : Codeunit 5705;
      WhsePostReceipt@1240030014 : Codeunit 5760;
      EShipSetGlobalVariable@1240020001 : Codeunit 14000246;
      ReceiveNo@1240030010 : Integer;
      OldReceiveStation@1000000000 : Record 14000608;
      WhseActivHeader@1000000001 : Record 5766;
    BEGIN
      TestInitialized;

      IF ForceClose AND
         NOT (((ReceiveControl."Source Type" = DATABASE::"Sales Header") AND
               (ReceiveControl."Source Subtype" = SalesHeader."Document Type"::"Return Order")) OR
              ((ReceiveControl."Source Type" = DATABASE::"Purchase Header") AND
               (ReceiveControl."Source Subtype" = PurchHeader."Document Type"::Order)) OR
              (ReceiveControl."Source Type" = DATABASE::"Transfer Header"))
      THEN BEGIN
        ReceiveControl."Error Message" := Text095;
        EXIT(FALSE);
      END;

      IF ReceiveStation."Test Receive No. on Close Ord." THEN BEGIN
        IF ReceiveControl."Total Receive Count" > ReceiveControl."Last Receive No." THEN BEGIN
          ReceiveControl."Error Message" :=
            STRSUBSTNO(
              Text035,
              ReceiveControl."Last Receive No.",ReceiveControl."Total Receive Count");
          EXIT(FALSE);
        END;

        Receive.RESET;
        Receive.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
        Receive.SETRANGE("Source Type",ReceiveControl."Source Type");
        Receive.SETRANGE("Source Subtype",ReceiveControl."Source Subtype");
        IF ReceiveControl."Multi Document Receive" THEN BEGIN
          Receive.SETFILTER("Source ID",'');
          Receive.SETRANGE("Multi Document No.",ReceiveControl."Multi Document No.");
        END ELSE
          Receive.SETRANGE("Source ID",ReceiveControl."Source ID");
        Receive.SETFILTER("Total Receives",'<>1');
        IF ReceiveSetup."Location Receiving" THEN
          Receive.SETRANGE("Location Code",ReceiveStation."Location Code");
        IF Receive.FIND('-') THEN BEGIN
          Receive.SETFILTER("Total Receives",'<>%1',Receive."Total Receives");
          IF Receive.FIND('-') THEN BEGIN
            ReceiveControl."Error Message" := Text036;
            EXIT;
          END;
          Receive.SETRANGE("Total Receives");

          Receive.SETFILTER("Receive No.",'<1|>%1',Receive."Total Receives");
          IF Receive.FIND('-') THEN BEGIN
            ReceiveControl."Error Message" := Text036;
            EXIT;
          END;

          FOR ReceiveNo := 1 TO Receive."Total Receives" DO BEGIN
            Receive.SETRANGE("Receive No.",ReceiveNo);
            IF NOT Receive.FIND('-') THEN BEGIN
              ReceiveControl."Error Message" := Text036;
              EXIT;
            END ELSE
              IF Receive.NEXT <> 0 THEN BEGIN
                ReceiveControl."Error Message" := Text036;
                EXIT;
              END;
          END;
        END;
      END;

      //<TPZ1626>
      IF ForceCreatePrintPutAway THEN BEGIN
        OldReceiveStation."Return Order Close Action" := ReceiveStation."Return Order Close Action";
        OldReceiveStation."Print Put-Away on Close" := ReceiveStation."Print Put-Away on Close";
        OldReceiveStation."Purchase Order Close Action" := ReceiveStation."Purchase Order Close Action";
        OldReceiveStation."Transfer Order Close Action" := ReceiveStation."Transfer Order Close Action";

        ReceiveStation."Print Put-Away on Close" := TRUE;

        IF (ReceiveStation."Return Order Close Action" <> ReceiveStation."Return Order Close Action"::Receive) AND
           (ReceiveStation."Return Order Close Action" <> ReceiveStation."Return Order Close Action"::"Receive and Invoice") THEN
          ReceiveStation."Return Order Close Action" := ReceiveStation."Return Order Close Action"::Receive;

        IF (ReceiveStation."Purchase Order Close Action" <> ReceiveStation."Purchase Order Close Action"::Receive) AND
           (ReceiveStation."Purchase Order Close Action" <> ReceiveStation."Purchase Order Close Action"::"Receive and Invoice") THEN
           ReceiveStation."Purchase Order Close Action" := ReceiveStation."Purchase Order Close Action"::Receive;

        ReceiveStation."Transfer Order Close Action" := ReceiveStation."Transfer Order Close Action"::Receive;
      END;
      //</TPZ1626>

      CASE ReceiveControl."Source Type" OF
        DATABASE::"Sales Header":
          BEGIN
            SalesHeader.RESET;
            SalesHeader.SETRANGE("Document Type",ReceiveControl."Source Subtype");
            IF ReceiveControl."Multi Document Receive" THEN BEGIN
              SalesHeader.SETFILTER("No.",ReceiveControl."Multi Document No.");
              IF ReceiveStation."Simple Multi Document Posting" THEN BEGIN
                SalesHeader.SETRANGE("Receive Exists",TRUE);
                IF ReceiveSetup."Location Receiving" THEN
                  SalesHeader.SETRANGE("Location Filter",ReceiveStation."Location Code");
              END;
            END ELSE
              SalesHeader.SETRANGE("No.",ReceiveControl."Source ID");
            SalesHeader.FIND('-');
            REPEAT
              SalesHeader.TESTFIELD(Status,SalesHeader.Status::Released);

              WhseReceiptFindUpdate(
                DATABASE::"Sales Line",SalesHeader."Document Type",SalesHeader."No.");
            UNTIL SalesHeader.NEXT = 0;

            IF ForceClose THEN
              SetQtyToReceiveToReceive(ReceiveControl);

            SalesHeader.FIND('-');
            REPEAT
              Receiving.CloseSalesHeader(SalesHeader,PrintOrder);
            UNTIL SalesHeader.NEXT = 0;

            SalesHeader.FIND('-');
            REPEAT
              SalesHeader.TESTFIELD(Status,SalesHeader.Status::Released);

              CASE TRUE OF
                ((SalesHeader."Document Type" = SalesHeader."Document Type"::"Credit Memo") AND
                 (ReceiveStation."Sales Cr. Memo Close Action" =
                  ReceiveStation."Sales Cr. Memo Close Action"::Invoice)):
                  BEGIN
                    EShipSetGlobalVariable."SalesPost-PostingSalesDoc"(TRUE);
                    SalesHeader.Ship := TRUE;
                    SalesHeader.Invoice := TRUE;
                    SalesPost.RUN(SalesHeader);
                    EShipSetGlobalVariable."SalesPost-PostingSalesDoc"(FALSE);
                    IF ReceiveStation."Print Receipt Report on Close" AND PrintOrder THEN
                      PrintSalesReceiptReport(SalesHeader."Last Shipping No.");
                    IF ReceiveStation."Print Invoice Report on Close" AND PrintOrder THEN
                      PrintSalesInvoiceReport(
                        SalesHeader."Document Type",SalesHeader."Last Posting No.");
                  END;
                (SalesHeader."Document Type" = SalesHeader."Document Type"::"Return Order") AND
                ((ReceiveStation."Return Order Close Action" =
                  ReceiveStation."Return Order Close Action"::Receive) OR
                 (ReceiveStation."Return Order Close Action" =
                  ReceiveStation."Return Order Close Action"::"Receive and Invoice")):
                  BEGIN
                    WhseRcptLine.RESET;
                    WhseRcptLine.SETCURRENTKEY("Source Type","Source Subtype","Source No.");
                    WhseRcptLine.SETRANGE("Source Type",37);
                    WhseRcptLine.SETRANGE("Source Subtype",SalesHeader."Document Type");
                    WhseRcptLine.SETRANGE("Source No.",SalesHeader."No.");
                    IF ReceiveSetup."Location Receiving" THEN
                      WhseRcptLine.SETRANGE("Location Code",ReceiveStation."Location Code");
                    IF WhseRcptLine.FIND('-') THEN BEGIN
                        WhseReceiptUpdateBin(ReceiveControl,WhseRcptLine);

                        EShipSetGlobalVariable."SalesPost-PostingSalesDoc"(TRUE);
                      //<TPZ1709>
                      IF ReceiveStation."Change Posting Date on Close" THEN
                        WhseReceiptUpdatePostingDate(WhseRcptLine."Source Type", WhseRcptLine."Source Subtype",
                                                     WhseRcptLine."Source No.");
                      //</TPZ1709>

                          CLEAR(WhsePostReceipt);
                          WhsePostReceipt.RUN(WhseRcptLine);
                        EShipSetGlobalVariable."SalesPost-PostingSalesDoc"(FALSE);

                      IF ReceiveStation."Change Put-away on Close" THEN
                        WhsePutawayUpdateBin(
                          WhseRcptLine."Source Type",WhseRcptLine."Source Subtype",
                          WhseRcptLine."Source No.",WhseRcptLine."Location Code",
                          WhseRcptLine."No.",'');

                      //TPZ1626
                      //IF ReceiveStation."Print Put-Away on Close" AND  PrintOrder THEN
                      //  PrintPutAwayReport(WhseRcptLine);
                      IF ReceiveStation."Print Put-Away on Close" THEN
                        IF WhsePostReceipt.GetFirstPutAwayDocument(WhseActivHeader) THEN BEGIN
                            REPEAT
                              WhseActivHeader.SETRECFILTER;
                              IF CURRENTCLIENTTYPE = CLIENTTYPE::Windows THEN //VAH
                                REPORT.RUN(REPORT::"Put-away List-new",FALSE,FALSE,WhseActivHeader)//<TPZ2666>
                              ELSE
                                REPORT.RUN(REPORT::"Put-away List-Webclient",FALSE,FALSE,WhseActivHeader);//<TPZ2666> //VAH
                              //PrintedDocuments := PrintedDocuments + 1;
                            UNTIL NOT WhsePostReceipt.GetNextPutAwayDocument(WhseActivHeader);
                        END;
                      //TPZ1626

                      IF ReceiveStation."Register Put-away on Close" THEN
                        WhsePutawayRegister(
                          WhseRcptLine."Source Type",WhseRcptLine."Source Subtype",
                          WhseRcptLine."Source No.",WhseRcptLine."Location Code",
                          WhseRcptLine."No.");
                    END ELSE BEGIN
                      EShipSetGlobalVariable."SalesPost-PostingSalesDoc"(TRUE);
                      SalesHeader.Receive := TRUE;
                      SalesHeader.Invoice :=
                        ReceiveStation."Return Order Close Action" =
                        ReceiveStation."Return Order Close Action"::"Receive and Invoice";
                      SalesPost.RUN(SalesHeader);
                      EShipSetGlobalVariable."SalesPost-PostingSalesDoc"(FALSE);
                      IF ReceiveStation."Print Receipt Report on Close" AND PrintOrder THEN
                        PrintSalesReceiptReport(SalesHeader."Last Shipping No.");
                      IF ReceiveStation."Print Invoice Report on Close" AND PrintOrder AND
                         (ReceiveStation."Return Order Close Action" =
                          ReceiveStation."Return Order Close Action"::"Receive and Invoice")
                      THEN
                        PrintSalesInvoiceReport(
                          SalesHeader."Document Type",SalesHeader."Last Posting No.");
                    END;
                  END;
              END;
            UNTIL SalesHeader.NEXT = 0;
            IF ReceiveStation."Open Order after Close" THEN BEGIN
              COMMIT;

              IF SalesHeader.FIND('-') THEN
                REPEAT
                  CASE SalesHeader."Document Type" OF
                    SalesHeader."Document Type"::"Credit Memo":
                      PAGE.RUNMODAL(PAGE::"Sales Credit Memo",SalesHeader);
                    SalesHeader."Document Type"::"Return Order":
                      PAGE.RUNMODAL(PAGE::"Sales Return Order",SalesHeader);
                    ELSE
                      PAGE.RUNMODAL(0,SalesHeader);
                  END;
                UNTIL SalesHeader.NEXT = 0;
            END;
          END;
        DATABASE::"Purchase Header":
          BEGIN
            PurchHeader.RESET;
            PurchHeader.SETRANGE("Document Type",ReceiveControl."Source Subtype");
            IF ReceiveControl."Multi Document Receive" THEN BEGIN
              PurchHeader.SETFILTER("No.",ReceiveControl."Multi Document No.");
              IF ReceiveStation."Simple Multi Document Posting" THEN BEGIN
                PurchHeader.SETRANGE("Receive Exists",TRUE);
                IF ReceiveSetup."Location Receiving" THEN
                  PurchHeader.SETRANGE("Location Filter",ReceiveStation."Location Code");
              END;
            END ELSE
              PurchHeader.SETRANGE("No.",ReceiveControl."Source ID");
            PurchHeader.FIND('-');
            REPEAT
              PurchHeader.TESTFIELD(Status,PurchHeader.Status::Released);

              WhseReceiptFindUpdate(
                DATABASE::"Purchase Line",PurchHeader."Document Type",PurchHeader."No.");
            UNTIL PurchHeader.NEXT = 0;

            IF ForceClose THEN
              SetQtyToReceiveToReceive(ReceiveControl);

            PurchHeader.FIND('-');
            REPEAT
              Receiving.ClosePurchHeader(PurchHeader,PrintOrder);
            UNTIL PurchHeader.NEXT = 0;

            PurchHeader.FIND('-');
            REPEAT
              PurchHeader.TESTFIELD(Status,PurchHeader.Status::Released);

              CASE TRUE OF
                (PurchHeader."Document Type" = PurchHeader."Document Type"::Order) AND
                ((ReceiveStation."Purchase Order Close Action" =
                  ReceiveStation."Purchase Order Close Action"::Receive) OR
                 (ReceiveStation."Purchase Order Close Action" =
                  ReceiveStation."Purchase Order Close Action"::"Receive and Invoice")):
                  BEGIN
                    WhseRcptLine.RESET;
                    WhseRcptLine.SETCURRENTKEY("Source Type","Source Subtype","Source No.");
                    WhseRcptLine.SETRANGE("Source Type",39);
                    WhseRcptLine.SETRANGE("Source Subtype",PurchHeader."Document Type");
                    WhseRcptLine.SETRANGE("Source No.",PurchHeader."No.");
                    IF ReceiveSetup."Location Receiving" THEN
                      WhseRcptLine.SETRANGE("Location Code",ReceiveStation."Location Code");
                    IF WhseRcptLine.FIND('-') THEN BEGIN
                      //<TPZ1709>
                      IF ReceiveStation."Change Posting Date on Close" THEN
                        WhseReceiptUpdatePostingDate(WhseRcptLine."Source Type", WhseRcptLine."Source Subtype",
                                                     WhseRcptLine."Source No.");
                      //</TPZ1709>

                      WhseReceiptUpdateBin(ReceiveControl,WhseRcptLine);

                      IF ReceiveStation."Change Posting Date on Close" THEN BEGIN
                        WhseRcptHdr.GET(WhseRcptLine."No.");
                        IF WhseRcptHdr."Posting Date" <> WORKDATE THEN BEGIN
                          WhseRcptHdr.VALIDATE("Posting Date",WORKDATE);
                          WhseRcptHdr.MODIFY(TRUE);
                          WhseRcptHdr.FIND;
                        END;
                      END;

                      EShipSetGlobalVariable."PurchPost-PostingPurchDoc"(TRUE);
                        CLEAR(WhsePostReceipt);
                        WhsePostReceipt.RUN(WhseRcptLine);
                      EShipSetGlobalVariable."PurchPost-PostingPurchDoc"(FALSE);

                      IF ReceiveStation."Change Put-away on Close" THEN
                        WhsePutawayUpdateBin(
                          WhseRcptLine."Source Type",WhseRcptLine."Source Subtype",
                          WhseRcptLine."Source No.",WhseRcptLine."Location Code",
                          WhseRcptLine."No.",'');

                      IF ReceiveStation."Print Receipt Report on Close" AND PrintOrder THEN BEGIN
                        PurchHeader2.GET(PurchHeader."Document Type",PurchHeader."No.");
                        PrintPurchReceiptReport(PurchHeader2."Last Receiving No.");
                      END;

                      //<TPZ1626>
                      //IF ReceiveStation."Print Put-Away on Close" AND  PrintOrder THEN
                      //  PrintPutAwayReport(WhseRcptLine);

                      IF ReceiveStation."Print Put-Away on Close" THEN
                        IF WhsePostReceipt.GetFirstPutAwayDocument(WhseActivHeader) THEN BEGIN
                            REPEAT
                              WhseActivHeader.SETRECFILTER;
                              IF CURRENTCLIENTTYPE = CLIENTTYPE::Windows THEN //VAH
                                REPORT.RUN(REPORT::"Put-away List-new",FALSE,FALSE,WhseActivHeader)//<TPZ2666>
                              ELSE
                                REPORT.RUN(REPORT::"Put-away List-Webclient",FALSE,FALSE,WhseActivHeader);//<TPZ2666> //VAH
                            UNTIL NOT WhsePostReceipt.GetNextPutAwayDocument(WhseActivHeader);
                        END;
                      //</TPZ1626>

                      IF ReceiveStation."Register Put-away on Close" THEN
                        WhsePutawayRegister(
                          WhseRcptLine."Source Type",WhseRcptLine."Source Subtype",
                          WhseRcptLine."Source No.",WhseRcptLine."Location Code",
                          WhseRcptLine."No.");
                    END ELSE BEGIN
                      EShipSetGlobalVariable."PurchPost-PostingPurchDoc"(TRUE);
                      PurchHeader.Receive := TRUE;
                      PurchHeader.Invoice :=
                        ReceiveStation."Purchase Order Close Action" =
                        ReceiveStation."Purchase Order Close Action"::"Receive and Invoice";
                      CLEAR(PurchPost);
                      PurchPost.RUN(PurchHeader);
                      EShipSetGlobalVariable."PurchPost-PostingPurchDoc"(FALSE);
                      IF ReceiveStation."Print Receipt Report on Close" AND PrintOrder THEN
                        PrintPurchReceiptReport(PurchHeader."Last Receiving No.");
                    END;
                  END;
                (PurchHeader."Document Type" = PurchHeader."Document Type"::Invoice) AND
                (ReceiveStation."Purchase Invoice Close Action" =
                 ReceiveStation."Purchase Invoice Close Action"::Invoice):
                  BEGIN
                    EShipSetGlobalVariable."PurchPost-PostingPurchDoc"(TRUE);
                    PurchHeader.Receive := TRUE;
                    PurchHeader.Invoice := TRUE;
                    CLEAR(PurchPost);
                    PurchPost.RUN(PurchHeader);
                    EShipSetGlobalVariable."PurchPost-PostingPurchDoc"(FALSE);
                    IF ReceiveStation."Print Receipt Report on Close" AND PrintOrder THEN
                      PrintPurchReceiptReport(PurchHeader."Last Receiving No.");
                    IF ReceiveStation."Print Invoice Report on Close" AND PrintOrder THEN
                      PrintPurchInvoiceReport(PurchHeader."Last Posting No.");
                  END;
              END;
            UNTIL PurchHeader.NEXT = 0;
            IF ReceiveStation."Open Order after Close" THEN BEGIN
              COMMIT;

              IF PurchHeader.FIND('-') THEN
                REPEAT
                  CASE PurchHeader."Document Type" OF
                    PurchHeader."Document Type"::Order:
                      PAGE.RUNMODAL(PAGE::"Purchase Order",PurchHeader);
                    PurchHeader."Document Type"::Invoice:
                      PAGE.RUNMODAL(PAGE::"Purchase Invoice",PurchHeader);
                    ELSE
                      PAGE.RUNMODAL(0,PurchHeader);
                  END;
                UNTIL PurchHeader.NEXT = 0;
            END;
          END;
        DATABASE::"Transfer Header":
          BEGIN
            TransferHeader.RESET;
            IF ReceiveControl."Multi Document Receive" THEN BEGIN
              TransferHeader.SETFILTER("No.",ReceiveControl."Multi Document No.");
              IF ReceiveStation."Simple Multi Document Posting" THEN BEGIN
                TransferHeader.SETRANGE("Receive Exists",TRUE);
                IF ReceiveSetup."Location Receiving" THEN
                  TransferHeader.SETRANGE("Location Filter",ReceiveStation."Location Code");
              END;
            END ELSE
              TransferHeader.SETRANGE("No.",ReceiveControl."Source ID");
            TransferHeader.FIND('-');
            REPEAT
              TransferHeader.TESTFIELD(Status,TransferHeader.Status::Released);

              WhseReceiptFindUpdate(DATABASE::"Transfer Line",1,TransferHeader."No.");
            UNTIL TransferHeader.NEXT = 0;

            IF ForceClose THEN
              SetQtyToReceiveToReceive(ReceiveControl);

            TransferHeader.FIND('-');
            REPEAT
              Receiving.CloseTransferHeader(TransferHeader,PrintOrder);
            UNTIL TransferHeader.NEXT = 0;

            TransferHeader.FIND('-');
            REPEAT
              TransferHeader.TESTFIELD(Status,TransferHeader.Status::Released);

              CASE TRUE OF
                ReceiveStation."Transfer Order Close Action" =
                ReceiveStation."Transfer Order Close Action"::Receive:
                  BEGIN
                    WhseRcptLine.RESET;
                    WhseRcptLine.SETCURRENTKEY("Source Type","Source Subtype","Source No.");
                    WhseRcptLine.SETRANGE("Source Type",DATABASE::"Transfer Line");
                    WhseRcptLine.SETRANGE("Source Subtype",1);
                    WhseRcptLine.SETRANGE("Source No.",TransferHeader."No.");
                    IF ReceiveSetup."Location Receiving" THEN
                      WhseRcptLine.SETRANGE("Location Code",ReceiveStation."Location Code");
                    IF WhseRcptLine.FIND('-') THEN BEGIN

                      //<TPZ1709>
                      IF ReceiveStation."Change Posting Date on Close" THEN
                        WhseReceiptUpdatePostingDate(WhseRcptLine."Source Type", WhseRcptLine."Source Subtype",
                                                     WhseRcptLine."Source No.");
                      //</TPZ1709>

                      WhseReceiptUpdateBin(ReceiveControl,WhseRcptLine);

                      EShipSetGlobalVariable."TransferOrder-PostReceipt"(TRUE);
                        CLEAR(WhsePostReceipt);
                        WhsePostReceipt.SetHideValidationDialog(TRUE);
                        WhsePostReceipt.RUN(WhseRcptLine);
                      EShipSetGlobalVariable."TransferOrder-PostReceipt"(FALSE);

                      IF ReceiveStation."Change Put-away on Close" THEN
                        WhsePutawayUpdateBin(
                          WhseRcptLine."Source Type",WhseRcptLine."Source Subtype",
                          WhseRcptLine."Source No.",WhseRcptLine."Location Code",
                          WhseRcptLine."No.",'');

                      //<TPZ1626>
                      //IF ReceiveStation."Print Put-Away on Close" AND  PrintOrder THEN
                      //  PrintPutAwayReport(WhseRcptLine);
                      IF ReceiveStation."Print Put-Away on Close" THEN
                        IF WhsePostReceipt.GetFirstPutAwayDocument(WhseActivHeader) THEN BEGIN
                            REPEAT
                              WhseActivHeader.SETRECFILTER;
                              IF CURRENTCLIENTTYPE = CLIENTTYPE::Windows THEN //VAH
                                REPORT.RUN(REPORT::"Put-away List-new",FALSE,FALSE,WhseActivHeader)//<TPZ2666>
                              ELSE
                                REPORT.RUN(REPORT::"Put-away List-Webclient",FALSE,FALSE,WhseActivHeader);//<TPZ2666>//VAH
                            UNTIL NOT WhsePostReceipt.GetNextPutAwayDocument(WhseActivHeader);
                        END;
                      //</TPZ1626>


                      IF ReceiveStation."Register Put-away on Close" THEN
                        WhsePutawayRegister(
                          WhseRcptLine."Source Type",WhseRcptLine."Source Subtype",
                          WhseRcptLine."Source No.",WhseRcptLine."Location Code",
                          WhseRcptLine."No.");
                    END ELSE BEGIN
                      EShipSetGlobalVariable."TransferOrder-PostReceipt"(TRUE);
                      CLEAR(TransferPost);
                      TransferPost.SetHideValidationDialog(TRUE);
                      TransferPost.RUN(TransferHeader);
                      EShipSetGlobalVariable."TransferOrder-PostReceipt"(FALSE);
                      IF ReceiveStation."Print Receipt Report on Close" AND PrintOrder THEN
                        PrintTransferReceiptReport(TransferHeader."Last Receipt No.");
                    END;
                  END;
              END;
            UNTIL TransferHeader.NEXT = 0;
            IF ReceiveStation."Open Order after Close" THEN BEGIN
              COMMIT;

              IF TransferHeader.FIND('-') THEN
                REPEAT
                  PAGE.RUNMODAL(PAGE::"Transfer Order",TransferHeader);
                UNTIL TransferHeader.NEXT = 0;
            END;
          END;
        ELSE
          ReceiveControl.ErrorUnknownSourceType2;
      END;

      //<TPZ1626> - Restore original values.
      IF ForceCreatePrintPutAway THEN BEGIN
        ReceiveStation."Return Order Close Action" := OldReceiveStation."Return Order Close Action";
        ReceiveStation."Print Put-Away on Close" := OldReceiveStation."Print Put-Away on Close";
        ReceiveStation."Purchase Order Close Action" := OldReceiveStation."Purchase Order Close Action";
        ReceiveStation."Transfer Order Close Action" := OldReceiveStation."Transfer Order Close Action";
      END;
      //</TPZ1626>

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE WhseReceiptFindUpdate@1240030004(SourceType@1240030003 : Integer;SourceSubtype@1240030004 : Integer;SourceID@1240030005 : Code[20]);
    VAR
      WhseRqst@1240030001 : Record 5765;
      WhseRcptHeader@1240030000 : Record 7316;
      WhseRcptLine@1240030002 : Record 7317;
      GetSourceDocuments@1240030006 : Report 5753;
    BEGIN
      TestInitialized;
      WhseRqst.SETRANGE(Type,WhseRqst.Type::Inbound);
      WhseRqst.SETRANGE("Source Type",SourceType);
      WhseRqst.SETRANGE("Source Subtype",SourceSubtype);
      WhseRqst.SETRANGE("Source No.",SourceID);
      WhseRqst.SETRANGE("Document Status",WhseRqst."Document Status"::Released);
      IF ReceiveSetup."Location Receiving" THEN
        WhseRqst.SETRANGE("Location Code",ReceiveStation."Location Code");
      IF WhseRqst.FIND('-') THEN BEGIN
        CLEAR(GetSourceDocuments);

        WhseRcptLine.RESET;
        WhseRcptLine.SETCURRENTKEY("Source Type","Source Subtype","Source No.");
        WhseRcptLine.SETRANGE("Source Type",SourceType);
        WhseRcptLine.SETRANGE("Source Subtype",SourceSubtype);
        WhseRcptLine.SETRANGE("Source No.",SourceID);
        IF WhseRcptLine.FIND('-') THEN BEGIN
          WhseRcptHeader.GET(WhseRcptLine."No.");
          GetSourceDocuments.SetOneCreatedReceiptHeader(WhseRcptHeader);
        END;

        GetSourceDocuments.USEREQUESTPAGE(FALSE);
        GetSourceDocuments.SETTABLEVIEW(WhseRqst);
        GetSourceDocuments.SetHideDialog(TRUE);
        GetSourceDocuments.RUNMODAL;
        GetSourceDocuments.GetLastReceiptHeader(WhseRcptHeader);
      END;
    END;

    LOCAL PROCEDURE WhseReceiptUpdateBin@1240030006(VAR ReceiveControl@1240030000 : Record 14000611;VAR WhseRcptLine@1240030001 : Record 7317);
    VAR
      WhseRcptLine2@1240030002 : Record 7317;
      NewBinCode@1240030003 : Code[20];
    BEGIN
      NewBinCode := '';

      IF ReceiveControl."Selected Receive Bin Code" <> '' THEN
        NewBinCode := ReceiveControl."Selected Receive Bin Code";

      IF (ReceiveStation."Default Receive Bin Code" <> '') AND (NewBinCode = '') THEN
        NewBinCode := ReceiveStation."Default Receive Bin Code";

      IF NewBinCode = '' THEN
        EXIT;

      WhseRcptLine.SETFILTER("Bin Code",'<>%1',NewBinCode);
      IF WhseRcptLine.FIND('-') THEN
        REPEAT
          WhseRcptLine2 := WhseRcptLine;
          WhseRcptLine2.VALIDATE("Bin Code",NewBinCode);
          WhseRcptLine2.MODIFY;
        UNTIL WhseRcptLine.NEXT = 0;
      WhseRcptLine.SETRANGE("Bin Code");

      WhseRcptLine.FIND('-');
    END;

    PROCEDURE WhsePutawayUpdateBin@1240030012(SourceType@1240030013 : Integer;SourceSubtype@1240030012 : Integer;SourceNo@1240030008 : Code[20];LocationCode@1240030001 : Code[10];WhseReceiptNo@1240030000 : Code[20];PostedWhseReceiptNo@1240030014 : Code[20]);
    VAR
      PostedWhseReceiptHeader@1240030003 : Record 7318;
      PostedWhseReceiptLine@1240030002 : Record 7319;
      WarehouseActivityLine@1240030004 : Record 5767;
      WarehouseActivityLine2@1240030011 : Record 5767;
      WarehouseActivityLineTmp@1240030007 : TEMPORARY Record 5767;
      PostedReceiveLine@1240030006 : Record 14000604;
      Item@1240030009 : Record 27;
      ItemTrackingCode@1240030010 : Record 6502;
      FirstPutawayNo@1240030015 : Code[20];
    BEGIN
      PostedWhseReceiptLine.RESET;
      PostedWhseReceiptLine.SETCURRENTKEY("Source Type","Source Subtype","Source No.");
      PostedWhseReceiptLine.SETRANGE("Source Type",SourceType);
      PostedWhseReceiptLine.SETRANGE("Source Subtype",SourceSubtype);
      PostedWhseReceiptLine.SETRANGE("Source No.",SourceNo);
      PostedWhseReceiptLine.SETRANGE("Location Code",LocationCode);
      IF WhseReceiptNo <> '' THEN
        PostedWhseReceiptLine.SETRANGE("Whse. Receipt No.",WhseReceiptNo);
      IF PostedWhseReceiptNo <> '' THEN
        PostedWhseReceiptLine.SETRANGE("No.",PostedWhseReceiptNo);
      PostedWhseReceiptLine.SETFILTER(
        Status,'<>%1',PostedWhseReceiptLine.Status::"Completely Put Away");
      PostedWhseReceiptLine.FIND('+');
      PostedWhseReceiptHeader.GET(PostedWhseReceiptLine."No.");

      PostedReceiveLine.RESET;
      PostedReceiveLine.SETCURRENTKEY("Source Type","Posted Source ID","No.","Variant Code");
      CASE PostedWhseReceiptLine."Source Type" OF
        DATABASE::"Sales Line":
          PostedReceiveLine.SETRANGE("Source Type",DATABASE::"Sales Header");
        DATABASE::"Purchase Line":
          PostedReceiveLine.SETRANGE("Source Type",DATABASE::"Purchase Header");
        DATABASE::"Transfer Line":
          PostedReceiveLine.SETRANGE("Source Type",DATABASE::"Transfer Header");
      END;
      PostedReceiveLine.SETRANGE("Posted Source ID",PostedWhseReceiptLine."Posted Source No.");
      PostedReceiveLine.SETRANGE(Type,PostedReceiveLine.Type::Item);
      PostedReceiveLine.SETFILTER("Quantity (Base)",'<>0');
      PostedReceiveLine.SETFILTER("Put-away Bin Code",'<>%1','');
      IF NOT PostedReceiveLine.FIND('-') THEN
        EXIT;

      IF WhseReceiptNo <> '' THEN
        COMMIT;

      PostedReceiveLine.FIND('-');
      REPEAT
        IF Item."No." <> PostedReceiveLine."No." THEN BEGIN
          Item.GET(PostedReceiveLine."No.");
          IF Item."Item Tracking Code" <> '' THEN
            ItemTrackingCode.GET(Item."Item Tracking Code")
          ELSE
            CLEAR(ItemTrackingCode);
        END;

        IF ItemTrackingCode."SN Warehouse Tracking" THEN
          PostedReceiveLine.TESTFIELD("Serial No.");
        IF ItemTrackingCode."Lot Warehouse Tracking" THEN
          PostedReceiveLine.TESTFIELD("Lot No.");

        WarehouseActivityLine.RESET;
        WarehouseActivityLine.SETCURRENTKEY("Source Type","Source Subtype","Source No.");
        WarehouseActivityLine.SETRANGE("Source Type",PostedWhseReceiptLine."Source Type");
        WarehouseActivityLine.SETRANGE("Source Subtype",PostedWhseReceiptLine."Source Subtype");
        WarehouseActivityLine.SETRANGE("Source No.",PostedWhseReceiptLine."Source No.");
        WarehouseActivityLine.SETRANGE("Location Code",PostedWhseReceiptLine."Location Code");
        WarehouseActivityLine.SETRANGE(
          "Activity Type",WarehouseActivityLine."Activity Type"::"Put-away");
        WarehouseActivityLine.SETRANGE(
          "Whse. Document Type",WarehouseActivityLine."Whse. Document Type"::Receipt);
        WarehouseActivityLine.SETRANGE("Whse. Document No.",PostedWhseReceiptHeader."No.");
        WarehouseActivityLine.SETRANGE("Action Type",WarehouseActivityLine."Action Type"::Place);
        WarehouseActivityLine.SETRANGE("Item No.",PostedReceiveLine."No.");
        WarehouseActivityLine.SETRANGE("Variant Code",PostedReceiveLine."Variant Code");
        IF ItemTrackingCode."SN Warehouse Tracking" THEN
          WarehouseActivityLine.SETRANGE("Serial No.",PostedReceiveLine."Serial No.");
        IF ItemTrackingCode."Lot Warehouse Tracking" THEN
          WarehouseActivityLine.SETRANGE("Lot No.",PostedReceiveLine."Lot No.");
        IF WarehouseActivityLine.FIND('-') THEN
          REPEAT
            IF FirstPutawayNo = '' THEN
              FirstPutawayNo := WarehouseActivityLine."No."
            ELSE
              IF WarehouseActivityLine."No." <> FirstPutawayNo THEN
                ERROR(Text001,FirstPutawayNo,WarehouseActivityLine."No.");

            IF NOT WarehouseActivityLineTmp.GET(
                     WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.",
                     WarehouseActivityLine."Line No.")
            THEN BEGIN
              IF WarehouseActivityLine."Bin Code" <> PostedReceiveLine."Put-away Bin Code" THEN BEGIN
                WarehouseActivityLine2 := WarehouseActivityLine;
                IF WarehouseActivityLine2."Zone Code" <> PostedReceiveLine."Put-away Zone Code" THEN
                  WarehouseActivityLine2.VALIDATE("Zone Code",'');
                WarehouseActivityLine2.VALIDATE("Bin Code",PostedReceiveLine."Put-away Bin Code");
                WarehouseActivityLine2.MODIFY;
              END;

              WarehouseActivityLineTmp := WarehouseActivityLine;

              IF WarehouseActivityLine."Qty. (Base)" >= PostedReceiveLine."Quantity (Base)" THEN BEGIN
                WarehouseActivityLineTmp."Qty. Outstanding (Base)" :=
                  WarehouseActivityLineTmp."Qty. (Base)" - PostedReceiveLine."Quantity (Base)";
                PostedReceiveLine."Quantity (Base)" := 0;
              END ELSE BEGIN
                WarehouseActivityLineTmp."Qty. Outstanding (Base)" :=  0;
                PostedReceiveLine."Quantity (Base)" :=
                  PostedReceiveLine."Quantity (Base)" - WarehouseActivityLineTmp."Qty. (Base)";
              END;

              WarehouseActivityLineTmp.INSERT;
            END ELSE BEGIN
              IF WarehouseActivityLineTmp."Qty. Outstanding (Base)" <> 0 THEN BEGIN
                IF WarehouseActivityLine."Bin Code" = PostedReceiveLine."Put-away Bin Code" THEN BEGIN
                  IF WarehouseActivityLineTmp."Qty. Outstanding (Base)" >=
                     PostedReceiveLine."Quantity (Base)"
                  THEN BEGIN
                    WarehouseActivityLineTmp."Qty. Outstanding (Base)" :=
                      WarehouseActivityLineTmp."Qty. Outstanding (Base)" -
                      PostedReceiveLine."Quantity (Base)";
                    PostedReceiveLine."Quantity (Base)" := 0;
                  END ELSE BEGIN
                    PostedReceiveLine."Quantity (Base)" :=
                      PostedReceiveLine."Quantity (Base)" -
                      WarehouseActivityLineTmp."Qty. Outstanding (Base)";
                    WarehouseActivityLineTmp."Qty. Outstanding (Base)" := 0;
                  END;

                  WarehouseActivityLineTmp.MODIFY;
                END ELSE BEGIN
                  WarehouseActivityLine2 := WarehouseActivityLine;
                  IF WarehouseActivityLine2."Qty. per Unit of Measure" = 1 THEN BEGIN
                    WarehouseActivityLine2.VALIDATE(
                      "Qty. to Handle",
                      WarehouseActivityLine2."Qty. (Base)" -
                      WarehouseActivityLineTmp."Qty. Outstanding (Base)");
                  END ELSE BEGIN
                    ERROR(Text012);

                  END;
                  WarehouseActivityLine2.MODIFY;
                  //WarehouseActivityLine2.SetHideValidationDialog(TRUE);
                  WarehouseActivityLine2.SplitLine(WarehouseActivityLine2);

                  WarehouseActivityLineTmp."Qty. Outstanding (Base)" := 0;
                  WarehouseActivityLineTmp.MODIFY;
                END;
              END;
            END;
          UNTIL (WarehouseActivityLine.NEXT = 0) OR (PostedReceiveLine."Quantity (Base)" = 0);

        IF PostedReceiveLine."Quantity (Base)" <> 0 THEN
          ERROR(Text013);
      UNTIL PostedReceiveLine.NEXT = 0;

      IF WhseReceiptNo <> '' THEN
        COMMIT;
    END;

    LOCAL PROCEDURE WhsePutawayRegister@1240030013(SourceType@1240030000 : Integer;SourceSubtype@1240030005 : Integer;SourceNo@1240030007 : Code[20];LocationCode@1240030008 : Code[10];WhseReceiptNo@1240030009 : Code[20]);
    VAR
      PostedWhseReceiptHeader@1240030003 : Record 7318;
      PostedWhseReceiptLine@1240030002 : Record 7319;
      WarehouseActivityLine@1240030004 : Record 5767;
      WhseActivityRegister@1240030006 : Codeunit 7307;
    BEGIN
      PostedWhseReceiptLine.RESET;
      PostedWhseReceiptLine.SETCURRENTKEY("Source Type","Source Subtype","Source No.");
      PostedWhseReceiptLine.SETRANGE("Source Type",SourceType);
      PostedWhseReceiptLine.SETRANGE("Source Subtype",SourceSubtype);
      PostedWhseReceiptLine.SETRANGE("Source No.",SourceNo);
      PostedWhseReceiptLine.SETRANGE("Location Code",LocationCode);
      PostedWhseReceiptLine.SETRANGE("Whse. Receipt No.",WhseReceiptNo);
      PostedWhseReceiptLine.SETFILTER(
        Status,'<>%1',PostedWhseReceiptLine.Status::"Completely Put Away");
      PostedWhseReceiptLine.FIND('+');
      PostedWhseReceiptHeader.GET(PostedWhseReceiptLine."No.");

      WarehouseActivityLine.RESET;
      WarehouseActivityLine.SETCURRENTKEY("Source Type","Source Subtype","Source No.");
      WarehouseActivityLine.SETRANGE("Source Type",PostedWhseReceiptLine."Source Type");
      WarehouseActivityLine.SETRANGE("Source Subtype",PostedWhseReceiptLine."Source Subtype");
      WarehouseActivityLine.SETRANGE("Source No.",PostedWhseReceiptLine."Source No.");
      WarehouseActivityLine.SETRANGE("Location Code",PostedWhseReceiptLine."Location Code");
      WarehouseActivityLine.SETRANGE(
        "Activity Type",WarehouseActivityLine."Activity Type"::"Put-away");
      WarehouseActivityLine.SETRANGE(
        "Whse. Document Type",WarehouseActivityLine."Whse. Document Type"::Receipt);
      WarehouseActivityLine.SETRANGE("Whse. Document No.",PostedWhseReceiptLine."No.");
      IF WarehouseActivityLine.FIND('-') THEN BEGIN
        WhseActivityRegister.ShowHideDialog(TRUE);
        WhseActivityRegister.RUN(WarehouseActivityLine);
      END;
    END;

    PROCEDURE ReceiveComplete@9(ShippingAgent@1240030000 : Record 291;VAR ReceiveControl@1240030001 : Record 14000611) : Boolean;
    VAR
      ReceiveLine@1240030002 : Record 14000602;
      SalesLine@1240030003 : Record 37;
      SalesLine2@1240030004 : Record 37;
      SalesHeader@1240030005 : Record 36;
      PurchLine@1240030006 : Record 39;
      PurchLine2@1240030007 : Record 39;
      PurchHeader@1240030008 : Record 38;
      TransferLine@1240030011 : Record 5741;
      TransferLine2@1240030012 : Record 5741;
      TransferHeader@1240030013 : Record 5740;
      LineQtyToReceiveBase@1240030009 : Decimal;
      Line2QtyToReceiveBase@1240030010 : Decimal;
    BEGIN
      TestInitialized;
      IF NOT ReceiveSetup.ReceiveDetail(
               ReceiveControl."Source Type",ReceiveControl."Source Subtype")
      THEN BEGIN
        ReceiveLine.RESET;
        ReceiveLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID","No.","Variant Code");
        ReceiveLine.SETRANGE("Source Type",ReceiveControl."Source Type");
        ReceiveLine.SETRANGE("Source Subtype",ReceiveControl."Source Subtype");
        IF ReceiveControl."Multi Document Receive" THEN
          ReceiveLine.SETFILTER("Source ID",ReceiveControl."Multi Document No.")
        ELSE
          ReceiveLine.SETRANGE("Source ID",ReceiveControl."Source ID");
        IF ReceiveSetup."Location Receiving" THEN
          ReceiveLine.SETRANGE("Location Code",ReceiveStation."Location Code");
        IF NOT ReceiveLine.FIND('-') THEN
          EXIT(TRUE);
      END;

      CASE ReceiveControl."Source Type" OF
        DATABASE::"Sales Header":
          BEGIN
            SalesHeader.RESET;
            SalesHeader.SETRANGE("Document Type",ReceiveControl."Source Subtype");
            IF ReceiveControl."Multi Document Receive" THEN
              SalesHeader.SETFILTER("No.",ReceiveControl."Multi Document No.")
            ELSE
              SalesHeader.SETRANGE("No.",ReceiveControl."Source ID");
            SalesHeader.FIND('-');
            REPEAT
              ReceiveLine.RESET;
              ReceiveLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID","No.","Variant Code");
              ReceiveLine.SETRANGE("Source Type",ReceiveControl."Source Type");
              ReceiveLine.SETRANGE("Source Subtype",ReceiveControl."Source Subtype");
              ReceiveLine.SETRANGE("Source ID",SalesHeader."No.");
              ReceiveLine.SETRANGE(Type,ReceiveLine.Type::"Account (G/L)",ReceiveLine.Type::Item);
              IF ReceiveSetup."Location Receiving" THEN
                ReceiveLine.SETRANGE("Location Code",ReceiveStation."Location Code");

              SalesLine.RESET;
              SalesLine.SETCURRENTKEY(
                "Document Type","Document No.",Type,"No.","Variant Code","Drop Shipment");
              SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
              SalesLine.SETRANGE("Document No.",SalesHeader."No.");
              SalesLine.SETRANGE(Type,SalesLine.Type::Item);
              SalesLine.SETRANGE("Drop Shipment",FALSE);
              IF ReceiveSetup."Location Receiving" THEN
                SalesLine.SETRANGE("Location Code",ReceiveStation."Location Code");

              // Additional code required in Attain
              IF ReceiveSetup."Qty. to Receive as" =
                 ReceiveSetup."Qty. to Receive as"::"Outstanding Quantity"
              THEN BEGIN
                SalesLine.CALCSUMS("Outstanding Qty. (Base)");
                LineQtyToReceiveBase := SalesLine."Outstanding Qty. (Base)";
              END ELSE BEGIN
                IF SalesHeader."Document Type" = SalesHeader."Document Type"::"Return Order" THEN BEGIN
                  SalesLine.CALCSUMS("Return Qty. to Receive (Base)");
                  LineQtyToReceiveBase := SalesLine."Return Qty. to Receive (Base)";
                END ELSE BEGIN
                  SalesLine.CALCSUMS("Outstanding Qty. (Base)");
                  LineQtyToReceiveBase := SalesLine."Outstanding Qty. (Base)";
                END;
              END;

              ReceiveLine.CALCSUMS("Quantity (Base)");
              IF LineQtyToReceiveBase <> ReceiveLine."Quantity (Base)" THEN BEGIN
                IF LineQtyToReceiveBase > ReceiveLine."Quantity (Base)" THEN BEGIN
                  MessageLine := Text037;
                  EXIT(FALSE);
                END;
                IF ReceiveLine."Quantity (Base)" > LineQtyToReceiveBase THEN BEGIN
                  MessageLine := Text038;
                  EXIT(FALSE);
                END;
              END;

              SalesLine2.RESET;
              SalesLine2.SETCURRENTKEY(
                "Document Type","Document No.",Type,"No.","Variant Code","Drop Shipment");
              SalesLine2.SETRANGE("Document Type",SalesHeader."Document Type");
              SalesLine2.SETRANGE("Document No.",SalesHeader."No.");
              SalesLine2.SETRANGE(Type,SalesLine.Type::Item);
              IF ReceiveSetup."Location Receiving" THEN
                SalesLine2.SETRANGE("Location Code",ReceiveStation."Location Code");
              IF SalesLine.FIND('-') THEN
                REPEAT
                  ReceiveLine.SETRANGE("No.",SalesLine."No.");
                  ReceiveLine.SETRANGE("Variant Code",SalesLine."Variant Code");
                  SalesLine2.SETRANGE("No.",SalesLine."No.");
                  SalesLine2.SETRANGE("Variant Code",SalesLine."Variant Code");
                  SalesLine2.SETRANGE("Drop Shipment",FALSE);

                  ReceiveLine.CALCSUMS("Quantity (Base)");

                  // Additional code required in Attain
                  IF ReceiveSetup."Qty. to Receive as" = ReceiveSetup."Qty. to Receive as"::"Outstanding Quantity"
                  THEN BEGIN
                    SalesLine2.CALCSUMS("Outstanding Qty. (Base)");
                    Line2QtyToReceiveBase := SalesLine2."Outstanding Qty. (Base)";
                  END ELSE BEGIN
                    IF SalesHeader."Document Type" = SalesHeader."Document Type"::"Return Order" THEN BEGIN
                      SalesLine2.CALCSUMS("Return Qty. to Receive (Base)");
                      Line2QtyToReceiveBase := SalesLine2."Return Qty. to Receive (Base)";
                    END ELSE BEGIN
                      SalesLine2.CALCSUMS("Outstanding Qty. (Base)");
                      Line2QtyToReceiveBase := SalesLine2."Outstanding Qty. (Base)";
                    END;
                  END;

                  IF Line2QtyToReceiveBase > ReceiveLine."Quantity (Base)" THEN BEGIN
                    MessageLine := STRSUBSTNO(Text039,SalesLine."No.");
                    EXIT(FALSE);
                  END;
                  IF ReceiveLine."Quantity (Base)" > Line2QtyToReceiveBase THEN BEGIN
                    MessageLine := STRSUBSTNO(Text040,SalesLine."No.");
                    EXIT(FALSE);
                  END;
                UNTIL SalesLine.NEXT = 0;
            UNTIL SalesHeader.NEXT = 0;
          END;
        DATABASE::"Purchase Header":
          BEGIN
            PurchHeader.RESET;
            PurchHeader.SETRANGE("Document Type",ReceiveControl."Source Subtype");
            IF ReceiveControl."Multi Document Receive" THEN
              PurchHeader.SETFILTER("No.",ReceiveControl."Multi Document No.")
            ELSE
              PurchHeader.SETRANGE("No.",ReceiveControl."Source ID");
            PurchHeader.FIND('-');
            REPEAT
              ReceiveLine.RESET;
              ReceiveLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID","No.","Variant Code");
              ReceiveLine.SETRANGE("Source Type",ReceiveControl."Source Type");
              ReceiveLine.SETRANGE("Source Subtype",ReceiveControl."Source Subtype");
              ReceiveLine.SETRANGE("Source ID",PurchHeader."No.");
              ReceiveLine.SETRANGE(Type,ReceiveLine.Type::"Account (G/L)",ReceiveLine.Type::Item);
              IF ReceiveSetup."Location Receiving" THEN
                ReceiveLine.SETRANGE("Location Code",ReceiveStation."Location Code");

              PurchLine.RESET;
              PurchLine.SETCURRENTKEY(
                "Document Type","Document No.",Type,"No.","Variant Code","Drop Shipment");
              PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
              PurchLine.SETRANGE("Document No.",PurchHeader."No.");
              PurchLine.SETRANGE(Type,PurchLine.Type::Item);
              PurchLine.SETRANGE("Drop Shipment",FALSE);
              IF ReceiveSetup."Location Receiving" THEN
                PurchLine.SETRANGE("Location Code",ReceiveStation."Location Code");

              // Additional code required in Attain
              IF ReceiveSetup."Qty. to Receive as" = ReceiveSetup."Qty. to Receive as"::"Outstanding Quantity"
              THEN BEGIN
                PurchLine.CALCSUMS("Outstanding Qty. (Base)");
                LineQtyToReceiveBase := PurchLine."Outstanding Qty. (Base)";
              END ELSE BEGIN
                PurchLine.CALCSUMS("Qty. to Receive (Base)");
                LineQtyToReceiveBase := PurchLine."Qty. to Receive (Base)";
              END;

              ReceiveLine.CALCSUMS("Quantity (Base)");
              IF LineQtyToReceiveBase <> ReceiveLine."Quantity (Base)" THEN BEGIN
                IF LineQtyToReceiveBase > ReceiveLine."Quantity (Base)" THEN BEGIN
                  MessageLine := Text037;
                  EXIT(FALSE);
                END;
                IF ReceiveLine."Quantity (Base)" > LineQtyToReceiveBase THEN BEGIN
                  MessageLine := Text038;
                  EXIT(FALSE);
                END;
              END;

              PurchLine2.RESET;
              PurchLine2.SETCURRENTKEY(
                "Document Type","Document No.",Type,"No.","Variant Code","Drop Shipment");
              PurchLine2.SETRANGE("Document Type",PurchHeader."Document Type");
              PurchLine2.SETRANGE("Document No.",PurchHeader."No.");
              PurchLine2.SETRANGE(Type,PurchLine.Type::Item);
              IF ReceiveSetup."Location Receiving" THEN
                PurchLine2.SETRANGE("Location Code",ReceiveStation."Location Code");
              IF PurchLine.FIND('-') THEN
                REPEAT
                  ReceiveLine.SETRANGE("No.",PurchLine."No.");
                  ReceiveLine.SETRANGE("Variant Code",PurchLine."Variant Code");
                  PurchLine2.SETRANGE("No.",PurchLine."No.");
                  PurchLine2.SETRANGE("Variant Code",PurchLine."Variant Code");
                  PurchLine2.SETRANGE("Drop Shipment",FALSE);

                  ReceiveLine.CALCSUMS("Quantity (Base)");

                  // Additional code required in Attain
                  IF ReceiveSetup."Qty. to Receive as" = ReceiveSetup."Qty. to Receive as"::"Outstanding Quantity"
                  THEN BEGIN
                    PurchLine2.CALCSUMS("Outstanding Qty. (Base)");
                    Line2QtyToReceiveBase := PurchLine2."Outstanding Qty. (Base)";
                  END ELSE BEGIN
                    PurchLine2.CALCSUMS("Qty. to Receive (Base)");
                    Line2QtyToReceiveBase := PurchLine2."Qty. to Receive (Base)";
                  END;

                  IF Line2QtyToReceiveBase > ReceiveLine."Quantity (Base)" THEN BEGIN
                    MessageLine := STRSUBSTNO(Text039,PurchLine."No.");
                    EXIT(FALSE);
                  END;
                  IF ReceiveLine."Quantity (Base)" > Line2QtyToReceiveBase THEN BEGIN
                    MessageLine := STRSUBSTNO(Text040,PurchLine."No.");
                    EXIT(FALSE);
                  END;
                UNTIL PurchLine.NEXT = 0;
            UNTIL PurchHeader.NEXT = 0;
          END;
        DATABASE::"Transfer Header":
          BEGIN
            TransferHeader.RESET;
            IF ReceiveControl."Multi Document Receive" THEN
              TransferHeader.SETFILTER("No.",ReceiveControl."Multi Document No.")
            ELSE
              TransferHeader.SETRANGE("No.",ReceiveControl."Source ID");
            TransferHeader.FIND('-');
            REPEAT
              ReceiveLine.RESET;
              ReceiveLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID","No.","Variant Code");
              ReceiveLine.SETRANGE("Source Type",ReceiveControl."Source Type");
              ReceiveLine.SETRANGE("Source Subtype",ReceiveControl."Source Subtype");
              ReceiveLine.SETRANGE("Source ID",TransferHeader."No.");
              ReceiveLine.SETRANGE(Type,ReceiveLine.Type::"Account (G/L)",ReceiveLine.Type::Item);
              IF ReceiveSetup."Location Receiving" THEN
                ReceiveLine.SETRANGE("Location Code",ReceiveStation."Location Code");

              TransferLine.RESET;
              TransferLine.SETCURRENTKEY("Item No.");
              TransferLine.SETRANGE("Document No.",TransferHeader."No.");
              IF ReceiveSetup."Location Receiving" THEN
                TransferLine.SETRANGE("Transfer-to Code",ReceiveStation."Location Code");
              TransferLine.SETRANGE("Derived From Line No.",0);

              // Additional code required in Attain
              IF ReceiveSetup."Qty. to Receive as" = ReceiveSetup."Qty. to Receive as"::"Outstanding Quantity"
              THEN BEGIN
                TransferLine.CALCSUMS("Qty. in Transit (Base)");
                LineQtyToReceiveBase := TransferLine."Qty. in Transit (Base)";
              END ELSE BEGIN
                TransferLine.CALCSUMS("Qty. to Receive (Base)");
                LineQtyToReceiveBase := TransferLine."Qty. to Receive (Base)";
              END;

              ReceiveLine.CALCSUMS("Quantity (Base)");
              IF LineQtyToReceiveBase <> ReceiveLine."Quantity (Base)" THEN BEGIN
                IF LineQtyToReceiveBase > ReceiveLine."Quantity (Base)" THEN BEGIN
                  MessageLine := Text037;
                  EXIT(FALSE);
                END;
                IF ReceiveLine."Quantity (Base)" > LineQtyToReceiveBase THEN BEGIN
                  MessageLine := Text038;
                  EXIT(FALSE);
                END;
              END;

              TransferLine2.RESET;
              TransferLine2.SETCURRENTKEY("Item No.");
              TransferLine2.SETRANGE("Document No.",TransferHeader."No.");
              IF ReceiveSetup."Location Receiving" THEN
                TransferLine2.SETRANGE("Transfer-to Code",ReceiveStation."Location Code");
              TransferLine2.SETRANGE("Derived From Line No.",0);
              IF TransferLine.FIND('-') THEN
                REPEAT
                  ReceiveLine.SETRANGE("No.",TransferLine."Item No.");
                  ReceiveLine.SETRANGE("Variant Code",TransferLine."Variant Code");
                  TransferLine2.SETRANGE("Item No.",TransferLine."Item No.");
                  TransferLine2.SETRANGE("Variant Code",TransferLine."Variant Code");

                  ReceiveLine.CALCSUMS("Quantity (Base)");

                  // Additional code required in Attain
                  IF ReceiveSetup."Qty. to Receive as" = ReceiveSetup."Qty. to Receive as"::"Outstanding Quantity"
                  THEN BEGIN
                    TransferLine2.CALCSUMS("Qty. in Transit (Base)");
                    Line2QtyToReceiveBase := TransferLine2."Qty. in Transit (Base)";
                  END ELSE BEGIN
                    TransferLine2.CALCSUMS("Qty. to Receive (Base)");
                    Line2QtyToReceiveBase := TransferLine2."Qty. to Receive (Base)";
                  END;

                  IF Line2QtyToReceiveBase > ReceiveLine."Quantity (Base)" THEN BEGIN
                    MessageLine := STRSUBSTNO(Text039,TransferLine."Item No.");
                    EXIT(FALSE);
                  END;
                  IF ReceiveLine."Quantity (Base)" > Line2QtyToReceiveBase THEN BEGIN
                    MessageLine := STRSUBSTNO(Text040,TransferLine."Item No.");
                    EXIT(FALSE);
                  END;
                UNTIL TransferLine.NEXT = 0;
            UNTIL TransferHeader.NEXT = 0;
          END;
        ELSE
          ReceiveControl.ErrorUnknownSourceType2;
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE SetQtyToReceiveToReceive@16(VAR ReceiveControl@1240030000 : Record 14000611);
    VAR
      ReceiveLine2@1240030002 : Record 14000602;
      SalesLine2@1240030001 : Record 37;
      TempSalesLine@1240030007 : TEMPORARY Record 37;
      TempSalesLine2@1240030008 : TEMPORARY Record 37;
      PurchLine2@1240030003 : Record 39;
      TempPurchLine@1240030004 : TEMPORARY Record 39;
      TempPurchLine2@1240030005 : TEMPORARY Record 39;
      TransferLine2@1240030010 : Record 5741;
      TempTransferLine@1240030011 : TEMPORARY Record 5741;
      TempTransferLine2@1240030012 : TEMPORARY Record 5741;
      WhseRcptLine@1240030009 : Record 7317;
      ItemUnitOfMeasure@1240030013 : Record 5404;
      LineQty@1240030006 : Decimal;
    BEGIN
      TestInitialized;
      // "Qty. to Invoice (Base)" is MISUSED to keep the "Quantity Received (Base)" in the
      // Temporary table

      CASE ReceiveControl."Source Type" OF
        DATABASE::"Sales Header":
          BEGIN
            TempSalesLine.RESET;
            TempSalesLine.DELETEALL;
            TempSalesLine2.RESET;
            TempSalesLine2.DELETEALL;
            SalesLine2.RESET;
            SalesLine2.SETRANGE("Document Type",ReceiveControl."Source Subtype");
            IF ReceiveControl."Multi Document Receive" THEN
              SalesLine2.SETFILTER("Document No.",ReceiveControl."Multi Document No.")
            ELSE
              SalesLine2.SETRANGE("Document No.",ReceiveControl."Source ID");
            SalesLine2.SETFILTER("Outstanding Quantity",'>%1',0);
            IF SalesLine2.FIND('-') THEN
              REPEAT
                IF NOT SalesLine2."Drop Shipment" AND
                   (NOT ReceiveSetup."Location Receiving" OR
                    (SalesLine2."Location Code" = ReceiveStation."Location Code"))
                THEN BEGIN
                  TempSalesLine.COPY(SalesLine2);
                  TempSalesLine."Qty. to Invoice (Base)" := 0;
                  TempSalesLine.INSERT;
                END ELSE
                  IF SalesLine2."Drop Shipment" OR NOT SalesLine2."Shipping Charge" OR
                     (ReceiveSetup."Location Receiving" AND
                      (SalesLine2."Location Code" <> ReceiveStation."Location Code"))
                  THEN BEGIN
                    TempSalesLine2.COPY(SalesLine2);
                    TempSalesLine2.INSERT;
                  END;
              UNTIL SalesLine2.NEXT = 0;
            SalesLine2.RESET;

            ReceiveLine2.RESET;
            ReceiveLine2.SETCURRENTKEY("Source Type","Source Subtype","Source ID","No.","Variant Code");
            ReceiveLine2.SETRANGE("Source Type",ReceiveControl."Source Type");
            ReceiveLine2.SETRANGE("Source Subtype",ReceiveControl."Source Subtype");
            IF ReceiveControl."Multi Document Receive" THEN
              ReceiveLine2.SETFILTER("Source ID",ReceiveControl."Multi Document No.")
            ELSE
              ReceiveLine2.SETRANGE("Source ID",ReceiveControl."Source ID");
            ReceiveLine2.SETRANGE(Type,ReceiveLine2.Type::"Account (G/L)",ReceiveLine2.Type::Item);
            IF ReceiveSetup."Location Receiving" THEN
              ReceiveLine2.SETRANGE("Location Code",ReceiveStation."Location Code");
            IF ReceiveLine2.FIND('-') THEN
              REPEAT
                TempSalesLine.RESET;
                TempSalesLine.SETCURRENTKEY(
                  "Document Type","Document No.",Type,"No.","Variant Code","Drop Shipment");
                TempSalesLine.SETRANGE("Document Type",ReceiveLine2."Source Subtype");
                TempSalesLine.SETRANGE("Document No.",ReceiveLine2."Source ID");
                TempSalesLine.SETRANGE(Type,ReceiveLine2.Type);
                TempSalesLine.SETRANGE("No.",ReceiveLine2."No.");
                TempSalesLine.SETRANGE("Variant Code",ReceiveLine2."Variant Code");
                IF TempSalesLine.FIND('-') THEN
                  REPEAT
                    IF TempSalesLine."Quantity (Base)" > 0 THEN BEGIN
                      LineQty :=
                        TempSalesLine."Outstanding Qty. (Base)" - TempSalesLine."Qty. to Invoice (Base)";
                      IF LineQty >= ReceiveLine2."Quantity (Base)" THEN BEGIN
                        TempSalesLine."Qty. to Invoice (Base)" :=
                          TempSalesLine."Qty. to Invoice (Base)" + ReceiveLine2."Quantity (Base)";
                        ReceiveLine2."Quantity (Base)" := 0;
                      END ELSE BEGIN
                        ReceiveLine2."Quantity (Base)" := ReceiveLine2."Quantity (Base)" - LineQty;
                        TempSalesLine."Qty. to Invoice (Base)" := TempSalesLine."Outstanding Qty. (Base)";
                      END;
                    END ELSE
                      ERROR(
                        Text041,
                        TempSalesLine.Type,TempSalesLine."No.");

                    TempSalesLine.MODIFY;
                  UNTIL (TempSalesLine.NEXT = 0) OR (ReceiveLine2."Quantity (Base)" = 0);
                  IF ReceiveLine2."Quantity (Base)" <> 0 THEN
                    ERROR(
                      Text042,
                      ReceiveLine2.Type,ReceiveLine2."No.");
              UNTIL ReceiveLine2.NEXT = 0;

            TempSalesLine.RESET;
            IF TempSalesLine.FIND('-') THEN
              REPEAT
                WhseRcptLine.RESET;
                WhseRcptLine.SETCURRENTKEY("Source Type","Source Subtype","Source No.");
                WhseRcptLine.SETRANGE("Source Type",DATABASE::"Sales Line");
                WhseRcptLine.SETRANGE("Source Subtype",TempSalesLine."Document Type");
                WhseRcptLine.SETRANGE("Source No.",TempSalesLine."Document No.");
                WhseRcptLine.SETRANGE("Source Line No.",TempSalesLine."Line No.");
                IF WhseRcptLine.FIND('-') THEN BEGIN
                  IF TempSalesLine."Qty. to Invoice (Base)" = 0 THEN
                    WhseRcptLine.VALIDATE("Qty. to Receive",0)
                  ELSE
                    WhseRcptLine.VALIDATE(
                      "Qty. to Receive",
                      TempSalesLine."Qty. to Invoice (Base)" / TempSalesLine."Qty. per Unit of Measure");
                  WhseRcptLine.MODIFY;
                END ELSE BEGIN
                  IF SalesLine2."Document Type" = SalesLine2."Document Type"::"Return Order" THEN BEGIN
                    IF TempSalesLine."Return Qty. to Receive (Base)" <> TempSalesLine."Qty. to Invoice (Base)" THEN BEGIN
                      IF TempSalesLine."Qty. to Invoice (Base)" = 0 THEN
                        TempSalesLine.VALIDATE(TempSalesLine."Return Qty. to Receive",0)
                      ELSE
                        TempSalesLine.VALIDATE(
                          TempSalesLine."Return Qty. to Receive",TempSalesLine."Qty. to Invoice (Base)" /
                          TempSalesLine."Qty. per Unit of Measure");
                      SalesLine2.GET(
                        TempSalesLine."Document Type",TempSalesLine."Document No.",TempSalesLine."Line No.");
                      SalesLine2.VALIDATE("Return Qty. to Receive",TempSalesLine."Return Qty. to Receive");
                      SalesLine2.VALIDATE("Qty. to Invoice",TempSalesLine."Return Qty. to Receive");
                      SalesLine2.MODIFY;
                    END;
                  END ELSE
                    ERROR(Text095);
                END;
              UNTIL TempSalesLine.NEXT = 0;

            TempSalesLine2.RESET;
            IF TempSalesLine2.FIND('-') THEN
              REPEAT
                WhseRcptLine.RESET;
                WhseRcptLine.SETCURRENTKEY("Source Type","Source Subtype","Source No.");
                WhseRcptLine.SETRANGE("Source Type",DATABASE::"Sales Line");
                WhseRcptLine.SETRANGE("Source Subtype",TempSalesLine2."Document Type");
                WhseRcptLine.SETRANGE("Source No.",TempSalesLine2."Document No.");
                WhseRcptLine.SETRANGE("Source Line No.",TempSalesLine2."Line No.");
                IF WhseRcptLine.FIND('-') THEN BEGIN
                  WhseRcptLine.VALIDATE("Qty. to Receive",0);
                  WhseRcptLine.MODIFY;
                END ELSE BEGIN
                  SalesLine2.GET(
                    TempSalesLine2."Document Type",TempSalesLine2."Document No.",TempSalesLine2."Line No.");
                  IF SalesLine2."Document Type" = SalesLine2."Document Type"::"Return Order" THEN
                    SalesLine2.VALIDATE("Return Qty. to Receive",0)
                  ELSE
                    ERROR(Text095);
                  SalesLine2.VALIDATE("Qty. to Invoice",0);
                  SalesLine2.MODIFY;
                END;
              UNTIL TempSalesLine2.NEXT = 0;
          END;
        DATABASE::"Purchase Header":
          BEGIN
            TempPurchLine.RESET;
            TempPurchLine.DELETEALL;
            TempPurchLine2.RESET;
            TempPurchLine2.DELETEALL;
            PurchLine2.RESET;
            PurchLine2.SETRANGE("Document Type",ReceiveControl."Source Subtype");
            IF ReceiveControl."Multi Document Receive" THEN
              PurchLine2.SETFILTER("Document No.",ReceiveControl."Multi Document No.")
            ELSE
              PurchLine2.SETRANGE("Document No.",ReceiveControl."Source ID");
            PurchLine2.SETFILTER("Outstanding Quantity",'>%1',0);
            IF PurchLine2.FIND('-') THEN
              REPEAT
                IF NOT PurchLine2."Drop Shipment" AND
                   (NOT ReceiveSetup."Location Receiving" OR
                    (PurchLine2."Location Code" = ReceiveStation."Location Code"))
                THEN BEGIN
                  TempPurchLine.COPY(PurchLine2);
                  IF ReceiveSetup."Receive Subcontracting Order" THEN BEGIN
                    IF TempPurchLine."Prod. Order No." <> '' THEN BEGIN
                      IF (ItemUnitOfMeasure."Item No." <> TempPurchLine."No.") OR
                         (ItemUnitOfMeasure.Code <> TempPurchLine."Unit of Measure Code")
                      THEN
                        ItemUnitOfMeasure.GET(TempPurchLine."No.",TempPurchLine."Unit of Measure Code");
                      TempPurchLine."Quantity (Base)" :=
                        TempPurchLine.Quantity *
                        ItemUnitOfMeasure."Qty. per Unit of Measure";
                      TempPurchLine."Outstanding Qty. (Base)" :=
                        TempPurchLine."Outstanding Quantity" *
                        ItemUnitOfMeasure."Qty. per Unit of Measure";
                      TempPurchLine."Qty. to Invoice (Base)" :=
                        TempPurchLine."Qty. to Invoice" *
                        ItemUnitOfMeasure."Qty. per Unit of Measure";
                      TempPurchLine."Qty. to Receive (Base)" :=
                        TempPurchLine."Qty. to Receive" *
                        ItemUnitOfMeasure."Qty. per Unit of Measure";
                      TempPurchLine."Qty. Rcd. Not Invoiced (Base)" :=
                        TempPurchLine."Qty. Rcd. Not Invoiced" *
                        ItemUnitOfMeasure."Qty. per Unit of Measure";
                      TempPurchLine."Qty. Received (Base)" :=
                        TempPurchLine."Quantity Received" *
                        ItemUnitOfMeasure."Qty. per Unit of Measure";
                      TempPurchLine."Qty. Invoiced (Base)" :=
                        TempPurchLine."Quantity Invoiced" *
                        ItemUnitOfMeasure."Qty. per Unit of Measure";
                    END;
                  END;

                  TempPurchLine."Qty. to Invoice (Base)" := 0;
                  TempPurchLine.INSERT;
                END ELSE
                  IF PurchLine2."Drop Shipment" OR NOT PurchLine2."Shipping Charge" OR
                     (ReceiveSetup."Location Receiving" AND
                      (PurchLine2."Location Code" <> ReceiveStation."Location Code"))
                  THEN BEGIN
                    TempPurchLine2.COPY(PurchLine2);
                    TempPurchLine2.INSERT;
                  END;
              UNTIL PurchLine2.NEXT = 0;
            PurchLine2.RESET;

            ReceiveLine2.RESET;
            ReceiveLine2.SETCURRENTKEY("Source Type","Source Subtype","Source ID","No.","Variant Code");
            ReceiveLine2.SETRANGE("Source Type",ReceiveControl."Source Type");
            ReceiveLine2.SETRANGE("Source Subtype",ReceiveControl."Source Subtype");
            IF ReceiveControl."Multi Document Receive" THEN
              ReceiveLine2.SETFILTER("Source ID",ReceiveControl."Multi Document No.")
            ELSE
              ReceiveLine2.SETRANGE("Source ID",ReceiveControl."Source ID");
            ReceiveLine2.SETRANGE(Type,ReceiveLine2.Type::"Account (G/L)",ReceiveLine2.Type::Item);
            IF ReceiveSetup."Location Receiving" THEN
              ReceiveLine2.SETRANGE("Location Code",ReceiveStation."Location Code");
            IF ReceiveLine2.FIND('-') THEN
              REPEAT
                TempPurchLine.RESET;
                TempPurchLine.SETCURRENTKEY(
                  "Document Type","Document No.",Type,"No.","Variant Code","Drop Shipment");
                TempPurchLine.SETRANGE("Document Type",ReceiveLine2."Source Subtype");
                TempPurchLine.SETRANGE("Document No.",ReceiveLine2."Source ID");
                TempPurchLine.SETRANGE(Type,ReceiveLine2.Type);
                TempPurchLine.SETRANGE("No.",ReceiveLine2."No.");
                TempPurchLine.SETRANGE("Variant Code",ReceiveLine2."Variant Code");
                IF TempPurchLine.FIND('-') THEN
                  REPEAT
                    IF TempPurchLine."Quantity (Base)" > 0 THEN BEGIN
                      LineQty :=
                        TempPurchLine."Outstanding Qty. (Base)" - TempPurchLine."Qty. to Invoice (Base)";
                      IF LineQty >= ReceiveLine2."Quantity (Base)" THEN BEGIN
                        TempPurchLine."Qty. to Invoice (Base)" :=
                          TempPurchLine."Qty. to Invoice (Base)" + ReceiveLine2."Quantity (Base)";
                        ReceiveLine2."Quantity (Base)" := 0;
                      END ELSE BEGIN
                        ReceiveLine2."Quantity (Base)" := ReceiveLine2."Quantity (Base)" - LineQty;
                        TempPurchLine."Qty. to Invoice (Base)" := TempPurchLine."Outstanding Qty. (Base)";
                      END;
                    END ELSE
                      ERROR(
                        Text043,
                        TempPurchLine.Type,TempPurchLine."No.");

                    TempPurchLine.MODIFY;
                  UNTIL (TempPurchLine.NEXT = 0) OR (ReceiveLine2."Quantity (Base)" = 0);
                  IF ReceiveLine2."Quantity (Base)" <> 0 THEN
                    ERROR(
                      Text042,
                      ReceiveLine2.Type,ReceiveLine2."No.");
              UNTIL ReceiveLine2.NEXT = 0;

            TempPurchLine.RESET;
            IF TempPurchLine.FIND('-') THEN
              REPEAT
                WhseRcptLine.RESET;
                WhseRcptLine.SETCURRENTKEY("Source Type","Source Subtype","Source No.");
                WhseRcptLine.SETRANGE("Source Type",DATABASE::"Purchase Line");
                WhseRcptLine.SETRANGE("Source Subtype",TempPurchLine."Document Type");
                WhseRcptLine.SETRANGE("Source No.",TempPurchLine."Document No.");
                WhseRcptLine.SETRANGE("Source Line No.",TempPurchLine."Line No.");
                IF WhseRcptLine.FIND('-') THEN BEGIN
                  IF TempPurchLine."Qty. to Invoice (Base)" = 0 THEN
                    WhseRcptLine.VALIDATE("Qty. to Receive",0)
                  ELSE
                    WhseRcptLine.VALIDATE(
                      "Qty. to Receive",
                      TempPurchLine."Qty. to Invoice (Base)" / TempPurchLine."Qty. per Unit of Measure");
                  WhseRcptLine.MODIFY;
                END ELSE BEGIN
                  IF TempPurchLine."Qty. to Receive (Base)" <> TempPurchLine."Qty. to Invoice (Base)" THEN BEGIN
                    IF TempPurchLine."Qty. to Invoice (Base)" = 0 THEN
                      TempPurchLine.VALIDATE(TempPurchLine."Qty. to Receive",0)
                    ELSE
                      IF (TempPurchLine."Prod. Order No." <> '') AND
                         ReceiveSetup."Receive Subcontracting Order"
                      THEN BEGIN
                        IF (ItemUnitOfMeasure."Item No." <> TempPurchLine."No.") OR
                           (ItemUnitOfMeasure.Code <> TempPurchLine."Unit of Measure Code")
                        THEN
                          ItemUnitOfMeasure.GET(TempPurchLine."No.",TempPurchLine."Unit of Measure Code");
                        TempPurchLine.VALIDATE(
                          "Qty. to Receive",
                          TempPurchLine."Qty. to Invoice (Base)" /
                          ItemUnitOfMeasure."Qty. per Unit of Measure");
                      END ELSE
                        TempPurchLine.VALIDATE(
                          "Qty. to Receive",
                          TempPurchLine."Qty. to Invoice (Base)" /
                          TempPurchLine."Qty. per Unit of Measure");
                    PurchLine2.GET(
                      TempPurchLine."Document Type",TempPurchLine."Document No.",TempPurchLine."Line No.");
                    PurchLine2.VALIDATE("Qty. to Receive",TempPurchLine."Qty. to Receive");
                    PurchLine2.VALIDATE("Qty. to Invoice",TempPurchLine."Qty. to Receive");
                    PurchLine2.MODIFY;
                  END;
                END;
              UNTIL TempPurchLine.NEXT = 0;

            TempPurchLine2.RESET;
            IF TempPurchLine2.FIND('-') THEN
              REPEAT
                WhseRcptLine.RESET;
                WhseRcptLine.SETCURRENTKEY("Source Type","Source Subtype","Source No.");
                WhseRcptLine.SETRANGE("Source Type",DATABASE::"Purchase Line");
                WhseRcptLine.SETRANGE("Source Subtype",TempPurchLine2."Document Type");
                WhseRcptLine.SETRANGE("Source No.",TempPurchLine2."Document No.");
                WhseRcptLine.SETRANGE("Source Line No.",TempPurchLine2."Line No.");
                IF WhseRcptLine.FIND('-') THEN BEGIN
                  WhseRcptLine.VALIDATE("Qty. to Receive",0);
                  WhseRcptLine.MODIFY;
                END ELSE BEGIN
                  PurchLine2.GET(
                    TempPurchLine2."Document Type",TempPurchLine2."Document No.",TempPurchLine2."Line No.");
                  PurchLine2.VALIDATE("Qty. to Receive",0);
                  PurchLine2.VALIDATE("Qty. to Invoice",0);
                  PurchLine2.MODIFY;
                END;
              UNTIL TempPurchLine2.NEXT = 0;
          END;
        DATABASE::"Transfer Header":
          BEGIN
            TempTransferLine.RESET;
            TempTransferLine.DELETEALL;
            TempTransferLine2.RESET;
            TempTransferLine2.DELETEALL;
            TransferLine2.RESET;
            IF ReceiveControl."Multi Document Receive" THEN
              TransferLine2.SETFILTER("Document No.",ReceiveControl."Multi Document No.")
            ELSE
              TransferLine2.SETRANGE("Document No.",ReceiveControl."Source ID");
            TransferLine2.SETFILTER("Qty. in Transit",'>%1',0);
            TransferLine2.SETRANGE("Derived From Line No.",0);
            IF TransferLine2.FIND('-') THEN
              REPEAT
                IF NOT ReceiveSetup."Location Receiving" OR
                   (TransferLine2."Transfer-to Code" = ReceiveStation."Location Code")
                THEN BEGIN
                  TempTransferLine.COPY(TransferLine2);
                  TempTransferLine."Qty. to Ship (Base)" := 0;
                  TempTransferLine.INSERT;
                END ELSE
                  IF ReceiveSetup."Location Receiving" AND
                     (TransferLine2."Transfer-to Code" <> ReceiveStation."Location Code")
                  THEN BEGIN
                    TempTransferLine2.COPY(TransferLine2);
                    TempTransferLine2.INSERT;
                  END;
              UNTIL TransferLine2.NEXT = 0;
            TransferLine2.RESET;

            ReceiveLine2.RESET;
            ReceiveLine2.SETCURRENTKEY("Source Type","Source Subtype","Source ID","No.","Variant Code");
            ReceiveLine2.SETRANGE("Source Type",ReceiveControl."Source Type");
            ReceiveLine2.SETRANGE("Source Subtype",ReceiveControl."Source Subtype");
            IF ReceiveControl."Multi Document Receive" THEN
              ReceiveLine2.SETFILTER("Source ID",ReceiveControl."Multi Document No.")
            ELSE
              ReceiveLine2.SETRANGE("Source ID",ReceiveControl."Source ID");
            ReceiveLine2.SETRANGE(Type,ReceiveLine2.Type::"Account (G/L)",ReceiveLine2.Type::Item);
            IF ReceiveSetup."Location Receiving" THEN
              ReceiveLine2.SETRANGE("Location Code",ReceiveStation."Location Code");
            IF ReceiveLine2.FIND('-') THEN
              REPEAT
                TempTransferLine.RESET;
                TempTransferLine.SETCURRENTKEY("Item No.");
                TempTransferLine.SETRANGE("Document No.",ReceiveLine2."Source ID");
                TempTransferLine.SETRANGE("Item No.",ReceiveLine2."No.");
                TempTransferLine.SETRANGE("Variant Code",ReceiveLine2."Variant Code");
                IF TempTransferLine.FIND('-') THEN
                  REPEAT
                    IF TempTransferLine."Quantity (Base)" > 0 THEN BEGIN
                      LineQty :=
                        TempTransferLine."Qty. in Transit (Base)" - TempTransferLine."Qty. to Ship (Base)";
                      IF LineQty >= ReceiveLine2."Quantity (Base)" THEN BEGIN
                        TempTransferLine."Qty. to Ship (Base)" :=
                          TempTransferLine."Qty. to Ship (Base)" + ReceiveLine2."Quantity (Base)";
                        ReceiveLine2."Quantity (Base)" := 0;
                      END ELSE BEGIN
                        ReceiveLine2."Quantity (Base)" := ReceiveLine2."Quantity (Base)" - LineQty;
                        TempTransferLine."Qty. to Ship (Base)" := TempTransferLine."Qty. in Transit (Base)";
                      END;
                    END ELSE
                      ERROR(
                        Text044,
                        TempTransferLine."Item No.");

                    TempTransferLine.MODIFY;
                  UNTIL (TempTransferLine.NEXT = 0) OR (ReceiveLine2."Quantity (Base)" = 0);
                  IF ReceiveLine2."Quantity (Base)" <> 0 THEN
                    ERROR(
                      Text042,
                      ReceiveLine2.Type,ReceiveLine2."No.");
              UNTIL ReceiveLine2.NEXT = 0;

            TempTransferLine.RESET;
            IF TempTransferLine.FIND('-') THEN
              REPEAT
                WhseRcptLine.RESET;
                WhseRcptLine.SETCURRENTKEY("Source Type","Source Subtype","Source No.");
                WhseRcptLine.SETRANGE("Source Type",DATABASE::"Transfer Line");
                WhseRcptLine.SETRANGE("Source Subtype",1);
                WhseRcptLine.SETRANGE("Source No.",TempTransferLine."Document No.");
                WhseRcptLine.SETRANGE("Source Line No.",TempTransferLine."Line No.");
                IF WhseRcptLine.FIND('-') THEN BEGIN
                  IF TempTransferLine."Qty. to Ship (Base)" = 0 THEN
                    WhseRcptLine.VALIDATE("Qty. to Receive",0)
                  ELSE
                    WhseRcptLine.VALIDATE(
                      "Qty. to Receive",
                      TempTransferLine."Qty. to Ship (Base)" / TempTransferLine."Qty. per Unit of Measure");
                  WhseRcptLine.MODIFY;
                END ELSE BEGIN
                  IF TempTransferLine."Qty. to Receive (Base)" <> TempTransferLine."Qty. to Ship (Base)"
                  THEN BEGIN
                    IF TempTransferLine."Qty. to Ship (Base)" = 0 THEN
                      TempTransferLine.VALIDATE(TempTransferLine."Qty. to Receive",0)
                    ELSE
                      TempTransferLine.VALIDATE(
                        TempTransferLine."Qty. to Receive",TempTransferLine."Qty. to Ship (Base)" /
                        TempTransferLine."Qty. per Unit of Measure");
                    TransferLine2.GET(
                      TempTransferLine."Document No.",TempTransferLine."Line No.");
                    TransferLine2.VALIDATE("Qty. to Receive",TempTransferLine."Qty. to Receive");
                    TransferLine2.MODIFY;
                  END;
                END;
              UNTIL TempTransferLine.NEXT = 0;

            TempTransferLine2.RESET;
            IF TempTransferLine2.FIND('-') THEN
              REPEAT
                WhseRcptLine.RESET;
                WhseRcptLine.SETCURRENTKEY("Source Type","Source Subtype","Source No.");
                WhseRcptLine.SETRANGE("Source Type",DATABASE::"Transfer Line");
                WhseRcptLine.SETRANGE("Source Subtype",1);
                WhseRcptLine.SETRANGE("Source No.",TempTransferLine2."Document No.");
                WhseRcptLine.SETRANGE("Source Line No.",TempTransferLine2."Line No.");
                IF WhseRcptLine.FIND('-') THEN BEGIN
                  WhseRcptLine.VALIDATE("Qty. to Receive",0);
                  WhseRcptLine.MODIFY;
                END ELSE BEGIN
                  TransferLine2.GET(TempTransferLine2."Document No.",TempTransferLine2."Line No.");
                  TransferLine2.VALIDATE("Qty. to Receive",0);
                  TransferLine2.MODIFY;
                END;
              UNTIL TempTransferLine2.NEXT = 0;
          END;
        ELSE
          ReceiveControl.ErrorUnknownSourceType2;
      END;
    END;

    PROCEDURE ResetQtyToReceive@26(VAR ReceiveControl@1240030000 : Record 14000611);
    VAR
      SalesLine@1240030001 : Record 37;
      PurchLine@1240030002 : Record 39;
      TransferLine@1240030003 : Record 5741;
    BEGIN
      TestInitialized;
      CASE ReceiveControl."Source Type" OF
        DATABASE::"Sales Header":
          BEGIN
            SalesLine.RESET;
            SalesLine.SETRANGE("Document Type",ReceiveControl."Source Subtype");
            IF ReceiveControl."Multi Document Receive" THEN
              SalesLine.SETFILTER("Document No.",ReceiveControl."Multi Document No.")
            ELSE
              SalesLine.SETRANGE("Document No.",ReceiveControl."Source ID");
            SalesLine.SETRANGE(Type,SalesLine.Type::Item);
            SalesLine.SETFILTER("Outstanding Quantity",'>%1',0);
            SalesLine.SETRANGE("Drop Shipment",FALSE);
            IF ReceiveSetup."Location Receiving" THEN
              SalesLine.SETRANGE("Location Code",ReceiveStation."Location Code");
            IF SalesLine.FIND('-') THEN
              REPEAT
                IF SalesLine."Document Type" <> SalesLine."Document Type"::"Return Order" THEN BEGIN
                  IF SalesLine."Return Qty. to Receive" <> SalesLine."Outstanding Quantity" THEN BEGIN
                    SalesLine.VALIDATE("Return Qty. to Receive",SalesLine."Outstanding Quantity");
                    SalesLine.MODIFY;
                  END;
                END ELSE
                  ERROR(Text095);
              UNTIL SalesLine.NEXT = 0;
          END;
        DATABASE::"Purchase Header":
          BEGIN
            PurchLine.RESET;
            PurchLine.SETRANGE("Document Type",ReceiveControl."Source Subtype");
            IF ReceiveControl."Multi Document Receive" THEN
              PurchLine.SETFILTER("Document No.",ReceiveControl."Multi Document No.")
            ELSE
              PurchLine.SETRANGE("Document No.",ReceiveControl."Source ID");
            PurchLine.SETRANGE(Type,PurchLine.Type::Item);
            PurchLine.SETFILTER("Outstanding Quantity",'>%1',0);
            PurchLine.SETRANGE("Drop Shipment",FALSE);
            IF ReceiveSetup."Location Receiving" THEN
              PurchLine.SETRANGE("Location Code",ReceiveStation."Location Code");
            IF PurchLine.FIND('-') THEN
              REPEAT
                IF PurchLine."Qty. to Receive" <> PurchLine."Outstanding Quantity" THEN BEGIN
                  PurchLine.VALIDATE("Qty. to Receive",PurchLine."Outstanding Quantity");
                  PurchLine.VALIDATE("Qty. to Receive",0);
                  PurchLine.MODIFY;
                END;
              UNTIL PurchLine.NEXT = 0;
          END;
        DATABASE::"Transfer Header":
          BEGIN
            TransferLine.RESET;
            IF ReceiveControl."Multi Document Receive" THEN
              TransferLine.SETFILTER("Document No.",ReceiveControl."Multi Document No.")
            ELSE
              TransferLine.SETRANGE("Document No.",ReceiveControl."Source ID");
            TransferLine.SETFILTER("Qty. in Transit (Base)",'>%1',0);
            TransferLine.SETRANGE("Derived From Line No.",0);
            IF ReceiveSetup."Location Receiving" THEN
              TransferLine.SETRANGE("Transfer-to Code",ReceiveStation."Location Code");
            IF TransferLine.FIND('-') THEN
              REPEAT
                IF TransferLine."Qty. to Receive" <> TransferLine."Qty. in Transit (Base)" THEN BEGIN
                  TransferLine.VALIDATE("Qty. to Receive",TransferLine."Qty. in Transit (Base)");
                  TransferLine.MODIFY;
                END;
              UNTIL TransferLine.NEXT = 0;
          END;
        ELSE
          ReceiveControl.ErrorUnknownSourceType2;
      END;
    END;

    PROCEDURE CreateShipComplete@17(VAR Receive@1240030000 : Record 14000601;VAR ReceiveControl@1240030001 : Record 14000611) : Boolean;
    BEGIN
      TestInitialized;
      Receive.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Receive.SETRANGE("Source Type",ReceiveControl."Source Type");
      Receive.SETRANGE("Source Subtype",ReceiveControl."Source Subtype");
      IF ReceiveControl."Multi Document Receive" THEN
        Receive.SETFILTER("Source ID",ReceiveControl."Multi Document No.")
      ELSE
        Receive.SETRANGE("Source ID",ReceiveControl."Source ID");
      IF ReceiveSetup."Location Receiving" THEN
        Receive.SETRANGE("Location Code",ReceiveStation."Location Code");
      IF Receive.FIND('-') THEN BEGIN
        ReceiveControl."Error Message" := Text045;
        EXIT(FALSE);
      END;

      EXIT(ReceiveRemaining(Receive,ReceiveControl));
    END;

    PROCEDURE ReceiveRemaining@2(VAR Receive@1240030000 : Record 14000601;VAR ReceiveControl@1240030001 : Record 14000611) : Boolean;
    VAR
      FastReceiveLineTmp@1240030002 : TEMPORARY Record 14000609;
    BEGIN
      TestInitialized;
      UpdateFastReceiveLines(ReceiveControl,FastReceiveLineTmp,FALSE,FALSE,FALSE,0,'','');
      IF NOT FastReceiveLineTmp.FIND('-') THEN BEGIN
        ReceiveControl."Error Message" := Text046;
        EXIT(FALSE);
      END;

      IF NOT ReceiveControl."Receive Open" THEN
        IF NOT CreateReceive(Receive,ReceiveControl) THEN
          EXIT(FALSE);

      REPEAT
        FastReceiveLineTmp.VALIDATE(
          "Qty. to Receive",FastReceiveLineTmp."Remaining Qty. to Receive");
        ReceiveControl."Input Type" := FastReceiveLineTmp.Type;
        ReceiveControl."Input No." := FastReceiveLineTmp."No.";
        ReceiveControl."Input Serial Number" := '';
        ReceiveControl."Input Unit of Measure Code" :=
          FastReceiveLineTmp."Qty. to Rec. Unit of Meas Code";
        ReceiveControl."Input Variant Code" := FastReceiveLineTmp."Variant Code";
        ReceiveControl."Receive Serial Number" := FastReceiveLineTmp."Receive Serial Number";
        ReceiveControl."Receive Serial Number Late" := FALSE;
        ReceiveControl."Input Lot Number" := '';
        ReceiveControl."Receive Lot Number" := FastReceiveLineTmp."Receive Lot Number";
        ReceiveControl."Receive Lot Number Late" := FALSE;
        ReceiveControl."Input Warranty Date" := 0D;
        ReceiveControl."Receive Warranty Date" := FastReceiveLineTmp."Receive Warranty Date";
        ReceiveControl."Receive Warranty Date Late" := FALSE;
        ReceiveControl."Input Expiration Date" := 0D;
        ReceiveControl."Receive Expiration Date" := FastReceiveLineTmp."Receive Expiration Date";
        ReceiveControl."Receive Expiration Date Late" := FALSE;
        ReceiveControl."Show Serial No. Info. Card" := FALSE;
        ReceiveControl."Show Lot No. Info. Card" := FALSE;

        CreateReceiveLine(
          Receive,ReceiveControl,
          FastReceiveLineTmp."Unit of Measure Code",FastReceiveLineTmp.Quantity,
          FastReceiveLineTmp."Qty. to Receive");
      UNTIL FastReceiveLineTmp.NEXT = 0;

      COMMIT;

      Receive.ClearTotalValueFields;
      Receive.TotalNetWeight;

      EXIT(TRUE);
    END;

    PROCEDURE DeleteOpenReceive@19(VAR Receive@1240030000 : Record 14000601;VAR ReceiveControl@1240030001 : Record 14000611);
    BEGIN
      TestInitialized;
      Receive.DELETE(TRUE);
      ReceiveControl."Receive Open" := FALSE;
      IF ReceiveControl."Last Receive No." > 0 THEN
        ReceiveControl."Last Receive No." := ReceiveControl."Last Receive No." - 1;
      CLEAR(Receive);
    END;

    PROCEDURE DeleteAllReceives@20(VAR ReceiveControl@1240030000 : Record 14000611);
    VAR
      Receive2@1240030001 : Record 14000601;
      ReceiveLine2@1240030002 : Record 14000602;
      SalesHeader@1240030004 : Record 36;
      PurchHeader@1240030007 : Record 38;
      ReleaseSalesDocument@1240030005 : Codeunit 414;
      ReleasePurchDocument@1240030006 : Codeunit 415;
      DeleteOverReceive@1240030003 : Boolean;
    BEGIN
      TestInitialized;

      IF ReceiveSetup."Autom. Delete Over Receive" THEN BEGIN
        ReceiveLine2.RESET;
        ReceiveLine2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
        ReceiveLine2.SETRANGE("Source Type",ReceiveControl."Source Type");
        ReceiveLine2.SETRANGE("Source Subtype",ReceiveControl."Source Subtype");
        IF ReceiveControl."Multi Document Receive" THEN
          ReceiveLine2.SETFILTER("Source ID",ReceiveControl."Multi Document No.")
        ELSE
          ReceiveLine2.SETRANGE("Source ID",ReceiveControl."Source ID");
        IF ReceiveSetup."Location Receiving" THEN
          ReceiveLine2.SETRANGE("Location Code",ReceiveStation."Location Code");
        ReceiveLine2.SETRANGE("Over Receive",TRUE);
        DeleteOverReceive := ReceiveLine2.FIND('-');
          DeleteOverReceiveLine(ReceiveControl);
      END;

      Receive2.RESET;
      Receive2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Receive2.SETRANGE("Source Type",ReceiveControl."Source Type");
      Receive2.SETRANGE("Source Subtype",ReceiveControl."Source Subtype");
      IF ReceiveControl."Multi Document Receive" THEN
        Receive2.SETFILTER("Source ID",ReceiveControl."Multi Document No.")
      ELSE
        Receive2.SETRANGE("Source ID",ReceiveControl."Source ID");
      IF ReceiveSetup."Location Receiving" THEN
        Receive2.SETRANGE("Location Code",ReceiveStation."Location Code");
      IF Receive2.FIND('+') THEN
        REPEAT
          IF Receive2.Closed THEN
            Receiving.OpenReceive(Receive2);

          Receive2.DELETE(TRUE);
        UNTIL Receive2.NEXT(-1) = 0;

      IF ReceiveSetup."Autom. Delete Over Receive" AND DeleteOverReceive THEN
        DeleteOverReceiveLine(ReceiveControl);

      IF ReceiveControl."Auto Create Document" THEN BEGIN
        CASE ReceiveControl."Source Type" OF
          DATABASE::"Sales Header":
            BEGIN
              SalesHeader.GET(ReceiveControl."Source Subtype",ReceiveControl."Source ID");
              ReleaseSalesDocument.Reopen(SalesHeader);
              SalesHeader.FIND;
              SalesHeader.DELETE(TRUE);
            END;
          DATABASE::"Purchase Header":
            BEGIN
              PurchHeader.GET(ReceiveControl."Source Subtype",ReceiveControl."Source ID");
              ReleasePurchDocument.Reopen(PurchHeader);
              PurchHeader.FIND;
              PurchHeader.DELETE(TRUE);
            END;
        END;
      END;

      ReceiveControl."Receive Open" := FALSE;
      ReceiveControl."Last Receive No." := 0;
    END;

    PROCEDURE PrintSalesReceiptReport@38(ReceiptNo@1240030000 : Code[20]);
    VAR
      ReturnReceiptHeader@1240030001 : Record 6660;
      ReportSelection@1240030002 : Record 77;
    BEGIN
      TestInitialized;
      ReturnReceiptHeader."No." := ReceiptNo;
      ReturnReceiptHeader.SETRECFILTER;

      ReportSelection.RESET;
      ReportSelection.SETRANGE(Usage,ReportSelection.Usage::"S.Ret.Rcpt.");
      ReportSelection.FIND('-');
      REPEAT
        ReportSelection.TESTFIELD("Report ID");
        REPORT.RUN(ReportSelection."Report ID",FALSE,FALSE,ReturnReceiptHeader);
      UNTIL ReportSelection.NEXT = 0;
    END;

    PROCEDURE PrintSalesInvoiceReport@40(Type@1240030000 : Integer;InvoiceNo@1240030001 : Code[20]);
    VAR
      SalesHeader@1240030002 : Record 36;
      SalesCrMemoHeader@1240030003 : Record 114;
      ReportSelection@1240030004 : Record 77;
    BEGIN
      TestInitialized;
      CASE Type OF
        SalesHeader."Document Type"::"Credit Memo":
          BEGIN
            SalesCrMemoHeader."No." := InvoiceNo;
            SalesCrMemoHeader.SETRECFILTER;

            ReportSelection.RESET;
            ReportSelection.SETRANGE(Usage,ReportSelection.Usage::"S.Cr.Memo");
            ReportSelection.FIND('-');
            REPEAT
              ReportSelection.TESTFIELD("Report ID");
              REPORT.RUN(ReportSelection."Report ID",FALSE,FALSE,SalesCrMemoHeader);
            UNTIL ReportSelection.NEXT = 0;
          END;
      END;
    END;

    PROCEDURE PrintPurchReceiptReport@15(ReceiptNo@1240030000 : Code[20]);
    VAR
      PurchReceiptHeader@1240030001 : Record 120;
      ReportSelection@1240030002 : Record 77;
    BEGIN
      TestInitialized;
      PurchReceiptHeader."No." := ReceiptNo;
      PurchReceiptHeader.SETRECFILTER;

      ReportSelection.RESET;
      ReportSelection.SETRANGE(Usage,ReportSelection.Usage::"P.Receipt");
      ReportSelection.FIND('-');
      REPEAT
        ReportSelection.TESTFIELD("Report ID");
        REPORT.RUN(ReportSelection."Report ID",FALSE,FALSE,PurchReceiptHeader);
      UNTIL ReportSelection.NEXT = 0;
    END;

    PROCEDURE PrintPurchInvoiceReport@32(InvoiceNo@1240030000 : Code[20]);
    VAR
      PurchInvoiceHeader@1240030001 : Record 122;
      ReportSelection@1240030002 : Record 77;
    BEGIN
      TestInitialized;
      PurchInvoiceHeader."No." := InvoiceNo;
      PurchInvoiceHeader.SETRECFILTER;

      ReportSelection.RESET;
      ReportSelection.SETRANGE(Usage,ReportSelection.Usage::"P.Invoice");
      ReportSelection.FIND('-');
      REPEAT
        ReportSelection.TESTFIELD("Report ID");
        REPORT.RUN(ReportSelection."Report ID",FALSE,FALSE,PurchInvoiceHeader);
      UNTIL ReportSelection.NEXT = 0;
    END;

    PROCEDURE PrintTransferReceiptReport@1240030000(ReceiptNo@1240030000 : Code[20]);
    VAR
      TransferReceiptHeader@1240030001 : Record 5746;
      ReportSelection@1240030002 : Record 77;
    BEGIN
      TestInitialized;
      TransferReceiptHeader."No." := ReceiptNo;
      TransferReceiptHeader.SETRECFILTER;

      ReportSelection.RESET;
      ReportSelection.SETRANGE(Usage,ReportSelection.Usage::Inv3);
      ReportSelection.FIND('-');
      REPEAT
        ReportSelection.TESTFIELD("Report ID");
        REPORT.RUN(ReportSelection."Report ID",FALSE,FALSE,TransferReceiptHeader);
      UNTIL ReportSelection.NEXT = 0;
    END;

    PROCEDURE PrintPutAwayReport@1240030007(WhseRcptLine@1240030000 : Record 7317);
    VAR
      WarehouseActivityLine@1240030001 : Record 5767;
      WarehouseActivityHeader@1240030002 : Record 5766;
      WhsePutAway@1240030004 : Report 5751;
    BEGIN
      WarehouseActivityLine.RESET;
      WarehouseActivityLine.SETCURRENTKEY("Source Type","Source Subtype","Source No.");
      WarehouseActivityLine.SETRANGE("Source Type",WhseRcptLine."Source Type");
      WarehouseActivityLine.SETRANGE("Source Subtype",WhseRcptLine."Source Subtype");
      WarehouseActivityLine.SETRANGE("Source No.",WhseRcptLine."Source No.");
      WarehouseActivityLine.SETRANGE("Location Code",WhseRcptLine."Location Code");
      WarehouseActivityLine.SETRANGE("Activity Type",WarehouseActivityLine."Activity Type"::"Put-away");
      IF WarehouseActivityLine.FIND('+') THEN BEGIN
        WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
        WarehouseActivityHeader.SETRECFILTER;

        CLEAR(WhsePutAway);
        WhsePutAway.SETTABLEVIEW(WarehouseActivityHeader);
        WhsePutAway.SetBreakbulkFilter(WarehouseActivityHeader."Breakbulk Filter");
        WhsePutAway.USEREQUESTPAGE(FALSE);
        WhsePutAway.RUNMODAL;
      END;
    END;

    PROCEDURE WeightOverride@6(VAR Receive@1240030000 : Record 14000601);
    VAR
      ReceiveInput@1240030001 : Record 14000615;
      EReceiveOverrideWeight@1240030002 : Page 14050064;
    BEGIN
      TestInitialized;

      Receive.MODIFY;
      COMMIT;
      Receive.CALCFIELDS("Net Weight","Gross Weight","Dim. Weight","Unit of Measure Weight");

      CLEAR(ReceiveInput);
      ReceiveInput."Receive No." := Receive."No.";
      ReceiveInput."Source Type" := Receive."Source Type";
      ReceiveInput."Source Subtype" := Receive."Source Subtype";
      ReceiveInput."Source ID" := Receive."Source ID";
      ReceiveInput."Multi Document No." := Receive."Multi Document No.";
      ReceiveInput."Net Weight" := Receive."Net Weight";
      ReceiveInput."Gross Weight" := Receive."Gross Weight";
      ReceiveInput."Dim. Weight" := Receive."Dim. Weight";
      ReceiveInput."Unit of Measure Weight" := Receive."Unit of Measure Weight";
      ReceiveInput."Override Weight" := Receive."Override Weight";

      CLEAR(EReceiveOverrideWeight);
      EReceiveOverrideWeight.LOOKUPMODE(TRUE);
      EReceiveOverrideWeight.SetReceiveInput(ReceiveInput);
      IF EReceiveOverrideWeight.RUNMODAL = ACTION::LookupOK THEN BEGIN
      EReceiveOverrideWeight.GetReceiveInput(ReceiveInput);
      Receive."Override Weight" := ReceiveInput."Override Weight";
      Receive.MODIFY;
      COMMIT;
      END;
    END;

    PROCEDURE VolumeOverride@37(VAR Receive@1240030000 : Record 14000601);
    VAR
      ReceiveInput@1240030002 : Record 14000615;
      EReceiveOverrideDimensions@1240030001 : Page 14050063;
    BEGIN
      TestInitialized;

      Receive.MODIFY;
      COMMIT;
      Receive.CALCFIELDS(Volume,Length,Width,Height,Cubage);

      CLEAR(ReceiveInput);
      ReceiveInput."Receive No." := Receive."No.";
      ReceiveInput."Source Type" := Receive."Source Type";
      ReceiveInput."Source Subtype" := Receive."Source Subtype";
      ReceiveInput."Source ID" := Receive."Source ID";
      ReceiveInput."Multi Document No." := Receive."Multi Document No.";
      ReceiveInput.Volume := Receive.Volume;
      ReceiveInput.Length := Receive.Length;
      ReceiveInput.Width := Receive.Width;
      ReceiveInput.Height := Receive.Height;
      ReceiveInput.Cubage := Receive.Cubage;
      ReceiveInput."Override Volume" := Receive."Override Volume";
      ReceiveInput."Override Dimensions" := Receive."Override Dimensions";
      ReceiveInput."Override Length" := Receive."Override Length";
      ReceiveInput."Override Width" := Receive."Override Width";
      ReceiveInput."Override Height" := Receive."Override Height";

      CLEAR(EReceiveOverrideDimensions);
      EReceiveOverrideDimensions.LOOKUPMODE(TRUE);
      EReceiveOverrideDimensions.SetReceiveInput(ReceiveInput);
      IF EReceiveOverrideDimensions.RUNMODAL = ACTION::LookupOK THEN BEGIN
      EReceiveOverrideDimensions.GetReceiveInput(ReceiveInput);
      Receive."Override Volume" := ReceiveInput."Override Volume";
      Receive."Override Dimensions" := ReceiveInput."Override Dimensions";
      Receive."Override Length" := ReceiveInput."Override Length";
      Receive."Override Width" := ReceiveInput."Override Width";
      Receive."Override Height" := ReceiveInput."Override Height";
      Receive.MODIFY;
      COMMIT;
      END;
    END;

    PROCEDURE ViewDocumentComments@46(VAR ReceiveControl@1240030000 : Record 14000611;OnlyIfExist@1240030001 : Boolean);
    VAR
      SalesCommentLine@1240030002 : Record 44;
      PurchCommentLine@1240030003 : Record 43;
      InventoryCommentLine@1240030004 : Record 5748;
    BEGIN
      TestInitialized;
      CASE ReceiveControl."Source Type" OF
        DATABASE::"Sales Header":
          BEGIN
            SalesCommentLine.RESET;
            SalesCommentLine.SETRANGE("Document Type",ReceiveControl."Source Subtype");
            SalesCommentLine.SETRANGE("No.",ReceiveControl."Source ID");
            IF NOT OnlyIfExist OR SalesCommentLine.FIND('-') THEN
              PAGE.RUNMODAL(PAGE::"Sales Comment Sheet",SalesCommentLine);
          END;
        DATABASE::"Purchase Header":
          BEGIN
            PurchCommentLine.RESET;
            PurchCommentLine.SETRANGE("Document Type",ReceiveControl."Source Subtype");
            PurchCommentLine.SETRANGE("No.",ReceiveControl."Source ID");
            IF NOT OnlyIfExist OR PurchCommentLine.FIND('-') THEN
              PAGE.RUNMODAL(PAGE::"Purch. Comment Sheet",PurchCommentLine);
          END;
        DATABASE::"Transfer Header":
          BEGIN
            InventoryCommentLine.RESET;
            InventoryCommentLine.SETRANGE("Document Type",InventoryCommentLine."Document Type"::"Transfer Order");
            InventoryCommentLine.SETRANGE("No.",ReceiveControl."Source ID");
            IF NOT OnlyIfExist OR InventoryCommentLine.FIND('-') THEN
              PAGE.RUNMODAL(PAGE::"Inventory Comment Sheet",InventoryCommentLine);
          END;
        ELSE
          ReceiveControl.ErrorUnknownSourceType2;
      END;
    END;

    PROCEDURE ChangeTotalReceiveCount@35(VAR Receive@1240030000 : Record 14000601;VAR ReceiveControl@1240030001 : Record 14000611) : Boolean;
    VAR
      Receive2@1240030002 : Record 14000601;
      ReceiveInput@1240030003 : Record 14000615;
      EReceiveEnterTotalCount@1240030004 : Page 14050058;
    BEGIN
      TestInitialized;
      Receive2.RESET;
      Receive2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Receive2.SETRANGE("Source Type",ReceiveControl."Source Type");
      Receive2.SETRANGE("Source Subtype",ReceiveControl."Source Subtype");
      IF ReceiveControl."Multi Document Receive" THEN
        Receive2.SETFILTER("Source ID",ReceiveControl."Multi Document No.")
      ELSE
        Receive2.SETRANGE("Source ID",ReceiveControl."Source ID");
      IF ReceiveControl."Receive Open" THEN
        Receive2.SETRANGE("No.",'<>%1',Receive."No.");
      IF ReceiveSetup."Location Receiving" THEN
        Receive2.SETRANGE("Location Code",ReceiveStation."Location Code");
      IF Receive2.FIND('-') THEN BEGIN
        ReceiveControl."Error Message" := Text045;
        EXIT(FALSE);
      END;

      CLEAR(EReceiveEnterTotalCount);
      EReceiveEnterTotalCount.LOOKUPMODE(TRUE);
      IF EReceiveEnterTotalCount.RUNMODAL = ACTION::LookupOK THEN BEGIN
      EReceiveEnterTotalCount.GetReceiveInput(ReceiveInput);
        ReceiveControl."Total Receive Count" := ReceiveInput."Total Count";
      END ELSE
        EXIT(FALSE);

      IF ReceiveControl."Total Receive Count" < 1 THEN BEGIN
        ReceiveControl."Error Message" := Text048;
        EXIT(FALSE);
      END;

      IF ReceiveControl."Receive Open" THEN BEGIN
        Receive."Total Receives" := ReceiveControl."Total Receive Count";
        Receive.MODIFY;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE PrintStdReceiveLabel@43(VAR Receive@1240030000 : Record 14000601);
    BEGIN
      TestInitialized;
      LabelMgt.PrintStdReceiveLabel(Receive);

      Receive.GET(Receive."No.");
    END;

    PROCEDURE ZeroScale@5(ScaleInterface@1240030000 : Record 14000746);
    BEGIN
      TestInitialized;
      ScalesComm.ZeroScale(ScaleInterface);
    END;

    PROCEDURE MissingOrderLines@10(VAR ReceiveControl@1240030000 : Record 14000611) : Boolean;
    VAR
      FastReceiveLineTmp@1240030001 : TEMPORARY Record 14000609;
      ItemsNotReceived@1240030002 : Page 14000615;
    BEGIN
      TestInitialized;
      UpdateFastReceiveLines(ReceiveControl,FastReceiveLineTmp,FALSE,FALSE,FALSE,0,'','');

      CLEAR(ItemsNotReceived);
      ItemsNotReceived.LOOKUPMODE(TRUE);
      ItemsNotReceived.LoadTempTable(FastReceiveLineTmp);
      IF ItemsNotReceived.RUNMODAL = ACTION::LookupOK THEN BEGIN
        ItemsNotReceived.GETRECORD(FastReceiveLineTmp);
        ReceiveControl."Input Type" := FastReceiveLineTmp.Type;
        ReceiveControl."Input No." := FastReceiveLineTmp."No.";
        ReceiveControl."Input Unit of Measure Code" := FastReceiveLineTmp."Unit of Measure Code";
        ReceiveControl."Input Variant Code" := FastReceiveLineTmp."Variant Code";
        EXIT(TRUE);
      END ELSE
        EXIT(FALSE);
    END;

    PROCEDURE UpdateFastReceiveLines@1(VAR ReceiveControl@1240030000 : Record 14000611;VAR FastReceiveLineTmp@1240030001 : Record 14000609;OnlyCalculateQtyToReceive@1240030002 : Boolean;PerSourceID@1240030003 : Boolean;IncludeFullyShippedLines@1240030009 : Boolean;TypeFilter@1240030004 : Integer;NoFilter@1240030005 : Code[20];VariantCodeFilter@1240030006 : Code[10]);
    VAR
      ReceiveLine@1240030007 : Record 14000602;
    BEGIN
      TestInitialized;
      CASE ReceiveControl."Source Type" OF
        DATABASE::"Sales Header":
          UpdateFastReceiveLinesSales(
            ReceiveControl,FastReceiveLineTmp,PerSourceID,IncludeFullyShippedLines,
            TypeFilter,NoFilter,VariantCodeFilter);
        DATABASE::"Purchase Header":
          UpdateFastReceiveLinesPurchase(
            ReceiveControl,FastReceiveLineTmp,PerSourceID,IncludeFullyShippedLines,
            TypeFilter,NoFilter,VariantCodeFilter);
        DATABASE::"Transfer Header":
          UpdateFastReceiveLinesTransfer(
            ReceiveControl,FastReceiveLineTmp,PerSourceID,IncludeFullyShippedLines,
            TypeFilter,NoFilter,VariantCodeFilter);
        ELSE
          ReceiveControl.ErrorUnknownSourceType2;
      END;

      IF OnlyCalculateQtyToReceive THEN
        EXIT;

      IF FastReceiveLineTmp.FIND('-') THEN
        REPEAT
          ReceiveLine.RESET;
          ReceiveLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID","No.","Variant Code");
          ReceiveLine.SETRANGE("Source Type",ReceiveControl."Source Type");
          ReceiveLine.SETRANGE("Source Subtype",ReceiveControl."Source Subtype");
          IF FastReceiveLineTmp."From Source ID" <> '' THEN
            ReceiveLine.SETRANGE("Source ID",FastReceiveLineTmp."From Source ID")
          ELSE
            IF ReceiveControl."Multi Document Receive" THEN
              ReceiveLine.SETFILTER("Source ID",ReceiveControl."Multi Document No.")
            ELSE
              ReceiveLine.SETRANGE("Source ID",ReceiveControl."Source ID");
          ReceiveLine.SETRANGE(Type,FastReceiveLineTmp.Type);
          ReceiveLine.SETRANGE("No.",FastReceiveLineTmp."No.");
          ReceiveLine.SETRANGE("Variant Code",FastReceiveLineTmp."Variant Code");
          IF ReceiveSetup."Location Receiving" THEN
            ReceiveLine.SETRANGE("Location Code",ReceiveStation."Location Code");
          ReceiveLine.CALCSUMS("Quantity (Base)");

          IF FastReceiveLineTmp."Qty. to Rec. Unit of Meas Code" = '' THEN BEGIN
            FastReceiveLineTmp."Qty. to Rec. Unit of Meas Code" :=
              FastReceiveLineTmp."Unit of Measure Code";
            FastReceiveLineTmp."Qty. to Rec. per Unit of Meas." :=
              FastReceiveLineTmp."Qty. per Unit of Measure";
          END;

          FastReceiveLineTmp."Qty. Received (Base)" := ReceiveLine."Quantity (Base)";
          FastReceiveLineTmp."Rem. Qty. to Receive (Base)" :=
            FastReceiveLineTmp."Qty. on Order (Base)" - FastReceiveLineTmp."Qty. Received (Base)";

          FastReceiveLineTmp.UpdateReceivedQty;

          IF (FastReceiveLineTmp."Rem. Qty. to Receive (Base)" = 0) AND (NoFilter = '') THEN
            FastReceiveLineTmp.DELETE
          ELSE
            FastReceiveLineTmp.MODIFY;
        UNTIL FastReceiveLineTmp.NEXT = 0;
    END;

    PROCEDURE UpdateFastReceiveLinesSales@29(VAR ReceiveControl@1240030000 : Record 14000611;VAR FastReceiveLineTmp@1240030001 : Record 14000609;PerSourceID@1240030002 : Boolean;IncludeFullyShippedLines@1240030014 : Boolean;TypeFilter@1240030003 : Integer;NoFilter@1240030004 : Code[20];VariantCodeFilter@1240030005 : Code[10]);
    VAR
      SalesLine@1240030006 : Record 37;
      Item@1240030007 : Record 27;
      ItemUnitOfMeasure@1240030009 : Record 5404;
      EShipTrackingCode@1240030010 : Record 14000721;
      LineQtyToReceive@1240030011 : Decimal;
      LineQtyToReceiveBase@1240030012 : Decimal;
      SourceID@1240030013 : Code[20];
    BEGIN
      TestInitialized;
      FastReceiveLineTmp.RESET;
      FastReceiveLineTmp.DELETEALL;

      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type",ReceiveControl."Source Subtype");
      IF ReceiveControl."Multi Document Receive" THEN
        SalesLine.SETFILTER("Document No.",ReceiveControl."Multi Document No.")
      ELSE
        SalesLine.SETRANGE("Document No.",ReceiveControl."Source ID");
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      SalesLine.SETRANGE("Drop Shipment",FALSE);
      IF NOT IncludeFullyShippedLines THEN
        SalesLine.SETFILTER("Outstanding Quantity",'<>0');
      IF ReceiveSetup."Location Receiving" THEN
        SalesLine.SETRANGE("Location Code",ReceiveStation."Location Code");
      IF NoFilter <> '' THEN BEGIN
        SalesLine.SETRANGE(Type,TypeFilter);
        SalesLine.SETRANGE("No.",NoFilter);
        SalesLine.SETRANGE("Variant Code",VariantCodeFilter);
      END;
      IF SalesLine.FIND('-') THEN BEGIN
        REPEAT
          // Additional code required in Attain
          IF ReceiveSetup."Qty. to Receive as" = ReceiveSetup."Qty. to Receive as"::"Outstanding Quantity" THEN BEGIN
            LineQtyToReceive := SalesLine."Outstanding Quantity";
            LineQtyToReceiveBase := SalesLine."Outstanding Qty. (Base)";
          END ELSE BEGIN
            IF SalesLine."Document Type" = SalesLine."Document Type"::"Return Order" THEN BEGIN
              LineQtyToReceive := SalesLine."Return Qty. to Receive";
              LineQtyToReceiveBase := SalesLine."Return Qty. to Receive (Base)";
            END ELSE BEGIN
              LineQtyToReceive := SalesLine."Outstanding Quantity";
              LineQtyToReceiveBase := SalesLine."Outstanding Qty. (Base)";
            END;
          END;

          IF (LineQtyToReceiveBase <> 0) OR IncludeFullyShippedLines THEN BEGIN
            IF PerSourceID THEN
              SourceID := SalesLine."Document No."
            ELSE
              SourceID := '';

            IF NOT FastReceiveLineTmp.GET(
                     SalesLine.Type,SalesLine."No.",SalesLine."Variant Code",SourceID)
            THEN BEGIN
              FastReceiveLineTmp.INIT;
              FastReceiveLineTmp."Line Location Code" := SalesLine."Location Code";
              FastReceiveLineTmp."Single Location" := TRUE;
            END ELSE
              IF FastReceiveLineTmp."Line Location Code" <> SalesLine."Location Code" THEN BEGIN
                FastReceiveLineTmp."Line Location Code" := '';
                FastReceiveLineTmp."Single Location" := FALSE;
              END;

            FastReceiveLineTmp.Type := SalesLine.Type;
            FastReceiveLineTmp."No." := SalesLine."No.";
            FastReceiveLineTmp."Variant Code" := SalesLine."Variant Code";
            FastReceiveLineTmp."From Source ID" := SourceID;
            FastReceiveLineTmp.Description := SalesLine.Description;
            FastReceiveLineTmp."Source Type" := ReceiveControl."Source Type";
            FastReceiveLineTmp."Source Subtype" := ReceiveControl."Source Subtype";
            FastReceiveLineTmp."Source ID" := ReceiveControl."Source ID";
            CASE FastReceiveLineTmp.Type OF
              FastReceiveLineTmp.Type::Item:
                BEGIN
                  Item.GET(SalesLine."No.");
                  EShipTrackingCode.GetEShipTrackingCodeItem(Item);
                  FastReceiveLineTmp."Receive Serial Number" := EShipTrackingCode."Receive Serial Number";
                  FastReceiveLineTmp."Receive Lot Number" := EShipTrackingCode."Receive Lot Number";
                  FastReceiveLineTmp."Receive Warranty Date" := EShipTrackingCode."Receive Warranty Date";
                  FastReceiveLineTmp."Receive Expiration Date" := EShipTrackingCode."Receive Expiration Date";
                  FastReceiveLineTmp."Show Serial No. Info. Card" :=
                    EShipTrackingCode."Show Serial No. Info. Card";
                  FastReceiveLineTmp."Show Lot No. Info. Card" :=
                    EShipTrackingCode."Show Lot No. Info. Card";
                  FastReceiveLineTmp."Net Weight" := Item."Net Weight";
                  FastReceiveLineTmp."Gross Weight" := Item."Gross Weight";
                  FastReceiveLineTmp."Dimmed Weight" := Item."Dimmed Weight";
                  FastReceiveLineTmp."Unit Volume" := Item."Unit Volume";
                  FastReceiveLineTmp."Units per Parcel" := Item."Units per Parcel";

                  IF (FastReceiveLineTmp."Unit of Measure Code" <> SalesLine."Unit of Measure Code") AND
                     (FastReceiveLineTmp."Unit of Measure Code" <> '')
                  THEN BEGIN
                    ItemUnitOfMeasure.RESET;
                    ItemUnitOfMeasure.SETRANGE("Item No.",SalesLine."No.");
                    ItemUnitOfMeasure.SETRANGE("Qty. per Unit of Measure",1);
                    IF NOT ItemUnitOfMeasure.FIND('-') THEN
                      ERROR(Text069,SalesLine."No.");
                    FastReceiveLineTmp."Unit of Measure Code" := ItemUnitOfMeasure.Code;
                    FastReceiveLineTmp."Qty. per Unit of Measure" := 1;
                    FastReceiveLineTmp.Quantity :=
                      FastReceiveLineTmp."Quantity (Base)" + SalesLine."Quantity (Base)";
                    FastReceiveLineTmp."Qty. on Order" :=
                      FastReceiveLineTmp."Qty. on Order (Base)" + LineQtyToReceiveBase;
                    FastReceiveLineTmp."Outstanding Quantity" :=
                      FastReceiveLineTmp."Outstanding Qty. (Base)" +
                      SalesLine."Outstanding Qty. (Base)";
                  END ELSE BEGIN
                    FastReceiveLineTmp."Unit of Measure Code" := SalesLine."Unit of Measure Code";
                    FastReceiveLineTmp."Qty. per Unit of Measure" :=
                      SalesLine."Qty. per Unit of Measure";
                    FastReceiveLineTmp.Quantity :=
                      FastReceiveLineTmp.Quantity + SalesLine.Quantity;
                    FastReceiveLineTmp."Qty. on Order" :=
                      FastReceiveLineTmp."Qty. on Order" + LineQtyToReceive;
                    FastReceiveLineTmp."Outstanding Quantity" :=
                      FastReceiveLineTmp."Outstanding Quantity" + SalesLine."Outstanding Quantity";
                  END;
                END;
              ELSE
                BEGIN
                  FastReceiveLineTmp.Quantity :=
                    FastReceiveLineTmp.Quantity + SalesLine.Quantity;
                  FastReceiveLineTmp."Qty. on Order" :=
                    FastReceiveLineTmp."Qty. on Order" + LineQtyToReceive;
                  FastReceiveLineTmp."Outstanding Quantity" :=
                    FastReceiveLineTmp."Outstanding Quantity" + SalesLine."Outstanding Quantity";
                END;
            END;

            FastReceiveLineTmp."Quantity (Base)" :=
              FastReceiveLineTmp."Quantity (Base)" + SalesLine."Quantity (Base)";
            FastReceiveLineTmp."Qty. on Order (Base)" :=
              FastReceiveLineTmp."Qty. on Order (Base)" + LineQtyToReceiveBase;
            FastReceiveLineTmp."Outstanding Qty. (Base)" :=
              FastReceiveLineTmp."Outstanding Qty. (Base)" + SalesLine."Outstanding Qty. (Base)";

            IF NOT FastReceiveLineTmp.INSERT THEN
              FastReceiveLineTmp.MODIFY;
          END;
        UNTIL SalesLine.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateFastReceiveLinesPurchase@31(VAR ReceiveControl@1240030000 : Record 14000611;VAR FastReceiveLineTmp@1240030001 : Record 14000609;PerSourceID@1240030002 : Boolean;IncludeFullyShippedLines@1240030013 : Boolean;TypeFilter@1240030003 : Integer;NoFilter@1240030004 : Code[20];VariantCodeFilter@1240030005 : Code[10]);
    VAR
      PurchLine@1240030006 : Record 39;
      Item@1240030007 : Record 27;
      ItemUnitOfMeasure@1240030008 : Record 5404;
      EShipTrackingCode@1240030009 : Record 14000721;
      LineQtyToReceive@1240030010 : Decimal;
      LineQtyToReceiveBase@1240030011 : Decimal;
      SourceID@1240030012 : Code[20];
    BEGIN
      TestInitialized;
      FastReceiveLineTmp.RESET;
      FastReceiveLineTmp.DELETEALL;

      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type",ReceiveControl."Source Subtype");
      IF ReceiveControl."Multi Document Receive" THEN
        PurchLine.SETFILTER("Document No.",ReceiveControl."Multi Document No.")
      ELSE
        PurchLine.SETRANGE("Document No.",ReceiveControl."Source ID");
      PurchLine.SETRANGE(Type,PurchLine.Type::Item);
      PurchLine.SETRANGE("Drop Shipment",FALSE);
      IF NOT IncludeFullyShippedLines THEN
        PurchLine.SETFILTER("Outstanding Quantity",'<>0');
      IF ReceiveSetup."Location Receiving" THEN
        PurchLine.SETRANGE("Location Code",ReceiveStation."Location Code");
      IF NoFilter <> '' THEN BEGIN
        PurchLine.SETRANGE(Type,TypeFilter);
        PurchLine.SETRANGE("No.",NoFilter);
        PurchLine.SETRANGE("Variant Code",VariantCodeFilter);
      END;
      IF PurchLine.FIND('-') THEN BEGIN
        REPEAT
          // Additional code required in Attain
          IF ReceiveSetup."Qty. to Receive as" = ReceiveSetup."Qty. to Receive as"::"Outstanding Quantity" THEN BEGIN
            LineQtyToReceive := PurchLine."Outstanding Quantity";
            LineQtyToReceiveBase := PurchLine."Outstanding Qty. (Base)";
          END ELSE BEGIN
            LineQtyToReceive := PurchLine."Qty. to Receive";
            LineQtyToReceiveBase := PurchLine."Qty. to Receive (Base)";
          END;

          IF ReceiveSetup."Receive Subcontracting Order" THEN BEGIN
            IF PurchLine."Prod. Order No." <> '' THEN BEGIN
              ItemUnitOfMeasure.GET(
                PurchLine."No.",PurchLine."Unit of Measure Code");
              IF ReceiveSetup."Qty. to Receive as" =
                 ReceiveSetup."Qty. to Receive as"::"Outstanding Quantity"
              THEN
                LineQtyToReceiveBase :=
                  PurchLine."Outstanding Quantity" * ItemUnitOfMeasure."Qty. per Unit of Measure"
              ELSE
                LineQtyToReceiveBase :=
                  PurchLine."Qty. to Receive" * ItemUnitOfMeasure."Qty. per Unit of Measure";
            END;
          END;

          IF (LineQtyToReceiveBase <> 0) OR IncludeFullyShippedLines THEN BEGIN
            IF PerSourceID THEN
              SourceID := PurchLine."Document No."
            ELSE
              SourceID := '';

            IF NOT FastReceiveLineTmp.GET(
                     PurchLine.Type,PurchLine."No.",PurchLine."Variant Code",SourceID)
            THEN BEGIN
              FastReceiveLineTmp.INIT;
              FastReceiveLineTmp."Line Location Code" := PurchLine."Location Code";
              FastReceiveLineTmp."Single Location" := TRUE;
            END ELSE
              IF FastReceiveLineTmp."Line Location Code" <> PurchLine."Location Code" THEN BEGIN
                FastReceiveLineTmp."Line Location Code" := '';
                FastReceiveLineTmp."Single Location" := FALSE;
              END;

            FastReceiveLineTmp.Type := PurchLine.Type;
            FastReceiveLineTmp."No." := PurchLine."No.";
            FastReceiveLineTmp."Variant Code" := PurchLine."Variant Code";
            FastReceiveLineTmp."From Source ID" := SourceID;
            FastReceiveLineTmp.Description := PurchLine.Description;
            FastReceiveLineTmp."Source Type" := ReceiveControl."Source Type";
            FastReceiveLineTmp."Source Subtype" := ReceiveControl."Source Subtype";
            FastReceiveLineTmp."Source ID" := ReceiveControl."Source ID";
            //<TPZ1626>
            FastReceiveLineTmp."Vendor Item No." := PurchLine."Vendor Item No.";
            //</TPZ1626>

            CASE FastReceiveLineTmp.Type OF
              FastReceiveLineTmp.Type::Item:
                BEGIN
                  Item.GET(PurchLine."No.");
                  EShipTrackingCode.GetEShipTrackingCodeItem(Item);
                  FastReceiveLineTmp."Receive Serial Number" := EShipTrackingCode."Receive Serial Number";
                  FastReceiveLineTmp."Receive Lot Number" := EShipTrackingCode."Receive Lot Number";
                  FastReceiveLineTmp."Receive Warranty Date" := EShipTrackingCode."Receive Warranty Date";
                  FastReceiveLineTmp."Receive Expiration Date" := EShipTrackingCode."Receive Expiration Date";
                  FastReceiveLineTmp."Show Serial No. Info. Card" :=
                    EShipTrackingCode."Show Serial No. Info. Card";
                  FastReceiveLineTmp."Show Lot No. Info. Card" :=
                    EShipTrackingCode."Show Lot No. Info. Card";
                  FastReceiveLineTmp."Net Weight" := Item."Net Weight";
                  FastReceiveLineTmp."Gross Weight" := Item."Gross Weight";
                  FastReceiveLineTmp."Dimmed Weight" := Item."Dimmed Weight";
                  FastReceiveLineTmp."Unit Volume" := Item."Unit Volume";
                  FastReceiveLineTmp."Units per Parcel" := Item."Units per Parcel";
                  //<TPZ1626>
                  IF FastReceiveLineTmp."Vendor Item No." = '' THEN
                    FastReceiveLineTmp."Vendor Item No." := Item."Vendor Item No.";
                  //</TPZ1626>

                  IF (FastReceiveLineTmp."Unit of Measure Code" <> PurchLine."Unit of Measure Code") AND
                     (FastReceiveLineTmp."Unit of Measure Code" <> '')
                  THEN BEGIN
                    ItemUnitOfMeasure.RESET;
                    ItemUnitOfMeasure.SETRANGE("Item No.",PurchLine."No.");
                    ItemUnitOfMeasure.SETRANGE("Qty. per Unit of Measure",1);
                    IF NOT ItemUnitOfMeasure.FIND('-') THEN
                      ERROR(Text069,PurchLine."No.");
                    FastReceiveLineTmp."Unit of Measure Code" := ItemUnitOfMeasure.Code;
                    FastReceiveLineTmp."Qty. per Unit of Measure" := 1;
                    FastReceiveLineTmp.Quantity :=
                      FastReceiveLineTmp."Quantity (Base)" + PurchLine."Quantity (Base)";
                    FastReceiveLineTmp."Qty. on Order" :=
                      FastReceiveLineTmp."Qty. on Order (Base)" + LineQtyToReceiveBase;
                    FastReceiveLineTmp."Outstanding Quantity" :=
                      FastReceiveLineTmp."Outstanding Qty. (Base)" +
                      PurchLine."Outstanding Qty. (Base)";
                  END ELSE BEGIN
                    FastReceiveLineTmp."Unit of Measure Code" := PurchLine."Unit of Measure Code";
                    FastReceiveLineTmp."Qty. per Unit of Measure" :=
                      PurchLine."Qty. per Unit of Measure";
                    FastReceiveLineTmp.Quantity :=
                      FastReceiveLineTmp.Quantity + PurchLine.Quantity;
                    FastReceiveLineTmp."Qty. on Order" :=
                      FastReceiveLineTmp."Qty. on Order" + LineQtyToReceive;
                    FastReceiveLineTmp."Outstanding Quantity" :=
                      FastReceiveLineTmp."Outstanding Quantity" + PurchLine."Outstanding Quantity";
                  END;
                END;
              ELSE
                BEGIN
                  FastReceiveLineTmp.Quantity :=
                    FastReceiveLineTmp.Quantity + PurchLine.Quantity;
                  FastReceiveLineTmp."Qty. on Order" :=
                    FastReceiveLineTmp."Qty. on Order" + LineQtyToReceive;
                  FastReceiveLineTmp."Outstanding Quantity" :=
                    FastReceiveLineTmp."Outstanding Quantity" + PurchLine."Outstanding Quantity";
                END;
            END;

            FastReceiveLineTmp."Quantity (Base)" :=
              FastReceiveLineTmp."Quantity (Base)" + PurchLine."Quantity (Base)";
            FastReceiveLineTmp."Qty. on Order (Base)" :=
              FastReceiveLineTmp."Qty. on Order (Base)" + LineQtyToReceiveBase;
            FastReceiveLineTmp."Outstanding Qty. (Base)" :=
              FastReceiveLineTmp."Outstanding Qty. (Base)" + PurchLine."Outstanding Qty. (Base)";

            IF NOT FastReceiveLineTmp.INSERT THEN
              FastReceiveLineTmp.MODIFY;
          END;
        UNTIL PurchLine.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateFastReceiveLinesTransfer@1240030001(VAR ReceiveControl@1240030000 : Record 14000611;VAR FastReceiveLineTmp@1240030001 : Record 14000609;PerSourceID@1240030002 : Boolean;IncludeFullyShippedLines@1240030013 : Boolean;TypeFilter@1240030003 : Integer;NoFilter@1240030004 : Code[20];VariantCodeFilter@1240030005 : Code[10]);
    VAR
      TransferLine@1240030006 : Record 5741;
      Item@1240030007 : Record 27;
      ItemUnitOfMeasure@1240030008 : Record 5404;
      EShipTrackingCode@1240030009 : Record 14000721;
      LineQtyToReceive@1240030010 : Decimal;
      LineQtyToReceiveBase@1240030011 : Decimal;
      SourceID@1240030012 : Code[20];
    BEGIN
      TestInitialized;
      FastReceiveLineTmp.RESET;
      FastReceiveLineTmp.DELETEALL;

      TransferLine.RESET;
      IF ReceiveControl."Multi Document Receive" THEN
        TransferLine.SETFILTER("Document No.",ReceiveControl."Multi Document No.")
      ELSE
        TransferLine.SETRANGE("Document No.",ReceiveControl."Source ID");
      IF NOT IncludeFullyShippedLines THEN
        TransferLine.SETFILTER("Qty. in Transit",'<>0');
      IF ReceiveSetup."Location Receiving" THEN
        TransferLine.SETRANGE("Transfer-to Code",ReceiveStation."Location Code");
      IF NoFilter <> '' THEN BEGIN
        TransferLine.SETRANGE("Item No.",NoFilter);
        TransferLine.SETRANGE("Variant Code",VariantCodeFilter);
      END;
      TransferLine.SETRANGE("Derived From Line No.",0);
      IF TransferLine.FIND('-') THEN BEGIN
        REPEAT
          // Additional code required in Attain
          IF ReceiveSetup."Qty. to Receive as" = ReceiveSetup."Qty. to Receive as"::"Outstanding Quantity" THEN BEGIN
            LineQtyToReceive := TransferLine."Qty. in Transit";
            LineQtyToReceiveBase := TransferLine."Qty. in Transit (Base)";
          END ELSE BEGIN
            LineQtyToReceive := TransferLine."Qty. to Receive";
            LineQtyToReceiveBase := TransferLine."Qty. to Receive (Base)";
          END;

          IF (LineQtyToReceiveBase <> 0) OR IncludeFullyShippedLines THEN BEGIN
            IF PerSourceID THEN
              SourceID := TransferLine."Document No."
            ELSE
              SourceID := '';

            IF NOT FastReceiveLineTmp.GET(
                     FastReceiveLineTmp.Type::Item,TransferLine."Item No.",TransferLine."Variant Code",SourceID)
            THEN BEGIN
              FastReceiveLineTmp.INIT;
              FastReceiveLineTmp."Line Location Code" := TransferLine."Transfer-to Code";
              FastReceiveLineTmp."Single Location" := TRUE;
            END ELSE
              IF FastReceiveLineTmp."Line Location Code" <> TransferLine."Transfer-to Code" THEN BEGIN
                FastReceiveLineTmp."Line Location Code" := '';
                FastReceiveLineTmp."Single Location" := FALSE;
              END;

            FastReceiveLineTmp.Type := FastReceiveLineTmp.Type::Item;
            FastReceiveLineTmp."No." := TransferLine."Item No.";
            FastReceiveLineTmp."Variant Code" := TransferLine."Variant Code";
            FastReceiveLineTmp."From Source ID" := SourceID;
            FastReceiveLineTmp.Description := TransferLine.Description;
            FastReceiveLineTmp."Source Type" := ReceiveControl."Source Type";
            FastReceiveLineTmp."Source Subtype" := ReceiveControl."Source Subtype";
            FastReceiveLineTmp."Source ID" := ReceiveControl."Source ID";
            CASE FastReceiveLineTmp.Type OF
              FastReceiveLineTmp.Type::Item:
                BEGIN
                  Item.GET(TransferLine."Item No.");
                  EShipTrackingCode.GetEShipTrackingCodeItem(Item);
                  FastReceiveLineTmp."Receive Serial Number" := EShipTrackingCode."Receive Serial Number";
                  FastReceiveLineTmp."Receive Lot Number" := EShipTrackingCode."Receive Lot Number";
                  FastReceiveLineTmp."Receive Warranty Date" := EShipTrackingCode."Receive Warranty Date";
                  FastReceiveLineTmp."Receive Expiration Date" := EShipTrackingCode."Receive Expiration Date";
                  FastReceiveLineTmp."Show Serial No. Info. Card" :=
                    EShipTrackingCode."Show Serial No. Info. Card";
                  FastReceiveLineTmp."Show Lot No. Info. Card" :=
                    EShipTrackingCode."Show Lot No. Info. Card";
                  FastReceiveLineTmp."Net Weight" := Item."Net Weight";
                  FastReceiveLineTmp."Gross Weight" := Item."Gross Weight";
                  FastReceiveLineTmp."Dimmed Weight" := Item."Dimmed Weight";
                  FastReceiveLineTmp."Unit Volume" := Item."Unit Volume";
                  FastReceiveLineTmp."Units per Parcel" := Item."Units per Parcel";

                  IF (FastReceiveLineTmp."Unit of Measure Code" <> TransferLine."Unit of Measure Code") AND
                     (FastReceiveLineTmp."Unit of Measure Code" <> '')
                  THEN BEGIN
                    ItemUnitOfMeasure.RESET;
                    ItemUnitOfMeasure.SETRANGE("Item No.",TransferLine."Item No.");
                    ItemUnitOfMeasure.SETRANGE("Qty. per Unit of Measure",1);
                    IF NOT ItemUnitOfMeasure.FIND('-') THEN
                      ERROR(Text069,TransferLine."Item No.");
                    FastReceiveLineTmp."Unit of Measure Code" := ItemUnitOfMeasure.Code;
                    FastReceiveLineTmp."Qty. per Unit of Measure" := 1;
                    FastReceiveLineTmp.Quantity :=
                      FastReceiveLineTmp."Quantity (Base)" + TransferLine."Quantity (Base)";
                    FastReceiveLineTmp."Qty. on Order" :=
                      FastReceiveLineTmp."Qty. on Order (Base)" + LineQtyToReceiveBase;
                    FastReceiveLineTmp."Outstanding Quantity" :=
                      FastReceiveLineTmp."Outstanding Qty. (Base)" +
                      TransferLine."Qty. in Transit (Base)";
                  END ELSE BEGIN
                    FastReceiveLineTmp."Unit of Measure Code" := TransferLine."Unit of Measure Code";
                    FastReceiveLineTmp."Qty. per Unit of Measure" :=
                      TransferLine."Qty. per Unit of Measure";
                    FastReceiveLineTmp.Quantity :=
                      FastReceiveLineTmp.Quantity + TransferLine.Quantity;
                    FastReceiveLineTmp."Qty. on Order" :=
                      FastReceiveLineTmp."Qty. on Order" + LineQtyToReceive;
                    FastReceiveLineTmp."Outstanding Quantity" :=
                      FastReceiveLineTmp."Outstanding Quantity" + TransferLine."Qty. in Transit";
                  END;
                END;
              ELSE
                BEGIN
                  FastReceiveLineTmp.Quantity :=
                    FastReceiveLineTmp.Quantity + TransferLine.Quantity;
                  FastReceiveLineTmp."Qty. on Order" :=
                    FastReceiveLineTmp."Qty. on Order" + LineQtyToReceive;
                  FastReceiveLineTmp."Outstanding Quantity" :=
                    FastReceiveLineTmp."Outstanding Quantity" + TransferLine."Qty. in Transit";
                END;
            END;

            FastReceiveLineTmp."Quantity (Base)" :=
              FastReceiveLineTmp."Quantity (Base)" + TransferLine."Quantity (Base)";
            FastReceiveLineTmp."Qty. on Order (Base)" :=
              FastReceiveLineTmp."Qty. on Order (Base)" + LineQtyToReceiveBase;
            FastReceiveLineTmp."Outstanding Qty. (Base)" :=
              FastReceiveLineTmp."Outstanding Qty. (Base)" + TransferLine."Qty. in Transit (Base)";

            IF NOT FastReceiveLineTmp.INSERT THEN
              FastReceiveLineTmp.MODIFY;
          END;
        UNTIL TransferLine.NEXT = 0;
      END;
    END;

    PROCEDURE MultiDocReceive@14(VAR ReceiveControl@1240030000 : Record 14000611;UseLookup@1240030001 : Boolean) : Boolean;
    VAR
      SalesHeader@1240030002 : Record 36;
      PurchHeader@1240030003 : Record 38;
      TransferHeader@1240030007 : Record 5740;
      ReceiveControl2@1240030004 : Record 14000611;
      Receive@1240030005 : Record 14000601;
      ReceiveInput@1240030008 : Record 14000615;
      EReceiveEnterDocumentNo@1240030009 : Page 14050059;
      NewOrderNo@1240030006 : Code[20];
    BEGIN
      TestInitialized;

      IF ReceiveControl."Auto Create Document" THEN BEGIN
        ReceiveControl."Error Message" := Text032;
        EXIT(FALSE);
      END;

      Receive.RESET;
      Receive.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Receive.SETRANGE("Source Type",ReceiveControl."Source Type");
      Receive.SETRANGE("Source Subtype",ReceiveControl."Source Subtype");
      IF ReceiveControl."Multi Document Receive" THEN
        Receive.SETFILTER("Source ID",ReceiveControl."Multi Document No.")
      ELSE
        Receive.SETRANGE("Source ID",ReceiveControl."Source ID");
      Receive.SETRANGE(Closed,FALSE);
      IF ReceiveSetup."Location Receiving" THEN
        Receive.SETRANGE("Location Code",ReceiveStation."Location Code");
      IF Receive.FIND('-') THEN BEGIN
        ReceiveControl."Error Message" := Text070;
        EXIT(FALSE);
      END;

      IF NOT UseLookup THEN BEGIN
        CLEAR(ReceiveInput);
        ReceiveInput."Source Type" := ReceiveControl."Source Type";
        ReceiveInput."Source Subtype" := ReceiveControl."Source Subtype";
        ReceiveInput."Source ID" := ReceiveControl."Source ID";
        ReceiveInput."Multi Document No." := ReceiveControl."Multi Document No.";

        CLEAR(EReceiveEnterDocumentNo);
        EReceiveEnterDocumentNo.LOOKUPMODE(TRUE);
        EReceiveEnterDocumentNo.SetReceiveInput(ReceiveInput);
        IF EReceiveEnterDocumentNo.RUNMODAL = ACTION::LookupOK THEN BEGIN
        EReceiveEnterDocumentNo.GetReceiveInput(ReceiveInput);
        NewOrderNo := ReceiveInput."Document No.";
        END ELSE BEGIN
          ReceiveControl."Error Message" := Text072;
          EXIT(FALSE);
        END;

        IF (NewOrderNo = '') OR (COPYSTR(NewOrderNo,1,2) = '//') THEN BEGIN
          ReceiveControl."Error Message" := Text072;
          EXIT(FALSE);
        END;
      END;

      CASE ReceiveControl."Source Type" OF
        DATABASE::"Sales Header":
          BEGIN
            IF UseLookup THEN BEGIN
              SalesHeader.RESET;
              SalesHeader.SETRANGE("Document Type",ReceiveControl."Source Subtype");
              IF ReceiveControl."Multi Document Receive" THEN
                SalesHeader.SETFILTER("No.",ReceiveControl.ReverseMultiDocNoFilter)
              ELSE
                SalesHeader.SETFILTER("No.",'<>%1',ReceiveControl."Source ID");
              SalesHeader.SETRANGE("Sell-to Customer No.",ReceiveControl."Ship-from No.");
              SalesHeader.SETRANGE("Ship-to Code",ReceiveControl."Ship-from Code");
              SalesHeader.SETRANGE("Ship-to Name",ReceiveControl."Ship-from Name");
              SalesHeader.SETRANGE("Ship-to Address",ReceiveControl."Ship-from Address");
              SalesHeader.SETRANGE("Ship-to Address 2",ReceiveControl."Ship-from Address 2");
              SalesHeader.SETRANGE("Ship-to City",ReceiveControl."Ship-from City");
              SalesHeader.SETRANGE("Ship-to Contact",ReceiveControl."Ship-from Contact");
              SalesHeader.SETRANGE("Ship-to Post Code",ReceiveControl."Ship-from ZIP Code");
              SalesHeader.SETRANGE("Ship-to County",ReceiveControl."Ship-from State");
              SalesHeader.SETRANGE("Ship-to Country/Region Code",ReceiveControl."Ship-from Country Code");
              IF NOT SalesHeader.FIND('-') THEN BEGIN
                ReceiveControl."Error Message" := Text073;
                EXIT(FALSE);
              END;

              IF NOT (PAGE.RUNMODAL(0,SalesHeader) = ACTION::LookupOK) THEN BEGIN
                ReceiveControl."Error Message" := Text074;
                EXIT(FALSE);
              END ELSE
                NewOrderNo := SalesHeader."No.";
            END;

            IF NOT SalesHeader.GET(ReceiveControl."Source Subtype",NewOrderNo) THEN BEGIN
              ReceiveControl."Error Message" := STRSUBSTNO(Text075,NewOrderNo);
              EXIT(FALSE);
            END;

            ReceiveControl2.TransferFromSalesHeader(SalesHeader);
          END;
        DATABASE::"Purchase Header":
          BEGIN
            IF UseLookup THEN BEGIN
              PurchHeader.RESET;
              PurchHeader.SETRANGE("Document Type",ReceiveControl."Source Subtype");
              IF ReceiveControl."Multi Document Receive" THEN
                PurchHeader.SETFILTER("No.",ReceiveControl.ReverseMultiDocNoFilter)
              ELSE
                PurchHeader.SETFILTER("No.",'<>%1',ReceiveControl."Source ID");
              PurchHeader.SETRANGE("Buy-from Vendor No.",ReceiveControl."Ship-from No.");
              PurchHeader.SETRANGE("Order Address Code",ReceiveControl."Ship-from Code");
              PurchHeader.SETRANGE("Buy-from Vendor Name",ReceiveControl."Ship-from Name");
              PurchHeader.SETRANGE("Buy-from Address",ReceiveControl."Ship-from Address");
              PurchHeader.SETRANGE("Buy-from Address 2",ReceiveControl."Ship-from Address 2");
              PurchHeader.SETRANGE("Buy-from City",ReceiveControl."Ship-from City");
              PurchHeader.SETRANGE("Buy-from Contact",ReceiveControl."Ship-from Contact");
              PurchHeader.SETRANGE("Buy-from Post Code",ReceiveControl."Ship-from ZIP Code");
              PurchHeader.SETRANGE("Buy-from County",ReceiveControl."Ship-from State");
              PurchHeader.SETRANGE("Buy-from Country/Region Code",ReceiveControl."Ship-from Country Code");
              IF NOT PurchHeader.FIND('-') THEN BEGIN
                ReceiveControl."Error Message" := Text073;
                EXIT(FALSE);
              END;

              IF NOT (PAGE.RUNMODAL(0,PurchHeader) = ACTION::LookupOK) THEN BEGIN
                ReceiveControl."Error Message" := Text074;
                EXIT(FALSE);
              END ELSE
                NewOrderNo := PurchHeader."No.";
            END;

            IF NOT PurchHeader.GET(ReceiveControl."Source Subtype",NewOrderNo) THEN BEGIN
              ReceiveControl."Error Message" := STRSUBSTNO(Text075,NewOrderNo);
              EXIT(FALSE);
            END;

            ReceiveControl2.TransferFromPurchHeader(PurchHeader);
          END;
        DATABASE::"Transfer Header":
          BEGIN
            IF UseLookup THEN BEGIN
              TransferHeader.RESET;
              IF ReceiveControl."Multi Document Receive" THEN
                TransferHeader.SETFILTER("No.",ReceiveControl.ReverseMultiDocNoFilter)
              ELSE
                TransferHeader.SETFILTER("No.",'<>%1',ReceiveControl."Source ID");
              TransferHeader.SETRANGE("Transfer-from Code",ReceiveControl."Ship-from No.");
              TransferHeader.SETRANGE("Transfer-from Name",ReceiveControl."Ship-from Name");
              TransferHeader.SETRANGE("Transfer-from Address",ReceiveControl."Ship-from Address");
              TransferHeader.SETRANGE("Transfer-from Address 2",ReceiveControl."Ship-from Address 2");
              TransferHeader.SETRANGE("Transfer-from City",ReceiveControl."Ship-from City");
              TransferHeader.SETRANGE("Transfer-from Contact",ReceiveControl."Ship-from Contact");
              TransferHeader.SETRANGE("Transfer-from Post Code",ReceiveControl."Ship-from ZIP Code");
              TransferHeader.SETRANGE("Transfer-from County",ReceiveControl."Ship-from State");
              TransferHeader.SETRANGE("Trsf.-from Country/Region Code",ReceiveControl."Ship-from Country Code");
              IF NOT TransferHeader.FIND('-') THEN BEGIN
                ReceiveControl."Error Message" := Text073;
                EXIT(FALSE);
              END;

              IF NOT (PAGE.RUNMODAL(0,TransferHeader) = ACTION::LookupOK) THEN BEGIN
                ReceiveControl."Error Message" := Text074;
                EXIT(FALSE);
              END ELSE
                NewOrderNo := TransferHeader."No.";
            END;

            IF NOT TransferHeader.GET(NewOrderNo) THEN BEGIN
              ReceiveControl."Error Message" := STRSUBSTNO(Text075,NewOrderNo);
              EXIT(FALSE);
            END;

            ReceiveControl2.TransferFromTransferHeader(TransferHeader);
          END;
        ELSE
          ReceiveControl.ErrorUnknownSourceType2;
      END;

      IF NOT ReceiveControl2.TestReleased2(FALSE) THEN BEGIN
        ReceiveControl."Error Message" :=
          STRSUBSTNO(Text076,ReceiveControl2.FormatSource2);
        EXIT(FALSE);
      END;

      Receive.RESET;
      Receive.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Receive.SETRANGE("Source Type",ReceiveControl."Source Type");
      Receive.SETRANGE("Source Subtype",ReceiveControl."Source Subtype");
      Receive.SETRANGE("Source ID",ReceiveControl2."Source ID");
      Receive.SETRANGE(Closed,FALSE);
      IF ReceiveSetup."Location Receiving" THEN
        Receive.SETRANGE("Location Code",ReceiveStation."Location Code");
      IF Receive.FIND('-') THEN BEGIN
        ReceiveControl."Error Message" :=
          STRSUBSTNO(Text077,ReceiveControl2.FormatSource2);
        EXIT(FALSE);
      END;

      IF (ReceiveControl."Multi Document No." = ReceiveControl2."Source ID") OR
         (STRPOS(ReceiveControl."Multi Document No.",'|' + ReceiveControl2."Source ID") <> 0) OR
         (STRPOS(ReceiveControl."Multi Document No.",ReceiveControl2."Source ID" + '|') <> 0)
      THEN BEGIN
        ReceiveControl."Error Message" := STRSUBSTNO(Text078);
        EXIT(FALSE);
      END;

      IF ReceiveControl2."Ship-from No." <> ReceiveControl."Ship-from No." THEN BEGIN
        ReceiveControl."Error Message" :=
          STRSUBSTNO(
            Text079,ReceiveControl2.FIELDNAME("Ship-from No."),
            ReceiveControl."Ship-from No.");
        EXIT(FALSE);
      END;
      IF ReceiveControl2."Ship-from Code" <> ReceiveControl."Ship-from Code" THEN BEGIN
        ReceiveControl."Error Message" :=
          STRSUBSTNO(
            Text079,ReceiveControl2.FIELDNAME("Ship-from Code"),
            ReceiveControl."Ship-from Code");
        EXIT(FALSE);
      END;
      IF ReceiveControl2."Ship-from Name" <> ReceiveControl."Ship-from Name" THEN BEGIN
        ReceiveControl."Error Message" :=
          STRSUBSTNO(
            Text079,ReceiveControl2.FIELDNAME("Ship-from Name"),
            ReceiveControl."Ship-from Name");
        EXIT(FALSE);
      END;
      IF ReceiveControl2."Ship-from Address" <> ReceiveControl."Ship-from Address" THEN BEGIN
        ReceiveControl."Error Message" :=
          STRSUBSTNO(
            Text079,ReceiveControl2.FIELDNAME("Ship-from Address"),
            ReceiveControl."Ship-from Address");
        EXIT(FALSE);
      END;
      IF ReceiveControl2."Ship-from Address 2" <> ReceiveControl."Ship-from Address 2" THEN BEGIN
        ReceiveControl."Error Message" :=
          STRSUBSTNO(
            Text079,ReceiveControl2.FIELDNAME("Ship-from Address 2"),
            ReceiveControl."Ship-from Address 2");
        EXIT(FALSE);
      END;
      IF ReceiveControl2."Ship-from City" <> ReceiveControl."Ship-from City" THEN BEGIN
        ReceiveControl."Error Message" :=
          STRSUBSTNO(
            Text079,ReceiveControl2.FIELDNAME("Ship-from City"),ReceiveControl."Ship-from City");
        EXIT(FALSE);
      END;
      IF ReceiveControl2."Ship-from Contact" <> ReceiveControl."Ship-from Contact" THEN BEGIN
        ReceiveControl."Error Message" :=
          STRSUBSTNO(
            Text079,ReceiveControl2.FIELDNAME("Ship-from Contact"),
            ReceiveControl."Ship-from Contact");
        EXIT(FALSE);
      END;
      IF ReceiveControl2."Ship-from ZIP Code" <> ReceiveControl."Ship-from ZIP Code" THEN BEGIN
        ReceiveControl."Error Message" :=
          STRSUBSTNO(
            Text079,ReceiveControl2.FIELDNAME("Ship-from ZIP Code"),
            ReceiveControl."Ship-from ZIP Code");
        EXIT(FALSE);
      END;
      IF ReceiveControl2."Ship-from State" <> ReceiveControl."Ship-from State" THEN BEGIN
        ReceiveControl."Error Message" :=
          STRSUBSTNO(
            Text079,ReceiveControl2.FIELDNAME("Ship-from State"),ReceiveControl."Ship-from State");
        EXIT(FALSE);
      END;
      IF ReceiveControl2."Ship-from Country Code" <> ReceiveControl."Ship-from Country Code" THEN BEGIN
        ReceiveControl."Error Message" :=
          STRSUBSTNO(
            Text079,ReceiveControl2.FIELDNAME("Ship-from Country Code"),
            ReceiveControl."Ship-from Country Code");
        EXIT(FALSE);
      END;

      IF ReceiveStation."Show Order Comments if Exists" THEN
        ViewDocumentComments(ReceiveControl,TRUE);

      Receiving.CombineMultiOrders(
        ReceiveControl."Source Type",ReceiveControl."Source Subtype",
        ReceiveControl."Source ID",ReceiveControl2."Source ID",
        ReceiveControl."Multi Document No.",ReceiveControl."Multi Document Receive");

      EXIT(TRUE);
    END;

    PROCEDURE SetStandardSetupOptionPage@18(VAR Receive@1240030000 : Record 14000601;StandardOptionNo@1240030001 : Code[20]);
    BEGIN
      TestInitialized;
      Receive.SetStandardSetupOptionPage(StandardOptionNo);
    END;

    PROCEDURE PrintStandardSetupOptionReport@57(VAR CurrentReceive@1240030000 : Record 14000601;VAR ReceiveControl@1240030001 : Record 14000611;StandardOptionSetup@1240030002 : Record 14000610) : Boolean;
    VAR
      SalesHeader@1240030003 : Record 36;
      PurchHeader@1240030004 : Record 38;
      TransferHeader@1240030006 : Record 5740;
      Receive@1240030005 : Record 14000601;
    BEGIN
      TestInitialized;
      IF StandardOptionSetup."Print Report ID" = 0 THEN
        EXIT;

      CASE StandardOptionSetup."Filter Report on" OF
        StandardOptionSetup."Filter Report on"::Receive:
          BEGIN
            IF CurrentReceive."No." = '' THEN BEGIN
              ReceiveControl."Error Message" := Text080;
              EXIT(FALSE);
            END;

            Receive.RESET;
            Receive := CurrentReceive;
            Receive.SETRECFILTER;
            REPORT.RUNMODAL(
              StandardOptionSetup."Print Report ID",StandardOptionSetup."Show Request Form",
              StandardOptionSetup."System Printer",Receive);
          END;
        StandardOptionSetup."Filter Report on"::Document:
          BEGIN
            IF ReceiveControl."Source ID" = '' THEN BEGIN
              ReceiveControl."Error Message" := Text081;
              EXIT(FALSE);
            END;

            CASE ReceiveControl."Source Type" OF
              DATABASE::"Sales Header":
                BEGIN
                  SalesHeader.RESET;
                  SalesHeader.SETRANGE("Document Type",ReceiveControl."Source Subtype");
                  IF ReceiveControl."Multi Document Receive" THEN
                    SalesHeader.SETFILTER("No.",ReceiveControl."Multi Document No.")
                  ELSE
                    SalesHeader.SETRANGE("No.",ReceiveControl."Source ID");
                  REPORT.RUNMODAL(
                    StandardOptionSetup."Print Report ID",StandardOptionSetup."Show Request Form",
                    StandardOptionSetup."System Printer",SalesHeader);
                END;
              DATABASE::"Purchase Header":
                BEGIN
                  PurchHeader.RESET;
                  PurchHeader.SETRANGE("Document Type",ReceiveControl."Source Subtype");
                  IF ReceiveControl."Multi Document Receive" THEN
                    PurchHeader.SETFILTER("No.",ReceiveControl."Multi Document No.")
                  ELSE
                    PurchHeader.SETRANGE("No.",ReceiveControl."Source ID");
                  REPORT.RUNMODAL(
                    StandardOptionSetup."Print Report ID",StandardOptionSetup."Show Request Form",
                    StandardOptionSetup."System Printer",PurchHeader);
                END;
              DATABASE::"Transfer Header":
                BEGIN
                  TransferHeader.RESET;
                  IF ReceiveControl."Multi Document Receive" THEN
                    TransferHeader.SETFILTER("No.",ReceiveControl."Multi Document No.")
                  ELSE
                    TransferHeader.SETRANGE("No.",ReceiveControl."Source ID");
                  REPORT.RUNMODAL(
                    StandardOptionSetup."Print Report ID",StandardOptionSetup."Show Request Form",
                    StandardOptionSetup."System Printer",TransferHeader);
                END;
              ELSE
                ReceiveControl.ErrorUnknownSourceType2;
            END;
          END;
        ELSE
          REPORT.RUNMODAL(
            StandardOptionSetup."Print Report ID",StandardOptionSetup."Show Request Form",
            StandardOptionSetup."System Printer");
      END;

      EXIT(TRUE);
    END;

    PROCEDURE GetReceiveNo@7(InputReceiveNo@1240030001 : Text[250]) ReceiveNo@1240030000 : Code[20];
    VAR
      Receive@1240030002 : Record 14000601;
    BEGIN
      TestInitialized;
      ReceiveNo := '';

      Receive.RESET;
      Receive.SETCURRENTKEY("External Tracking No.");
      Receive.SETRANGE("External Tracking No.",InputReceiveNo);
      IF ReceiveSetup."Location Receiving" THEN
        Receive.SETRANGE("Location Code",ReceiveStation."Location Code");
      IF NOT Receive.FIND('-') THEN BEGIN
        Receive.RESET;
        Receive.SETCURRENTKEY("UCC No.");
        Receive.SETRANGE("UCC No.",InputReceiveNo);
        IF ReceiveSetup."Location Receiving" THEN
          Receive.SETRANGE("Location Code",ReceiveStation."Location Code");
        IF NOT Receive.FIND('-') THEN BEGIN
          Receive.RESET;
          Receive.SETRANGE("No.",InputReceiveNo);
          IF ReceiveSetup."Location Receiving" THEN
            Receive.SETRANGE("Location Code",ReceiveStation."Location Code");
          IF NOT Receive.FIND('-') THEN BEGIN
            IF STRLEN(InputReceiveNo) < 8 THEN BEGIN
              EXIT;
            END ELSE BEGIN
              Receive.RESET;
              Receive.SETCURRENTKEY("External Tracking No.");
              Receive.SETRANGE("External Tracking No.",COPYSTR(InputReceiveNo,8)); // FedEx
              IF ReceiveSetup."Location Receiving" THEN
                Receive.SETRANGE("Location Code",ReceiveStation."Location Code");
              IF NOT Receive.FIND('-') THEN
                EXIT;
            END;
          END;
        END;
      END;

      ReceiveNo := Receive."No.";
    END;

    PROCEDURE PrintItemLabel@21(CurrentReceiveLine@1240030000 : Record 14000602);
    VAR
      ReceiveInput@1240030003 : Record 14000615;
      EReceiveNoOfCopies@1240030002 : Page 14050051;
      NoOfCopies@1240030001 : Integer;
    BEGIN
      TestInitialized;
      WITH CurrentReceiveLine DO BEGIN
        CLEAR(EReceiveNoOfCopies);
        EReceiveNoOfCopies.LOOKUPMODE(TRUE);
        IF EReceiveNoOfCopies.RUNMODAL = ACTION::LookupOK THEN BEGIN
        EReceiveNoOfCopies.GetReceiveInput(ReceiveInput);
        NoOfCopies := ReceiveInput."No. of Copies";
        END ELSE
          EXIT;

        LabelMgt.PrintReceiveLineLabel(CurrentReceiveLine,NoOfCopies,NoOfCopies,TRUE);
      END;
    END;

    PROCEDURE ViewWarehouseReceiptLines@13(VAR ReceiveControl@1240030000 : Record 14000611) : Boolean;
    VAR
      WarehouseReceiptLine@1240030001 : Record 7317;
    BEGIN
      TestInitialized;

      WarehouseReceiptLine.RESET;
      WarehouseReceiptLine.SETCURRENTKEY(
        "Source Type","Source Subtype","Source No.","Source Line No.");
      CASE ReceiveControl."Source Type" OF
        DATABASE::"Sales Header":
          WarehouseReceiptLine.SETRANGE("Source Type",DATABASE::"Sales Line");
        DATABASE::"Purchase Header":
          WarehouseReceiptLine.SETRANGE("Source Type",DATABASE::"Purchase Line");
        DATABASE::"Transfer Header":
          WarehouseReceiptLine.SETRANGE("Source Type",DATABASE::"Transfer Line");
      END;
      WarehouseReceiptLine.SETRANGE("Source Subtype",ReceiveControl."Source Subtype");
      IF ReceiveControl."Multi Document Receive" THEN
        WarehouseReceiptLine.SETFILTER("Source No.",ReceiveControl."Multi Document No.")
      ELSE
        WarehouseReceiptLine.SETRANGE("Source No.",ReceiveControl."Source ID");
      IF NOT WarehouseReceiptLine.FIND('-') THEN BEGIN
        ReceiveControl."Error Message" := Text083;
        EXIT(FALSE);
      END;

      PAGE.RUNMODAL(0,WarehouseReceiptLine);
      EXIT(TRUE);
    END;

    PROCEDURE ScanSerialLot@48(VAR ReceiveControl@1240030000 : Record 14000611;ScanAllLines@1240030001 : Boolean;HideNothingToScanError@1240030002 : Boolean) : Boolean;
    VAR
      Receive@1240030013 : Record 14000601;
      Receive2@1240030003 : Record 14000601;
      ReceiveLine@1240030004 : Record 14000602;
      ReceiveLine2@1240030005 : Record 14000602;
      ReceiveLineTmp@1240030006 : TEMPORARY Record 14000602;
      ERecEnterSerandLotNo@1240030007 : Page 14000635;
      NewSerialNo@1240030011 : Code[20];
      NewLotNo@1240030010 : Code[20];
      NewWarrantyDate@1240030009 : Date;
      NewExpirationDate@1240030008 : Date;
      RecordUpdated@1240030012 : Boolean;
    BEGIN
      TestInitialized;
      ReceiveLineTmp.RESET;
      ReceiveLineTmp.DELETEALL;

      ReceiveLine.RESET;
      ReceiveLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      ReceiveLine.SETRANGE("Source Type",ReceiveControl."Source Type");
      ReceiveLine.SETRANGE("Source Subtype",ReceiveControl."Source Subtype");
      IF ReceiveControl."Multi Document Receive" THEN
        ReceiveLine.SETFILTER("Source ID",ReceiveControl."Multi Document No.")
      ELSE
        ReceiveLine.SETRANGE("Source ID",ReceiveControl."Source ID");
      IF ReceiveSetup."Location Receiving" THEN
        ReceiveLine.SETRANGE("Location Code",ReceiveStation."Location Code");
      IF ReceiveLine.FIND('-') THEN
        REPEAT
          IF ReceiveControl."Multi Document Receive" THEN BEGIN
            Receive2.GET(ReceiveLine."Receive No.");
            IF Receive2."Multi Document Receive Split" THEN
              ReceiveLine2 := ReceiveLine
            ELSE
              ReceiveLine2.GET(Receive2."Original Receive No.",ReceiveLine."Line No.");
          END ELSE
            ReceiveLine2 := ReceiveLine;

          IF ((ReceiveLine2."Receive Serial Number" AND (ReceiveLine2."Serial No." = '')) OR
              (ReceiveLine2."Receive Lot Number" AND (ReceiveLine2."Lot No." = '')) OR
              (ReceiveLine2."Receive Warranty Date" AND (ReceiveLine2."Warranty Date" = 0D)) OR
              (ReceiveLine2."Receive Expiration Date" AND (ReceiveLine2."Expiration Date" = 0D))) OR
             (ScanAllLines AND
              (ReceiveLine2."Receive Serial Number" OR ReceiveLine2."Receive Lot Number" OR
               ReceiveLine2."Receive Warranty Date" OR ReceiveLine2."Receive Expiration Date"))
          THEN BEGIN
            ReceiveLineTmp := ReceiveLine2;
            IF NOT ReceiveLineTmp.INSERT THEN
              ;
          END;
        UNTIL ReceiveLine.NEXT = 0;

      ReceiveLineTmp.RESET;
      IF NOT ReceiveLineTmp.FIND('-') THEN BEGIN
        IF HideNothingToScanError THEN
          EXIT(TRUE);

        ReceiveControl."Error Message" := Text097;
        EXIT(FALSE);
      END;

      REPEAT
        ReceiveLine.GET(ReceiveLineTmp."Receive No.",ReceiveLineTmp."Line No.");
        ReceiveLine.FILTERGROUP(2);
        ReceiveLine.RESET;
        ReceiveLine.SETRECFILTER;
        ReceiveLine.FILTERGROUP(0);

        CLEAR(ERecEnterSerandLotNo);
        ERecEnterSerandLotNo.SETRECORD(ReceiveLine);
        ERecEnterSerandLotNo.SETTABLEVIEW(ReceiveLine);
        ERecEnterSerandLotNo.LOOKUPMODE(TRUE);
        IF ERecEnterSerandLotNo.RUNMODAL = ACTION::LookupOK THEN BEGIN
          ERecEnterSerandLotNo.GetValues(
            NewSerialNo,NewLotNo,NewWarrantyDate,NewExpirationDate);
          ReceiveLine.FIND;
          RecordUpdated := FALSE;

          IF NewSerialNo <> ReceiveLine."Serial No." THEN BEGIN
            ReceiveLine.VALIDATE("Serial No.",NewSerialNo);
            RecordUpdated := TRUE;
          END;

          IF NewLotNo <> ReceiveLine."Lot No." THEN BEGIN
            ReceiveLine.VALIDATE("Lot No.",NewLotNo);
            RecordUpdated := TRUE;
          END;

          IF NewWarrantyDate <> ReceiveLine."Warranty Date" THEN BEGIN
            ReceiveLine.VALIDATE("Warranty Date",NewWarrantyDate);
            RecordUpdated := TRUE;
          END;

          IF NewExpirationDate <> ReceiveLine."Expiration Date" THEN BEGIN
            ReceiveLine.VALIDATE("Expiration Date",NewExpirationDate);
            RecordUpdated := TRUE;
          END;

          IF RecordUpdated THEN BEGIN
            ReceiveLine.MODIFY;

            Receive.GET(ReceiveLine."Receive No.");
            IF Receive."Multi Document Receive" THEN BEGIN
              Receive2.RESET;
              Receive2.SETCURRENTKEY("Original Receive No.");
              Receive2.SETRANGE("Original Receive No.",Receive."No.");
              IF Receive2.FIND('-') THEN
                REPEAT
                  ReceiveLine.GET(Receive2."No.",ReceiveLine."Line No.");
                  ReceiveLine."Serial No." := ReceiveLine."Serial No.";
                  ReceiveLine."Lot No." := ReceiveLine."Lot No.";
                  ReceiveLine."Warranty Date" := ReceiveLine."Warranty Date";
                  ReceiveLine."Expiration Date" := ReceiveLine."Expiration Date";
                  ReceiveLine.MODIFY;
                UNTIL Receive2.NEXT = 0;
            END;

            COMMIT;
          END;
      END ELSE BEGIN
          ReceiveControl."Error Message" := Text051;
          EXIT;
        END;
      UNTIL ReceiveLineTmp.NEXT = 0;

      EXIT(TRUE);
    END;

    PROCEDURE ReceiveStatus@22(VAR ReceiveControl@1240030000 : Record 14000611);
    VAR
      ReceivingStatusReport@1240030001 : Report 14000606;
    BEGIN
      TestInitialized;
      CLEAR(ReceivingStatusReport);
      ReceivingStatusReport.InitializeRequest(ReceiveStation,ReceiveSetup,ReceiveControl);
      ReceivingStatusReport.RUNMODAL;
    END;

    PROCEDURE Initialize@25(NewReceiveStation@1240030000 : Record 14000608;NewReceiveSetup@1240030001 : Record 14000607);
    BEGIN
      ReceiveStation := NewReceiveStation;
      ReceiveSetup := NewReceiveSetup;
      Initialized := TRUE;
    END;

    LOCAL PROCEDURE TestInitialized@28();
    BEGIN
      IF NOT Initialized THEN
        ERROR(Text084);
    END;

    PROCEDURE ReceivePackage@1240030002(VAR Receive@1240030002 : Record 14000601;VAR ReceiveControl@1240030001 : Record 14000611;InputPackageNo@1240030008 : Code[20]) : Boolean;
    VAR
      ShippingSetup@1240030003 : Record 14000707;
      PackingStation@1240030004 : Record 14000709;
      PackageLine@1240030005 : Record 14000702;
      PostedPackageLine@1240030011 : Record 14000705;
      EShipTrackingCode@1240030009 : Record 14000721;
      Item@1240030007 : Record 27;
      ReceiveInput@1240030013 : Record 14000615;
      EReceivePackageNo@1240030014 : Page 14050060;
      PackageMgt@1240030000 : Codeunit 14000702;
      PackageNo@1240030006 : Code[20];
      UsePostedPackage@1240030010 : Boolean;
      Finished@1240030012 : Boolean;
    BEGIN
      TestInitialized;

      IF InputPackageNo = '' THEN BEGIN
        CLEAR(EReceivePackageNo);
        EReceivePackageNo.LOOKUPMODE(TRUE);
        IF EReceivePackageNo.RUNMODAL = ACTION::LookupOK THEN BEGIN
        EReceivePackageNo.GetReceiveInput(ReceiveInput);
        InputPackageNo := ReceiveInput."Posted Package No.";
        END ELSE BEGIN
          ReceiveControl."Error Message" := Text089;
          EXIT(FALSE);
        END;

        IF (InputPackageNo = '') OR (COPYSTR(InputPackageNo,1,2) = '//') THEN BEGIN
          ReceiveControl."Error Message" := Text089;
          EXIT(FALSE);
        END;
      END;

      ShippingSetup.GET;
      PackingStation.GetPackingStation;
      PackageMgt.Initialize(PackingStation,ShippingSetup);
      PackageNo := PackageMgt.GetPostedPackageNo(InputPackageNo);
      IF PackageNo = '' THEN BEGIN
        PackageNo := PackageMgt.GetPackageNo(InputPackageNo);
        UsePostedPackage := FALSE;
      END ELSE
        UsePostedPackage := TRUE;

      IF PackageNo = '' THEN BEGIN
        ReceiveControl."Error Message" := Text086;
        EXIT(FALSE);
      END;

      PostedPackageLine.RESET;
      PostedPackageLine.SETRANGE("Package No.",PackageNo);
      PostedPackageLine.SETRANGE(Type,PostedPackageLine.Type::Item);

      PackageLine.RESET;
      PackageLine.SETRANGE("Package No.",PackageNo);
      PackageLine.SETRANGE(Type,PackageLine.Type::Item);

      IF UsePostedPackage THEN BEGIN
        IF NOT PostedPackageLine.FIND('-') THEN BEGIN
          ReceiveControl."Error Message" := STRSUBSTNO(Text087,PackageNo);
          EXIT(FALSE);
        END;

        PackageLine.TRANSFERFIELDS(PostedPackageLine);
      END ELSE
        IF NOT PackageLine.FIND('-') THEN BEGIN
          ReceiveControl."Error Message" := STRSUBSTNO(Text087,PackageNo);
          EXIT(FALSE);
        END;

      IF NOT ReceiveControl."Receive Open" THEN
        CreateReceive(Receive,ReceiveControl);

      REPEAT
        Item.GET(PackageLine."No.");
        ReceiveControl."Input Type" := PackageLine.Type;
        ReceiveControl."Input No." := PackageLine."No.";
        ReceiveControl."Input Variant Code" := PackageLine."Variant Code";
        ReceiveControl."Input Description" := PackageLine.Description;
        ReceiveControl."Input Unit of Measure Code" := PackageLine."Unit of Measure Code";
        ReceiveControl."Input Qty. Per Unit of Measure" := PackageLine."Qty. per Unit of Measure";
        ReceiveControl."Input Base Unit of Meas. Code" := Item."Base Unit of Measure";

        ReceiveControl."Input Serial Number" := PackageLine."Serial No.";
        ReceiveControl."Input Lot Number" := PackageLine."Lot No.";
        ReceiveControl."Input Warranty Date" := PackageLine."Warranty Date";
        ReceiveControl."Input Expiration Date" := PackageLine."Expiration Date";

        EShipTrackingCode.GetEShipTrackingCodeItem(Item);
        ReceiveControl."Receive Serial Number" := EShipTrackingCode."Receive Serial Number";
        ReceiveControl."Receive Serial Number Late" := EShipTrackingCode."Receive Serial Number Late";
        ReceiveControl."Receive Lot Number" := EShipTrackingCode."Receive Lot Number";
        ReceiveControl."Receive Lot Number Late" := EShipTrackingCode."Receive Lot Number Late";
        ReceiveControl."Receive Warranty Date" := EShipTrackingCode."Receive Warranty Date";
        ReceiveControl."Receive Warranty Date Late" := EShipTrackingCode."Receive Warranty Date Late";
        ReceiveControl."Receive Expiration Date" := EShipTrackingCode."Receive Expiration Date";
        ReceiveControl."Receive Expiration Date Late" := EShipTrackingCode."Receive Expiration Date Late";
        ReceiveControl."Show Serial No. Info. Card" := EShipTrackingCode."Show Serial No. Info. Card";
        ReceiveControl."Show Lot No. Info. Card" := EShipTrackingCode."Show Lot No. Info. Card";
        ReceiveControl."Input Always Enter Quantity" := Item."Always Enter Quantity";

        IF NOT CreateReceiveLine(
                 Receive,ReceiveControl,PackageLine."Unit of Measure Code",
                 PackageLine.Quantity,PackageLine.Quantity)
        THEN
          EXIT(FALSE);

        IF UsePostedPackage THEN BEGIN
          Finished := PostedPackageLine.NEXT = 0;
          PackageLine.TRANSFERFIELDS(PostedPackageLine);
        END ELSE
          Finished := PackageLine.NEXT = 0;
      UNTIL Finished;

      EXIT(TRUE);
    END;

    PROCEDURE ViewAllItemActions@1240030003(VAR ReceiveControl@1240030000 : Record 14000611) : Boolean;
    VAR
      ReceiveLine@1240030001 : Record 14000602;
      ReceiveLine2@1240030002 : Record 14000602;
    BEGIN
      TestInitialized;
      ReceiveLine.RESET;
      ReceiveLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID","No.","Variant Code");
      ReceiveLine.SETRANGE("Source Type",ReceiveControl."Source Type");
      ReceiveLine.SETRANGE("Source Subtype",ReceiveControl."Source Subtype");
      IF ReceiveControl."Multi Document Receive" THEN
        ReceiveLine.SETFILTER("Source ID",ReceiveControl."Multi Document No.")
      ELSE
        ReceiveLine.SETRANGE("Source ID",ReceiveControl."Source ID");
      IF ReceiveSetup."Location Receiving" THEN
        ReceiveLine.SETRANGE("Location Code",ReceiveStation."Location Code");
      ReceiveLine.SETRANGE("Action Required",TRUE);
      IF NOT ReceiveLine.FIND('-') THEN BEGIN
        ReceiveControl."Error Message" := Text090;
        EXIT(FALSE);
      END;

      ReceiveLine2.COPYFILTERS(ReceiveLine);
      REPEAT
        IF NOT ReceiveLine.ViewItemAction THEN BEGIN
          ReceiveControl."Error Message" := Text091;
          EXIT(FALSE);
        END;

        ReceiveLine2.SETRANGE("No.",ReceiveLine."No.");
        ReceiveLine2.MODIFYALL("Action Required",ReceiveLine."Action Required");

        COMMIT;
      UNTIL ReceiveLine.NEXT = 0;

      EXIT(TRUE);
    END;

    PROCEDURE SelectReceiveBin@1240030005(VAR ReceiveControl@1240030004 : Record 14000611) : Boolean;
    VAR
      Location@1240030003 : Record 14;
      Bin@1240030002 : Record 7354;
      BinType@1240030001 : Record 7303;
      BinTypeFilter@1240030000 : Text[250];
    BEGIN
      TestInitialized;

      IF (ReceiveStation."Location Code" = '') AND (ReceiveControl."Source Location Code" = '')
      THEN BEGIN
        ReceiveControl."Error Message" := Text092;
        EXIT(FALSE);
      END;

      BinType.RESET;
      BinType.SETRANGE(Receive,TRUE);
      IF NOT BinType.FIND('-') THEN BEGIN
        ReceiveControl."Error Message" := Text093;
        EXIT(FALSE);
      END ELSE
        REPEAT
          IF BinTypeFilter = '' THEN
            BinTypeFilter := BinType.Code
          ELSE
            IF STRLEN(BinTypeFilter) + STRLEN(BinType.Code) + 1 <= MAXSTRLEN(BinTypeFilter) THEN
              BinTypeFilter := BinTypeFilter + '|' + BinType.Code;
        UNTIL BinType.NEXT = 0;

      Bin.RESET;
      IF ReceiveStation."Location Code" <> '' THEN
        Bin.SETRANGE("Location Code",ReceiveStation."Location Code")
      ELSE
        Bin.SETRANGE("Location Code",ReceiveControl."Source Location Code");
      Bin.SETFILTER("Bin Type Code",BinTypeFilter);
      IF Bin.FIND('-') THEN BEGIN
        Location.GET(Bin."Location Code");
        IF Location."Receipt Bin Code" <> '' THEN BEGIN
          Bin.Code := Location."Receipt Bin Code";
          Bin.FIND;
        END;

        IF PAGE.RUNMODAL(0,Bin) = ACTION::LookupOK THEN
          ReceiveControl."Selected Receive Bin Code" := Bin.Code;
      END ELSE BEGIN
        ReceiveControl."Error Message" := Text094;
        EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE SelectPutawayBin@1240030011(VAR ReceiveControl@1240030004 : Record 14000611) : Boolean;
    VAR
      FastReceiveLineTmp@1240030005 : TEMPORARY Record 14000609;
      Location@1240030003 : Record 14;
      Bin@1240030002 : Record 7354;
      BinType@1240030001 : Record 7303;
      BinTypeFilter@1240030000 : Text[250];
    BEGIN
      TestInitialized;

      UpdateFastReceiveLines(ReceiveControl,FastReceiveLineTmp,FALSE,FALSE,FALSE,0,'','');

      FastReceiveLineTmp.RESET;
      FastReceiveLineTmp.SETRANGE("Single Location",FALSE);
      IF FastReceiveLineTmp.FIND('-') THEN BEGIN
        ReceiveControl."Error Message" := Text014;
        EXIT(FALSE);
      END;

      FastReceiveLineTmp.RESET;
      IF FastReceiveLineTmp.FIND('-') THEN BEGIN
        FastReceiveLineTmp.SETFILTER(
          "Line Location Code",'<>%1',FastReceiveLineTmp."Line Location Code");
        IF FastReceiveLineTmp.FIND('-') THEN BEGIN
          ReceiveControl."Error Message" := Text014;
          EXIT(FALSE);
        END;
      END ELSE BEGIN
        ReceiveControl."Error Message" := Text015;
        EXIT(FALSE);
      END;

      IF Location.GET(FastReceiveLineTmp."Line Location Code") THEN BEGIN
        IF NOT Location."Directed Put-away and Pick" THEN BEGIN
          ReceiveControl."Error Message" := Text026;
          EXIT(FALSE);
        END;
      END ELSE BEGIN
        ReceiveControl."Error Message" := Text026;
        EXIT(FALSE);
      END;

      BinType.RESET;
      BinType.SETRANGE(Receive,FALSE);
      BinType.SETRANGE(Ship,FALSE);
      IF NOT BinType.FIND('-') THEN BEGIN
        ReceiveControl."Error Message" := Text093;
        EXIT(FALSE);
      END ELSE
        REPEAT
          IF BinTypeFilter = '' THEN
            BinTypeFilter := BinType.Code
          ELSE
            IF STRLEN(BinTypeFilter) + STRLEN(BinType.Code) + 1 <= MAXSTRLEN(BinTypeFilter) THEN
              BinTypeFilter := BinTypeFilter + '|' + BinType.Code;
        UNTIL BinType.NEXT = 0;

      Bin.RESET;
      Bin.SETRANGE("Location Code",Location.Code);
      Bin.SETFILTER("Bin Type Code",BinTypeFilter);
      IF Bin.FIND('-') THEN BEGIN
        IF PAGE.RUNMODAL(0,Bin) = ACTION::LookupOK THEN BEGIN
          Bin.TESTFIELD("Location Code",Location.Code);
          ReceiveControl."Put-away Location Code" := Bin."Location Code";
          ReceiveControl."Put-away Zone Code" := Bin."Zone Code";
          ReceiveControl."Put-away Bin Code" := Bin.Code;
        END;
      END ELSE BEGIN
        ReceiveControl."Error Message" := Text028;
        EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE InsertOverReceiveLine@1240030008(VAR ReceiveControl@1240030000 : Record 14000611;FastReceiveLine@1240030004 : Record 14000609;LineUOM@1240030008 : Code[10];QuantityToAddBase@1240030005 : Decimal) : Boolean;
    VAR
      SalesHeader@1240030010 : Record 36;
      SalesLine@1240030011 : Record 37;
      SalesLine2@1240030012 : Record 37;
      PurchHeader@1240030003 : Record 38;
      PurchLine@1240030002 : Record 39;
      PurchLine2@1240030007 : Record 39;
      Item@1240030009 : Record 27;
      ReleaseSalesDocument@1240030013 : Codeunit 414;
      ReleasePurchaseDocument@1240030001 : Codeunit 415;
      EshipSetGlobalVariable@1240020000 : Codeunit 14000246;
    BEGIN
      TestInitialized;

      CASE ReceiveControl."Source Type" OF
        DATABASE::"Sales Header":
          BEGIN
            IF NOT ReceiveControl."Auto Create Document" THEN BEGIN
              SalesLine.RESET;
              SalesLine.SETRANGE("Document Type",ReceiveControl."Source Subtype");
              IF ReceiveControl."Multi Document Receive" THEN
                SalesLine.SETFILTER("Document No.",ReceiveControl."Multi Document No.")
              ELSE
                SalesLine.SETRANGE("Document No.",ReceiveControl."Source ID");
              SalesLine.SETRANGE(Type,ReceiveControl."Input Type");
              SalesLine.SETRANGE("No.",ReceiveControl."Input No.");
              SalesLine.SETRANGE("Variant Code",ReceiveControl."Input Variant Code");
              IF ReceiveSetup."Location Receiving" THEN
                SalesLine.SETRANGE("Location Code",ReceiveStation."Location Code");
              SalesLine.SETRANGE("Over Receive",FALSE);
              SalesLine.FIND('-');

              SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
            END ELSE
              SalesHeader.GET(ReceiveControl."Source Subtype",ReceiveControl."Source ID");

            CLEAR(ReleaseSalesDocument);
            ReleaseSalesDocument.Reopen(SalesHeader);

            SalesLine2.RESET;
            SalesLine2.SETRANGE("Document Type",SalesHeader."Document Type");
            SalesLine2.SETRANGE("Document No.",SalesHeader."No.");
            IF NOT SalesLine2.FIND('+') THEN BEGIN
              SalesLine2."Document Type" := SalesHeader."Document Type";
              SalesLine2."Document No." := SalesHeader."No.";
              SalesLine2."Line No." := 10000;
            END ELSE
              SalesLine2."Line No." := SalesLine2."Line No." + 10000;

            SalesLine2.INIT;
            SalesLine2.VALIDATE(Type,ReceiveControl."Input Type");
            SalesLine2.VALIDATE("No.",ReceiveControl."Input No.");
            IF ReceiveControl."Input Variant Code" <> '' THEN
              SalesLine2.VALIDATE("Variant Code",ReceiveControl."Input Variant Code");

            IF NOT ReceiveControl."Auto Create Document" THEN BEGIN
              IF SalesLine."Location Code" <> '' THEN
                SalesLine2.VALIDATE("Location Code",SalesLine."Location Code");
              SalesLine2.VALIDATE("Over Receive",TRUE);

              IF SalesLine."Qty. per Unit of Measure" *
                 ROUND(QuantityToAddBase / SalesLine."Qty. per Unit of Measure",0.00001) <>
                 QuantityToAddBase
              THEN BEGIN
                Item.GET(ReceiveControl."Input No.");
                SalesLine2.VALIDATE("Unit of Measure Code",Item."Base Unit of Measure");
              END ELSE
                IF SalesLine2."Unit of Measure Code" <> SalesLine."Unit of Measure Code" THEN
                  SalesLine2.VALIDATE("Unit of Measure Code",SalesLine."Unit of Measure Code");
            END ELSE BEGIN
              IF ReceiveControl."Input Unit of Measure Code" <> '' THEN
                SalesLine2.VALIDATE(
                  "Unit of Measure Code",ReceiveControl."Input Unit of Measure Code")
              ELSE
                ReceiveControl."Input Unit of Measure Code" := SalesLine."Unit of Measure Code";

              IF SalesLine."Qty. per Unit of Measure" *
                 ROUND(QuantityToAddBase / SalesLine."Qty. per Unit of Measure",0.00001) <>
                 QuantityToAddBase
              THEN BEGIN
                Item.GET(ReceiveControl."Input No.");
                SalesLine2.VALIDATE("Unit of Measure Code",Item."Base Unit of Measure");
              END;
            END;

            IF SalesLine2."Qty. per Unit of Measure" <> 1 THEN
              SalesLine2.VALIDATE(
                Quantity,ROUND(QuantityToAddBase / SalesLine2."Qty. per Unit of Measure",0.00001))
            ELSE
              SalesLine2.VALIDATE(Quantity,QuantityToAddBase);

            SalesLine2.INSERT(TRUE);

            CLEAR(ReleaseSalesDocument);
            EshipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(FALSE);
            EshipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(TRUE);
            ReleaseSalesDocument.RUN(SalesHeader);
            EshipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(FALSE);
            COMMIT;

            EXIT(TRUE);
          END;
        DATABASE::"Purchase Header":
          BEGIN
            IF NOT ReceiveControl."Auto Create Document" THEN BEGIN
              PurchLine.RESET;
              PurchLine.SETRANGE("Document Type",ReceiveControl."Source Subtype");
              IF ReceiveControl."Multi Document Receive" THEN
                PurchLine.SETFILTER("Document No.",ReceiveControl."Multi Document No.")
              ELSE
                PurchLine.SETRANGE("Document No.",ReceiveControl."Source ID");
              PurchLine.SETRANGE(Type,ReceiveControl."Input Type");
              PurchLine.SETRANGE("No.",ReceiveControl."Input No.");
              PurchLine.SETRANGE("Variant Code",ReceiveControl."Input Variant Code");
              IF ReceiveSetup."Location Receiving" THEN
                PurchLine.SETRANGE("Location Code",ReceiveStation."Location Code");
              PurchLine.SETRANGE("Over Receive",FALSE);
              PurchLine.FIND('-');

              PurchHeader.GET(PurchLine."Document Type",PurchLine."Document No.");
            END ELSE
              PurchHeader.GET(ReceiveControl."Source Subtype",ReceiveControl."Source ID");

            CLEAR(ReleasePurchaseDocument);
            ReleasePurchaseDocument.Reopen(PurchHeader);

            PurchLine2.RESET;
            PurchLine2.SETRANGE("Document Type",PurchHeader."Document Type");
            PurchLine2.SETRANGE("Document No.",PurchHeader."No.");
            IF NOT PurchLine2.FIND('+') THEN BEGIN
              PurchLine2."Document Type" := PurchHeader."Document Type";
              PurchLine2."Document No." := PurchHeader."No.";
              PurchLine2."Line No." := 10000;
            END ELSE
              PurchLine2."Line No." := PurchLine2."Line No." + 10000;

            PurchLine2.INIT;
            PurchLine2.VALIDATE(Type,ReceiveControl."Input Type");
            PurchLine2.VALIDATE("No.",ReceiveControl."Input No.");
            IF ReceiveControl."Input Variant Code" <> '' THEN
              PurchLine2.VALIDATE("Variant Code",ReceiveControl."Input Variant Code");

            IF NOT ReceiveControl."Auto Create Document" THEN BEGIN
              IF PurchLine."Location Code" <> '' THEN
                PurchLine2.VALIDATE("Location Code",PurchLine."Location Code");
              PurchLine2.VALIDATE("Over Receive",TRUE);

              IF PurchLine."Qty. per Unit of Measure" *
                 ROUND(QuantityToAddBase / PurchLine."Qty. per Unit of Measure",0.00001) <>
                 QuantityToAddBase
              THEN BEGIN
                Item.GET(ReceiveControl."Input No.");
                PurchLine2.VALIDATE("Unit of Measure Code",Item."Base Unit of Measure");
              END ELSE
                IF PurchLine2."Unit of Measure Code" <> PurchLine."Unit of Measure Code" THEN
                  PurchLine2.VALIDATE("Unit of Measure Code",PurchLine."Unit of Measure Code");
            END ELSE BEGIN
              IF ReceiveControl."Input Unit of Measure Code" <> '' THEN
                PurchLine2.VALIDATE(
                  "Unit of Measure Code",ReceiveControl."Input Unit of Measure Code")
              ELSE
                ReceiveControl."Input Unit of Measure Code" := PurchLine."Unit of Measure Code";

              IF PurchLine."Qty. per Unit of Measure" *
                 ROUND(QuantityToAddBase / PurchLine."Qty. per Unit of Measure",0.00001) <>
                 QuantityToAddBase
              THEN BEGIN
                Item.GET(ReceiveControl."Input No.");
                PurchLine2.VALIDATE("Unit of Measure Code",Item."Base Unit of Measure");
              END;
            END;

            IF PurchLine2."Qty. per Unit of Measure" <> 1 THEN
              PurchLine2.VALIDATE(
                Quantity,ROUND(QuantityToAddBase / PurchLine2."Qty. per Unit of Measure",0.00001))
            ELSE
              PurchLine2.VALIDATE(Quantity,QuantityToAddBase);
            PurchLine2.INSERT(TRUE);

            CLEAR(ReleasePurchaseDocument);
            ReleasePurchaseDocument.RUN(PurchHeader);
            COMMIT;

            EXIT(TRUE);
          END;
        ELSE
          ReceiveControl.ErrorUnknownSourceType2;
      END;
    END;

    PROCEDURE DeleteOverReceiveLine@1240030009(VAR ReceiveControl@1240030000 : Record 14000611) : Boolean;
    VAR
      SalesHeader@1240030004 : Record 36;
      SalesLine@1240030005 : Record 37;
      PurchHeader@1240030003 : Record 38;
      PurchLine@1240030002 : Record 39;
      ReleaseSalesDocument@1240030007 : Codeunit 414;
      ReleasePurchaseDocument@1240030001 : Codeunit 415;
    BEGIN
      TestInitialized;

      CASE ReceiveControl."Source Type" OF
        DATABASE::"Sales Header":
          BEGIN
            SalesLine.RESET;
            SalesLine.SETRANGE("Document Type",ReceiveControl."Source Subtype");
            IF ReceiveControl."Multi Document Receive" THEN
              SalesLine.SETFILTER("Document No.",ReceiveControl."Multi Document No.")
            ELSE
              SalesLine.SETRANGE("Document No.",ReceiveControl."Source ID");
            SalesLine.SETRANGE("Over Receive",TRUE);
            SalesLine.SETRANGE("Quantity Shipped",0);
            IF ReceiveSetup."Location Receiving" THEN
              SalesLine.SETRANGE("Location Code",ReceiveStation."Location Code");
            IF SalesLine.FIND('-') THEN BEGIN
              REPEAT
                IF SalesLine."Document No." <> SalesHeader."No." THEN BEGIN
                  IF SalesHeader."No." <> '' THEN BEGIN
                    CLEAR(ReleaseSalesDocument);
                    ReleaseSalesDocument.RUN(SalesHeader);
                  END;

                  SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
                  CLEAR(ReleaseSalesDocument);
                  ReleaseSalesDocument.Reopen(SalesHeader);

                  SalesLine.FIND;
                END;

                SalesLine.DELETE(TRUE);
              UNTIL SalesLine.NEXT = 0;

              CLEAR(ReleaseSalesDocument);
              ReleaseSalesDocument.RUN(SalesHeader);
            END;

            EXIT(TRUE);
          END;
        DATABASE::"Purchase Header":
          BEGIN
            PurchLine.RESET;
            PurchLine.SETRANGE("Document Type",ReceiveControl."Source Subtype");
            IF ReceiveControl."Multi Document Receive" THEN
              PurchLine.SETFILTER("Document No.",ReceiveControl."Multi Document No.")
            ELSE
              PurchLine.SETRANGE("Document No.",ReceiveControl."Source ID");
            PurchLine.SETRANGE("Over Receive",TRUE);
            PurchLine.SETRANGE("Quantity Received",0);
            IF ReceiveSetup."Location Receiving" THEN
              PurchLine.SETRANGE("Location Code",ReceiveStation."Location Code");
            IF PurchLine.FIND('-') THEN BEGIN
              REPEAT
                IF PurchLine."Document No." <> PurchHeader."No." THEN BEGIN
                  IF PurchHeader."No." <> '' THEN BEGIN
                    CLEAR(ReleasePurchaseDocument);
                    ReleasePurchaseDocument.RUN(PurchHeader);
                  END;

                  PurchHeader.GET(PurchLine."Document Type",PurchLine."Document No.");
                  CLEAR(ReleasePurchaseDocument);
                  ReleasePurchaseDocument.Reopen(PurchHeader);

                  PurchLine.FIND;
                END;

                PurchLine.DELETE(TRUE);
              UNTIL PurchLine.NEXT = 0;

              CLEAR(ReleasePurchaseDocument);
              ReleasePurchaseDocument.RUN(PurchHeader);
            END;

            EXIT(TRUE);
          END;
        DATABASE::"Transfer Header":
          EXIT(TRUE);
        ELSE
          ReceiveControl.ErrorUnknownSourceType2;
      END;
    END;

    PROCEDURE CheckForSubcontracting@1240030010(VAR ReceiveControl@1240030000 : Record 14000611) : Boolean;
    VAR
      PurchLine@1240030002 : Record 39;
    BEGIN
      TestInitialized;

      CASE ReceiveControl."Source Type" OF
        DATABASE::"Sales Header":
          EXIT(FALSE);
        DATABASE::"Purchase Header":
          BEGIN
            PurchLine.RESET;
            PurchLine.SETRANGE("Document Type",ReceiveControl."Source Subtype");
            IF ReceiveControl."Multi Document Receive" THEN
              PurchLine.SETFILTER("Document No.",ReceiveControl."Multi Document No.")
            ELSE
              PurchLine.SETRANGE("Document No.",ReceiveControl."Source ID");
            IF ReceiveSetup."Location Receiving" THEN
              PurchLine.SETRANGE("Location Code",ReceiveStation."Location Code");
            PurchLine.SETFILTER("Prod. Order No.",'<>%1','');
            EXIT(PurchLine.FIND('-'));
          END;
        DATABASE::"Transfer Header":
          EXIT(FALSE);
        ELSE
          ReceiveControl.ErrorUnknownSourceType2;
      END;
    END;

    PROCEDURE AutoCreateDocument@1240030014(VAR ReceiveControl@1240030002 : Record 14000611;SourceType@1240030001 : Integer;SourceSubtype@1240030000 : Integer;VAR NewSourceID@1240030005 : Code[20]) : Boolean;
    VAR
      SalesHeader@1240030003 : Record 36;
      SalesLine@1240030010 : Record 37;
      PurchHeader@1240030004 : Record 38;
      PurchLine@1240030012 : Record 39;
      Customer@1240030006 : Record 18;
      ShipToAddress@1240030007 : Record 222;
      Vendor@1240030008 : Record 23;
      OrderAddress@1240030011 : Record 224;
      ReleaseSalesDocument@1240030009 : Codeunit 414;
      ReleasePurchDocument@1240030013 : Codeunit 415;
      EShipSetGlobalVariable@1240020000 : Codeunit 14000246;
    BEGIN
      TestInitialized;

      CASE TRUE OF
        (SourceType = DATABASE::"Sales Header") AND
        (SourceSubtype = SalesHeader."Document Type"::"Return Order"):
          BEGIN
            IF PAGE.RUNMODAL(0,Customer) <> ACTION::LookupOK THEN BEGIN
              ReceiveControl."Error Message" := Text047;
              EXIT(FALSE);
            END;

            ShipToAddress.RESET;
            ShipToAddress.SETRANGE("Customer No.",Customer."No.");
            IF ShipToAddress.FIND('-') THEN
              IF PAGE.RUNMODAL(0,ShipToAddress) <> ACTION::LookupOK THEN
                CLEAR(ShipToAddress);

            IF CONFIRM(
                 Text049,
                 FALSE,ReceiveControl.FormatSource(SourceType,SourceSubtype,''),
                 Customer.TABLECAPTION,Customer."No.",ShipToAddress.Code)
            THEN BEGIN
              CLEAR(SalesHeader);
              SalesHeader."Document Type" := SalesHeader."Document Type"::"Return Order";
              SalesHeader.INSERT(TRUE);
              SalesHeader.VALIDATE("Sell-to Customer No.",Customer."No.");
              IF ShipToAddress.Code <> '' THEN
                SalesHeader.VALIDATE("Ship-to Code",ShipToAddress.Code);
              IF ReceiveSetup."Location Receiving" THEN
                SalesHeader.VALIDATE("Location Code",ReceiveStation."Location Code");
              SalesHeader.MODIFY(TRUE);
              COMMIT;
              NewSourceID := SalesHeader."No.";

              PAGE.RUNMODAL(PAGE::"Sales Return Order",SalesHeader);
              SalesHeader.FIND;

              SalesLine.RESET;
              SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
              SalesLine.SETRANGE("Document No.",SalesHeader."No.");
              IF SalesLine.FIND('-') AND (SalesHeader.Status <> SalesHeader.Status::Released) THEN BEGIN
                EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(FALSE);
                EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(TRUE);
                ReleaseSalesDocument.RUN(SalesHeader);
                EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(FALSE);
                SalesHeader.FIND;
              END;
            END ELSE BEGIN
              ReceiveControl."Error Message" := Text047;
              EXIT(FALSE);
            END;
          END;
        (SourceType = DATABASE::"Purchase Header") AND
        (SourceSubtype = PurchHeader."Document Type"::Order):
          BEGIN
            IF PAGE.RUNMODAL(0,Vendor) <> ACTION::LookupOK THEN BEGIN
              ReceiveControl."Error Message" := Text047;
              EXIT(FALSE);
            END;

            OrderAddress.RESET;
            OrderAddress.SETRANGE("Vendor No.",Vendor."No.");
            IF OrderAddress.FIND('-') THEN
              IF PAGE.RUNMODAL(0,OrderAddress) <> ACTION::LookupOK THEN
                CLEAR(OrderAddress);

            IF CONFIRM(
                 Text049,
                 FALSE,ReceiveControl.FormatSource(SourceType,SourceSubtype,''),
                 Vendor.TABLECAPTION,Vendor."No.",OrderAddress.Code)
            THEN BEGIN
              CLEAR(PurchHeader);
              PurchHeader."Document Type" := PurchHeader."Document Type"::Order;
              PurchHeader.INSERT(TRUE);
              PurchHeader.VALIDATE("Buy-from Vendor No.",Vendor."No.");
              IF OrderAddress.Code <> '' THEN
                PurchHeader.VALIDATE("Order Address Code",OrderAddress.Code);
              IF ReceiveSetup."Location Receiving" THEN
                PurchHeader.VALIDATE("Location Code",ReceiveStation."Location Code");
              PurchHeader.MODIFY(TRUE);
              COMMIT;
              NewSourceID := PurchHeader."No.";

              PAGE.RUNMODAL(PAGE::"Purchase Order",PurchHeader);
              PurchHeader.FIND;

              PurchLine.RESET;
              PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
              PurchLine.SETRANGE("Document No.",PurchHeader."No.");
              IF PurchLine.FIND('-') AND (PurchHeader.Status <> PurchHeader.Status::Released) THEN BEGIN
                ReleasePurchDocument.RUN(PurchHeader);
                PurchHeader.FIND;
              END;
            END ELSE BEGIN
              ReceiveControl."Error Message" := Text047;
              EXIT(FALSE);
            END;


          END;
        ELSE BEGIN
          ReceiveControl."Error Message" :=
            STRSUBSTNO(
              Text050,SourceType,SourceSubtype);
          EXIT(FALSE);
        END;
      END;


      ReceiveControl."Auto Create Document" := TRUE;
      EXIT(TRUE);
    END;

    PROCEDURE SetForceCreatePrintPutAway@1000000000(ForceCreatePrintPutAway2@1000000000 : Boolean);
    BEGIN
      //<TPZ1626>
      ForceCreatePrintPutAway := ForceCreatePrintPutAway2;
      //</TPZ1626>
    END;

    LOCAL PROCEDURE WhseReceiptUpdatePostingDate@1000000001(SourceType@1240030003 : Integer;SourceSubtype@1240030004 : Integer;SourceID@1240030005 : Code[20]);
    VAR
      WhseRqst@1240030001 : Record 5765;
      WhseRcptHeader@1240030000 : Record 7316;
      WhseRcptLine@1240030002 : Record 7317;
      GetSourceDocuments@1240030006 : Report 5753;
    BEGIN
      //<TPZ1709>
      TestInitialized;

      WhseRcptLine.RESET;
      WhseRcptLine.SETCURRENTKEY("Source Type","Source Subtype","Source No.");
      WhseRcptLine.SETRANGE("Source Type",SourceType);
      WhseRcptLine.SETRANGE("Source Subtype",SourceSubtype);
      WhseRcptLine.SETRANGE("Source No.",SourceID);
      IF WhseRcptLine.FIND('-') THEN BEGIN
        WhseRcptHeader.GET(WhseRcptLine."No.");
        IF WhseRcptHeader."Posting Date" <> WORKDATE THEN BEGIN
          WhseRcptHeader.VALIDATE("Posting Date", WORKDATE);
          WhseRcptHeader.MODIFY;
        END;
      END;
      //</TPZ1709>
    END;

    BEGIN
    {
      TPZ1626 - 2016-08-10 TMEI
        Add new command //COPW Close Order Create Put-away
      TPZ1709 - 2016-10-18 TMEI
        Change whse. receipt posting date to workdate
        2019-11-08 VAHAMAD TPZ2666
        New report call added in function CloseOrder
    }
    END.
  }
}

