OBJECT Codeunit 14000701 Shipping
{
  OBJECT-PROPERTIES
  {
    Date=02/09/21;
    Time=[ 9:17:25 AM];
    Modified=Yes;
    Version List=SE0.62,TPZ2693,TPZ2682,TPZ2786,ASN;
  }
  PROPERTIES
  {
    Permissions=TableData 36=rm,
                TableData 37=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ShippingAgent@1000000000 : Record 291;
      ShippingAgentService@1000000001 : Record 14000708;
      PackingStation@1000000002 : Record 14000709;
      ShippingSetup@1000000003 : Record 14000707;
      LabelMgt@1000000008 : Codeunit 14000841;
      MultiDocPackageMgt@1240030000 : Codeunit 14000703;
      RFIDMgt@1240030001 : Codeunit 14000961;
      ShipperTypeMgt@1240030003 : Codeunit 14000711;
      ExportDocMgt@1240030004 : Codeunit 14000981;
      NameAndAddressMgt@1240031003 : Codeunit 14000709;
      LineNo@1000000009 : Integer;
      Window@1000000010 : Dialog;
      ShippingSetupRetrieved@1000000011 : Boolean;
      Text001@1001 : TextConst 'ENU=No Packages';
      Text002@1002 : TextConst 'ENU=cannot be %1';
      Text003@1003 : TextConst 'ENU=Posting shipment can only be for location %1 when using %2.';
      Text004@1004 : TextConst 'ENU=You must specify a Shipping Agent Code for package %1 on %2 %3.';
      Text005@1005 : TextConst 'ENU=You must specify a Shipping Agent Service for package %1 on %2 %3.';
      Text006@1006 : TextConst 'ENU=Package %1 has the Prepack Shipping Agent %2.';
      Text007@1007 : TextConst 'ENU=You have not packed all that is to be shipped.';
      Text008@1008 : TextConst 'ENU=You have packed more than is to be shipped.';
      Text009@1009 : TextConst 'ENU=You have not packed all that is to be shipped of item %1 %2.';
      Text010@1010 : TextConst 'ENU=You have packed more than is to be shipped for item %1 %2.';
      Text011@1011 : TextConst 'ENU=Serial Number is required for %1 %2 in Package %3.';
      Text012@1012 : TextConst 'ENU=Lot Number is required for %1 %2 in Package %3.';
      Text013@1013 : TextConst 'ENU=Warranty Date is required for %1 %2 in Package %3.';
      Text014@1014 : TextConst 'ENU=Expiration Date is required for %1 %2 in Package %3.';
      Text015@1015 : TextConst 'ENU=Sales line for %1 %2 not found (line number %3).';
      Text016@1016 : TextConst 'ENU=must be blank when Ship and Invoice.';
      Text017@1017 : TextConst 'ENU=must be %1 when using Shipment Invoicing.';
      Text018@1018 : TextConst 'ENU=must be 0 when using Shipment Invoicing.';
      Text019@1019 : TextConst 'ENU=You must specify a Shipping Agent Code for package %1 on %2.';
      Text020@1020 : TextConst 'ENU=You must specify a Shipping Agent Service for package %1 on %2.';
      Text021@1021 : TextConst 'ENU=Rate has already been quoted on Sales Order %1. Please delete that line.';
      Text022@1022 : TextConst 'ENU=Packages already exist for this order.';
      Text026@1026 : TextConst 'ENU=There are no services indicated for rate shop.';
      Text027@1027 : TextConst 'ENU=Calculating Rate for:\';
      Text028@1028 : TextConst 'ENU=Agent:    #1####################\';
      Text029@1029 : TextConst 'ENU=Service:  #2####################\';
      Text030@1030 : TextConst 'ENU=Desc.:    #3####################';
      Text031@1031 : TextConst 'ENU=Bill of Lading is mandatory.';
      Text032@1032 : TextConst 'ENU=Package is already packed in package %1 and cannot be reopened.';
      Text033@1033 : TextConst 'ENU=Rate has already been quoted on Sales order %1. Please delete that line.';
      Text036@1036 : TextConst 'ENU=Shipping Agent Code cannot be blank.';
      Text037@1037 : TextConst 'ENU=Nothing to post.';
      Text039@1039 : TextConst 'ENU=At least four digit year required.';
      Text040@1040 : TextConst 'ENU=Invalid Month';
      Text041@1041 : TextConst 'ENU=Invalid Day';
      Text042@1042 : TextConst 'ENU=Multi Order Package %1, must be split.';
      Text043@1240030002 : TextConst 'ENU=%1 is required.';
      Text023@1023 : TextConst 'ENU=" (Quoted)"';
      EShipValidation@1240020000 : Codeunit 14000240;
      EShipShpmtHeadrEdit@1240020001 : Codeunit 14000242;

    PROCEDURE CreateShipCharge@68(SourceType@1240030000 : Integer;SourceSubtype@1240030001 : Integer;SourceID@1240030002 : Code[20]);
    VAR
      Salesheader@1240030003 : Record 36;
      PurchHeader@1240030004 : Record 38;
      TransferHeader@1240030006 : Record 5740;
      PackingControl@1240030005 : Record 14000717;
    BEGIN
      CASE SourceType OF
        DATABASE::"Sales Header":
          BEGIN
            Salesheader.GET(SourceSubtype,SourceID);
            CreateShipChargeSalesHeader(Salesheader);
          END;
        DATABASE::"Purchase Header":
          BEGIN
            PurchHeader.GET(SourceSubtype,SourceID);
            CreateShipChargePurchHeader(PurchHeader);
          END;
        DATABASE::"Transfer Header":
          BEGIN
            TransferHeader.GET(SourceID);
            CreateShipChargeTransferHeader(TransferHeader);
          END;
        ELSE
          PackingControl.ErrorUnknownSourceType(SourceType,SourceSubtype,SourceID);
      END;
    END;

    PROCEDURE CreateShipChargeSalesHeader@3(SalesHeader@1240030002 : Record 36);
    VAR
      SalesLine@1000000001 : Record 37;
      Package@1000000002 : Record 14000701;
      ShippingAgentCharge@1000000006 : Record 291;
      ItemChargeAssgntSales@1240030001 : Record 5809;
      ReleaseSalesDocument@1240030004 : Codeunit 414;
      TotalShipCharge@1000000003 : Decimal;
      TotalShipCost@1000000004 : Decimal;
      TotalCustPaidShipCharge@1000000005 : Decimal;
      AccumulatedShipCost@1000000007 : Decimal;
      ReleaseSalesOrder@1240030003 : Boolean;
      EShipSetGlobalVariable@1240020000 : Codeunit 14000246;
    BEGIN
      IF SalesHeader."No Free Freight Lines on Order" AND SalesHeader."Free Freight" THEN
        EXIT;

      GetShippingSetup;
      IF ShippingSetup."No Shipping Cost on Order" THEN
        EXIT;

      GetPackingStation;

      IF SalesHeader.Status = SalesHeader.Status::Released THEN BEGIN
        EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(FALSE);
        EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(TRUE);
        ReleaseSalesDocument.Reopen(SalesHeader);
        EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(FALSE);

        ReleaseSalesOrder := TRUE;
      END ELSE
        ReleaseSalesOrder := FALSE;

      SalesLine.RESET;
      SalesLine.SETCURRENTKEY("Document Type","Document No.",Type,"No.","Variant Code","Drop Shipment");
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE("Shipping Charge",TRUE);
      SalesLine.SETRANGE("Quantity Shipped",0);
      SalesLine.SETFILTER("Outstanding Quantity",'>%1',0);
      SalesLine.SETRANGE("Rate Quoted",FALSE);
      SalesLine.SETRANGE("Shipping Charge BOL No.",'');
      IF ShippingSetup."Location Packing" THEN
        SalesLine.SETRANGE("Location Code",PackingStation."Location Code");
      IF SalesLine.FIND('-') THEN
        REPEAT
          {DocumentDimension.RESET;
          DocumentDimension.SETRANGE("Table ID",DATABASE::"Sales Line");
          DocumentDimension.SETRANGE("Document Type",SalesLine."Document Type");
          DocumentDimension.SETRANGE("Document No.",SalesLine."Document No.");
          DocumentDimension.SETRANGE("Line No.",SalesLine."Line No.");
          DocumentDimension.DELETEALL;}

          IF SalesLine.Type = SalesLine.Type::"Charge (Item)" THEN BEGIN
            ItemChargeAssgntSales.RESET;
            ItemChargeAssgntSales.SETRANGE("Document Type",SalesLine."Document Type");
            ItemChargeAssgntSales.SETRANGE("Document No.",SalesLine."Document No.");
            ItemChargeAssgntSales.SETRANGE("Document Line No.",SalesLine."Line No.");
            IF ItemChargeAssgntSales.FIND('-') THEN
              ItemChargeAssgntSales.DELETEALL(TRUE);
          END;

          SalesLine.DELETE;
        UNTIL SalesLine.NEXT = 0;

      Package.RESET;
      Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID","Shipping Agent Code");
      Package.SETRANGE("Source Type",DATABASE::"Sales Header");
      Package.SETRANGE("Source Subtype",SalesHeader."Document Type");
      Package.SETRANGE("Source ID",SalesHeader."No.");
      Package.SETFILTER("Shipping Agent Code",'<>%1','');
      Package.SETRANGE(Closed,TRUE);
      IF ShippingSetup."Location Packing" THEN
        Package.SETRANGE("Location Code",PackingStation."Location Code");
      TotalShipCost := 0;
      AccumulatedShipCost := 0;
      TotalShipCharge := 0;
      TotalCustPaidShipCharge := 0;
      ShippingAgentCharge.Code := '';
      IF Package.FIND('-') THEN BEGIN
        IF Package."Shipping Agent Code" = '' THEN
          CLEAR(ShippingAgentCharge)
        ELSE
          ShippingAgentCharge.GET(Package."Shipping Agent Code");

        REPEAT
          IF (ShippingAgentCharge.Code <> Package."Shipping Agent Code") AND
             (ShippingAgentCharge.Code <> '')
          THEN BEGIN
            IF TotalShipCharge <> 0 THEN
              WriteShipChargeSalesHeader(
                SalesHeader,ShippingAgentCharge,TotalShipCharge,TotalShipCost,
                TotalCustPaidShipCharge,AccumulatedShipCost,FALSE,'');

            TotalShipCost := 0;
            TotalShipCharge := 0;
            TotalCustPaidShipCharge := 0;
          END;

          IF Package."Shipping Agent Code" = '' THEN
            CLEAR(ShippingAgentCharge)
          ELSE
            IF ShippingAgentCharge.Code <> Package."Shipping Agent Code" THEN
              ShippingAgentCharge.GET(Package."Shipping Agent Code");
          TotalShipCost := TotalShipCost + Package."Shipping Cost";
          AccumulatedShipCost := AccumulatedShipCost + Package."Shipping Cost";
          TotalShipCharge := TotalShipCharge + Package."Shipping Charge";
          IF NOT SalesHeader."Free Freight" THEN
            TotalCustPaidShipCharge := TotalCustPaidShipCharge + Package."Shipping Charge";
        UNTIL Package.NEXT = 0;

        IF TotalShipCharge <> 0 THEN
          WriteShipChargeSalesHeader(
            SalesHeader,ShippingAgentCharge,TotalShipCharge,TotalShipCost,
            TotalCustPaidShipCharge,AccumulatedShipCost,FALSE,'');
      END ELSE BEGIN
        IF SalesHeader."Shipping Agent Code" = '' THEN
          CLEAR(ShippingAgentCharge)
        ELSE
          ShippingAgentCharge.GET(SalesHeader."Shipping Agent Code");

        WriteShipChargeSalesHeader(
          SalesHeader,ShippingAgentCharge,TotalShipCharge,TotalShipCost,
          TotalCustPaidShipCharge,AccumulatedShipCost,TRUE,'');
      END;

      IF ReleaseSalesOrder THEN BEGIN
        EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(FALSE);
        EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(TRUE);
        ReleaseSalesDocument.RUN(SalesHeader);
        EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(FALSE);
      END;
    END;

    PROCEDURE WriteShipChargeSalesHeader@4(VAR SalesHeader@1240030001 : Record 36;ShippingAgentCharge@1240030002 : Record 291;TotalShipCharge@1240030003 : Decimal;TotalShipCost@1240030004 : Decimal;TotalCustPaidShipCharge@1240030005 : Decimal;AccumulatedShipCost@1240030006 : Decimal;NoPackages@1240030007 : Boolean;BillOfLadingNo@1240030008 : Code[20]);
    VAR
      SalesLine@1000000004 : Record 37;
      Currency@1240030000 : Record 4;
      RateQuoted@1000000005 : Boolean;
    BEGIN
      IF SalesHeader."Currency Factor" = 0 THEN
        SalesHeader."Currency Factor" := 1;
      IF NOT Currency.GET(SalesHeader."Currency Code") THEN
        Currency.INIT;

      GetShippingSetup;
      GetPackingStation;

      SalesLine.RESET;
      SalesLine.SETCURRENTKEY("Document Type","Document No.",Type,"No.","Variant Code","Drop Shipment");
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE("Shipping Charge",TRUE);
      SalesLine.SETRANGE("Rate Quoted",TRUE);
      RateQuoted := SalesLine.FIND('-');

      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE("Quantity Shipped",0);
      SalesLine.SETFILTER("Outstanding Quantity",'>%1',0);
      SalesLine.SETRANGE("Rate Quoted",TRUE);
      IF ShippingSetup."Location Packing" THEN
        SalesLine.SETRANGE("Location Code",PackingStation."Location Code");
      IF BillOfLadingNo = '' THEN
        SalesLine.SETRANGE("Shipping Charge BOL No.",'')
      ELSE
        SalesLine.SETRANGE("Shipping Charge BOL No.",BillOfLadingNo);
      IF SalesLine.FIND('-') AND
         (SalesHeader."Shipping Agent Code" = ShippingAgentCharge.Code)
      THEN BEGIN
        SalesLine.VALIDATE("Unit Cost (LCY)",AccumulatedShipCost);
        IF NoPackages THEN
          SalesLine.Description := Text001
        ELSE
          SalesLine.Description :=
            COPYSTR(STRSUBSTNO('%1 %2',ShippingAgentCharge.Code,WORKDATE),1,30);
        SalesLine.Description := COPYSTR(SalesLine.Description + Text023,1,30);
        SalesLine.MODIFY;
        IF SalesLine.Type = SalesLine.Type::"Charge (Item)" THEN
          CreateItemChargeAssignment(SalesLine,ShippingAgentCharge);
      END ELSE BEGIN
        IF NOT NoPackages THEN BEGIN
          SalesLine.RESET;
          SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
          SalesLine.SETRANGE("Document No.",SalesHeader."No.");
          IF SalesLine.FIND('+') THEN
            LineNo := SalesLine."Line No." + 10000
          ELSE
            LineNo := 10000;
          SalesLine.INIT;
          SalesLine."Document Type" := SalesHeader."Document Type";
          SalesLine."Document No." := SalesHeader."No.";
          SalesLine."Line No." := LineNo;
          SalesLine."Sell-to Customer No." := SalesHeader."Sell-to Customer No.";
          ShippingAgentCharge.TESTFIELD("Prepaid Freight Type");
          SalesLine.Type := ShippingAgentCharge."Prepaid Freight Type";
          ShippingAgentCharge.TESTFIELD("Prepaid Freight Code");
          SalesLine."Shipping Charge" := TRUE;
          SalesLine.VALIDATE("No.",ShippingAgentCharge."Prepaid Freight Code");
          IF ShippingSetup."Location Packing" THEN
            SalesLine.VALIDATE("Location Code",PackingStation."Location Code");
          SalesLine.Description := COPYSTR(STRSUBSTNO('%1 %2',ShippingAgentCharge.Code,WORKDATE),1,30);
          SalesLine."Shipping Charge BOL No." := BillOfLadingNo;
          IF RateQuoted THEN
            SalesLine.Description := COPYSTR(SalesLine.Description + Text023,1,30);
          SalesLine.VALIDATE(Quantity,1);
          IF ShippingSetup."No Discounts on Ship. Charge" THEN
            SalesLine.VALIDATE("Allow Invoice Disc.",FALSE);
          SalesLine.VALIDATE("Unit Cost (LCY)",TotalShipCost);
          IF RateQuoted THEN BEGIN
            SalesLine.VALIDATE("Unit Price",0);
            SalesLine.VALIDATE(Amount,0);
          END ELSE BEGIN
            SalesLine.VALIDATE(
              "Unit Price",
              ROUND(
                SalesHeader."Currency Factor" * TotalShipCharge,
                Currency."Unit-Amount Rounding Precision"));
            SalesLine.VALIDATE(
              Amount,
              ROUND(
                SalesHeader."Currency Factor" * TotalShipCharge,
                Currency."Amount Rounding Precision"));
          END;
          SalesLine.VALIDATE("Prepayment %",0);
          SalesLine."Shipping Charge" := TRUE;
          SalesLine.INSERT;
          IF SalesLine.Type = SalesLine.Type::"Charge (Item)" THEN
            CreateItemChargeAssignment(SalesLine,ShippingAgentCharge);

          IF (TotalShipCharge - TotalCustPaidShipCharge <> 0) AND NOT RateQuoted THEN BEGIN
            SalesLine.INIT;
            ShippingAgentCharge.TESTFIELD("Free Freight Type");
            SalesLine.Type := ShippingAgentCharge."Free Freight Type";
            ShippingAgentCharge.TESTFIELD("Free Freight Code");
            SalesLine."Line No." := LineNo + 10000;
            SalesLine."Shipping Charge" := TRUE;
            SalesLine.VALIDATE("No.",ShippingAgentCharge."Free Freight Code");
            IF ShippingSetup."Location Packing" THEN
              SalesLine.VALIDATE("Location Code",PackingStation."Location Code");
            SalesLine.VALIDATE(Quantity,1);
            IF ShippingSetup."No Discounts on Ship. Charge" THEN
              SalesLine.VALIDATE("Allow Invoice Disc.",FALSE);
            SalesLine.VALIDATE("Unit Cost (LCY)",0);
            SalesLine."Shipping Charge" := TRUE;
            SalesLine."Shipping Charge BOL No." := BillOfLadingNo;
            SalesLine.VALIDATE(
              "Unit Price",
              -ROUND(
                 SalesHeader."Currency Factor" * (TotalShipCharge - TotalCustPaidShipCharge),
                 Currency."Unit-Amount Rounding Precision"));
            SalesLine.VALIDATE(
              Amount,
              -ROUND(
                 SalesHeader."Currency Factor" * (TotalShipCharge - TotalCustPaidShipCharge),
                 Currency."Amount Rounding Precision"));
            SalesLine.INSERT;
            IF SalesLine.Type = SalesLine.Type::"Charge (Item)" THEN
              CreateItemChargeAssignment(SalesLine,ShippingAgentCharge);
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE CreateItemChargeAssignment@49(CurrentSalesLine@1240030000 : Record 37;ShippingAgent@1240030001 : Record 291);
    VAR
      Package@1240030002 : Record 14000701;
      FastPackSalesLineTmp@1240030004 : TEMPORARY Record 14000711;
      SalesLine@1240030007 : Record 37;
      ItemChargeAssgntSales@1240030008 : Record 5809;
      TotalFactor@1240030005 : Decimal;
      TotalAssignedRounded@1240030011 : Decimal;
      TotalAssignedNotRounded@1240030013 : Decimal;
      Assigned@1240030015 : Decimal;
      TotalQuantityBase@1240030006 : Decimal;
      TotalQuantityBaseAssigned@1240030014 : Decimal;
      SalesLineQuantityBase@1240030010 : Decimal;
      LineNo@1240030009 : Integer;
    BEGIN
      Package.RESET;
      Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID","Shipping Agent Code");
      Package.SETRANGE("Source Type",DATABASE::"Sales Header");
      Package.SETRANGE("Source Subtype",CurrentSalesLine."Document Type");
      Package.SETRANGE("Source ID",CurrentSalesLine."Document No.");
      Package.SETRANGE("Shipping Agent Code",ShippingAgent.Code);
      Package.SETRANGE(Closed,TRUE);
      IF NOT Package.FIND('-') THEN
        EXIT;

      FastPackSalesLineTmp.DELETEALL;
      REPEAT
        IF Package."Multi Document Package" THEN BEGIN
          Package.CALCFIELDS(Package."Original Exist in Other Pack.");
          IF NOT Package."Original Exist in Other Pack." THEN
            SummarizeItems(Package,FastPackSalesLineTmp,TotalFactor,TotalQuantityBase);
        END ELSE BEGIN
          Package.CALCFIELDS("Exist in Other Package");
          IF NOT Package."Exist in Other Package" THEN
            SummarizeItems(Package,FastPackSalesLineTmp,TotalFactor,TotalQuantityBase);
        END;
      UNTIL Package.NEXT = 0;

      FastPackSalesLineTmp.RESET;
      IF NOT FastPackSalesLineTmp.FIND('-') THEN
        EXIT;

      ItemChargeAssgntSales.RESET;
      ItemChargeAssgntSales.SETRANGE("Document Type",CurrentSalesLine."Document Type");
      ItemChargeAssgntSales.SETRANGE("Document No.",CurrentSalesLine."Document No.");
      ItemChargeAssgntSales.SETRANGE("Document Line No.",CurrentSalesLine."Line No.");
      IF ItemChargeAssgntSales.FIND('-') THEN
        ItemChargeAssgntSales.DELETEALL(TRUE);

      GetShippingSetup;
      GetPackingStation;

      LineNo := 0;
      TotalAssignedNotRounded := 0;
      TotalAssignedRounded := 0;
      TotalQuantityBaseAssigned := 0;
      REPEAT
        SalesLine.RESET;
        SalesLine.SETRANGE("Document Type",CurrentSalesLine."Document Type");
        SalesLine.SETRANGE("Document No.",CurrentSalesLine."Document No.");
        SalesLine.SETRANGE(Type,FastPackSalesLineTmp.Type);
        SalesLine.SETRANGE("No.",FastPackSalesLineTmp."No.");
        SalesLine.SETRANGE("Variant Code",FastPackSalesLineTmp."Variant Code");
        SalesLine.SETRANGE("Drop Shipment",FALSE);
        SalesLine.SETRANGE(Pack,TRUE);
        SalesLine.SETFILTER("Outstanding Quantity",'<>0');
        IF SalesLine.FIND('-') THEN
          REPEAT
            IF FastPackSalesLineTmp."Quantity (Base)" <> 0 THEN BEGIN
              // Additional code required in Attain
              SalesLine.SETRANGE("Line No.",SalesLine."Line No.");
              SalesLineQuantityBase :=
                SalesLine."Qty. to Ship (Base)" +
                EShipValidation."SalesLine-CalcEShipWhseOutstQtyBase"(SalesLine,
                  ShippingSetup."Location Packing",PackingStation."Location Code");
              SalesLine.SETRANGE("Line No.");

              IF SalesLineQuantityBase <> 0 THEN BEGIN
                IF SalesLineQuantityBase > FastPackSalesLineTmp."Quantity (Base)" THEN
                  SalesLineQuantityBase := FastPackSalesLineTmp."Quantity (Base)";

                IF TotalQuantityBaseAssigned + SalesLineQuantityBase = TotalQuantityBase THEN BEGIN
                  Assigned := 1 - TotalAssignedRounded;
                END ELSE BEGIN
                  IF TotalFactor <> 0 THEN
                    TotalAssignedNotRounded :=
                      TotalAssignedNotRounded +
                      (((FastPackSalesLineTmp.Quantity * SalesLineQuantityBase) /
                        FastPackSalesLineTmp."Qty. to Ship (Base)") /
                       TotalFactor)
                  ELSE
                    TotalAssignedNotRounded :=
                      TotalAssignedNotRounded +
                      ((SalesLineQuantityBase /
                        FastPackSalesLineTmp."Qty. to Ship (Base)") /
                       TotalQuantityBase);

                  Assigned := ROUND(TotalAssignedNotRounded - TotalAssignedRounded,0.0001);
                END;
                TotalAssignedRounded := TotalAssignedRounded + Assigned;
                TotalQuantityBaseAssigned := TotalQuantityBaseAssigned + SalesLineQuantityBase;

                IF Assigned <> 0 THEN BEGIN
                  ItemChargeAssgntSales.INIT;
                  LineNo := LineNo + 10000;
                  ItemChargeAssgntSales."Document Type" := CurrentSalesLine."Document Type";
                  ItemChargeAssgntSales."Document No." := CurrentSalesLine."Document No.";
                  ItemChargeAssgntSales."Document Line No." := CurrentSalesLine."Line No.";
                  ItemChargeAssgntSales."Line No." := LineNo;
                  ItemChargeAssgntSales."Item Charge No." := CurrentSalesLine."No.";
                  ItemChargeAssgntSales."Item No." := SalesLine."No.";
                  ItemChargeAssgntSales.Description := SalesLine.Description;
                  ItemChargeAssgntSales."Unit Cost" := CurrentSalesLine."Unit Cost";
                  ItemChargeAssgntSales."Applies-to Doc. Type" := SalesLine."Document Type";
                  ItemChargeAssgntSales."Applies-to Doc. No." := SalesLine."Document No.";
                  ItemChargeAssgntSales."Applies-to Doc. Line No." := SalesLine."Line No.";
                  ItemChargeAssgntSales.VALIDATE("Qty. to Assign",Assigned);
                  ItemChargeAssgntSales.INSERT;
                END;

                FastPackSalesLineTmp."Quantity (Base)" :=
                  FastPackSalesLineTmp."Quantity (Base)" - SalesLineQuantityBase;
                IF FastPackSalesLineTmp."Quantity (Base)" = 0 THEN
                  FastPackSalesLineTmp.DELETE
                ELSE
                  FastPackSalesLineTmp.MODIFY;
              END;
            END;
          UNTIL SalesLine.NEXT = 0;
      UNTIL FastPackSalesLineTmp.NEXT = 0;
    END;

    PROCEDURE SummarizeItems@56(CurrentPackage@1240030000 : Record 14000701;VAR FastPackSalesLineTmp@1240030003 : TEMPORARY Record 14000711;VAR TotalFactor@1240030006 : Decimal;VAR TotalQuantityBase@1240030005 : Decimal);
    VAR
      PackageLine@1240030001 : Record 14000702;
      Package@1240030002 : Record 14000701;
      ValueToAdd@1240030004 : Decimal;
    BEGIN
      GetShippingSetup;

      PackageLine.RESET;
      PackageLine.SETRANGE("Package No.",CurrentPackage."No.");
      PackageLine.SETRANGE(Type,PackageLine.Type::Item);
      PackageLine.SETFILTER("Quantity (Base)",'<>0');
      PackageLine.SETFILTER("No.",'<>%1','');
      IF PackageLine.FIND('-') THEN
        REPEAT
          CASE PackageLine.Type OF
            PackageLine.Type::"Account (G/L)",PackageLine.Type::Item,PackageLine.Type::Resource:
              BEGIN
                FastPackSalesLineTmp.RESET;
                FastPackSalesLineTmp.SETRANGE(Type,PackageLine.Type);
                FastPackSalesLineTmp.SETRANGE("No.",PackageLine."No.");
                FastPackSalesLineTmp.SETRANGE("Variant Code",PackageLine."Variant Code");
                CASE ShippingSetup."Distribute Cost" OF
                  ShippingSetup."Distribute Cost"::Equal:
                    ValueToAdd := 1;
                  ShippingSetup."Distribute Cost"::"by Weight":
                    CASE ShippingSetup."Actual Weight as" OF
                      ShippingSetup."Actual Weight as"::"Net Weight":
                        ValueToAdd := PackageLine."Net Weight";
                      ShippingSetup."Actual Weight as"::"Gross Weight":
                        ValueToAdd := PackageLine."Gross Weight";
                      ShippingSetup."Actual Weight as"::"Dimmed Weight":
                        ValueToAdd := PackageLine."Dim. Weight";
                      ELSE
                        ShippingSetup.FIELDERROR(
                          "Actual Weight as",
                          STRSUBSTNO(Text002,ShippingSetup."Actual Weight as"));
                    END;
                  ShippingSetup."Distribute Cost"::"by Value":
                    CASE ShippingSetup."Declare Value As" OF
                      ShippingSetup."Declare Value As"::Cost:
                        ValueToAdd := PackageLine."Value (Cost)";
                      ShippingSetup."Declare Value As"::Price:
                        ValueToAdd := PackageLine."Value (Price)";
                      ELSE
                        ShippingSetup.FIELDERROR(
                          "Declare Value As",
                          STRSUBSTNO(Text002,ShippingSetup."Declare Value As"));
                    END;
                  ShippingSetup."Distribute Cost"::"by Volume":
                    ValueToAdd := PackageLine.Volume;
                  ELSE
                    ShippingSetup.FIELDERROR(
                      "Distribute Cost",
                      STRSUBSTNO(Text002,ShippingSetup."Distribute Cost"));
                END;
                IF FastPackSalesLineTmp.FIND('-') THEN BEGIN
                  FastPackSalesLineTmp.Quantity := FastPackSalesLineTmp.Quantity + ValueToAdd;
                  FastPackSalesLineTmp."Quantity (Base)" :=
                    FastPackSalesLineTmp."Quantity (Base)" + PackageLine."Quantity (Base)";
                  FastPackSalesLineTmp."Qty. to Ship (Base)" := FastPackSalesLineTmp."Quantity (Base)";
                  FastPackSalesLineTmp.MODIFY;
                END ELSE BEGIN
                  FastPackSalesLineTmp.INIT;
                  FastPackSalesLineTmp.Type := PackageLine.Type;
                  FastPackSalesLineTmp."No." := PackageLine."No.";
                  FastPackSalesLineTmp."Variant Code" := PackageLine."Variant Code";
                  FastPackSalesLineTmp.Quantity := ValueToAdd;
                  FastPackSalesLineTmp."Quantity (Base)" := PackageLine."Quantity (Base)";
                  FastPackSalesLineTmp."Qty. to Ship (Base)" := FastPackSalesLineTmp."Quantity (Base)";
                  FastPackSalesLineTmp.INSERT;
                END;

                TotalFactor := TotalFactor + ValueToAdd;
                TotalQuantityBase := TotalQuantityBase + PackageLine."Quantity (Base)";
              END;
            PackageLine.Type::Package:
              BEGIN
                Package.GET(PackageLine."No.");
                IF Package."Multi Document Package" THEN BEGIN
                  Package.RESET;
                  Package.SETCURRENTKEY("Original Package No.");
                  Package.SETRANGE("Original Package No.",Package."No.");
                  Package.SETRANGE("Source Type",CurrentPackage."Source Type");
                  Package.SETRANGE("Source Subtype",CurrentPackage."Source Subtype");
                  Package.SETRANGE("Source ID",CurrentPackage."Source ID");
                  IF Package.FIND('-') THEN
                    SummarizeItems(Package,FastPackSalesLineTmp,TotalFactor,TotalQuantityBase);
                END;
              END;
          END;
        UNTIL PackageLine.NEXT = 0;
    END;

    PROCEDURE CheckSalesHeader@25(SalesHeader@1240030000 : Record 36);
    VAR
      Package@1240030001 : Record 14000701;
      SalesLine@1240030002 : Record 37;
      Location@1000000000 : Record 14;
      JobQueueEntry@1000000003 : Record 472;
      RecRef@1000000002 : RecordRef;
      SalesPost@1000000001 : Codeunit 80;
      ItemService@1000000004 : Record 27;
      Codeunit80EventSubscriber@1000000005 : Codeunit 51787;
    BEGIN
      IF NOT (SalesHeader."Document Type" IN
              [SalesHeader."Document Type"::Order,SalesHeader."Document Type"::Invoice])
      THEN
        EXIT;

      GetShippingSetup;
      IF ShippingSetup."Location Packing" THEN BEGIN
        // <TPZ162>
       // IF SalesPost.IsNASBackgroundClient AND NOT ISNULLGUID(SalesHeader."Job Queue Entry ID") THEN BEGIN //TPZ2829 Event Conversion
        IF Codeunit80EventSubscriber.CU80_IsNASBackgroundClient AND NOT ISNULLGUID(SalesHeader."Job Queue Entry ID") THEN BEGIN //TPZ2829 Event Conversion
          RecRef.GETTABLE(SalesHeader);
          JobQueueEntry.SETRANGE(ID,SalesHeader."Job Queue Entry ID");
          JobQueueEntry.SETRANGE("Record ID to Process",RecRef.RECORDID);
          JobQueueEntry.FINDFIRST;
          GetUserPackingStation(JobQueueEntry."User ID");
        END ELSE
        GetPackingStation;
        // </TPZ162>

        SalesLine.RESET;
        SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
        SalesLine.SETRANGE("Document No.",SalesHeader."No.");
        SalesLine.SETFILTER("Qty. to Ship",'<>0');
        SalesLine.SETFILTER("Location Code",'<>%1',PackingStation."Location Code");

        //TM BEG 062615 - Changed codes to allow non-wms location to post shipment without e-ship packing.
        {
        IF SalesLine.FIND('-') THEN
          ERROR(
            Text003,
            PackingStation."Location Code",ShippingSetup.FIELDNAME("Location Packing"));
        }
        {
        IF SalesLine.FINDSET THEN
        REPEAT
         IF (Location.Code <> SalesLine."Location Code") AND (SalesLine.Type = SalesLine.Type::Item) AND
            (SalesLine."No." <> '') THEN
          IF (ItemService.GET(SalesLine."No.")) AND (ItemService.Type <> ItemService.Type :: Service) THEN  BEGIN //<TPZ2482>
           Location.GET(SalesLine."Location Code");
           IF Location."Bin Mandatory" = FALSE THEN
             IF SalesLine.Pack THEN BEGIN
              SalesLine.Pack := FALSE;
              //SalesLine.MODIFY; // temp block
             END;
          END;//<TPZ2482>
        UNTIL SalesLine.NEXT = 0;
        //TM END 062615
        }//TPZ2829 Utkarsh Event Conversion Need to test
      END;

      Package.RESET;
      Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Package.SETRANGE("Source Type",DATABASE::"Sales Header");
      Package.SETRANGE("Source Subtype",SalesHeader."Document Type");
      Package.SETRANGE("Source ID",SalesHeader."No.");
      IF ShippingSetup."Location Packing" THEN
        Package.SETRANGE("Location Code",PackingStation."Location Code");
      IF Package.FIND('-') THEN
        REPEAT
          Package.TESTFIELD(Closed);

          IF ShippingSetup."Shipping Agent Required" THEN BEGIN
            IF (Package."Shipping Agent Code" = '') THEN
              ERROR(
                Text004,
                Package."No.",SalesHeader."Document Type",SalesHeader."No.");
            IF (Package."Shipping Agent Service" = '') THEN
              ERROR(
                Text005,
                Package."No.",SalesHeader."Document Type",SalesHeader."No.");
          END;
        UNTIL Package.NEXT = 0;

      CheckSalesHeaderPacked(SalesHeader,TRUE);
    END;

    LOCAL PROCEDURE CheckSalesHeaderPacked@5(SalesHeader@1240030000 : Record 36;DuringPosting@1240030002 : Boolean);
    VAR
      Package@1000000008 : Record 14000701;
      Package2@1000000009 : Record 14000701;
      PackageLine@1000000001 : Record 14000702;
      SalesLine@1000000002 : Record 37;
      SalesLine2@1000000003 : Record 37;
      PackingRule@1240030001 : Record 14000715;
      QtyToShip@1000000004 : Decimal;
      SalesLineQtyToShipBase@1000000006 : Decimal;
      SalesLine2QtyToShipBase@1000000007 : Decimal;
    BEGIN
      GetShippingSetup;
      IF ShippingSetup."Location Packing" THEN
        GetPackingStation;

      IF ShippingSetup."Shipping Agent Required" THEN
        SalesHeader.TESTFIELD("Shipping Agent Code");

      PackageLine.RESET;
      PackageLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      PackageLine.SETRANGE("Source Type",DATABASE::"Sales Header");
      PackageLine.SETRANGE("Source Subtype",SalesHeader."Document Type");
      PackageLine.SETRANGE("Source ID",SalesHeader."No.");
      PackageLine.SETRANGE(Type,PackageLine.Type::"Account (G/L)",PackageLine.Type::Resource);
      IF ShippingSetup."Location Packing" THEN
        PackageLine.SETRANGE("Location Code",PackingStation."Location Code");

      IF SalesHeader."Shipping Agent Code" <> '' THEN
        GetShippingAgent(SalesHeader."Shipping Agent Code")
      ELSE
        CLEAR(ShippingAgent);

      IF ShippingSetup."Prepack Shipping Agent Code" <> '' THEN BEGIN
        Package.RESET;
        Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
        Package.SETRANGE("Source Type",DATABASE::"Sales Header");
        Package.SETRANGE("Source Subtype",SalesHeader."Document Type");
        Package.SETRANGE("Source ID",SalesHeader."No.");
        IF ShippingSetup."Location Packing" THEN
          Package.SETRANGE("Location Code",PackingStation."Location Code");
        Package.SETRANGE("Shipping Agent Code",ShippingSetup."Prepack Shipping Agent Code");
        Package.SETRANGE("Exist in Other Package",FALSE);
        IF Package.FIND('-') THEN
          IF Package."Multi Document Package" AND (Package."Original Package No." <> '') THEN BEGIN
            Package2.GET(Package."Original Package No.");
            Package2.CALCFIELDS("Exist in Other Package");
            IF NOT Package2."Exist in Other Package" THEN
              ERROR(
                Text006,
                Package."No.",Package."Shipping Agent Code");
          END ELSE
            ERROR(
              Text006,
              Package."No.",Package."Shipping Agent Code");
      END;

      PackingRule.GetPackingRule(0,SalesHeader."Sell-to Customer No.",SalesHeader."Ship-to Code");
      IF NOT PackingRule.PackDetail(
               DATABASE::"Sales Header",SalesHeader."Document Type",SalesHeader."Shipping Agent Code") AND
         NOT PackageLine.FIND('-')
      THEN
        EXIT;

      SalesLine.RESET;
      SalesLine.SETCURRENTKEY(
        "Document Type","Document No.",Type,"No.","Variant Code","Drop Shipment",Pack);
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE(Pack,TRUE);
      SalesLine.SETRANGE("Drop Shipment",FALSE);
      IF ShippingSetup."Location Packing" AND NOT DuringPosting THEN
        SalesLine.SETRANGE("Location Code",PackingStation."Location Code");

      SalesLine.CALCSUMS("Qty. to Ship (Base)");

      // Additional code required in Attain
      SalesLineQtyToShipBase := SalesLine."Qty. to Ship (Base)";
      IF NOT DuringPosting THEN
        SalesLineQtyToShipBase :=
          SalesLineQtyToShipBase +
          EShipValidation."SalesLine-CalcEShipWhseOutstQtyBase"(SalesLine,
            ShippingSetup."Location Packing",PackingStation."Location Code");

      PackageLine.CALCSUMS(PackageLine."Quantity (Base)");
      PackageLine."Quantity (Base)" := ROUND(PackageLine."Quantity (Base)",0.00001);
      {
      IF SalesLineQtyToShipBase <> PackageLine."Quantity (Base)" THEN BEGIN
        IF SalesLineQtyToShipBase > PackageLine."Quantity (Base)" THEN
          ERROR(Text007);
        IF PackageLine."Quantity (Base)" > SalesLineQtyToShipBase THEN
          ERROR(Text008);
      END;
      }

      SalesLine2.RESET;
      SalesLine2.SETCURRENTKEY(
        "Document Type","Document No.",Type,"No.","Variant Code","Drop Shipment",Pack);
      SalesLine2.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine2.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine2.SETRANGE(Pack,TRUE);
      SalesLine2.SETRANGE("Drop Shipment",FALSE);
      IF ShippingSetup."Location Packing" AND NOT DuringPosting THEN
        SalesLine2.SETRANGE("Location Code",PackingStation."Location Code");
      IF SalesLine.FIND('-') THEN
        REPEAT
          PackageLine.SETRANGE("No.",SalesLine."No.");
          PackageLine.SETRANGE("Variant Code",SalesLine."Variant Code");
          SalesLine2.SETRANGE("No.",SalesLine."No.");
          SalesLine2.SETRANGE("Variant Code",SalesLine."Variant Code");

          PackageLine.CALCSUMS("Quantity (Base)");
          PackageLine."Quantity (Base)" := ROUND(PackageLine."Quantity (Base)",0.00001);
          SalesLine2.CALCSUMS("Qty. to Ship (Base)");
          SalesLine2."Qty. to Ship (Base)" := ROUND(SalesLine2."Qty. to Ship (Base)",0.00001);

          // Additional code required in Attain
          SalesLine2QtyToShipBase := SalesLine2."Qty. to Ship (Base)";
          IF NOT DuringPosting THEN
            SalesLine2QtyToShipBase :=
              SalesLine2QtyToShipBase +
              EShipValidation."SalesLine-CalcEShipWhseOutstQtyBase"(SalesLine2,
                ShippingSetup."Location Packing",PackingStation."Location Code");

          {IF SalesLine2QtyToShipBase > PackageLine."Quantity (Base)" THEN
            ERROR(
              Text009,
              SalesLine."No.",SalesLine."Variant Code");
          IF PackageLine."Quantity (Base)" > SalesLine2QtyToShipBase THEN
            ERROR(
              Text010,
              SalesLine."No.",SalesLine."Variant Code");
              }
        UNTIL SalesLine.NEXT = 0;

      PackageLine.RESET;
      PackageLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      PackageLine.SETRANGE("Source Type",DATABASE::"Sales Header");
      PackageLine.SETRANGE("Source Subtype",SalesHeader."Document Type");
      PackageLine.SETRANGE("Source ID",SalesHeader."No.");
      PackageLine.SETRANGE("Serial No.",'');
      PackageLine.SETRANGE("Pack Serial Number",TRUE);
      IF ShippingSetup."Location Packing" THEN
        PackageLine.SETRANGE("Location Code",PackingStation."Location Code");
      IF PackageLine.FIND('-') THEN
        ERROR(
          Text011,
          PackageLine.Type,PackageLine."No.",PackageLine."Package No.");

      PackageLine.RESET;
      PackageLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      PackageLine.SETRANGE("Source Type",DATABASE::"Sales Header");
      PackageLine.SETRANGE("Source Subtype",SalesHeader."Document Type");
      PackageLine.SETRANGE("Source ID",SalesHeader."No.");
      PackageLine.SETRANGE("Lot No.",'');
      PackageLine.SETRANGE("Pack Lot Number",TRUE);
      IF ShippingSetup."Location Packing" THEN
        PackageLine.SETRANGE("Location Code",PackingStation."Location Code");
      IF PackageLine.FIND('-') THEN
        ERROR(
          Text012,
          PackageLine.Type,PackageLine."No.",PackageLine."Package No.");

      PackageLine.RESET;
      PackageLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      PackageLine.SETRANGE("Source Type",DATABASE::"Sales Header");
      PackageLine.SETRANGE("Source Subtype",SalesHeader."Document Type");
      PackageLine.SETRANGE("Source ID",SalesHeader."No.");
      PackageLine.SETRANGE("Warranty Date",0D);
      PackageLine.SETRANGE("Pack Warranty Date",TRUE);
      IF ShippingSetup."Location Packing" THEN
        PackageLine.SETRANGE("Location Code",PackingStation."Location Code");
      IF PackageLine.FIND('-') THEN
        ERROR(
          Text013,
          PackageLine.Type,PackageLine."No.",PackageLine."Package No.");

      PackageLine.RESET;
      PackageLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      PackageLine.SETRANGE("Source Type",DATABASE::"Sales Header");
      PackageLine.SETRANGE("Source Subtype",SalesHeader."Document Type");
      PackageLine.SETRANGE("Source ID",SalesHeader."No.");
      PackageLine.SETRANGE("Expiration Date",0D);
      PackageLine.SETRANGE("Pack Expiration Date",TRUE);
      IF ShippingSetup."Location Packing" THEN
        PackageLine.SETRANGE("Location Code",PackingStation."Location Code");
      IF PackageLine.FIND('-') THEN
        ERROR(
          Text014,
          PackageLine.Type,PackageLine."No.",PackageLine."Package No.");
    END;

    PROCEDURE PostPackageSalesShipment@1(SalesHeader@1000000000 : Record 36;SalesShipmentHeader@1000000001 : Record 110);
    VAR
      Package@1000000002 : Record 14000701;
      Package2@1000000006 : Record 14000701;
      BillOfLading@1000000003 : Record 14000822;
      BillOfLadingLine@1000000004 : Record 14000823;
      SalesLine@1240030000 : Record 37;
      BillOfLadingInfo@1000000008 : Record 14000827;
      BOLMgt@1000000007 : Codeunit 14000821;
      OldBillOfLadingLine@1000000005 : Record 14000823;
      PackagePosted@1000000009 : Boolean;
    BEGIN
      IF NOT (SalesHeader."Document Type" IN
              [SalesHeader."Document Type"::Order,SalesHeader."Document Type"::Invoice])
      THEN
        EXIT;

      GetShippingSetup;

      IF ShippingSetup."Location Packing" THEN BEGIN
        GetPackingStation;

        //<TPZ> Allow overnight posting using system account;
        //IF IsNASBackgroundClient() THEN //VAH
          PackingStation."Location Code" := SalesHeader."Location Code";
        //</TPZ>

        SalesLine.RESET;
        SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
        SalesLine.SETRANGE("Document No.",SalesHeader."No.");
        SalesLine.SETFILTER("Qty. to Ship",'<>0');
        SalesLine.SETFILTER("Location Code",'<>%1',PackingStation."Location Code");
        //TM BEG 062615 - Changes code to allow non-wms location to post shipment without e-ship packing.
        { //ORIGINAL CODES
        IF SalesLine.FIND('-') THEN
          ERROR(
            Text003,
            PackingStation."Location Code",ShippingSetup.FIELDNAME("Location Packing"));
        }
        //TM END 062615
      END;

      CheckSalesHeaderPacked(SalesHeader,TRUE);

      Package.RESET;
      Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Package.SETRANGE("Source Type",DATABASE::"Sales Header");
      Package.SETRANGE("Source Subtype",SalesHeader."Document Type");
      Package.SETRANGE("Source ID",SalesHeader."No.");
      IF ShippingSetup."Location Packing" THEN BEGIN
        GetPackingStation;
        Package.SETRANGE("Location Code",PackingStation."Location Code");
      END;
      IF Package.FIND('-') THEN BEGIN
        BillOfLadingLine.LOCKTABLE;

        REPEAT
          PackagePosted := FALSE; //gg
          Package.TESTFIELD(Closed);
          //gg-->>
          IF SalesShipmentHeader."Bill of Lading No." <> '' THEN BEGIN
          PostPackage(
            Package,SalesShipmentHeader."No.",SalesShipmentHeader."Bill of Lading No.",
                SalesShipmentHeader."Posting Date");
            PackagePosted := TRUE;
          END ELSE BEGIN
            ShippingAgent.GET(Package."Shipping Agent Code");
            IF ShippingAgent."Shipper Type" IN
                [ShippingAgent."Shipper Type"::" ",ShippingAgent."Shipper Type"::LTL] THEN BEGIN // Code added for programming error
            BillOfLadingLine.RESET;
            BillOfLadingLine.SETCURRENTKEY(Type,"No.",Closed,"Location Code");
            BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
            BillOfLadingLine.SETRANGE("No.",SalesHeader."No.");
            IF ShippingSetup."Location Packing" THEN BEGIN
              GetPackingStation;
              BillOfLadingLine.SETRANGE("Location Code",PackingStation."Location Code");
            END;
            BillOfLadingLine.SETRANGE("Source Type",DATABASE::"Sales Header");
            BillOfLadingLine.SETRANGE("Source Subtype",SalesHeader."Document Type");
            BillOfLadingLine.SETRANGE("Source ID",SalesHeader."No.");
            IF BillOfLadingLine.FIND('-') THEN  BEGIN
              REPEAT
                BillOfLading.GET(BillOfLadingLine."Bill of Lading No.");
                IF NOT BillOfLading.Posted THEN BEGIN
                  IF BillOfLading.Released THEN
                      //BOLMgt.OpenBillOfLading(BillOfLading); //TPZ3068 Code commented for programming error
                      BillOfLadingLine.SuspendTestReleased(TRUE); //TPZ3068 code added
                  BillOfLadingLine."Posted Source ID" := SalesShipmentHeader."No.";
                  BillOfLadingLine.MODIFY;
                  BillOfLadingInfo.RESET;
                  BillOfLadingInfo.SETRANGE("Bill of Lading No.", BillOfLading."No.");
                  BillOfLadingInfo.SETRANGE("Source Type", BillOfLadingLine."Source Type");
                  BillOfLadingInfo.SETRANGE("Source Subtype", BillOfLadingLine."Source Subtype");
                  BillOfLadingInfo.SETRANGE("Source ID", BillOfLadingLine."Source ID");
                  IF BillOfLadingInfo.FINDSET THEN
                  REPEAT
                    BillOfLadingInfo."Posted Source ID" := BillOfLadingLine."Posted Source ID";
                    BillOfLadingInfo.MODIFY;
                  UNTIL BillOfLadingInfo.NEXT = 0;
                    IF NOT PackagePosted THEN BEGIN
                    PostPackage(
                      Package,SalesShipmentHeader."No.",BillOfLading."No.",SalesShipmentHeader."Posting Date");
                  PackagePosted := TRUE;
                END;
                  END;
              UNTIL BillOfLadingLine.NEXT = 0;
            END ELSE BEGIN
              PostPackage(
                Package,SalesShipmentHeader."No.",SalesShipmentHeader."Bill of Lading No.",
                  SalesShipmentHeader."Posting Date");
              PackagePosted := TRUE;
          END;
          END;
          END;
          //<<--gg
          IF NOT PackagePosted THEN BEGIN
          PostPackage(
            Package,SalesShipmentHeader."No.",SalesShipmentHeader."Bill of Lading No.",
            SalesShipmentHeader."Posting Date");
            PackagePosted := TRUE;
          END;
          IF Package."Multi Document Package" THEN BEGIN
            Package2.RESET;
            Package2.SETCURRENTKEY("Original Package No.");
            Package2.SETRANGE("Original Package No.",Package."Original Package No.");
            IF NOT Package2.FIND('-') THEN BEGIN
              Package2.GET(Package."Original Package No.");
              PostPackage(Package2,'','',WORKDATE);
            END;
          END;
        UNTIL Package.NEXT = 0;
      END;

      BillOfLadingLine.RESET;
      BillOfLadingLine.SETCURRENTKEY(Type,"No.",Closed,"Location Code");
      BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
      BillOfLadingLine.SETRANGE("No.",SalesHeader."No.");
      //BillOfLadingLine.SETRANGE(Closed,FALSE);
      IF ShippingSetup."Location Packing" THEN BEGIN
        GetPackingStation;
        BillOfLadingLine.SETRANGE("Location Code",PackingStation."Location Code");
      END;
      BillOfLadingLine.SETRANGE("Source Type",DATABASE::"Sales Header");
      BillOfLadingLine.SETRANGE("Source Subtype",SalesHeader."Document Type");
      BillOfLadingLine.SETRANGE("Source ID",SalesHeader."No.");
      IF BillOfLadingLine.FIND('-') THEN REPEAT
        BillOfLading.GET(BillOfLadingLine."Bill of Lading No.");
        IF NOT BillOfLading.Posted THEN BEGIN
          //BillOfLading.TESTFIELD(Posted,FALSE);//28418
        //TM BEG 080415 - Comment out because so that user can release BOL first before posting BOL
        //BillOfLading.TESTFIELD(Released,FALSE);
        OldBillOfLadingLine := BillOfLadingLine;
        //TM END 080415

        BillOfLadingLine.LOCKTABLE;
        BillOfLadingLine.RESET;
        BillOfLadingLine.SETRANGE("Bill of Lading No.",BillOfLading."No.");
        IF NOT BillOfLadingLine.FIND('+') THEN BEGIN
          BillOfLadingLine."Bill of Lading No." := BillOfLading."No.";
          BillOfLadingLine."Line No." := 10000;
        END;
        BillOfLadingLine.INIT;

        //TM BEG 080415
        BillOfLadingLine.SuspendTestReleased(TRUE);
        //TM END 080415

        BillOfLadingLine."Line No." := BillOfLadingLine."Line No." + 10000;
        BillOfLadingLine."Source Type" := DATABASE::"Sales Header";
        BillOfLadingLine."Source Subtype" := SalesHeader."Document Type";
        BillOfLadingLine."Source ID" := SalesHeader."No.";
        BillOfLadingLine."Posted Source ID" := SalesShipmentHeader."No.";
        BillOfLadingLine.Type := BillOfLadingLine.Type::"Sales Shipment (Posted)";
        BillOfLadingLine.VALIDATE("No.",SalesShipmentHeader."No.");
        BillOfLadingLine.INSERT(TRUE);


        //TM BEG 080415 - Update bill of lading info line
        BillOfLadingInfo.SETRANGE("Bill of Lading No.", BillOfLading."No.");
        BillOfLadingInfo.SETRANGE("Source Type", BillOfLadingLine."Source Type");
        BillOfLadingInfo.SETRANGE("Source Subtype", BillOfLadingLine."Source Subtype");
        BillOfLadingInfo.SETRANGE("Source ID", BillOfLadingLine."Source ID");
        IF BillOfLadingInfo.FINDSET THEN
        REPEAT
          BillOfLadingInfo."Posted Source ID" := BillOfLadingLine."Posted Source ID";
          BillOfLadingInfo.MODIFY;
        UNTIL BillOfLadingInfo.NEXT = 0;
        //TM END 080415
      END;
      UNTIL BillOfLadingLine.NEXT = 0;
    END;

    PROCEDURE CreateBOLPostSalesShipment@37(CurrentSalesShipmentHeader@1000000000 : Record 110);
    VAR
      Customer@1000000001 : Record 18;
      PackingRule@1000000003 : Record 14000715;
      BillOfLading@1000000004 : Record 14000822;
    BEGIN
      WITH CurrentSalesShipmentHeader DO BEGIN
        IF "No." = '' THEN
          EXIT;

        FIND;

        GetShippingSetup;

        IF NOT ShippingSetup."Enable Bill of Lading" THEN
          EXIT;

        PackingRule.GetPackingRule(0,"Sell-to Customer No.","Ship-to Code");

        IF PackingRule."Auto Bill of Lading When Ship" AND ("Bill of Lading No." = '') THEN BEGIN
          BillOfLading.CreateBillOfLadingSalesShpt(
            CurrentSalesShipmentHeader,PackingRule."Auto Bill of Lading by Package",FALSE,TRUE);

          COMMIT;
        END;
      END;
    END;

    PROCEDURE BlankBillOFLadingNoSalesHeader@45(VAR CurrentSalesHeader@1240030000 : Record 36;EverythingInvoiced@1240030001 : Boolean);
    VAR
      PackingRule@1240030002 : Record 14000715;
      BillOfLadingLine@1240030003 : Record 14000823;
    BEGIN
      IF CurrentSalesHeader.Ship THEN BEGIN
        PackingRule.GetPackingRule(
          0,CurrentSalesHeader."Sell-to Customer No.",CurrentSalesHeader."Ship-to Code");
        IF PackingRule."Blank BOL No. when Post. Ship" THEN BEGIN
          GetShippingSetup;

          BillOfLadingLine.RESET;
          BillOfLadingLine.SETCURRENTKEY(Type,"No.",Closed,"Location Code");
          BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
          BillOfLadingLine.SETRANGE("No.",CurrentSalesHeader."No.");
          BillOfLadingLine.SETRANGE(Closed,FALSE);
          IF ShippingSetup."Location Packing" THEN BEGIN
            GetPackingStation;
            BillOfLadingLine.SETRANGE("Location Code",PackingStation."Location Code");
          END;
          BillOfLadingLine.SETRANGE("Source Type",DATABASE::"Sales Header");
          BillOfLadingLine.SETRANGE("Source Subtype",CurrentSalesHeader."Document Type");
          BillOfLadingLine.SETRANGE("Source ID",CurrentSalesHeader."No.");

          //TM BEG 080415
          //IF BillOfLadingLine.FIND('-') THEN
          //  BillOfLadingLine.DELETE(TRUE);
          IF BillOfLadingLine.FIND('-') THEN BEGIN
            BillOfLadingLine.SuspendTestReleased(TRUE);
            BillOfLadingLine.DELETE(TRUE);
        END;
          //TM END 080415
        END;
      END;

      IF CurrentSalesHeader.Invoice THEN BEGIN
        CurrentSalesHeader."Invoice for Bill of Lading No." := '';
        CurrentSalesHeader."Invoice for Shipment No." := '';
        CurrentSalesHeader."Shipment Invoice Override" := FALSE;
      END;

      IF EverythingInvoiced THEN BEGIN
        BillOfLadingLine.RESET;
        BillOfLadingLine.SETCURRENTKEY(Type,"No.",Closed);
        BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
        BillOfLadingLine.SETRANGE("No.",CurrentSalesHeader."No.");
        BillOfLadingLine.SETRANGE(Closed,FALSE);
        BillOfLadingLine.SETRANGE("Source Type",DATABASE::"Sales Header");
        BillOfLadingLine.SETRANGE("Source Subtype",CurrentSalesHeader."Document Type");
        BillOfLadingLine.SETRANGE("Source ID",CurrentSalesHeader."No.");

        //TM BEG 080415
        //BillOfLadingLine.DELETEALL(TRUE);
        IF BillOfLadingLine.FINDSET THEN
        REPEAT
          BillOfLadingLine.SuspendTestReleased(TRUE);
          BillOfLadingLine.DELETE(TRUE);
        UNTIL BillOfLadingLine.NEXT = 0;
        //TM END 080415

      END;
    END;

    PROCEDURE SetShipmentInvoiceQty@1059(SalesHeader@1240030000 : Record 36);
    VAR
      SalesLine@1240030001 : Record 37;
      SalesShipmentLine@1240030002 : Record 111;
      EndOFSalesLines@1240030003 : Boolean;
      EndOfSalesShipmentLines@1240030004 : Boolean;
    BEGIN
      IF SalesHeader."Invoice for Shipment No." = '' THEN
        EXIT;

      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      EndOFSalesLines := SalesLine.FIND('-');

      SalesShipmentLine.RESET;
      SalesShipmentLine.SETRANGE("Document No.",SalesHeader."Invoice for Shipment No.");
      SalesShipmentLine.SETFILTER("Qty. Shipped Not Invoiced",'>0');
      EndOfSalesShipmentLines := SalesShipmentLine.FIND('-');
      REPEAT
        CASE TRUE OF
          SalesLine."Line No." = SalesShipmentLine."Line No.":
            BEGIN
              IF SalesLine."Qty. to Invoice" <> SalesShipmentLine.Quantity THEN BEGIN
                SalesLine.VALIDATE("Qty. to Invoice",SalesShipmentLine.Quantity);
                SalesLine.MODIFY(TRUE);
              END;

              EndOFSalesLines := SalesLine.NEXT = 0;
              EndOfSalesShipmentLines := SalesShipmentLine.NEXT = 0;
            END;
          (SalesLine."Line No." < SalesShipmentLine."Line No.") OR EndOfSalesShipmentLines:
            BEGIN
              IF SalesLine."Qty. to Invoice" <> 0 THEN BEGIN
                SalesLine.VALIDATE("Qty. to Invoice",0);
                SalesLine.MODIFY(TRUE);
              END;

              EndOFSalesLines := SalesLine.NEXT = 0;
            END;
          ELSE BEGIN
            IF SalesShipmentLine.Quantity <> 0 THEN
              ERROR(
                Text015,
                SalesShipmentLine.Type,SalesShipmentLine."No.",SalesShipmentLine."Line No.");

              EndOfSalesShipmentLines := SalesShipmentLine.NEXT = 0;
          END;
        END;
      UNTIL EndOFSalesLines AND EndOfSalesShipmentLines;
    END;

    PROCEDURE CheckShipmentInvoicing@1057(SalesHeader@1240030000 : Record 36;VAR SalesShipmentHeader@1240030001 : Record 110;VAR SalesInvoiceHeader@1240030002 : Record 112;TestLines@1240030003 : Boolean);
    VAR
      PackingRule@1240030004 : Record 14000715;
      SalesShipmentHeader2@1240030005 : Record 110;
      SalesInvoiceHeader2@1240030012 : Record 112;
      SalesLine@1240030006 : Record 37;
      SalesShipmentLine@1240030007 : Record 111;
      SalesInvoiceLine@1240030008 : Record 113;
      ShipmentHeaderEdit@1240030009 : Codeunit 391;
      EndOfShipmentLines@1240030010 : Boolean;
      EndOfInvoiceLines@1240030011 : Boolean;
    BEGIN
      IF (SalesHeader."Document Type" <> SalesHeader."Document Type"::Order) OR
         NOT SalesHeader.Invoice
      THEN
        EXIT;

      IF SalesHeader."Shipment Invoice Override" THEN BEGIN
        SalesHeader.TESTFIELD("Invoice for Shipment No.",'');

        EXIT;
      END;

      PackingRule.GetPackingRule(0,SalesHeader."Sell-to Customer No.",SalesHeader."Ship-to Code");
      IF (PackingRule."Shipment Invoicing Required") OR
         (SalesHeader.Ship AND SalesHeader.Invoice)
      THEN BEGIN
        IF SalesHeader.Ship THEN
          SalesHeader.TESTFIELD("Invoice for Shipment No.",'')
        ELSE
          SalesHeader.TESTFIELD("Invoice for Shipment No.");
      END ELSE
        EXIT;

      IF SalesHeader.Ship THEN
        SalesShipmentHeader2 := SalesShipmentHeader
      ELSE
        SalesShipmentHeader2.GET(SalesHeader."Invoice for Shipment No.");
      SalesShipmentHeader2.TESTFIELD("Shipment Invoice No.",'');

      IF SalesShipmentHeader2."Bill of Lading No." <> '' THEN
        SalesHeader.TESTFIELD("Invoice for Bill of Lading No.",SalesShipmentHeader2."Bill of Lading No.");

      IF SalesHeader.Ship THEN BEGIN
        IF SalesHeader."Invoice for Shipment No." <> '' THEN
          SalesHeader.FIELDERROR("Invoice for Shipment No.",Text016);
      END ELSE
        SalesHeader.TESTFIELD("Invoice for Shipment No.");

      IF TestLines THEN BEGIN
        TestLines := PackingRule."Shipment Invoicing Required";
        IF NOT TestLines THEN
          IF (SalesHeader.Ship AND SalesHeader.Invoice) THEN BEGIN
            SalesShipmentHeader2."Shipment Invoice No." := SalesInvoiceHeader."No.";
            ShipmentHeaderEdit.RUN(SalesShipmentHeader2);

            IF SalesHeader.Ship THEN BEGIN
              SalesShipmentHeader.FIND;

              IF SalesHeader.Invoice THEN BEGIN
                SalesInvoiceHeader2 := SalesInvoiceHeader;
                SalesInvoiceHeader2."Invoice for Bill of Lading No." :=
                  SalesShipmentHeader."Bill of Lading No.";
                SalesInvoiceHeader2."Invoice for Shipment No." := SalesShipmentHeader."No.";
                EShipShpmtHeadrEdit.SalesInvoiceHeaderEdit(SalesInvoiceHeader2);
                SalesInvoiceHeader.FIND;
              END;
            END;
            EXIT
          END ELSE
            EXIT;
      END ELSE
        EXIT;

      SalesShipmentLine.RESET;
      SalesShipmentLine.SETRANGE("Document No.",SalesShipmentHeader2."No.");
      SalesShipmentLine.SETFILTER("Qty. Shipped Not Invoiced",'>0');
      EndOfShipmentLines := SalesShipmentLine.FIND('-');

      SalesInvoiceLine.RESET;
      SalesInvoiceLine.SETRANGE("Document No.",SalesInvoiceHeader."No.");
      EndOfInvoiceLines := SalesInvoiceLine.FIND('-');
      REPEAT
        CASE TRUE OF
          SalesShipmentLine."Line No." = SalesInvoiceLine."Line No.":
            BEGIN
              IF SalesInvoiceLine.Quantity <> SalesShipmentLine.Quantity THEN BEGIN
                SalesLine.GET(SalesHeader."Document Type",SalesHeader."No.",SalesShipmentLine."Line No.");
                SalesLine.FIELDERROR(
                  "Qty. to Invoice",
                  STRSUBSTNO(Text017,SalesShipmentLine.Quantity));
              END;

              EndOfShipmentLines := SalesShipmentLine.NEXT = 0;
              EndOfInvoiceLines := SalesInvoiceLine.NEXT = 0;
            END;
          (SalesInvoiceLine."Line No." < SalesShipmentLine."Line No.") OR EndOfShipmentLines:
            BEGIN
              IF SalesInvoiceLine.Quantity <> 0 THEN BEGIN
                SalesLine.GET(SalesHeader."Document Type",SalesHeader."No.",SalesInvoiceLine."Line No.");
                SalesLine.FIELDERROR("Qty. to Invoice",Text018);
              END;

              EndOfInvoiceLines := SalesInvoiceLine.NEXT = 0;
            END;
          ELSE BEGIN
            IF SalesShipmentLine.Quantity <> 0 THEN BEGIN
              SalesLine.GET(SalesHeader."Document Type",SalesHeader."No.",SalesShipmentLine."Line No.");
              SalesLine.FIELDERROR(
                "Qty. to Invoice",
                STRSUBSTNO(Text017,SalesShipmentLine.Quantity));
            END;

            EndOfShipmentLines := SalesShipmentLine.NEXT = 0;
          END;
        END;
      UNTIL EndOfShipmentLines AND EndOfInvoiceLines;

      SalesShipmentHeader2."Shipment Invoice No." := SalesInvoiceHeader."No.";
      ShipmentHeaderEdit.RUN(SalesShipmentHeader2);

      IF SalesHeader.Ship THEN BEGIN
        SalesShipmentHeader.FIND;

        IF SalesHeader.Invoice THEN BEGIN
          SalesInvoiceHeader2 := SalesInvoiceHeader;
          SalesInvoiceHeader2."Invoice for Bill of Lading No." :=
            SalesShipmentHeader."Bill of Lading No.";
          SalesInvoiceHeader2."Invoice for Shipment No." := SalesShipmentHeader."No.";
          EShipShpmtHeadrEdit.SalesInvoiceHeaderEdit(SalesInvoiceHeader2);
          SalesInvoiceHeader.FIND;
        END;
      END;
    END;

    LOCAL PROCEDURE CreateShipChargePurchHeader@71(PurchHeader@1240030000 : Record 38);
    BEGIN
    END;

    PROCEDURE WriteShipChargePurchHeader@70(VAR PurchHeader@1240030000 : Record 38;ShippingAgentCharge@1240030001 : Record 291;TotalShipCharge@1240030002 : Decimal;TotalShipCost@1240030003 : Decimal;TotalCustPaidShipCharge@1240030004 : Decimal;AccumulatedShipCost@1240030005 : Decimal;NoPackages@1240030006 : Boolean;BillOfLadingNo@1240030007 : Code[20]);
    BEGIN
    END;

    PROCEDURE CheckPurchHeader@67(PurchHeader@1240030000 : Record 38);
    VAR
      Package@1240030001 : Record 14000701;
    BEGIN
      IF NOT (PurchHeader."Document Type" IN
              [PurchHeader."Document Type"::"Credit Memo",
               PurchHeader."Document Type"::"Return Order"])
      THEN
        EXIT;

      GetShippingSetup;
      IF ShippingSetup."Location Packing" THEN
        GetPackingStation;

      Package.RESET;
      Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Package.SETRANGE("Source Type",DATABASE::"Purchase Header");
      Package.SETRANGE("Source Subtype",PurchHeader."Document Type");
      Package.SETRANGE("Source ID",PurchHeader."No.");
      IF ShippingSetup."Location Packing" THEN
        Package.SETRANGE("Location Code",PackingStation."Location Code");
      IF Package.FIND('-') THEN
        REPEAT
          Package.TESTFIELD(Closed);

          IF ShippingSetup."Shipping Agent Required" THEN BEGIN
            IF (Package."Shipping Agent Code" = '') THEN
              ERROR(
                Text004,
                Package."No.",PurchHeader."Document Type",PurchHeader."No.");
            IF (Package."Shipping Agent Service" = '') THEN
              ERROR(
                Text005,
                Package."No.",PurchHeader."Document Type",PurchHeader."No.");
          END;
        UNTIL Package.NEXT = 0;

      CheckPurchHeaderPacked(PurchHeader,TRUE);
    END;

    LOCAL PROCEDURE CheckPurchHeaderPacked@66(PurchHeader@1240030000 : Record 38;DuringPosting@1240030001 : Boolean);
    VAR
      Package@1240030002 : Record 14000701;
      Package2@1240030003 : Record 14000701;
      PackageLine@1240030004 : Record 14000702;
      PurchLine@1240030005 : Record 39;
      PurchLine2@1240030006 : Record 39;
      PackingRule@1240030007 : Record 14000715;
      QtyToShip@1240030008 : Decimal;
      PurchLineQtyToShipBase@1240030010 : Decimal;
      PurchLine2QtyToShipBase@1240030011 : Decimal;
    BEGIN
      GetShippingSetup;
      IF ShippingSetup."Location Packing" THEN
        GetPackingStation;

      IF ShippingSetup."Shipping Agent Required" THEN
        PurchHeader.TESTFIELD("E-Ship Agent Code");

      PackageLine.RESET;
      PackageLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      PackageLine.SETRANGE("Source Type",DATABASE::"Purchase Header");
      PackageLine.SETRANGE("Source Subtype",PurchHeader."Document Type");
      PackageLine.SETRANGE("Source ID",PurchHeader."No.");
      IF ShippingSetup."Location Packing" THEN
        PackageLine.SETRANGE("Location Code",PackingStation."Location Code");
      PackageLine.SETRANGE(Type,PackageLine.Type::"Account (G/L)",PackageLine.Type::Resource);

      IF PurchHeader."E-Ship Agent Code" <> '' THEN
        GetShippingAgent(PurchHeader."E-Ship Agent Code")
      ELSE
        CLEAR(ShippingAgent);

      IF ShippingSetup."Prepack Shipping Agent Code" <> '' THEN BEGIN
        Package.RESET;
        Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
        Package.SETRANGE("Source Type",DATABASE::"Purchase Header");
        Package.SETRANGE("Source Subtype",PurchHeader."Document Type");
        Package.SETRANGE("Source ID",PurchHeader."No.");
        IF ShippingSetup."Location Packing" THEN
          Package.SETRANGE("Location Code",PackingStation."Location Code");
        Package.SETRANGE("Shipping Agent Code",ShippingSetup."Prepack Shipping Agent Code");
        Package.SETRANGE("Exist in Other Package",FALSE);
        IF Package.FIND('-') THEN
          IF Package."Multi Document Package" AND (Package."Original Package No." <> '') THEN BEGIN
            Package2.GET(Package."Original Package No.");
            Package2.CALCFIELDS("Exist in Other Package");
            IF NOT Package2."Exist in Other Package" THEN
              ERROR(
                Text006,
                Package."No.",Package."Shipping Agent Code");
          END ELSE
            ERROR(
              Text006,
              Package."No.",Package."Shipping Agent Code");
      END;

      PackingRule.GetPackingRule(1,PurchHeader."Buy-from Vendor No.",PurchHeader."Order Address Code");
      IF NOT PackingRule.PackDetail(
               DATABASE::"Purchase Header",PurchHeader."Document Type",PurchHeader."E-Ship Agent Code") AND
         NOT PackageLine.FIND('-')
      THEN
        EXIT;

      PurchLine.RESET;
      PurchLine.SETCURRENTKEY(
        "Document Type","Document No.",Type,"No.","Variant Code","Drop Shipment","Location Code");
      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine.SETRANGE(Type,PurchLine.Type::Item);
      PurchLine.SETRANGE("Drop Shipment",FALSE);
      IF ShippingSetup."Location Packing" THEN
        PurchLine.SETRANGE("Location Code",PackingStation."Location Code");

      // Additional code required in Attain
      IF PurchHeader."Document Type" = PurchHeader."Document Type"::"Return Order" THEN BEGIN
        PurchLine.CALCSUMS("Return Qty. to Ship (Base)");
        PurchLineQtyToShipBase := PurchLine."Return Qty. to Ship (Base)";
        IF NOT DuringPosting THEN
          PurchLineQtyToShipBase :=
            PurchLineQtyToShipBase +
            EShipValidation."PurchaseLine-CalcEShipWhseOutstQtyBase"(PurchLine,
              ShippingSetup."Location Packing",PackingStation."Location Code");
      END ELSE BEGIN
        PurchLine.CALCSUMS("Outstanding Qty. (Base)");
        PurchLineQtyToShipBase := PurchLine."Outstanding Qty. (Base)";
      END;

      PackageLine.CALCSUMS(PackageLine."Quantity (Base)");
      PackageLine."Quantity (Base)" := ROUND(PackageLine."Quantity (Base)",0.00001);
      IF PurchLineQtyToShipBase <> PackageLine."Quantity (Base)" THEN BEGIN
        IF PurchLineQtyToShipBase > PackageLine."Quantity (Base)" THEN
          ERROR(Text007);
        IF PackageLine."Quantity (Base)" > PurchLineQtyToShipBase THEN
          ERROR(Text008);
      END;

      PurchLine2.RESET;
      PurchLine2.SETCURRENTKEY(
        "Document Type","Document No.",Type,"No.","Variant Code","Drop Shipment","Location Code");
      PurchLine2.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine2.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine2.SETRANGE("Drop Shipment",FALSE);
      IF ShippingSetup."Location Packing" THEN
        PurchLine2.SETRANGE("Location Code",PackingStation."Location Code");
      IF PurchLine.FIND('-') THEN
        REPEAT
          PackageLine.SETRANGE("No.",PurchLine."No.");
          PackageLine.SETRANGE("Variant Code",PurchLine."Variant Code");
          PurchLine2.SETRANGE("No.",PurchLine."No.");
          PurchLine2.SETRANGE("Variant Code",PurchLine."Variant Code");

          PackageLine.CALCSUMS("Quantity (Base)");
          PackageLine."Quantity (Base)" := ROUND(PackageLine."Quantity (Base)",0.00001);

          // Additional code required in Attain
          IF PurchLine."Document Type" = PurchLine."Document Type"::"Return Order" THEN BEGIN
            PurchLine2.CALCSUMS("Return Qty. to Ship (Base)");
            PurchLine2QtyToShipBase := PurchLine2."Return Qty. to Ship (Base)";
            IF NOT DuringPosting THEN
              PurchLine2QtyToShipBase :=
                PurchLine2QtyToShipBase +
                EShipValidation."PurchaseLine-CalcEShipWhseOutstQtyBase"(PurchLine2,
                  ShippingSetup."Location Packing",PackingStation."Location Code");
          END ELSE BEGIN
            PurchLine2.CALCSUMS("Outstanding Qty. (Base)");
            PurchLine2QtyToShipBase := PurchLine2."Outstanding Qty. (Base)";
          END;

          IF PurchLine2QtyToShipBase > PackageLine."Quantity (Base)" THEN
            ERROR(
              Text009,
              PurchLine."No.",PurchLine."Variant Code");
          IF PackageLine."Quantity (Base)" > PurchLine2QtyToShipBase THEN
            ERROR(
              Text010,
              PurchLine."No.",PurchLine."Variant Code");
        UNTIL PurchLine.NEXT = 0;

      PackageLine.RESET;
      PackageLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      PackageLine.SETRANGE("Source Type",DATABASE::"Purchase Header");
      PackageLine.SETRANGE("Source Subtype",PurchHeader."Document Type");
      PackageLine.SETRANGE("Source ID",PurchHeader."No.");
      IF ShippingSetup."Location Packing" THEN
        PackageLine.SETRANGE("Location Code",PackingStation."Location Code");
      PackageLine.SETRANGE("Serial No.",'');
      PackageLine.SETRANGE("Pack Serial Number",TRUE);
      IF PackageLine.FIND('-') THEN
        ERROR(
          Text011,
          PackageLine.Type,PackageLine."No.",PackageLine."Package No.");

      PackageLine.RESET;
      PackageLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      PackageLine.SETRANGE("Source Type",DATABASE::"Purchase Header");
      PackageLine.SETRANGE("Source Subtype",PurchHeader."Document Type");
      PackageLine.SETRANGE("Source ID",PurchHeader."No.");
      IF ShippingSetup."Location Packing" THEN
        PackageLine.SETRANGE("Location Code",PackingStation."Location Code");
      PackageLine.SETRANGE("Lot No.",'');
      PackageLine.SETRANGE("Pack Lot Number",TRUE);
      IF PackageLine.FIND('-') THEN
        ERROR(
          Text012,
          PackageLine.Type,PackageLine."No.",PackageLine."Package No.");

      PackageLine.RESET;
      PackageLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      PackageLine.SETRANGE("Source Type",DATABASE::"Purchase Header");
      PackageLine.SETRANGE("Source Subtype",PurchHeader."Document Type");
      PackageLine.SETRANGE("Source ID",PurchHeader."No.");
      IF ShippingSetup."Location Packing" THEN
        PackageLine.SETRANGE("Location Code",PackingStation."Location Code");
      PackageLine.SETRANGE("Warranty Date",0D);
      PackageLine.SETRANGE("Pack Warranty Date",TRUE);
      IF PackageLine.FIND('-') THEN
        ERROR(
          Text013,
          PackageLine.Type,PackageLine."No.",PackageLine."Package No.");

      PackageLine.RESET;
      PackageLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      PackageLine.SETRANGE("Source Type",DATABASE::"Purchase Header");
      PackageLine.SETRANGE("Source Subtype",PurchHeader."Document Type");
      PackageLine.SETRANGE("Source ID",PurchHeader."No.");
      IF ShippingSetup."Location Packing" THEN
        PackageLine.SETRANGE("Location Code",PackingStation."Location Code");
      PackageLine.SETRANGE("Expiration Date",0D);
      PackageLine.SETRANGE("Pack Expiration Date",TRUE);
      IF PackageLine.FIND('-') THEN
        ERROR(
          Text014,
          PackageLine.Type,PackageLine."No.",PackageLine."Package No.");
    END;

    PROCEDURE PostPackagePurchCrMemo@65(PurchHeader@1240030000 : Record 38;PurchCreditMemoHeader@1240030001 : Record 124);
    VAR
      Package@1240030002 : Record 14000701;
      Package2@1240030003 : Record 14000701;
      BillOfLading@1240030004 : Record 14000822;
      BillOfLadingLine@1240030005 : Record 14000823;
      PurchLine@1240030007 : Record 39;
    BEGIN
      IF NOT (PurchHeader."Document Type" IN
              [PurchHeader."Document Type"::"Credit Memo",
               PurchHeader."Document Type"::"Return Order"])
      THEN
        EXIT;

      GetShippingSetup;

      IF ShippingSetup."Location Packing" THEN BEGIN
        GetPackingStation;

        PurchLine.RESET;
        PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
        PurchLine.SETRANGE("Document No.",PurchHeader."No.");
        PurchLine.SETFILTER("Outstanding Quantity",'<>0');
        PurchLine.SETFILTER("Location Code",'<>%1',PackingStation."Location Code");

        //<TPZ1763>
        {
        IF PurchLine.FIND('-') THEN
          ERROR(
            Text003,
            PackingStation."Location Code",ShippingSetup.FIELDNAME("Location Packing"));
        }
        //</TPZ1763>
      END;

      CheckPurchHeaderPacked(PurchHeader,TRUE);

      Package.RESET;
      Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Package.SETRANGE("Source Type",DATABASE::"Purchase Header");
      Package.SETRANGE("Source Subtype",PurchHeader."Document Type");
      Package.SETRANGE("Source ID",PurchHeader."No.");
      IF ShippingSetup."Location Packing" THEN
        Package.SETRANGE("Location Code",PackingStation."Location Code");
      IF Package.FIND('-') THEN BEGIN
        BillOfLadingLine.LOCKTABLE;

        REPEAT
          Package.TESTFIELD(Closed);

          PostPackage(
            Package,PurchCreditMemoHeader."No.",PurchCreditMemoHeader."Bill of Lading No.",
            PurchCreditMemoHeader."Posting Date");

          IF Package."Multi Document Package" THEN BEGIN
            Package2.RESET;
            Package2.SETCURRENTKEY("Original Package No.");
            Package2.SETRANGE("Original Package No.",Package."Original Package No.");
            IF NOT Package2.FIND('-') THEN BEGIN
              Package2.GET(Package."Original Package No.");
              PostPackage(Package2,'','',WORKDATE);
            END;
          END;
        UNTIL Package.NEXT = 0;
      END;

      BillOfLadingLine.RESET;
      BillOfLadingLine.SETCURRENTKEY(Type,"No.",Closed,"Location Code");
      BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
      BillOfLadingLine.SETRANGE("No.",PurchHeader."No.");
      BillOfLadingLine.SETRANGE(Closed,FALSE);
      IF ShippingSetup."Location Packing" THEN
        BillOfLadingLine.SETRANGE("Location Code",PackingStation."Location Code");
      BillOfLadingLine.SETRANGE("Source Type",DATABASE::"Purchase Header");
      BillOfLadingLine.SETRANGE("Source Subtype",PurchHeader."Document Type");
      BillOfLadingLine.SETRANGE("Source ID",PurchHeader."No.");
      IF BillOfLadingLine.FIND('-') THEN BEGIN
        BillOfLading.GET(BillOfLadingLine."Bill of Lading No.");
        BillOfLading.TESTFIELD(Released,FALSE);
        BillOfLadingLine.LOCKTABLE;
        BillOfLadingLine.RESET;
        BillOfLadingLine.SETRANGE("Bill of Lading No.",BillOfLading."No.");
        IF NOT BillOfLadingLine.FIND('+') THEN BEGIN
          BillOfLadingLine."Bill of Lading No." := BillOfLading."No.";
          BillOfLadingLine."Line No." := 10000;
        END;
        BillOfLadingLine.INIT;
        BillOfLadingLine."Line No." := BillOfLadingLine."Line No." + 10000;
        BillOfLadingLine."Source Type" := DATABASE::"Purchase Header";
        BillOfLadingLine."Source Subtype" := PurchHeader."Document Type";
        BillOfLadingLine."Source ID" := PurchHeader."No.";
        BillOfLadingLine."Posted Source ID" := PurchCreditMemoHeader."No.";
        BillOfLadingLine.Type := BillOfLadingLine.Type::"Purchase Credit Memo (Posted)";
        BillOfLadingLine.VALIDATE("No.",PurchCreditMemoHeader."No.");
        BillOfLadingLine.INSERT(TRUE);
      END;
    END;

    PROCEDURE CreateBOLPostPurchCrMemo@64(PurchCreditMemoHeader@1240030000 : Record 124);
    VAR
      Vendor@1240030001 : Record 23;
      PackingRule@1240030003 : Record 14000715;
      BillOfLading@1240030004 : Record 14000822;
    BEGIN
      WITH PurchCreditMemoHeader DO BEGIN
        GetShippingSetup;

        IF NOT ShippingSetup."Enable Bill of Lading" THEN
          EXIT;

        PackingRule.GetPackingRule(1,"Buy-from Vendor No.","Order Address Code");

        IF PackingRule."Auto Bill of Lading When Ship" AND ("Bill of Lading No." = '') THEN BEGIN
          BillOfLading.CreateBillOfLadingPurchCrMemo(
            PurchCreditMemoHeader,PackingRule."Auto Bill of Lading by Package",FALSE);

          COMMIT;
        END;
      END;
    END;

    PROCEDURE PostPackagePurchReturnOrder@1240030000(PurchHeader@1240030000 : Record 38;ReturnShipmentHeader@1240030001 : Record 6650);
    VAR
      Package@1240030002 : Record 14000701;
      Package2@1240030003 : Record 14000701;
      BillOfLading@1240030004 : Record 14000822;
      BillOfLadingLine@1240030005 : Record 14000823;
      PurchLine@1240030007 : Record 39;
    BEGIN
      IF NOT (PurchHeader."Document Type" IN
              [PurchHeader."Document Type"::"Return Order"])
      THEN
        EXIT;

      GetShippingSetup;

      IF ShippingSetup."Location Packing" THEN BEGIN
        GetPackingStation;

        PurchLine.RESET;
        PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
        PurchLine.SETRANGE("Document No.",PurchHeader."No.");
        PurchLine.SETFILTER("Return Qty. to Ship",'<>0');
        PurchLine.SETFILTER("Location Code",'<>%1',PackingStation."Location Code");
        //<TPZ1763> - Comment out original codes.
        {
        IF PurchLine.FIND('-') THEN
          ERROR(
            Text003,
            PackingStation."Location Code",ShippingSetup.FIELDNAME("Location Packing"));
        }
        //</TPZ1763>
      END;

      CheckPurchHeaderPacked(PurchHeader,TRUE);

      Package.RESET;
      Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Package.SETRANGE("Source Type",DATABASE::"Purchase Header");
      Package.SETRANGE("Source Subtype",PurchHeader."Document Type");
      Package.SETRANGE("Source ID",PurchHeader."No.");
      IF ShippingSetup."Location Packing" THEN
        Package.SETRANGE("Location Code",PackingStation."Location Code");
      IF Package.FIND('-') THEN BEGIN
        BillOfLadingLine.LOCKTABLE;

        REPEAT
          Package.TESTFIELD(Closed);

          PostPackage(
            Package,ReturnShipmentHeader."No.",ReturnShipmentHeader."Bill of Lading No.",
            ReturnShipmentHeader."Posting Date");

          IF Package."Multi Document Package" THEN BEGIN
            Package2.RESET;
            Package2.SETCURRENTKEY("Original Package No.");
            Package2.SETRANGE("Original Package No.",Package."Original Package No.");
            IF NOT Package2.FIND('-') THEN BEGIN
              Package2.GET(Package."Original Package No.");
              PostPackage(Package2,'','',WORKDATE);
            END;
          END;
        UNTIL Package.NEXT = 0;
      END;

      BillOfLadingLine.RESET;
      BillOfLadingLine.SETCURRENTKEY(Type,"No.",Closed,"Location Code");
      BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
      BillOfLadingLine.SETRANGE("No.",PurchHeader."No.");
      BillOfLadingLine.SETRANGE(Closed,FALSE);
      IF ShippingSetup."Location Packing" THEN
        BillOfLadingLine.SETRANGE("Location Code",PackingStation."Location Code");
      BillOfLadingLine.SETRANGE("Source Type",DATABASE::"Purchase Header");
      BillOfLadingLine.SETRANGE("Source Subtype",PurchHeader."Document Type");
      BillOfLadingLine.SETRANGE("Source ID",PurchHeader."No.");
      IF BillOfLadingLine.FIND('-') THEN BEGIN
        BillOfLading.GET(BillOfLadingLine."Bill of Lading No.");
        BillOfLading.TESTFIELD(Released,FALSE);
        BillOfLadingLine.LOCKTABLE;
        BillOfLadingLine.RESET;
        BillOfLadingLine.SETRANGE("Bill of Lading No.",BillOfLading."No.");
        IF NOT BillOfLadingLine.FIND('+') THEN BEGIN
          BillOfLadingLine."Bill of Lading No." := BillOfLading."No.";
          BillOfLadingLine."Line No." := 10000;
        END;
        BillOfLadingLine.INIT;
        BillOfLadingLine."Line No." := BillOfLadingLine."Line No." + 10000;
        BillOfLadingLine."Source Type" := DATABASE::"Purchase Header";
        BillOfLadingLine."Source Subtype" := PurchHeader."Document Type";
        BillOfLadingLine."Source ID" := PurchHeader."No.";
        BillOfLadingLine."Posted Source ID" := ReturnShipmentHeader."No.";
        BillOfLadingLine.Type := BillOfLadingLine.Type::"Return Shipment (Posted)";
        BillOfLadingLine.VALIDATE("No.",ReturnShipmentHeader."No.");
        BillOfLadingLine.INSERT(TRUE);
      END;
    END;

    PROCEDURE CreateBOLPostPurchReturnOrder@1240030001(ReturnShipmentHeader@1240030000 : Record 6650);
    VAR
      Vendor@1240030001 : Record 23;
      PackingRule@1240030003 : Record 14000715;
      BillOfLading@1240030004 : Record 14000822;
    BEGIN
      WITH ReturnShipmentHeader DO BEGIN
        GetShippingSetup;

        IF NOT ShippingSetup."Enable Bill of Lading" THEN
          EXIT;

        PackingRule.GetPackingRule(1,"Buy-from Vendor No.","Order Address Code");

        IF PackingRule."Auto Bill of Lading When Ship" AND ("Bill of Lading No." = '') THEN BEGIN
          BillOfLading.CreateBillOfLadingPurchRetOrdr(
            ReturnShipmentHeader,PackingRule."Auto Bill of Lading by Package",FALSE);

          COMMIT;
        END;
      END;
    END;

    PROCEDURE BlankBillOFLadingNoPurchHeader@63(VAR CurrentPurchHeader@1240030000 : Record 38;EverythingInvoiced@1240030001 : Boolean);
    VAR
      PackingRule@1240030002 : Record 14000715;
      BillOfLadingLine@1240030003 : Record 14000823;
    BEGIN
      IF CurrentPurchHeader.Receive OR CurrentPurchHeader.Ship THEN BEGIN
        PackingRule.GetPackingRule(
          1,CurrentPurchHeader."Buy-from Vendor No.",CurrentPurchHeader."Order Address Code");
        IF PackingRule."Blank BOL No. when Post. Ship" THEN BEGIN
          GetShippingSetup;

          BillOfLadingLine.RESET;
          BillOfLadingLine.SETCURRENTKEY(Type,"No.",Closed,"Location Code");
          BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
          BillOfLadingLine.SETRANGE("No.",CurrentPurchHeader."No.");
          BillOfLadingLine.SETRANGE(Closed,FALSE);
          IF ShippingSetup."Location Packing" THEN BEGIN
            GetPackingStation;
            BillOfLadingLine.SETRANGE("Location Code",PackingStation."Location Code");
          END;
          BillOfLadingLine.SETRANGE("Source Type",DATABASE::"Purchase Header");
          BillOfLadingLine.SETRANGE("Source Subtype",CurrentPurchHeader."Document Type");
          BillOfLadingLine.SETRANGE("Source ID",CurrentPurchHeader."No.");
          IF BillOfLadingLine.FIND('-') THEN
            BillOfLadingLine.DELETE(TRUE);
        END;
      END;

      IF EverythingInvoiced THEN BEGIN
        BillOfLadingLine.RESET;
        BillOfLadingLine.SETCURRENTKEY(Type,"No.",Closed);
        BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
        BillOfLadingLine.SETRANGE("No.",CurrentPurchHeader."No.");
        BillOfLadingLine.SETRANGE(Closed,FALSE);
        BillOfLadingLine.SETRANGE("Source Type",DATABASE::"Purchase Header");
        BillOfLadingLine.SETRANGE("Source Subtype",CurrentPurchHeader."Document Type");
        BillOfLadingLine.SETRANGE("Source ID",CurrentPurchHeader."No.");
        BillOfLadingLine.DELETEALL(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateShipChargeTransferHeader@1240030010(TransferHeader@1240030000 : Record 5740);
    BEGIN
    END;

    PROCEDURE WriteShipChargeTransferHeader@1240030009(VAR TransferHeader@1240030000 : Record 5740;ShippingAgentCharge@1240030001 : Record 291;TotalShipCharge@1240030002 : Decimal;TotalShipCost@1240030003 : Decimal;TotalCustPaidShipCharge@1240030004 : Decimal;AccumulatedShipCost@1240030005 : Decimal;NoPackages@1240030006 : Boolean;BillOfLadingNo@1240030007 : Code[20]);
    BEGIN
    END;

    PROCEDURE CheckTransferHeader@1240030008(TransferHeader@1240030000 : Record 5740);
    VAR
      Package@1240030001 : Record 14000701;
    BEGIN
      GetShippingSetup;
      IF ShippingSetup."Location Packing" THEN
        GetPackingStation;

      Package.RESET;
      Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Package.SETRANGE("Source Type",DATABASE::"Transfer Header");
      Package.SETRANGE("Source Subtype",0);
      Package.SETRANGE("Source ID",TransferHeader."No.");
      IF ShippingSetup."Location Packing" THEN
        Package.SETRANGE("Location Code",PackingStation."Location Code");
      IF Package.FIND('-') THEN
        REPEAT
          Package.TESTFIELD(Closed);

          IF ShippingSetup."Shipping Agent Required" THEN BEGIN
            IF (Package."Shipping Agent Code" = '') THEN
              ERROR(
                Text019,
                Package."No.",TransferHeader."No.");
            IF (Package."Shipping Agent Service" = '') THEN
              ERROR(
                Text020,
                Package."No.",TransferHeader."No.");
          END;
        UNTIL Package.NEXT = 0;

      CheckTransferHeaderPacked(TransferHeader,TRUE);
    END;

    LOCAL PROCEDURE CheckTransferHeaderPacked@1240030007(TransferHeader@1240030000 : Record 5740;DuringPosting@1240030001 : Boolean);
    VAR
      Package@1240030002 : Record 14000701;
      Package2@1240030003 : Record 14000701;
      PackageLine@1240030004 : Record 14000702;
      TransferLine@1240030005 : Record 5741;
      TransferLine2@1240030006 : Record 5741;
      PackingRule@1240030007 : Record 14000715;
      QtyToShip@1240030008 : Decimal;
      LineQtyToShipBase@1240030010 : Decimal;
      Line2QtyToShipBase@1240030011 : Decimal;
    BEGIN
      GetShippingSetup;
      IF ShippingSetup."Location Packing" THEN
        GetPackingStation;

      IF ShippingSetup."Shipping Agent Required" THEN
        TransferHeader.TESTFIELD("Shipping Agent Code");

      PackageLine.RESET;
      PackageLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      PackageLine.SETRANGE("Source Type",DATABASE::"Transfer Header");
      PackageLine.SETRANGE("Source Subtype",0);
      PackageLine.SETRANGE("Source ID",TransferHeader."No.");
      IF ShippingSetup."Location Packing" THEN
        PackageLine.SETRANGE("Location Code",PackingStation."Location Code");
      PackageLine.SETRANGE(Type,PackageLine.Type::"Account (G/L)",PackageLine.Type::Resource);

      IF TransferHeader."Shipping Agent Code" <> '' THEN
        GetShippingAgent(TransferHeader."Shipping Agent Code")
      ELSE
        CLEAR(ShippingAgent);

      IF ShippingSetup."Prepack Shipping Agent Code" <> '' THEN BEGIN
        Package.RESET;
        Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
        Package.SETRANGE("Source Type",DATABASE::"Transfer Header");
        Package.SETRANGE("Source Subtype",0);
        Package.SETRANGE("Source ID",TransferHeader."No.");
        IF ShippingSetup."Location Packing" THEN
          Package.SETRANGE("Location Code",PackingStation."Location Code");
        Package.SETRANGE("Shipping Agent Code",ShippingSetup."Prepack Shipping Agent Code");
        Package.SETRANGE("Exist in Other Package",FALSE);
        IF Package.FIND('-') THEN
          IF Package."Multi Document Package" AND (Package."Original Package No." <> '') THEN BEGIN
            Package2.GET(Package."Original Package No.");
            Package2.CALCFIELDS("Exist in Other Package");
            IF NOT Package2."Exist in Other Package" THEN
              ERROR(
                Text006,
                Package."No.",Package."Shipping Agent Code");
          END ELSE
            ERROR(
              Text006,
              Package."No.",Package."Shipping Agent Code");
      END;

      PackingRule.GetPackingRule(7,TransferHeader."Transfer-to Code",'');
      IF NOT PackingRule.PackDetail(
               DATABASE::"Transfer Header",0,TransferHeader."Shipping Agent Code") AND
         NOT PackageLine.FIND('-')
      THEN
        EXIT;

      TransferLine.RESET;
      TransferLine.SETCURRENTKEY(
        "Transfer-from Code",Status,"Derived From Line No.","Item No.","Variant Code");
      TransferLine.SETRANGE("Document No.",TransferHeader."No.");
      IF ShippingSetup."Location Packing" THEN
        TransferLine.SETRANGE("Transfer-from Code",PackingStation."Location Code");
      TransferLine.SETRANGE("Derived From Line No.",0);

      // Additional code required in Attain
      TransferLine.CALCSUMS("Qty. to Ship (Base)");
      LineQtyToShipBase := TransferLine."Qty. to Ship (Base)";
      IF NOT DuringPosting THEN
        LineQtyToShipBase :=
          LineQtyToShipBase +
          EShipValidation."TransferLine-CalcEShipWhseOutstQtyBase"(TransferLine,
            ShippingSetup."Location Packing",PackingStation."Location Code");

      PackageLine.CALCSUMS(PackageLine."Quantity (Base)");
      PackageLine."Quantity (Base)" := ROUND(PackageLine."Quantity (Base)",0.00001);
      IF LineQtyToShipBase <> PackageLine."Quantity (Base)" THEN BEGIN
        IF LineQtyToShipBase > PackageLine."Quantity (Base)" THEN
          ERROR(Text007);
        IF PackageLine."Quantity (Base)" > LineQtyToShipBase THEN
          ERROR(Text008);
      END;

      TransferLine2.RESET;
      TransferLine2.SETCURRENTKEY(
        "Transfer-from Code",Status,"Derived From Line No.","Item No.","Variant Code");
      TransferLine2.SETRANGE("Document No.",TransferHeader."No.");
      IF ShippingSetup."Location Packing" THEN
        TransferLine2.SETRANGE("Transfer-from Code",PackingStation."Location Code");
      TransferLine2.SETRANGE("Derived From Line No.",0);
      IF TransferLine.FIND('-') THEN
        REPEAT
          PackageLine.SETRANGE("No.",TransferLine."Item No.");
          PackageLine.SETRANGE("Variant Code",TransferLine."Variant Code");
          TransferLine2.SETRANGE("Item No.",TransferLine."Item No.");
          TransferLine2.SETRANGE("Variant Code",TransferLine."Variant Code");

          PackageLine.CALCSUMS("Quantity (Base)");
          PackageLine."Quantity (Base)" := ROUND(PackageLine."Quantity (Base)",0.00001);

          // Additional code required in Attain
          TransferLine2.CALCSUMS("Qty. to Ship (Base)");
          Line2QtyToShipBase := TransferLine2."Qty. to Ship (Base)";
          IF NOT DuringPosting THEN
            Line2QtyToShipBase :=
              Line2QtyToShipBase +
              EShipValidation."TransferLine-CalcEShipWhseOutstQtyBase"(TransferLine2,
                ShippingSetup."Location Packing",PackingStation."Location Code");

          IF Line2QtyToShipBase > PackageLine."Quantity (Base)" THEN
            ERROR(
              Text009,
              TransferLine."Item No.",TransferLine."Variant Code");
          IF PackageLine."Quantity (Base)" > Line2QtyToShipBase THEN
            ERROR(
              Text010,
              TransferLine."Item No.",TransferLine."Variant Code");
        UNTIL TransferLine.NEXT = 0;

      PackageLine.RESET;
      PackageLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      PackageLine.SETRANGE("Source Type",DATABASE::"Transfer Header");
      PackageLine.SETRANGE("Source Subtype",0);
      PackageLine.SETRANGE("Source ID",TransferHeader."No.");
      IF ShippingSetup."Location Packing" THEN
        PackageLine.SETRANGE("Location Code",PackingStation."Location Code");
      PackageLine.SETRANGE("Serial No.",'');
      PackageLine.SETRANGE("Pack Serial Number",TRUE);
      IF PackageLine.FIND('-') THEN
        ERROR(
          Text011,
          PackageLine.Type,PackageLine."No.",PackageLine."Package No.");

      PackageLine.RESET;
      PackageLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      PackageLine.SETRANGE("Source Type",DATABASE::"Transfer Header");
      PackageLine.SETRANGE("Source Subtype",0);
      PackageLine.SETRANGE("Source ID",TransferHeader."No.");
      IF ShippingSetup."Location Packing" THEN
        PackageLine.SETRANGE("Location Code",PackingStation."Location Code");
      PackageLine.SETRANGE("Lot No.",'');
      PackageLine.SETRANGE("Pack Lot Number",TRUE);
      IF PackageLine.FIND('-') THEN
        ERROR(
          Text012,
          PackageLine.Type,PackageLine."No.",PackageLine."Package No.");

      PackageLine.RESET;
      PackageLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      PackageLine.SETRANGE("Source Type",DATABASE::"Transfer Header");
      PackageLine.SETRANGE("Source Subtype",0);
      PackageLine.SETRANGE("Source ID",TransferHeader."No.");
      IF ShippingSetup."Location Packing" THEN
        PackageLine.SETRANGE("Location Code",PackingStation."Location Code");
      PackageLine.SETRANGE("Warranty Date",0D);
      PackageLine.SETRANGE("Pack Warranty Date",TRUE);
      IF PackageLine.FIND('-') THEN
        ERROR(
          Text013,
          PackageLine.Type,PackageLine."No.",PackageLine."Package No.");

      PackageLine.RESET;
      PackageLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      PackageLine.SETRANGE("Source Type",DATABASE::"Transfer Header");
      PackageLine.SETRANGE("Source Subtype",0);
      PackageLine.SETRANGE("Source ID",TransferHeader."No.");
      IF ShippingSetup."Location Packing" THEN
        PackageLine.SETRANGE("Location Code",PackingStation."Location Code");
      PackageLine.SETRANGE("Expiration Date",0D);
      PackageLine.SETRANGE("Pack Expiration Date",TRUE);
      IF PackageLine.FIND('-') THEN
        ERROR(
          Text014,
          PackageLine.Type,PackageLine."No.",PackageLine."Package No.");
    END;

    PROCEDURE PostPackageTransferShipment@1240030006(TransferHeader@1240030000 : Record 5740;TransferShipmentHeader@1240030001 : Record 5744);
    VAR
      Package@1240030002 : Record 14000701;
      Package2@1240030003 : Record 14000701;
      BillOfLading@1240030004 : Record 14000822;
      BillOfLadingLine@1240030005 : Record 14000823;
      BillOfLadingInfo@1000000002 : Record 14000827;
      BOLMgt@1000000001 : Codeunit 14000821;
      OldBillOfLadingLine@1000000000 : Record 14000823;
    BEGIN
      GetShippingSetup;

      IF ShippingSetup."Location Packing" THEN
        GetPackingStation;

      CheckTransferHeaderPacked(TransferHeader,TRUE);

      Package.RESET;
      Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Package.SETRANGE("Source Type",DATABASE::"Transfer Header");
      Package.SETRANGE("Source Subtype",0);
      Package.SETRANGE("Source ID",TransferHeader."No.");
      IF ShippingSetup."Location Packing" THEN
        Package.SETRANGE("Location Code",PackingStation."Location Code");
      IF Package.FIND('-') THEN BEGIN
        BillOfLadingLine.LOCKTABLE;

        REPEAT
          Package.TESTFIELD(Closed);

          PostPackage(
            Package,TransferShipmentHeader."No.",TransferShipmentHeader."Bill of Lading No.",
            TransferShipmentHeader."Posting Date");

          IF Package."Multi Document Package" THEN BEGIN
            Package2.RESET;
            Package2.SETCURRENTKEY("Original Package No.");
            Package2.SETRANGE("Original Package No.",Package."Original Package No.");
            IF NOT Package2.FIND('-') THEN BEGIN
              Package2.GET(Package."Original Package No.");
              PostPackage(Package2,'','',WORKDATE);
            END;
          END;
        UNTIL Package.NEXT = 0;
      END;

      BillOfLadingLine.RESET;
      BillOfLadingLine.SETCURRENTKEY(Type,"No.",Closed,"Location Code");
      BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
      BillOfLadingLine.SETRANGE("No.",TransferHeader."No.");
      BillOfLadingLine.SETRANGE(Closed,FALSE);
      IF ShippingSetup."Location Packing" THEN
        BillOfLadingLine.SETRANGE("Location Code",PackingStation."Location Code");
      BillOfLadingLine.SETRANGE("Source Type",DATABASE::"Transfer Header");
      BillOfLadingLine.SETRANGE("Source Subtype",0);
      BillOfLadingLine.SETRANGE("Source ID",TransferHeader."No.");
      IF BillOfLadingLine.FIND('-') THEN BEGIN
        BillOfLading.GET(BillOfLadingLine."Bill of Lading No.");

        //TM BEG 080415 - Comment out to allow user to release BOL first before posting BOL
        //BillOfLading.TESTFIELD(Released,FALSE);
        OldBillOfLadingLine := BillOfLadingLine;
        //TM END 080415


        BillOfLadingLine.LOCKTABLE;
        BillOfLadingLine.RESET;
        BillOfLadingLine.SETRANGE("Bill of Lading No.",BillOfLading."No.");
        IF NOT BillOfLadingLine.FIND('+') THEN BEGIN
          BillOfLadingLine."Bill of Lading No." := BillOfLading."No.";
          BillOfLadingLine."Line No." := 10000;
        END;
        BillOfLadingLine.INIT;

        //TM BEG 080415
        BillOfLadingLine.SuspendTestReleased(TRUE);
        //TM END 080415

        BillOfLadingLine."Line No." := BillOfLadingLine."Line No." + 10000;
        BillOfLadingLine."Source Type" := DATABASE::"Transfer Header";
        BillOfLadingLine."Source Subtype" := 0;
        BillOfLadingLine."Source ID" := TransferHeader."No.";
        BillOfLadingLine."Posted Source ID" := TransferShipmentHeader."No.";
        BillOfLadingLine.Type := BillOfLadingLine.Type::"Transfer Shipment (Posted)";
        BillOfLadingLine.VALIDATE("No.",TransferShipmentHeader."No.");
        BillOfLadingLine.INSERT(TRUE);

        //TM BEG 080415 - Update bill of lading info line
        BillOfLadingInfo.SETRANGE("Bill of Lading No.", BillOfLading."No.");
        BillOfLadingInfo.SETRANGE("Source Type", BillOfLadingLine."Source Type");
        BillOfLadingInfo.SETRANGE("Source Subtype", BillOfLadingLine."Source Subtype");
        BillOfLadingInfo.SETRANGE("Source ID", BillOfLadingLine."Source ID");
        IF BillOfLadingInfo.FINDSET THEN
        REPEAT
          BillOfLadingInfo."Posted Source ID" := BillOfLadingLine."Posted Source ID";
          BillOfLadingInfo.MODIFY;
        UNTIL BillOfLadingInfo.NEXT = 0;
        //TM BEG 080415

      END;
    END;

    PROCEDURE CreateBOLPostTransferShipment@1240030005(TransferShipmentHeader@1240030000 : Record 5744);
    VAR
      PackingRule@1240030003 : Record 14000715;
      BillOfLading@1240030004 : Record 14000822;
    BEGIN
      WITH TransferShipmentHeader DO BEGIN
        GetShippingSetup;

        IF NOT ShippingSetup."Enable Bill of Lading" THEN
          EXIT;

        PackingRule.GetPackingRule(7,"Transfer-to Code",'');

        IF PackingRule."Auto Bill of Lading When Ship" AND ("Bill of Lading No." = '') THEN BEGIN
          BillOfLading.CreateBillOfLadingTransShipmnt(
            TransferShipmentHeader,PackingRule."Auto Bill of Lading by Package",FALSE);

          COMMIT;
        END;
      END;
    END;

    PROCEDURE BlankBillOFLadingNoTransHeader@1240030002(VAR CurrentTransferHeader@1240030000 : Record 5740;EverythingInvoiced@1240030001 : Boolean);
    VAR
      PackingRule@1240030002 : Record 14000715;
      BillOfLadingLine@1240030003 : Record 14000823;
    BEGIN
      PackingRule.GetPackingRule(7,CurrentTransferHeader."Transfer-to Code",'');
      IF PackingRule."Blank BOL No. when Post. Ship" THEN BEGIN
        GetShippingSetup;

        BillOfLadingLine.RESET;
        BillOfLadingLine.SETCURRENTKEY(Type,"No.",Closed,"Location Code");
        BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
        BillOfLadingLine.SETRANGE("No.",CurrentTransferHeader."No.");
        BillOfLadingLine.SETRANGE(Closed,FALSE);
        IF ShippingSetup."Location Packing" THEN BEGIN
          GetPackingStation;
          BillOfLadingLine.SETRANGE("Location Code",PackingStation."Location Code");
        END;
        BillOfLadingLine.SETRANGE("Source Type",DATABASE::"Transfer Header");
        BillOfLadingLine.SETRANGE("Source Subtype",0);
        BillOfLadingLine.SETRANGE("Source ID",CurrentTransferHeader."No.");
        //TM BEG 080415
        //IF BillOfLadingLine.FIND('-') THEN
        //  BillOfLadingLine.DELETE(TRUE);
        IF BillOfLadingLine.FIND('-') THEN BEGIN
          BillOfLadingLine.DELETE(TRUE);
          BillOfLadingLine.SuspendTestReleased(TRUE);
        END;
        //TM END 080415
      END;

      IF EverythingInvoiced THEN BEGIN
        BillOfLadingLine.RESET;
        BillOfLadingLine.SETCURRENTKEY(Type,"No.",Closed);
        BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
        BillOfLadingLine.SETRANGE("No.",CurrentTransferHeader."No.");
        BillOfLadingLine.SETRANGE(Closed,FALSE);
        BillOfLadingLine.SETRANGE("Source Type",DATABASE::"Transfer Header");
        BillOfLadingLine.SETRANGE("Source Subtype",0);
        BillOfLadingLine.SETRANGE("Source ID",CurrentTransferHeader."No.");
        //TM BEG 080415
        //BillOfLadingLine.DELETEALL(TRUE);
        IF BillOfLadingLine.FINDSET THEN
        REPEAT
          BillOfLadingLine.SuspendTestReleased(TRUE);
          BillOfLadingLine.DELETE(TRUE);
        UNTIL BillOfLadingLine.NEXT = 0;
        //TM END 080415
      END;
    END;

    PROCEDURE PostPackage@12(VAR CurrentPackage@1240030000 : Record 14000701;PostedDocNo@1240030001 : Code[20];BillOfLadingNo@1240030002 : Code[20];PostingDate@1240030003 : Date);
    VAR
      PackageLine@1240030004 : Record 14000702;
      PostedPackage@1240030005 : Record 14000704;
      PostedPackageLine@1240030006 : Record 14000705;
      Package@1240030007 : Record 14000701;
    BEGIN
      WITH CurrentPackage DO BEGIN
        GetShippingSetup;

        TESTFIELD(Closed);

        IF ShippingSetup."Prepack Shipping Agent Code" <> '' THEN
          IF "Shipping Agent Code" = ShippingSetup."Prepack Shipping Agent Code" THEN BEGIN
            CALCFIELDS("Exist in Other Package");
            IF NOT "Exist in Other Package" THEN
              IF "Multi Document Package" AND ("Original Package No." <> '') THEN BEGIN
                Package.GET("Original Package No.");
                Package.CALCFIELDS("Exist in Other Package");
                IF NOT Package."Exist in Other Package" THEN
                  ERROR(
                    Text006,
                    "No.","Shipping Agent Code");
              END ELSE
                ERROR(
                  Text006,
                  "No.","Shipping Agent Code");
          END;

        LOCKTABLE;
        PackageLine.LOCKTABLE;

        PostCarrierOptionPage(CurrentPackage);

        PostedPackage.INIT;
        PostedPackage.TRANSFERFIELDS(CurrentPackage);
        PostedPackage."Posted Source ID" := PostedDocNo;
        PostedPackage."Used on Bill of Lading No." := BillOfLadingNo;
        PostedPackage."Posting Date" := PostingDate;

        IF PostedPackage."Packing Date" = 0D THEN
          PostedPackage."Packing Date" := WORKDATE;
        PostedPackage.INSERT;

        PostedPackage.COPYLINKS(CurrentPackage);
        CurrentPackage.DELETELINKS;

        PackageLine.RESET;
        PackageLine.SETRANGE(PackageLine."Package No.","No.");
        IF PackageLine.FIND('-') THEN BEGIN
          REPEAT
            PostedPackageLine.INIT;
            PostedPackageLine.TRANSFERFIELDS(PackageLine);
            PostedPackageLine."Posted Source ID" := PostedDocNo;
            PostedPackageLine.INSERT;

            PostedPackageLine.COPYLINKS(PackageLine);
            PackageLine.DELETELINKS;
          UNTIL PackageLine.NEXT = 0;
        END ELSE BEGIN
          IF Miscellaneous THEN BEGIN
            PostedPackageLine.INIT;
            PostedPackageLine."Package No." := "No.";
            PostedPackageLine."Line No." := 10000;
            PostedPackageLine.INSERT;
          END;
        END;
        DELETE;

        PackageLine.DELETEALL;
      END;
    END;

    LOCAL PROCEDURE PostCarrierOptionPage@20(CurrentPackage@1000000000 : Record 14000701);
    BEGIN
      WITH CurrentPackage DO BEGIN
        GetShippingAgent("Shipping Agent Code");
        ShipperTypeMgt.PostCarrierOptionPage(CurrentPackage,ShippingAgent);
      END;
    END;

    PROCEDURE GetShippingCharge@2(VAR CurrentPackage@1000000000 : Record 14000701);
    BEGIN
      WITH CurrentPackage DO BEGIN
        TESTFIELD(Closed,FALSE);

        GetShippingAgent("Shipping Agent Code");
        ShipperTypeMgt.GetShippingCharge(CurrentPackage,ShippingAgent);
      END;
    END;

    PROCEDURE GetMarkup@30(CurrentShippingAgentService@1240030000 : Record 14000708;ShippingCharge@1240030001 : Decimal;ShipToType@1240030002 : 'Customer,Vendor,Bank,Prospect,Resource,Employee,Contact';ShipToNo@1240030003 : Code[20];ShipToCode@1240030004 : Code[10]) : Decimal;
    VAR
      ShippingChargeMarkup@1240030005 : Record 14000723;
    BEGIN
      ShippingChargeMarkup.RESET;
      ShippingChargeMarkup.SETRANGE("Ship-to Type",ShipToType);
      ShippingChargeMarkup.SETRANGE("Ship-to No.",ShipToNo); //TPZ2786
      ShippingChargeMarkup.SETRANGE("Ship-to Code",ShipToCode);//TPZ2786
      ShippingChargeMarkup.SETRANGE(
        "Shipping Agent Code",CurrentShippingAgentService."Shipping Agent Code");
      ShippingChargeMarkup.SETRANGE("E-Ship Agent Service Code",CurrentShippingAgentService.Code);
      ShippingChargeMarkup.SETRANGE(
        "World Wide Service",CurrentShippingAgentService."World Wide Service");
      IF ShipToCode <> '' THEN BEGIN
        IF ShippingChargeMarkup.FIND('-') THEN BEGIN
          CurrentShippingAgentService."Markup Type" := ShippingChargeMarkup."Markup Type";
          CurrentShippingAgentService."Additional Markup" := ShippingChargeMarkup."Additional Markup";
        END ELSE BEGIN
          ShippingChargeMarkup.SETRANGE("Ship-to Code",'');
          ShippingChargeMarkup.SETRANGE("Use for Ship-to/Order Address",TRUE);
          IF ShippingChargeMarkup.FIND('-') THEN BEGIN
            CurrentShippingAgentService."Markup Type" := ShippingChargeMarkup."Markup Type";
            CurrentShippingAgentService."Additional Markup" := ShippingChargeMarkup."Additional Markup";
          END;
        END;
      END ELSE
        IF ShippingChargeMarkup.FIND('-') THEN BEGIN
          CurrentShippingAgentService."Markup Type" := ShippingChargeMarkup."Markup Type";
          CurrentShippingAgentService."Additional Markup" := ShippingChargeMarkup."Additional Markup";
        END;

      CASE CurrentShippingAgentService."Markup Type" OF
        CurrentShippingAgentService."Markup Type"::Amount:
          EXIT(CurrentShippingAgentService."Additional Markup");
        CurrentShippingAgentService."Markup Type"::Percent:
          EXIT(ROUND(ShippingCharge * CurrentShippingAgentService."Additional Markup" / 100,0.01));
      END;

      EXIT(0);
    END;

    PROCEDURE QuoteRateSalesHeader@24(VAR SalesHeader@1240030000 : Record 36);
    VAR
      SalesLine@1000000001 : Record 37;
      RateShopHeader@1000000002 : Record 14000741;
      RateShopLine@1000000003 : Record 14000742;
    BEGIN
      WITH SalesHeader DO BEGIN
        TESTFIELD("Shipping Agent Code");
        TESTFIELD("E-Ship Agent Service");

        SalesLine.RESET;
        SalesLine.SETRANGE("Document Type","Document Type");
        SalesLine.SETRANGE("Document No.","No.");
        SalesLine.SETFILTER("Outstanding Quantity",'<>0');
        SalesLine.SETRANGE("Rate Quoted",TRUE);
        IF SalesLine.FIND('-') THEN
          ERROR(
            Text021,
            SalesHeader."No.");

        CLEAR(RateShopHeader);
        RateShopHeader.INSERT(TRUE);
        RateShopHeader.TransferFromSalesHeader(SalesHeader);
        RateShopHeader.MODIFY;
        COMMIT;

        CLEAR(PackingStation);
        IF RateShopHeader."Rate Shop Packing Station Code" <> '' THEN
          PackingStation.GET(RateShopHeader."Rate Shop Packing Station Code")
        ELSE
          GetPackingStation;

        IF NOT RateShopManualChanges(RateShopHeader) THEN
         EXIT;

        GetShippingAgentService("Shipping Agent Code","E-Ship Agent Service","World Wide Service");
        GetShippingAgent(ShippingAgentService."Shipping Agent Code");
        ShipperTypeMgt.RateShop(
          RateShopHeader,RateShopLine,ShippingAgent,ShippingAgentService);
        COMMIT;

        RateShopLine.RESET;
        RateShopLine.SETRANGE("Rate Shop No.",RateShopHeader."No.");
        IF RateShopLine.FIND('-') THEN BEGIN
          IF RateShopLine."Service Error Message" <> '' THEN
            IF COPYSTR(RateShopLine."Service Error Message",1,5) = 'ERROR' THEN
              ERROR(RateShopLine."Service Error Message");

          RateShopLine.QuoteLine;
          COMMIT;
        END;

        RateShopHeader.DELETE(TRUE);
      END;
    END;

    PROCEDURE RateShopSalesHeader@13(VAR SalesHeader@1240030000 : Record 36);
    VAR
      RateShopHeader@1000000001 : Record 14000741;
      RateShopLine@1000000002 : Record 14000742;
      Package@1000000003 : Record 14000701;
    BEGIN
      WITH SalesHeader DO BEGIN
        CLEAR(RateShopHeader);
        RateShopHeader.INSERT(TRUE);
        RateShopHeader.TransferFromSalesHeader(SalesHeader);
        RateShopHeader.MODIFY;
        COMMIT;

        CLEAR(PackingStation);
        IF RateShopHeader."Rate Shop Packing Station Code" <> '' THEN
          PackingStation.GET(RateShopHeader."Rate Shop Packing Station Code")
        ELSE
          GetPackingStation;

        IF NOT RateShopManualChanges(RateShopHeader) THEN
         EXIT;

        RateShop(RateShopHeader);
        COMMIT;

        RateShopLine.RESET;
        RateShopLine.SETRANGE("Rate Shop No.",RateShopHeader."No.");
        IF PAGE.RUNMODAL(PAGE::"Rate Shop Chart",RateShopLine) = ACTION::LookupOK THEN BEGIN
          Package.RESET;
          Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
          Package.SETRANGE("Source Type",DATABASE::"Sales Header");
          Package.SETRANGE("Source Subtype",SalesHeader."Document Type");
          Package.SETRANGE("Source ID","No.");
          IF Package.FIND('-') THEN
            MESSAGE(Text022);

          NameAndAddressMgt.CheckNameAddressSalesHeader(
            SalesHeader,RateShopLine."Shipping Agent Code");

          VALIDATE("Shipping Agent Code",RateShopLine."Shipping Agent Code");
          TESTFIELD("World Wide Service",RateShopLine."World Wide Service");
          VALIDATE("E-Ship Agent Service",RateShopLine."Shipping Agent Service");
          MODIFY(TRUE);
          COMMIT;
        END;

        RateShopHeader.DELETE(TRUE);
      END;
    END;

    PROCEDURE RateShopPurchHeader@1240030003(VAR PurchHeader@1240030000 : Record 38);
    VAR
      RateShopHeader@1000000001 : Record 14000741;
      RateShopLine@1000000002 : Record 14000742;
      Package@1000000003 : Record 14000701;
    BEGIN
      WITH PurchHeader DO BEGIN
        CLEAR(RateShopHeader);
        RateShopHeader.INSERT(TRUE);
        RateShopHeader.TransferFromPurchHeader(PurchHeader);
        RateShopHeader.MODIFY;
        COMMIT;

        CLEAR(PackingStation);
        IF RateShopHeader."Rate Shop Packing Station Code" <> '' THEN
          PackingStation.GET(RateShopHeader."Rate Shop Packing Station Code")
        ELSE
          GetPackingStation;

        IF NOT RateShopManualChanges(RateShopHeader) THEN
         EXIT;

        RateShop(RateShopHeader);
        COMMIT;

        RateShopLine.RESET;
        RateShopLine.SETRANGE("Rate Shop No.",RateShopHeader."No.");
        IF PAGE.RUNMODAL(PAGE::"Rate Shop Chart",RateShopLine) = ACTION::LookupOK THEN BEGIN
          Package.RESET;
          Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
          Package.SETRANGE("Source Type",DATABASE::"Purchase Header");
          Package.SETRANGE("Source Subtype",PurchHeader."Document Type");
          Package.SETRANGE("Source ID","No.");
          IF Package.FIND('-') THEN
            MESSAGE(Text022);

          NameAndAddressMgt.CheckNameAddressPurchaseHeader(
            PurchHeader,RateShopLine."Shipping Agent Code");

          VALIDATE("E-Ship Agent Code",RateShopLine."Shipping Agent Code");
          TESTFIELD("World Wide Service",RateShopLine."World Wide Service");
          VALIDATE("E-Ship Agent Service",RateShopLine."Shipping Agent Service");
          MODIFY(TRUE);
          COMMIT;
        END;

        RateShopHeader.DELETE(TRUE);
      END;
    END;

    PROCEDURE RateShopTransferHeader@1240030013(VAR TransferHeader@1240030000 : Record 5740);
    VAR
      RateShopHeader@1000000001 : Record 14000741;
      RateShopLine@1000000002 : Record 14000742;
      Package@1000000003 : Record 14000701;
    BEGIN
      WITH TransferHeader DO BEGIN
        CLEAR(RateShopHeader);
        RateShopHeader.INSERT(TRUE);
        RateShopHeader.TransferFromTransferHeader(TransferHeader);
        RateShopHeader.MODIFY;
        COMMIT;

        CLEAR(PackingStation);
        IF RateShopHeader."Rate Shop Packing Station Code" <> '' THEN
          PackingStation.GET(RateShopHeader."Rate Shop Packing Station Code")
        ELSE
          GetPackingStation;

        IF NOT RateShopManualChanges(RateShopHeader) THEN
         EXIT;

        RateShop(RateShopHeader);
        COMMIT;

        RateShopLine.RESET;
        RateShopLine.SETRANGE("Rate Shop No.",RateShopHeader."No.");
        IF PAGE.RUNMODAL(PAGE::"Rate Shop Chart",RateShopLine) = ACTION::LookupOK THEN BEGIN
          Package.RESET;
          Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
          Package.SETRANGE("Source Type",DATABASE::"Transfer Header");
          Package.SETRANGE("Source Subtype",0);
          Package.SETRANGE("Source ID","No.");
          IF Package.FIND('-') THEN
            MESSAGE(Text022);

          NameAndAddressMgt.CheckNameAddressTransferHeader(
            TransferHeader,RateShopLine."Shipping Agent Code");

          VALIDATE("Shipping Agent Code",RateShopLine."Shipping Agent Code");
          TESTFIELD("World Wide Service",RateShopLine."World Wide Service");
          VALIDATE("E-Ship Agent Service",RateShopLine."Shipping Agent Service");
          MODIFY(TRUE);
          COMMIT;
        END;

        RateShopHeader.DELETE(TRUE);
      END;
    END;

    PROCEDURE RateShopPackage@14(VAR CurrentPackage@1000000000 : Record 14000701);
    VAR
      RateShopHeader@1000000001 : Record 14000741;
      RateShopLine@1000000002 : Record 14000742;
      TempPackage@1000000004 : Record 14000701;
    BEGIN
      WITH CurrentPackage DO BEGIN
        CLEAR(RateShopHeader);
        RateShopHeader.INSERT(TRUE);
        RateShopHeader.TransferFromPackage(CurrentPackage);
        RateShopHeader.MODIFY;
        COMMIT;

        IF NOT RateShopManualChanges(RateShopHeader) THEN
          EXIT;

        RateShop(RateShopHeader);
        COMMIT;

        RateShopLine.RESET;
        RateShopLine.SETRANGE("Rate Shop No.",RateShopHeader."No.");
        IF PAGE.RUNMODAL(PAGE::"Rate Shop Chart",RateShopLine) = ACTION::LookupOK THEN BEGIN
          TESTFIELD(Closed,FALSE);

          TempPackage.COPY(CurrentPackage);
          VALIDATE("Shipping Agent Code",RateShopLine."Shipping Agent Code");
          TESTFIELD("World Wide Service",RateShopLine."World Wide Service");
          VALIDATE("Shipping Agent Service",RateShopLine."Shipping Agent Service");
          MODIFY(TRUE);
        END;

        RateShopHeader.DELETE(TRUE);
      END;
    END;

    PROCEDURE QuoteRateBillOfLading@39(VAR CurrentBillOfLading@1000000000 : Record 14000822);
    VAR
      RateShopHeader@1000000002 : Record 14000741;
      RateShopLine@1000000003 : Record 14000742;
    BEGIN
      WITH CurrentBillOfLading DO BEGIN
        TESTFIELD("Shipping Agent Code");
        TESTFIELD("Shipping Agent Service");

        CLEAR(RateShopHeader);
        RateShopHeader.INSERT(TRUE);
        RateShopHeader.TransferFromBillOfLading(CurrentBillOfLading);
        RateShopHeader.MODIFY;
        COMMIT;

        CLEAR(PackingStation);
        IF RateShopHeader."Rate Shop Packing Station Code" <> '' THEN
          PackingStation.GET(RateShopHeader."Rate Shop Packing Station Code")
        ELSE
          GetPackingStation;

        IF NOT RateShopManualChanges(RateShopHeader) THEN
         EXIT;

        GetShippingAgentService("Shipping Agent Code","Shipping Agent Service","World Wide Service");
        GetShippingAgent(ShippingAgentService."Shipping Agent Code");
        ShipperTypeMgt.RateShop(
          RateShopHeader,RateShopLine,ShippingAgent,ShippingAgentService);
        COMMIT;

        RateShopLine.RESET;
        RateShopLine.SETRANGE("Rate Shop No.",RateShopHeader."No.");
        IF RateShopLine.FIND('-') THEN BEGIN
          IF RateShopLine."Service Error Message" <> '' THEN
            ERROR(RateShopLine."Service Error Message");

          RateShopLine.QuoteLine;
          COMMIT;
        END;

        RateShopHeader.DELETE(TRUE);
      END;
    END;

    PROCEDURE RateShopBillOfLading@27(VAR CurrentBillOfLading@1000000000 : Record 14000822);
    VAR
      RateShopHeader@1000000001 : Record 14000741;
      RateShopLine@1000000002 : Record 14000742;
    BEGIN
      WITH CurrentBillOfLading DO BEGIN
        CLEAR(RateShopHeader);
        RateShopHeader.INSERT(TRUE);
        RateShopHeader.TransferFromBillOfLading(CurrentBillOfLading);
        RateShopHeader.MODIFY;
        COMMIT;

        IF NOT RateShopManualChanges(RateShopHeader) THEN
          EXIT;

        RateShop(RateShopHeader);
        COMMIT;

        RateShopLine.RESET;
        RateShopLine.SETRANGE("Rate Shop No.",RateShopHeader."No.");
        IF PAGE.RUNMODAL(PAGE::"Rate Shop Chart",RateShopLine) = ACTION::LookupOK THEN BEGIN
          TESTFIELD(Released,FALSE);
          TESTFIELD("Cost On Documents",FALSE);

          VALIDATE("Shipping Agent Code",RateShopLine."Shipping Agent Code");
          TESTFIELD("World Wide Service",RateShopLine."World Wide Service");
          VALIDATE("Shipping Agent Service",RateShopLine."Shipping Agent Service");
          VALIDATE("Shipping Cost",RateShopLine."Shipping Cost");
          VALIDATE("Shipping Charge",RateShopLine."Shipping Charge");
          MODIFY(TRUE);
        END;

        RateShopHeader.DELETE(TRUE);
      END;
    END;

    LOCAL PROCEDURE RateShopManualChanges@17(VAR CurrentRateShopHeader@1000000000 : Record 14000741) : Boolean;
    VAR
      EShipInput@1240030000 : Record 14000728;
      EShipEnterPackageWeight@1240030001 : Page 14050108;
      EShipEnterPackageValue@1240030002 : Page 14050109;
      EShipEnterNoOfPackages@1240030003 : Page 14050110;
    BEGIN
      WITH CurrentRateShopHeader DO BEGIN
        GetPackingStation;

        IF PackingStation."Rateshop Enter Weight" THEN BEGIN
          CLEAR(EShipInput);
          EShipInput."Package Weight" := GetWeight;

          CLEAR(EShipEnterPackageWeight);
          EShipEnterPackageWeight.LOOKUPMODE(TRUE);
          EShipEnterPackageWeight.SetEShipInput(EShipInput);
          IF EShipEnterPackageWeight.RUNMODAL = ACTION::LookupOK THEN BEGIN
          EShipEnterPackageWeight.GetEShipInput(EShipInput);
          VALIDATE("Override Weight",EShipInput."Package Weight");
            MODIFY;
            COMMIT;
          END ELSE BEGIN
            DELETE(TRUE);
            EXIT(FALSE);
          END;
        END;

        IF PackingStation."Rateshop Enter Value" THEN BEGIN
          CLEAR(EShipInput);
          EShipInput."Package Value" := GetValue;

          CLEAR(EShipEnterPackageValue);
          EShipEnterPackageValue.LOOKUPMODE(TRUE);
          EShipEnterPackageValue.SetEShipInput(EShipInput);
          IF EShipEnterPackageValue.RUNMODAL = ACTION::LookupOK THEN BEGIN
          EShipEnterPackageValue.GetEShipInput(EShipInput);
          VALIDATE("Override Value",EShipInput."Package Value");
            MODIFY;
            COMMIT;
          END ELSE BEGIN
            DELETE(TRUE);
            EXIT(FALSE);
          END;
        END;

        IF PackingStation."Rateshop Enter No. of Packages" AND ("Source ID" <> '') THEN BEGIN
          CLEAR(EShipInput);
          EShipInput."No. of Packages" := "No. of Packages";

          CLEAR(EShipEnterNoOfPackages);
          EShipEnterNoOfPackages.LOOKUPMODE(TRUE);
          EShipEnterNoOfPackages.SetEShipInput(EShipInput);
          IF EShipEnterNoOfPackages.RUNMODAL = ACTION::LookupOK THEN BEGIN
          EShipEnterNoOfPackages.GetEShipInput(EShipInput);
          VALIDATE("No. of Packages",EShipInput."No. of Packages");
            MODIFY;
            COMMIT;
          END ELSE BEGIN
            DELETE(TRUE);
            EXIT(FALSE);
          END;
        END;

        EXIT(TRUE);
      END;
    END;

    PROCEDURE RateShop@16(RateShopHeader@1000000000 : Record 14000741);
    VAR
      RateShopLine@1000000001 : Record 14000742;
    BEGIN
      // RateShop
      WITH RateShopHeader DO BEGIN
        RateShopLine.RESET;
        RateShopLine.SETRANGE("Rate Shop No.","No.");
        RateShopLine.DELETEALL;
        GetPackingStation;
        ShippingAgentService.RESET;
        ShippingAgentService.SETCURRENTKEY("Rate Shop");
        IF "Bill of Lading No." = '' THEN
          ShippingAgentService.SETRANGE("Rate Shop",TRUE)
        ELSE
          ShippingAgentService.SETRANGE("Rate Shop (Bill of Lading)",TRUE);

        IF NOT ShippingAgentService.FIND('-') THEN
          ERROR(Text026);
        Window.OPEN(
          Text027 +
          Text028 +
          Text029 +
          Text030);
        REPEAT
          Window.UPDATE(1,ShippingAgentService."Shipping Agent Code");
          Window.UPDATE(2,ShippingAgentService.Code);
          Window.UPDATE(3,ShippingAgentService.Description);
          GetShippingAgent(ShippingAgentService."Shipping Agent Code");
          IF ShippingAgent."Shipper Type" <> ShippingAgent."Shipper Type"::Extended THEN BEGIN   // >> ECS <<
            IF ShippingAgentService.InternationalShipment(ShippingAgent,"Ship-to Country Code") =
               ShippingAgentService."World Wide Service"
            THEN
              ShipperTypeMgt.RateShop(RateShopHeader,RateShopLine,ShippingAgent,ShippingAgentService);

            COMMIT;
          END; // >> ECS <<
        UNTIL ShippingAgentService.NEXT = 0;
        RateShopExtendedCarriers(RateShopHeader,RateShopLine,PackingStation);  // >> ECS <<
        Window.CLOSE;
      END;
    END;

    PROCEDURE CloseSalesHeader@6(SalesHeader@1240030002 : Record 36;PrintLabel@1240030003 : Boolean;ExportDocsPrinted@1240030005 : Boolean);
    VAR
      Package@1000000002 : Record 14000701;
      PackingRule@1240030000 : Record 14000715;
      BillOfLadingLine@1240030004 : Record 14000823;
      ReleaseSalesDocument@1240030001 : Codeunit 414;
      EShipSetGlobalVariable@1240020000 : Codeunit 14000246;
    BEGIN
      GetShippingSetup;

      Package.RESET;
      Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Package.SETRANGE("Source Type",DATABASE::"Sales Header");
      Package.SETRANGE("Source Subtype",SalesHeader."Document Type");
      Package.SETRANGE("Source ID",SalesHeader."No.");
      IF ShippingSetup."Location Packing" THEN BEGIN
        GetPackingStation;
        Package.SETRANGE("Location Code",PackingStation."Location Code");
      END;
      Package.SETRANGE(Closed,FALSE);
      IF Package.FIND('-') THEN
        Package.TESTFIELD(Closed);

      PackingRule.GetPackingRule(0,SalesHeader."Sell-to Customer No.",SalesHeader."Ship-to Code");
      IF PackingRule."Bill of Lading No. Mandatory" THEN BEGIN
        GetShippingSetup;

        BillOfLadingLine.RESET;
        BillOfLadingLine.SETCURRENTKEY(Type,"No.",Closed,"Location Code");
        BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
        BillOfLadingLine.SETRANGE("No.",SalesHeader."No.");
        BillOfLadingLine.SETRANGE(Closed,FALSE);
        IF ShippingSetup."Location Packing" THEN
          BillOfLadingLine.SETRANGE("Location Code",PackingStation."Location Code");
        BillOfLadingLine.SETRANGE("Source Type",DATABASE::"Sales Header");
        BillOfLadingLine.SETRANGE("Source Subtype",SalesHeader."Document Type");
        BillOfLadingLine.SETRANGE("Source ID",SalesHeader."No.");
        IF NOT BillOfLadingLine.FIND('-') THEN
          ERROR(Text031);
      END;

      CreateShipChargeSalesHeader(SalesHeader);

      GetPackingStation;
      IF PackingStation."Change Posting Date on Close" THEN
        IF SalesHeader."Posting Date" <> WORKDATE THEN BEGIN
          SalesHeader.FIND;
          IF SalesHeader.Status = SalesHeader.Status::Released THEN BEGIN
            EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(FALSE);
            EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(TRUE);
            ReleaseSalesDocument.Reopen(SalesHeader);
            EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(FALSE);
            SalesHeader.FIND;
            SalesHeader.VALIDATE("Posting Date",WORKDATE);
            SalesHeader.MODIFY(TRUE);
            SalesHeader.FIND;
            EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(FALSE);
            EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(TRUE);
            ReleaseSalesDocument.RUN(SalesHeader);
            EShipSetGlobalVariable."ReleaseSalesDoc-SetRunFromEShip"(FALSE);
            SalesHeader.FIND;
          END ELSE BEGIN
            SalesHeader.VALIDATE("Posting Date",WORKDATE);
            SalesHeader.MODIFY(TRUE);
          END;
        END;

      COMMIT;

      TransferSerialLotNoSalesHeader(SalesHeader);

      IF PrintLabel THEN BEGIN
        PrintSalesHeaderPackingList(SalesHeader,FALSE);

        IF NOT ExportDocsPrinted THEN
          PrintExportDocFromSourceID(DATABASE::"Sales Header",1,SalesHeader."No.",FALSE);
      END;
    END;

    LOCAL PROCEDURE TransferSerialLotNoSalesHeader@40(CurrentSalesHeader@1240030000 : Record 36);
    VAR
      PackageLine@1240030018 : Record 14000702;
      Item@1240030017 : Record 27;
      SalesLine@1240030016 : Record 37;
      SalesLineTmp@1240030015 : TEMPORARY Record 37;
      EShipTrackingCode@1240030013 : Record 14000721;
      TrackingSpecification@1240030012 : Record 336;
      TrackingSpecificationTmp@1240030011 : TEMPORARY Record 336;
      ItemLedgerEntry@1240020000 : Record 32;
      EShipItemTrackPage@1240030010 : Page 14000254;
      ReserveSalesLine@1240030009 : Codeunit 99000832;
      LastEntryNo@1240030008 : Integer;
      LinesInserted@1240030007 : Boolean;
      ModifyRecord@1240030006 : Boolean;
      LotNoToSet@1240030005 : Code[20];
      WarrantyDateToSet@1240030004 : Date;
      ExpirationDateToSet@1240030003 : Date;
      LineQty@1240030002 : Decimal;
      SecondSourceQtyArray@1240030001 : ARRAY [3] OF Decimal;
    BEGIN
      SalesLineTmp.DELETEALL;

      CurrentSalesHeader.CALCFIELDS("E-Ship Whse. Outst. Qty (Base)");
      CurrentSalesHeader.CALCFIELDS("E-Ship Whse. Ship. Qty (Base)");

      PackageLine.RESET;
      PackageLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      PackageLine.SETRANGE("Source Type",DATABASE::"Sales Header");
      PackageLine.SETRANGE("Source Subtype",CurrentSalesHeader."Document Type");
      PackageLine.SETRANGE("Source ID",CurrentSalesHeader."No.");
      PackageLine.SETRANGE(Type,PackageLine.Type::Item);
      PackageLine.SETFILTER(Quantity,'<>0');
      IF PackageLine.FIND('-') THEN
        REPEAT
          Item.GET(PackageLine."No.");
          EShipTrackingCode.GetEShipTrackingCodeItem(Item);

          IF EShipTrackingCode."Transfer Lot Numbers" THEN
            LotNoToSet := PackageLine."Lot No."
          ELSE
            LotNoToSet := '';

          IF EShipTrackingCode."Transfer Warranty Date" THEN
            WarrantyDateToSet := PackageLine."Warranty Date"
          ELSE
            WarrantyDateToSet := 0D;

          IF EShipTrackingCode."Transfer Expiration Date" THEN
            ExpirationDateToSet := PackageLine."Expiration Date"
          ELSE BEGIN
            ItemLedgerEntry.SETCURRENTKEY("Item No.",Open,"Variant Code",Positive,"Expiration Date",
              "Lot No.","Serial No.");
            ItemLedgerEntry.SETRANGE("Item No.",PackageLine."No.");
            ItemLedgerEntry.SETRANGE(Open,TRUE);
            ItemLedgerEntry.SETRANGE("Lot No.",PackageLine."Lot No.");
            IF ItemLedgerEntry.FIND('-') THEN
              ExpirationDateToSet := ItemLedgerEntry."Expiration Date"
            ELSE
              ExpirationDateToSet := 0D;
          END;

          IF EShipTrackingCode."Transfer Serial Numbers" OR EShipTrackingCode."Transfer Lot Numbers" OR
             EShipTrackingCode."Transfer Warranty Date" OR EShipTrackingCode."Transfer Expiration Date"
          THEN BEGIN
            SalesLineTmp.RESET;
            SalesLineTmp.SETRANGE("Document Type",CurrentSalesHeader."Document Type");
            SalesLineTmp.SETRANGE("Document No.",CurrentSalesHeader."No.");
            SalesLineTmp.SETRANGE(Type,SalesLineTmp.Type::Item);
            SalesLineTmp.SETRANGE("No.",PackageLine."No.");
            SalesLineTmp.SETRANGE("Variant Code",PackageLine."Variant Code");
            IF NOT SalesLineTmp.FIND('-') THEN BEGIN
              SalesLine.COPYFILTERS(SalesLineTmp);
              IF SalesLine.FIND('-') THEN
                REPEAT
                  SalesLineTmp := SalesLine;
                  SalesLine.CALCFIELDS(
                    "E-Ship Whse. Ship. Qty (Base)","E-Ship Whse. Outst. Qty (Base)");
                  IF SalesLine."E-Ship Whse. Outst. Qty (Base)" +
                     SalesLine."E-Ship Whse. Ship. Qty (Base)" <> 0
                  THEN
                    SalesLineTmp."Qty. to Ship (Base)" :=
                      SalesLine."E-Ship Whse. Outst. Qty (Base)" +
                      SalesLine."E-Ship Whse. Ship. Qty (Base)";
                  SalesLineTmp.INSERT;

                  IF EShipTrackingCode."Autom. Delete Item Track Lines" THEN BEGIN
                    CLEAR(ReserveSalesLine);
                    CLEAR(EShipItemTrackPage);
                    CLEAR(TrackingSpecification);
                    TrackingSpecification.InitFromSalesLine(SalesLine);
                    EShipItemTrackPage.SetSourceSpec(TrackingSpecification,SalesLine."Shipment Date");
                    IF SalesLine."E-Ship Whse. Ship. Qty (Base)" +
                       SalesLine."E-Ship Whse. Outst. Qty (Base)" <> 0
                    THEN BEGIN
                      SecondSourceQtyArray[1] := DATABASE::"Warehouse Shipment Line";
                      SecondSourceQtyArray[2] :=
                        SalesLine."E-Ship Whse. Ship. Qty (Base)" +
                        SalesLine."E-Ship Whse. Outst. Qty (Base)";
                      SecondSourceQtyArray[3] := 0;
                      EShipItemTrackPage.SetSecondSourceQuantity(SecondSourceQtyArray);
                    END;
                    EShipItemTrackPage.EShipOpenForm;

                    TrackingSpecificationTmp.RESET;
                    TrackingSpecificationTmp.DELETEALL;
                    EShipItemTrackPage.EShipGetRecords(TrackingSpecificationTmp);
                    IF TrackingSpecificationTmp.FIND('-') THEN BEGIN
                      REPEAT
                        IF TrackingSpecificationTmp."Quantity Handled (Base)" = 0 THEN BEGIN
                          EShipItemTrackPage.EShipDeleteRecord(TrackingSpecificationTmp);
                        END ELSE BEGIN
                          ModifyRecord := FALSE;
                          IF TrackingSpecificationTmp."Quantity (Base)" >
                             TrackingSpecificationTmp."Quantity Handled (Base)"
                          THEN BEGIN
                            TrackingSpecificationTmp.VALIDATE(
                              "Quantity (Base)",
                              TrackingSpecificationTmp."Quantity Handled (Base)");
                            ModifyRecord := TRUE;
                          END;
                          IF TrackingSpecificationTmp."Qty. to Handle" <> 0 THEN BEGIN
                            TrackingSpecificationTmp.VALIDATE("Qty. to Handle",0);
                            ModifyRecord := TRUE;
                          END;
                          IF ModifyRecord THEN
                            EShipItemTrackPage.EShipModifyRecord(TrackingSpecificationTmp);
                        END;
                      UNTIL TrackingSpecificationTmp.NEXT = 0;

                      EShipItemTrackPage.EShipCloseForm;
                    END;
                  END;
                UNTIL SalesLine.NEXT = 0;
            END;

            IF SalesLineTmp.FIND('-') THEN BEGIN
              REPEAT
                IF (SalesLine."Document Type" <> SalesLineTmp."Document Type") OR
                   (SalesLine."Document No." <> SalesLineTmp."Document No.") OR
                   (SalesLine."Line No." <> SalesLineTmp."Line No.")
                THEN
                  SalesLine.GET(
                    SalesLineTmp."Document Type",SalesLineTmp."Document No.",
                    SalesLineTmp."Line No.");

                IF SalesLineTmp."Qty. to Ship (Base)" >= PackageLine."Quantity (Base)" THEN BEGIN
                  LineQty := PackageLine."Quantity (Base)";
                  PackageLine."Quantity (Base)" := 0;
                  SalesLineTmp."Qty. to Ship (Base)" :=
                    SalesLineTmp."Qty. to Ship (Base)" - LineQty;
                  IF SalesLineTmp."Qty. to Ship (Base)" = 0 THEN
                    SalesLineTmp.DELETE
                  ELSE
                    SalesLineTmp.MODIFY;
                END ELSE BEGIN
                  LineQty := SalesLineTmp."Qty. to Ship (Base)";
                  PackageLine."Quantity (Base)" := PackageLine."Quantity (Base)" - LineQty;
                  SalesLineTmp."Qty. to Ship (Base)" := 0;
                  SalesLineTmp.DELETE;
                END;

                CLEAR(ReserveSalesLine);
                CLEAR(EShipItemTrackPage);
                CLEAR(TrackingSpecification);
                TrackingSpecification.InitFromSalesLine(SalesLine);
                EShipItemTrackPage.SetSourceSpec(TrackingSpecification,SalesLine."Shipment Date");
                SalesLine.CALCFIELDS(
                  "E-Ship Whse. Ship. Qty (Base)","E-Ship Whse. Outst. Qty (Base)");
                IF SalesLine."E-Ship Whse. Ship. Qty (Base)" +
                   SalesLine."E-Ship Whse. Outst. Qty (Base)" <> 0
                THEN BEGIN
                  SecondSourceQtyArray[1] := DATABASE::"Warehouse Shipment Line";
                  SecondSourceQtyArray[2] :=
                    SalesLine."E-Ship Whse. Ship. Qty (Base)" +
                    SalesLine."E-Ship Whse. Outst. Qty (Base)";
                  SecondSourceQtyArray[3] := 0;
                  EShipItemTrackPage.SetSecondSourceQuantity(SecondSourceQtyArray);
                END;
                EShipItemTrackPage.EShipOpenForm;

                TrackingSpecificationTmp.RESET;
                TrackingSpecificationTmp.DELETEALL;
                EShipItemTrackPage.EShipGetRecords(TrackingSpecificationTmp);
                IF TrackingSpecificationTmp.FIND('+') THEN
                  LastEntryNo := TrackingSpecificationTmp."Entry No."
                ELSE
                  LastEntryNo := 0;
                IF EShipTrackingCode."Transfer Serial Numbers" THEN BEGIN
                  TrackingSpecificationTmp := TrackingSpecification;
                  TrackingSpecificationTmp."Quantity (Base)" := 0;
                  TrackingSpecificationTmp."Qty. to Handle (Base)" := 0;
                  TrackingSpecificationTmp."Qty. to Invoice (Base)" := 0;
                  TrackingSpecificationTmp."Quantity Handled (Base)" := 0;
                  TrackingSpecificationTmp."Quantity Invoiced (Base)" := 0;
                  TrackingSpecificationTmp."Qty. to Handle" := 0;
                  TrackingSpecificationTmp."Qty. to Invoice" := 0;

                  LastEntryNo := LastEntryNo + 1;
                  TrackingSpecificationTmp."Entry No." := LastEntryNo;
                  TrackingSpecificationTmp.VALIDATE("Quantity (Base)",1);
                  TrackingSpecificationTmp.VALIDATE("Serial No.",PackageLine."Serial No.");
                  IF LotNoToSet <> '' THEN
                    TrackingSpecificationTmp.VALIDATE("Lot No.",LotNoToSet);
                  IF WarrantyDateToSet <> 0D THEN
                    TrackingSpecificationTmp.VALIDATE("Warranty Date",WarrantyDateToSet);
                  IF ExpirationDateToSet <> 0D THEN
                    TrackingSpecificationTmp.VALIDATE("Expiration Date",ExpirationDateToSet);
                  EShipItemTrackPage.EShipInsertRecord(TrackingSpecificationTmp);
                END ELSE BEGIN
                  IF LastEntryNo <> 0 THEN BEGIN
                    TrackingSpecificationTmp.SETRANGE("Serial No.",'');
                    TrackingSpecificationTmp.SETRANGE("Lot No.",LotNoToSet);
                    TrackingSpecificationTmp.SETRANGE("Warranty Date",WarrantyDateToSet);
                    TrackingSpecificationTmp.SETRANGE("Expiration Date",ExpirationDateToSet);
                    IF TrackingSpecificationTmp.FIND('-') THEN BEGIN
                      TrackingSpecificationTmp.VALIDATE(
                        "Quantity (Base)",
                        TrackingSpecificationTmp."Quantity (Base)" + LineQty);
                      IF TrackingSpecificationTmp."Qty. per Unit of Measure" IN [1,0] THEN
                        TrackingSpecificationTmp.VALIDATE(
                          "Qty. to Handle",TrackingSpecificationTmp."Qty. to Handle" + LineQty)
                      ELSE
                        TrackingSpecificationTmp.VALIDATE(
                          "Qty. to Handle",
                          ROUND(
                            TrackingSpecificationTmp."Qty. to Handle" +
                            LineQty / TrackingSpecificationTmp."Qty. per Unit of Measure",
                            0.00001));
                      EShipItemTrackPage.EShipModifyRecord(TrackingSpecificationTmp);
                    END ELSE BEGIN
                      TrackingSpecificationTmp := TrackingSpecification;
                      TrackingSpecificationTmp."Quantity (Base)" := 0;
                      TrackingSpecificationTmp."Qty. to Handle (Base)" := 0;
                      TrackingSpecificationTmp."Qty. to Invoice (Base)" := 0;
                      TrackingSpecificationTmp."Quantity Handled (Base)" := 0;
                      TrackingSpecificationTmp."Quantity Invoiced (Base)" := 0;
                      TrackingSpecificationTmp."Qty. to Handle" := 0;
                      TrackingSpecificationTmp."Qty. to Invoice" := 0;

                      LastEntryNo := LastEntryNo + 1;
                      TrackingSpecificationTmp."Entry No." := LastEntryNo;
                      TrackingSpecificationTmp.VALIDATE("Quantity (Base)",LineQty);
                      IF TrackingSpecificationTmp."Qty. per Unit of Measure" IN [1,0] THEN
                        TrackingSpecificationTmp.VALIDATE("Qty. to Handle",LineQty)
                      ELSE
                        TrackingSpecificationTmp.VALIDATE(
                          "Qty. to Handle",
                          ROUND(
                            LineQty / TrackingSpecificationTmp."Qty. per Unit of Measure",
                            0.00001));
                      IF LotNoToSet <> '' THEN
                        TrackingSpecificationTmp.VALIDATE("Lot No.",LotNoToSet);
                      IF WarrantyDateToSet <> 0D THEN
                        TrackingSpecificationTmp.VALIDATE("Warranty Date",WarrantyDateToSet);
                      IF ExpirationDateToSet <> 0D THEN
                        TrackingSpecificationTmp.VALIDATE("Expiration Date",ExpirationDateToSet);
                      EShipItemTrackPage.EShipInsertRecord(TrackingSpecificationTmp);
                    END;
                  END ELSE BEGIN
                    TrackingSpecificationTmp := TrackingSpecification;
                    LastEntryNo := LastEntryNo + 1;
                    TrackingSpecificationTmp."Entry No." := LastEntryNo;
                    TrackingSpecificationTmp.VALIDATE("Quantity (Base)",LineQty);
                    IF TrackingSpecificationTmp."Qty. per Unit of Measure" IN [1,0] THEN
                      TrackingSpecificationTmp.VALIDATE("Qty. to Handle",LineQty)
                    ELSE
                      TrackingSpecificationTmp.VALIDATE(
                        "Qty. to Handle",
                        ROUND(
                          LineQty / TrackingSpecificationTmp."Qty. per Unit of Measure",
                          0.00001));
                    IF LotNoToSet <> '' THEN
                      TrackingSpecificationTmp.VALIDATE("Lot No.",LotNoToSet);
                    IF WarrantyDateToSet <> 0D THEN
                      TrackingSpecificationTmp.VALIDATE("Warranty Date",WarrantyDateToSet);
                    IF ExpirationDateToSet <> 0D THEN
                      TrackingSpecificationTmp.VALIDATE("Expiration Date",ExpirationDateToSet);
                    EShipItemTrackPage.EShipInsertRecord(TrackingSpecificationTmp);
                  END;
                END;

                EShipItemTrackPage.EShipCloseForm;
              UNTIL (SalesLineTmp.NEXT = 0) OR (PackageLine."Quantity (Base)" = 0);

              LinesInserted := TRUE;
            END;
          END;
        UNTIL PackageLine.NEXT = 0;

      IF LinesInserted THEN
        COMMIT;
    END;

    PROCEDURE ClosePurchHeader@59(PurchHeader@1240030000 : Record 38;PrintLabel@1240030001 : Boolean;ExportDocsPrinted@1240030005 : Boolean);
    VAR
      Package@1240030002 : Record 14000701;
      PackingRule@1240030003 : Record 14000715;
      BillOfLadingLine@1240030004 : Record 14000823;
    BEGIN
      GetShippingSetup;

      Package.RESET;
      Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Package.SETRANGE("Source Type",DATABASE::"Purchase Header");
      Package.SETRANGE("Source Subtype",PurchHeader."Document Type");
      Package.SETRANGE("Source ID",PurchHeader."No.");
      IF ShippingSetup."Location Packing" THEN BEGIN
        GetPackingStation;
        Package.SETRANGE("Location Code",PackingStation."Location Code");
      END;
      Package.SETRANGE(Closed,FALSE);
      IF Package.FIND('-') THEN
        Package.TESTFIELD(Closed);

      PackingRule.GetPackingRule(1,PurchHeader."Buy-from Vendor No.",PurchHeader."Order Address Code");
      IF PackingRule."Bill of Lading No. Mandatory" THEN BEGIN
        GetShippingSetup;

        BillOfLadingLine.RESET;
        BillOfLadingLine.SETCURRENTKEY(Type,"No.",Closed,"Location Code");
        BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
        BillOfLadingLine.SETRANGE("No.",PurchHeader."No.");
        BillOfLadingLine.SETRANGE(Closed,FALSE);
        IF ShippingSetup."Location Packing" THEN
          BillOfLadingLine.SETRANGE("Location Code",PackingStation."Location Code");
        BillOfLadingLine.SETRANGE("Source Type",DATABASE::"Purchase Header");
        BillOfLadingLine.SETRANGE("Source Subtype",PurchHeader."Document Type");
        BillOfLadingLine.SETRANGE("Source ID",PurchHeader."No.");
        IF NOT BillOfLadingLine.FIND('-') THEN
          ERROR(Text031);
      END;

      CreateShipChargePurchHeader(PurchHeader);

      GetPackingStation;
      IF PackingStation."Change Posting Date on Close" THEN
        IF PurchHeader."Posting Date" <> WORKDATE THEN BEGIN
          PurchHeader.FIND;
          PurchHeader.VALIDATE("Posting Date",WORKDATE);
          PurchHeader.MODIFY(TRUE);
        END;

      COMMIT;

      TransferSerialLotNoPurchHeader(PurchHeader);

      IF PrintLabel THEN BEGIN
        PrintPurchHeaderPackingList(PurchHeader,FALSE);

       IF NOT ExportDocsPrinted THEN
          PrintExportDocFromSourceID(
            DATABASE::"Purchase Header",PurchHeader."Document Type",PurchHeader."No.",FALSE);
      END;
    END;

    LOCAL PROCEDURE TransferSerialLotNoPurchHeader@60(CurrentPurchHeader@1240030000 : Record 38);
    VAR
      PackageLine@1240030018 : Record 14000702;
      Item@1240030017 : Record 27;
      PurchLine@1240030016 : Record 39;
      PurchLineTmp@1240030015 : TEMPORARY Record 39;
      EShipTrackingCode@1240030013 : Record 14000721;
      TrackingSpecification@1240030012 : Record 336;
      TrackingSpecificationTmp@1240030011 : TEMPORARY Record 336;
      ItemLedgerEntry@1240020000 : Record 32;
      EShipItemTrackPage@1240030010 : Page 14000254;
      ReservePurchLine@1240030009 : Codeunit 99000834;
      LastEntryNo@1240030008 : Integer;
      LinesInserted@1240030007 : Boolean;
      ModifyRecord@1240030006 : Boolean;
      LotNoToSet@1240030005 : Code[20];
      WarrantyDateToSet@1240030004 : Date;
      ExpirationDateToSet@1240030003 : Date;
      LineQty@1240030002 : Decimal;
      SecondSourceQtyArray@1240030001 : ARRAY [3] OF Decimal;
    BEGIN
      PurchLineTmp.DELETEALL;

      CurrentPurchHeader.CALCFIELDS("E-Ship Whse. Outst. Qty (Base)");
      CurrentPurchHeader.CALCFIELDS("E-Ship Whse. Ship. Qty (Base)");

      PackageLine.RESET;
      PackageLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      PackageLine.SETRANGE("Source Type",DATABASE::"Purchase Header");
      PackageLine.SETRANGE("Source Subtype",CurrentPurchHeader."Document Type");
      PackageLine.SETRANGE("Source ID",CurrentPurchHeader."No.");
      PackageLine.SETRANGE(Type,PackageLine.Type::Item);
      PackageLine.SETFILTER(Quantity,'<>0');
      IF PackageLine.FIND('-') THEN
        REPEAT
          Item.GET(PackageLine."No.");
          EShipTrackingCode.GetEShipTrackingCodeItem(Item);

          IF EShipTrackingCode."Transfer Lot Numbers" THEN
            LotNoToSet := PackageLine."Lot No."
          ELSE
            LotNoToSet := '';

          IF EShipTrackingCode."Transfer Warranty Date" THEN
            WarrantyDateToSet := PackageLine."Warranty Date"
          ELSE
            WarrantyDateToSet := 0D;

          IF EShipTrackingCode."Transfer Expiration Date" THEN
            ExpirationDateToSet := PackageLine."Expiration Date"
          ELSE BEGIN
            ItemLedgerEntry.SETCURRENTKEY("Item No.",Open,"Variant Code",Positive,"Expiration Date",
              "Lot No.","Serial No.");
            ItemLedgerEntry.SETRANGE("Item No.",PackageLine."No.");
            ItemLedgerEntry.SETRANGE(Open,TRUE);
            ItemLedgerEntry.SETRANGE("Lot No.",PackageLine."Lot No.");
            IF ItemLedgerEntry.FIND('-') THEN
              ExpirationDateToSet := ItemLedgerEntry."Expiration Date"
            ELSE
              ExpirationDateToSet := 0D;
          END;

          IF EShipTrackingCode."Transfer Serial Numbers" OR EShipTrackingCode."Transfer Lot Numbers" OR
             EShipTrackingCode."Transfer Warranty Date" OR EShipTrackingCode."Transfer Expiration Date"
          THEN BEGIN
            PurchLineTmp.RESET;
            PurchLineTmp.SETRANGE("Document Type",CurrentPurchHeader."Document Type");
            PurchLineTmp.SETRANGE("Document No.",CurrentPurchHeader."No.");
            PurchLineTmp.SETRANGE(Type,PurchLineTmp.Type::Item);
            PurchLineTmp.SETRANGE("No.",PackageLine."No.");
            PurchLineTmp.SETRANGE("Variant Code",PackageLine."Variant Code");
            IF NOT PurchLineTmp.FIND('-') THEN BEGIN
              PurchLine.COPYFILTERS(PurchLineTmp);
              IF PurchLine.FIND('-') THEN
                REPEAT
                  PurchLineTmp := PurchLine;
                  IF PurchLine."Document Type" = PurchLine."Document Type"::"Return Order" THEN
                    PurchLineTmp."Qty. to Receive (Base)" := PurchLine."Return Qty. to Ship (Base)";
                  PurchLine.CALCFIELDS(
                    "E-Ship Whse. Ship. Qty (Base)","E-Ship Whse. Outst. Qty (Base)");
                  IF PurchLine."E-Ship Whse. Outst. Qty (Base)" +
                     PurchLine."E-Ship Whse. Ship. Qty (Base)" <> 0
                  THEN
                    PurchLineTmp."Qty. to Receive (Base)" :=
                      PurchLine."E-Ship Whse. Outst. Qty (Base)" +
                      PurchLine."E-Ship Whse. Ship. Qty (Base)";
                  PurchLineTmp.INSERT;

                  IF EShipTrackingCode."Autom. Delete Item Track Lines" THEN BEGIN
                    CLEAR(ReservePurchLine);
                    CLEAR(EShipItemTrackPage);
                    CLEAR(TrackingSpecification);
                    TrackingSpecification.InitFromPurchLine(PurchLine);
                    EShipItemTrackPage.SetSourceSpec(TrackingSpecification,PurchLine."Expected Receipt Date");
                    IF PurchLine."E-Ship Whse. Ship. Qty (Base)" +
                       PurchLine."E-Ship Whse. Outst. Qty (Base)" <> 0
                    THEN BEGIN
                      SecondSourceQtyArray[1] := DATABASE::"Warehouse Shipment Line";
                      SecondSourceQtyArray[2] :=
                        PurchLine."E-Ship Whse. Ship. Qty (Base)" +
                        PurchLine."E-Ship Whse. Outst. Qty (Base)";
                      SecondSourceQtyArray[3] := 0;
                      EShipItemTrackPage.SetSecondSourceQuantity(SecondSourceQtyArray);
                    END;
                    EShipItemTrackPage.EShipOpenForm;

                    TrackingSpecificationTmp.RESET;
                    TrackingSpecificationTmp.DELETEALL;
                    EShipItemTrackPage.EShipGetRecords(TrackingSpecificationTmp);
                    IF TrackingSpecificationTmp.FIND('-') THEN BEGIN
                      REPEAT
                        IF TrackingSpecificationTmp."Quantity Handled (Base)" = 0 THEN BEGIN
                          EShipItemTrackPage.EShipDeleteRecord(TrackingSpecificationTmp);
                        END ELSE BEGIN
                          ModifyRecord := FALSE;
                          IF TrackingSpecificationTmp."Quantity (Base)" >
                             TrackingSpecificationTmp."Quantity Handled (Base)"
                          THEN BEGIN
                            TrackingSpecificationTmp.VALIDATE(
                              "Quantity (Base)",
                              TrackingSpecificationTmp."Quantity Handled (Base)");
                            ModifyRecord := TRUE;
                          END;
                          IF TrackingSpecificationTmp."Qty. to Handle" <> 0 THEN BEGIN
                            TrackingSpecificationTmp.VALIDATE("Qty. to Handle",0);
                            ModifyRecord := TRUE;
                          END;
                          IF ModifyRecord THEN
                            EShipItemTrackPage.EShipModifyRecord(TrackingSpecificationTmp);
                        END;
                      UNTIL TrackingSpecificationTmp.NEXT = 0;

                      EShipItemTrackPage.EShipCloseForm;
                    END;
                  END;
                UNTIL PurchLine.NEXT = 0;
            END;

            IF PurchLineTmp.FIND('-') THEN BEGIN
              REPEAT
                IF (PurchLine."Document Type" <> PurchLineTmp."Document Type") OR
                   (PurchLine."Document No." <> PurchLineTmp."Document No.") OR
                   (PurchLine."Line No." <> PurchLineTmp."Line No.")
                THEN
                  PurchLine.GET(
                    PurchLineTmp."Document Type",PurchLineTmp."Document No.",
                    PurchLineTmp."Line No.");

                IF PurchLineTmp."Qty. to Receive (Base)" >= PackageLine."Quantity (Base)" THEN BEGIN
                  LineQty := PackageLine."Quantity (Base)";
                  PackageLine."Quantity (Base)" := 0;
                  PurchLineTmp."Qty. to Receive (Base)" :=
                    PurchLineTmp."Qty. to Receive (Base)" - LineQty;
                  IF PurchLineTmp."Qty. to Receive (Base)" = 0 THEN
                    PurchLineTmp.DELETE
                  ELSE
                    PurchLineTmp.MODIFY;
                END ELSE BEGIN
                  LineQty := PurchLineTmp."Qty. to Receive (Base)";
                  PackageLine."Quantity (Base)" := PackageLine."Quantity (Base)" - LineQty;
                  PurchLineTmp."Qty. to Receive (Base)" := 0;
                  PurchLineTmp.DELETE;
                END;

                CLEAR(ReservePurchLine);
                CLEAR(EShipItemTrackPage);
                CLEAR(TrackingSpecification);
                TrackingSpecification.InitFromPurchLine(PurchLine);
                EShipItemTrackPage.SetSourceSpec(TrackingSpecification,PurchLine."Expected Receipt Date");
                PurchLine.CALCFIELDS(
                  "E-Ship Whse. Ship. Qty (Base)","E-Ship Whse. Outst. Qty (Base)");
                IF PurchLine."E-Ship Whse. Ship. Qty (Base)" +
                   PurchLine."E-Ship Whse. Outst. Qty (Base)" <> 0
                THEN BEGIN
                  SecondSourceQtyArray[1] := DATABASE::"Warehouse Shipment Line";
                  SecondSourceQtyArray[2] :=
                    PurchLine."E-Ship Whse. Ship. Qty (Base)" +
                    PurchLine."E-Ship Whse. Outst. Qty (Base)";
                  SecondSourceQtyArray[3] := 0;
                  EShipItemTrackPage.SetSecondSourceQuantity(SecondSourceQtyArray);
                END;
                EShipItemTrackPage.EShipOpenForm;

                TrackingSpecificationTmp.RESET;
                TrackingSpecificationTmp.DELETEALL;
                EShipItemTrackPage.EShipGetRecords(TrackingSpecificationTmp);
                IF TrackingSpecificationTmp.FIND('+') THEN
                  LastEntryNo := TrackingSpecificationTmp."Entry No."
                ELSE
                  LastEntryNo := 0;
                IF EShipTrackingCode."Transfer Serial Numbers" THEN BEGIN
                  TrackingSpecificationTmp := TrackingSpecification;
                  TrackingSpecificationTmp."Quantity (Base)" := 0;
                  TrackingSpecificationTmp."Qty. to Handle (Base)" := 0;
                  TrackingSpecificationTmp."Qty. to Invoice (Base)" := 0;
                  TrackingSpecificationTmp."Quantity Handled (Base)" := 0;
                  TrackingSpecificationTmp."Quantity Invoiced (Base)" := 0;
                  TrackingSpecificationTmp."Qty. to Handle" := 0;
                  TrackingSpecificationTmp."Qty. to Invoice" := 0;

                  LastEntryNo := LastEntryNo + 1;
                  TrackingSpecificationTmp."Entry No." := LastEntryNo;
                  TrackingSpecificationTmp.VALIDATE("Quantity (Base)",1);
                  TrackingSpecificationTmp.VALIDATE("Serial No.",PackageLine."Serial No.");
                  IF LotNoToSet <> '' THEN
                    TrackingSpecificationTmp.VALIDATE("Lot No.",LotNoToSet);
                  IF WarrantyDateToSet <> 0D THEN
                    TrackingSpecificationTmp.VALIDATE("Warranty Date",WarrantyDateToSet);
                  IF ExpirationDateToSet <> 0D THEN
                    TrackingSpecificationTmp.VALIDATE("Expiration Date",ExpirationDateToSet);
                  EShipItemTrackPage.EShipInsertRecord(TrackingSpecificationTmp);
                END ELSE BEGIN
                  IF LastEntryNo <> 0 THEN BEGIN
                    TrackingSpecificationTmp.SETRANGE("Serial No.",'');
                    TrackingSpecificationTmp.SETRANGE("Lot No.",LotNoToSet);
                    TrackingSpecificationTmp.SETRANGE("Warranty Date",WarrantyDateToSet);
                    TrackingSpecificationTmp.SETRANGE("Expiration Date",ExpirationDateToSet);
                    IF TrackingSpecificationTmp.FIND('-') THEN BEGIN
                      TrackingSpecificationTmp.VALIDATE(
                        "Quantity (Base)",
                        TrackingSpecificationTmp."Quantity (Base)" + LineQty);
                      IF TrackingSpecificationTmp."Qty. per Unit of Measure" IN [1,0] THEN
                        TrackingSpecificationTmp.VALIDATE(
                          "Qty. to Handle",TrackingSpecificationTmp."Qty. to Handle" + LineQty)
                      ELSE
                        TrackingSpecificationTmp.VALIDATE(
                          "Qty. to Handle",
                          ROUND(
                            TrackingSpecificationTmp."Qty. to Handle" +
                            LineQty / TrackingSpecificationTmp."Qty. per Unit of Measure",
                            0.00001));
                      EShipItemTrackPage.EShipModifyRecord(TrackingSpecificationTmp);
                    END ELSE BEGIN
                      TrackingSpecificationTmp := TrackingSpecification;
                      TrackingSpecificationTmp."Quantity (Base)" := 0;
                      TrackingSpecificationTmp."Qty. to Handle (Base)" := 0;
                      TrackingSpecificationTmp."Qty. to Invoice (Base)" := 0;
                      TrackingSpecificationTmp."Quantity Handled (Base)" := 0;
                      TrackingSpecificationTmp."Quantity Invoiced (Base)" := 0;
                      TrackingSpecificationTmp."Qty. to Handle" := 0;
                      TrackingSpecificationTmp."Qty. to Invoice" := 0;

                      LastEntryNo := LastEntryNo + 1;
                      TrackingSpecificationTmp."Entry No." := LastEntryNo;
                      TrackingSpecificationTmp.VALIDATE("Quantity (Base)",LineQty);
                      IF TrackingSpecificationTmp."Qty. per Unit of Measure" IN [1,0] THEN
                        TrackingSpecificationTmp.VALIDATE("Qty. to Handle",LineQty)
                      ELSE
                        TrackingSpecificationTmp.VALIDATE(
                          "Qty. to Handle",
                          ROUND(
                            LineQty / TrackingSpecificationTmp."Qty. per Unit of Measure",
                            0.00001));
                      IF LotNoToSet <> '' THEN
                        TrackingSpecificationTmp.VALIDATE("Lot No.",LotNoToSet);
                      IF WarrantyDateToSet <> 0D THEN
                        TrackingSpecificationTmp.VALIDATE("Warranty Date",WarrantyDateToSet);
                      IF ExpirationDateToSet <> 0D THEN
                        TrackingSpecificationTmp.VALIDATE("Expiration Date",ExpirationDateToSet);
                      EShipItemTrackPage.EShipInsertRecord(TrackingSpecificationTmp);
                    END;
                  END ELSE BEGIN
                    TrackingSpecificationTmp := TrackingSpecification;
                    LastEntryNo := LastEntryNo + 1;
                    TrackingSpecificationTmp."Entry No." := LastEntryNo;
                    TrackingSpecificationTmp.VALIDATE("Quantity (Base)",LineQty);
                    IF TrackingSpecificationTmp."Qty. per Unit of Measure" IN [1,0] THEN
                      TrackingSpecificationTmp.VALIDATE("Qty. to Handle",LineQty)
                    ELSE
                      TrackingSpecificationTmp.VALIDATE(
                        "Qty. to Handle",
                        ROUND(
                          LineQty / TrackingSpecificationTmp."Qty. per Unit of Measure",
                          0.00001));
                    IF LotNoToSet <> '' THEN
                      TrackingSpecificationTmp.VALIDATE("Lot No.",LotNoToSet);
                    IF WarrantyDateToSet <> 0D THEN
                      TrackingSpecificationTmp.VALIDATE("Warranty Date",WarrantyDateToSet);
                    IF ExpirationDateToSet <> 0D THEN
                      TrackingSpecificationTmp.VALIDATE("Expiration Date",ExpirationDateToSet);
                    EShipItemTrackPage.EShipInsertRecord(TrackingSpecificationTmp);
                  END;
                END;

                EShipItemTrackPage.EShipCloseForm;
              UNTIL (PurchLineTmp.NEXT = 0) OR (PackageLine."Quantity (Base)" = 0);

              LinesInserted := TRUE;
            END;
          END;
        UNTIL PackageLine.NEXT = 0;

      IF LinesInserted THEN
        COMMIT;
    END;

    PROCEDURE CloseTransferHeader@1240030012(TransferHeader@1240030000 : Record 5740;PrintLabel@1240030001 : Boolean;ExportDocsPrinted@1240030005 : Boolean);
    VAR
      Package@1240030002 : Record 14000701;
      PackingRule@1240030003 : Record 14000715;
      BillOfLadingLine@1240030004 : Record 14000823;
    BEGIN
      GetShippingSetup;

      Package.RESET;
      Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Package.SETRANGE("Source Type",DATABASE::"Transfer Header");
      Package.SETRANGE("Source Subtype",0);
      Package.SETRANGE("Source ID",TransferHeader."No.");
      IF ShippingSetup."Location Packing" THEN BEGIN
        GetPackingStation;
        Package.SETRANGE("Location Code",PackingStation."Location Code");
      END;
      Package.SETRANGE(Closed,FALSE);
      IF Package.FIND('-') THEN
        Package.TESTFIELD(Closed);

      PackingRule.GetPackingRule(7,TransferHeader."Transfer-to Code",'');
      IF PackingRule."Bill of Lading No. Mandatory" THEN BEGIN
        GetShippingSetup;

        BillOfLadingLine.RESET;
        BillOfLadingLine.SETCURRENTKEY(Type,"No.",Closed,"Location Code");
        BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
        BillOfLadingLine.SETRANGE("No.",TransferHeader."No.");
        BillOfLadingLine.SETRANGE(Closed,FALSE);
        IF ShippingSetup."Location Packing" THEN
          BillOfLadingLine.SETRANGE("Location Code",PackingStation."Location Code");
        BillOfLadingLine.SETRANGE("Source Type",DATABASE::"Transfer Header");
        BillOfLadingLine.SETRANGE("Source Subtype",0);
        BillOfLadingLine.SETRANGE("Source ID",TransferHeader."No.");
        IF NOT BillOfLadingLine.FIND('-') THEN
          ERROR(Text031);
      END;

      CreateShipChargeTransferHeader(TransferHeader);

      GetPackingStation;
      IF PackingStation."Change Posting Date on Close" THEN
        IF TransferHeader."Posting Date" <> WORKDATE THEN BEGIN
          TransferHeader.FIND;
          TransferHeader.VALIDATE("Posting Date",WORKDATE);
          TransferHeader.MODIFY(TRUE);
        END;

      COMMIT;

      TransferSerialLotNoTransHeader(TransferHeader);

      IF PrintLabel THEN BEGIN
        PrintTransferHeaderPackingList(TransferHeader,FALSE);

        IF NOT ExportDocsPrinted THEN
          PrintExportDocFromSourceID(
            DATABASE::"Transfer Header",0,TransferHeader."No.",FALSE);
      END;
    END;

    LOCAL PROCEDURE TransferSerialLotNoTransHeader@1240030011(CurrentTransferHeader@1240030000 : Record 5740);
    VAR
      PackageLine@1240030018 : Record 14000702;
      Item@1240030017 : Record 27;
      TransferLine@1240030016 : Record 5741;
      TransferLineTmp@1240030015 : TEMPORARY Record 5741;
      EShipTrackingCode@1240030013 : Record 14000721;
      TrackingSpecification@1240030012 : Record 336;
      TrackingSpecificationTmp@1240030011 : TEMPORARY Record 336;
      ItemLedgerEntry@1240020000 : Record 32;
      EShipItemTrackPage@1240030010 : Page 14000254;
      ReserveTransferLine@1240030009 : Codeunit 99000836;
      LastEntryNo@1240030008 : Integer;
      LinesInserted@1240030007 : Boolean;
      ModifyRecord@1240030006 : Boolean;
      LotNoToSet@1240030005 : Code[20];
      WarrantyDateToSet@1240030004 : Date;
      ExpirationDateToSet@1240030003 : Date;
      LineQty@1240030002 : Decimal;
      SecondSourceQtyArray@1240030001 : ARRAY [3] OF Decimal;
    BEGIN
      TransferLineTmp.DELETEALL;

      CurrentTransferHeader.CALCFIELDS("E-Ship Whse. Outst. Qty (Base)");
      CurrentTransferHeader.CALCFIELDS("E-Ship Whse. Ship. Qty (Base)");

      PackageLine.RESET;
      PackageLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      PackageLine.SETRANGE("Source Type",DATABASE::"Transfer Header");
      PackageLine.SETRANGE("Source Subtype",0);
      PackageLine.SETRANGE("Source ID",CurrentTransferHeader."No.");
      PackageLine.SETRANGE(Type,PackageLine.Type::Item);
      PackageLine.SETFILTER(Quantity,'<>0');
      IF PackageLine.FIND('-') THEN
        REPEAT
          Item.GET(PackageLine."No.");
          EShipTrackingCode.GetEShipTrackingCodeItem(Item);

          IF EShipTrackingCode."Transfer Lot Numbers" THEN
            LotNoToSet := PackageLine."Lot No."
          ELSE
            LotNoToSet := '';

          IF EShipTrackingCode."Transfer Warranty Date" THEN
            WarrantyDateToSet := PackageLine."Warranty Date"
          ELSE
            WarrantyDateToSet := 0D;

          IF EShipTrackingCode."Transfer Expiration Date" THEN
            ExpirationDateToSet := PackageLine."Expiration Date"
          ELSE BEGIN
            ItemLedgerEntry.SETCURRENTKEY("Item No.",Open,"Variant Code",Positive,"Expiration Date",
              "Lot No.","Serial No.");
            ItemLedgerEntry.SETRANGE("Item No.",PackageLine."No.");
            ItemLedgerEntry.SETRANGE(Open,TRUE);
            ItemLedgerEntry.SETRANGE("Lot No.",PackageLine."Lot No.");
            IF ItemLedgerEntry.FIND('-') THEN
              ExpirationDateToSet := ItemLedgerEntry."Expiration Date"
            ELSE
              ExpirationDateToSet := 0D;
          END;

          IF EShipTrackingCode."Transfer Serial Numbers" OR EShipTrackingCode."Transfer Lot Numbers" OR
             EShipTrackingCode."Transfer Warranty Date" OR EShipTrackingCode."Transfer Expiration Date"
          THEN BEGIN
            TransferLineTmp.RESET;
            TransferLineTmp.SETRANGE("Document No.",CurrentTransferHeader."No.");
            TransferLineTmp.SETRANGE("Item No.",PackageLine."No.");
            TransferLineTmp.SETRANGE("Variant Code",PackageLine."Variant Code");
            IF NOT TransferLineTmp.FIND('-') THEN BEGIN
              TransferLine.COPYFILTERS(TransferLineTmp);
              IF TransferLine.FIND('-') THEN
                REPEAT
                  TransferLineTmp := TransferLine;
                  TransferLine.CALCFIELDS(
                    "E-Ship Whse. Ship. Qty (Base)","E-Ship Whse. Outst. Qty (Base)");
                  IF TransferLine."E-Ship Whse. Outst. Qty (Base)" +
                     TransferLine."E-Ship Whse. Ship. Qty (Base)" <> 0
                  THEN
                    TransferLineTmp."Qty. to Ship (Base)" :=
                      TransferLine."E-Ship Whse. Outst. Qty (Base)" +
                      TransferLine."E-Ship Whse. Ship. Qty (Base)";
                  TransferLineTmp.INSERT;

                  IF EShipTrackingCode."Autom. Delete Item Track Lines" THEN BEGIN
                    CLEAR(ReserveTransferLine);
                    CLEAR(EShipItemTrackPage);
                    CLEAR(TrackingSpecification);
                    TrackingSpecification.InitFromTransLine(
                      TransferLine,TransferLine."Shipment Date",0);
                    EShipItemTrackPage.SetSourceSpec(TrackingSpecification,TransferLine."Shipment Date");
                    IF TransferLine."E-Ship Whse. Ship. Qty (Base)" +
                       TransferLine."E-Ship Whse. Outst. Qty (Base)" <> 0
                    THEN BEGIN
                      SecondSourceQtyArray[1] := DATABASE::"Warehouse Shipment Line";
                      SecondSourceQtyArray[2] :=
                        TransferLine."E-Ship Whse. Ship. Qty (Base)" +
                        TransferLine."E-Ship Whse. Outst. Qty (Base)";
                      SecondSourceQtyArray[3] := 0;
                      EShipItemTrackPage.SetSecondSourceQuantity(SecondSourceQtyArray);
                    END;
                    EShipItemTrackPage.EShipOpenForm;

                    TrackingSpecificationTmp.RESET;
                    TrackingSpecificationTmp.DELETEALL;
                    EShipItemTrackPage.EShipGetRecords(TrackingSpecificationTmp);
                    IF TrackingSpecificationTmp.FIND('-') THEN BEGIN
                      REPEAT
                        IF TrackingSpecificationTmp."Quantity Handled (Base)" = 0 THEN BEGIN
                          EShipItemTrackPage.EShipDeleteRecord(TrackingSpecificationTmp);
                        END ELSE BEGIN
                          ModifyRecord := FALSE;
                          IF TrackingSpecificationTmp."Quantity (Base)" >
                             TrackingSpecificationTmp."Quantity Handled (Base)"
                          THEN BEGIN
                            TrackingSpecificationTmp.VALIDATE(
                              "Quantity (Base)",
                              TrackingSpecificationTmp."Quantity Handled (Base)");
                            ModifyRecord := TRUE;
                          END;
                          IF TrackingSpecificationTmp."Qty. to Handle" <> 0 THEN BEGIN
                            TrackingSpecificationTmp.VALIDATE("Qty. to Handle",0);
                            ModifyRecord := TRUE;
                          END;
                          IF ModifyRecord THEN
                            EShipItemTrackPage.EShipModifyRecord(TrackingSpecificationTmp);
                        END;
                      UNTIL TrackingSpecificationTmp.NEXT = 0;

                      EShipItemTrackPage.EShipCloseForm;
                    END;
                  END;
                UNTIL TransferLine.NEXT = 0;
            END;

            IF TransferLineTmp.FIND('-') THEN BEGIN
              REPEAT
                IF (TransferLine."Document No." <> TransferLineTmp."Document No.") OR
                   (TransferLine."Line No." <> TransferLineTmp."Line No.")
                THEN
                  TransferLine.GET(TransferLineTmp."Document No.",TransferLineTmp."Line No.");

                IF TransferLineTmp."Qty. to Ship (Base)" >= PackageLine."Quantity (Base)" THEN BEGIN
                  LineQty := PackageLine."Quantity (Base)";
                  PackageLine."Quantity (Base)" := 0;
                  TransferLineTmp."Qty. to Ship (Base)" :=
                    TransferLineTmp."Qty. to Ship (Base)" - LineQty;
                  IF TransferLineTmp."Qty. to Ship (Base)" = 0 THEN
                    TransferLineTmp.DELETE
                  ELSE
                    TransferLineTmp.MODIFY;
                END ELSE BEGIN
                  LineQty := TransferLineTmp."Qty. to Ship (Base)";
                  PackageLine."Quantity (Base)" := PackageLine."Quantity (Base)" - LineQty;
                  TransferLineTmp."Qty. to Ship (Base)" := 0;
                  TransferLineTmp.DELETE;
                END;

                CLEAR(ReserveTransferLine);
                CLEAR(EShipItemTrackPage);
                CLEAR(TrackingSpecification);
                TrackingSpecification.InitFromTransLine(
                  TransferLine,TransferLine."Shipment Date",0);
                EShipItemTrackPage.SetSourceSpec(TrackingSpecification,TransferLine."Shipment Date");
                TransferLine.CALCFIELDS(
                  "E-Ship Whse. Ship. Qty (Base)","E-Ship Whse. Outst. Qty (Base)");
                IF TransferLine."E-Ship Whse. Ship. Qty (Base)" +
                   TransferLine."E-Ship Whse. Outst. Qty (Base)" <> 0
                THEN BEGIN
                  SecondSourceQtyArray[1] := DATABASE::"Warehouse Shipment Line";
                  SecondSourceQtyArray[2] :=
                    TransferLine."E-Ship Whse. Ship. Qty (Base)" +
                    TransferLine."E-Ship Whse. Outst. Qty (Base)";
                  SecondSourceQtyArray[3] := 0;
                  EShipItemTrackPage.SetSecondSourceQuantity(SecondSourceQtyArray);
                END;
                EShipItemTrackPage.EShipOpenForm;

                TrackingSpecificationTmp.RESET;
                TrackingSpecificationTmp.DELETEALL;
                EShipItemTrackPage.EShipGetRecords(TrackingSpecificationTmp);
                IF TrackingSpecificationTmp.FIND('+') THEN
                  LastEntryNo := TrackingSpecificationTmp."Entry No."
                ELSE
                  LastEntryNo := 0;
                IF EShipTrackingCode."Transfer Serial Numbers" THEN BEGIN
                  TrackingSpecificationTmp := TrackingSpecification;
                  TrackingSpecificationTmp."Quantity (Base)" := 0;
                  TrackingSpecificationTmp."Qty. to Handle (Base)" := 0;
                  TrackingSpecificationTmp."Qty. to Invoice (Base)" := 0;
                  TrackingSpecificationTmp."Quantity Handled (Base)" := 0;
                  TrackingSpecificationTmp."Quantity Invoiced (Base)" := 0;
                  TrackingSpecificationTmp."Qty. to Handle" := 0;
                  TrackingSpecificationTmp."Qty. to Invoice" := 0;

                  LastEntryNo := LastEntryNo + 1;
                  TrackingSpecificationTmp."Entry No." := LastEntryNo;
                  TrackingSpecificationTmp.VALIDATE("Quantity (Base)",1);
                  TrackingSpecificationTmp.VALIDATE("Serial No.",PackageLine."Serial No.");
                  IF LotNoToSet <> '' THEN
                    TrackingSpecificationTmp.VALIDATE("Lot No.",LotNoToSet);
                  IF WarrantyDateToSet <> 0D THEN
                    TrackingSpecificationTmp.VALIDATE("Warranty Date",WarrantyDateToSet);
                  IF ExpirationDateToSet <> 0D THEN
                    TrackingSpecificationTmp.VALIDATE("Expiration Date",ExpirationDateToSet);
                  EShipItemTrackPage.EShipInsertRecord(TrackingSpecificationTmp);
                END ELSE BEGIN
                  IF LastEntryNo <> 0 THEN BEGIN
                    TrackingSpecificationTmp.SETRANGE("Serial No.",'');
                    TrackingSpecificationTmp.SETRANGE("Lot No.",LotNoToSet);
                    TrackingSpecificationTmp.SETRANGE("Warranty Date",WarrantyDateToSet);
                    TrackingSpecificationTmp.SETRANGE("Expiration Date",ExpirationDateToSet);
                    IF TrackingSpecificationTmp.FIND('-') THEN BEGIN
                      TrackingSpecificationTmp.VALIDATE(
                        "Quantity (Base)",
                        TrackingSpecificationTmp."Quantity (Base)" + LineQty);
                      IF TrackingSpecificationTmp."Qty. per Unit of Measure" IN [1,0] THEN
                        TrackingSpecificationTmp.VALIDATE(
                          "Qty. to Handle",TrackingSpecificationTmp."Qty. to Handle" + LineQty)
                      ELSE
                        TrackingSpecificationTmp.VALIDATE(
                          "Qty. to Handle",
                          ROUND(
                            TrackingSpecificationTmp."Qty. to Handle" +
                            LineQty / TrackingSpecificationTmp."Qty. per Unit of Measure",
                            0.00001));
                      EShipItemTrackPage.EShipModifyRecord(TrackingSpecificationTmp);
                    END ELSE BEGIN
                      TrackingSpecificationTmp := TrackingSpecification;
                      TrackingSpecificationTmp."Quantity (Base)" := 0;
                      TrackingSpecificationTmp."Qty. to Handle (Base)" := 0;
                      TrackingSpecificationTmp."Qty. to Invoice (Base)" := 0;
                      TrackingSpecificationTmp."Quantity Handled (Base)" := 0;
                      TrackingSpecificationTmp."Quantity Invoiced (Base)" := 0;
                      TrackingSpecificationTmp."Qty. to Handle" := 0;
                      TrackingSpecificationTmp."Qty. to Invoice" := 0;

                      LastEntryNo := LastEntryNo + 1;
                      TrackingSpecificationTmp."Entry No." := LastEntryNo;
                      TrackingSpecificationTmp.VALIDATE("Quantity (Base)",LineQty);
                      IF TrackingSpecificationTmp."Qty. per Unit of Measure" IN [1,0] THEN
                        TrackingSpecificationTmp.VALIDATE("Qty. to Handle",LineQty)
                      ELSE
                        TrackingSpecificationTmp.VALIDATE(
                          "Qty. to Handle",
                          ROUND(
                            LineQty / TrackingSpecificationTmp."Qty. per Unit of Measure",
                            0.00001));
                      IF LotNoToSet <> '' THEN
                        TrackingSpecificationTmp.VALIDATE("Lot No.",LotNoToSet);
                      IF WarrantyDateToSet <> 0D THEN
                        TrackingSpecificationTmp.VALIDATE("Warranty Date",WarrantyDateToSet);
                      IF ExpirationDateToSet <> 0D THEN
                        TrackingSpecificationTmp.VALIDATE("Expiration Date",ExpirationDateToSet);
                      EShipItemTrackPage.EShipInsertRecord(TrackingSpecificationTmp);
                    END;
                  END ELSE BEGIN
                    TrackingSpecificationTmp := TrackingSpecification;
                    LastEntryNo := LastEntryNo + 1;
                    TrackingSpecificationTmp."Entry No." := LastEntryNo;
                    TrackingSpecificationTmp.VALIDATE("Quantity (Base)",LineQty);
                    IF TrackingSpecificationTmp."Qty. per Unit of Measure" IN [1,0] THEN
                      TrackingSpecificationTmp.VALIDATE("Qty. to Handle",LineQty)
                    ELSE
                      TrackingSpecificationTmp.VALIDATE(
                        "Qty. to Handle",
                        ROUND(
                          LineQty / TrackingSpecificationTmp."Qty. per Unit of Measure",
                          0.00001));
                    IF LotNoToSet <> '' THEN
                      TrackingSpecificationTmp.VALIDATE("Lot No.",LotNoToSet);
                    IF WarrantyDateToSet <> 0D THEN
                      TrackingSpecificationTmp.VALIDATE("Warranty Date",WarrantyDateToSet);
                    IF ExpirationDateToSet <> 0D THEN
                      TrackingSpecificationTmp.VALIDATE("Expiration Date",ExpirationDateToSet);
                    EShipItemTrackPage.EShipInsertRecord(TrackingSpecificationTmp);
                  END;
                END;

                EShipItemTrackPage.EShipCloseForm;
              UNTIL (TransferLineTmp.NEXT = 0) OR (PackageLine."Quantity (Base)" = 0);

              LinesInserted := TRUE;
            END;
          END;
        UNTIL PackageLine.NEXT = 0;

      IF LinesInserted THEN
        COMMIT;
    END;

    PROCEDURE ClosePackage@18(VAR CurrentPackage@1240030000 : Record 14000701;PrintLabel@1240030001 : Boolean);
    VAR
      MultiDocPackageTmp@1240030002 : TEMPORARY Record 14000701;
      PackingRule@1240030003 : Record 14000715;
      PackingControl@1240030004 : Record 14000717;
      BillOfLadingLine@1240030005 : Record 14000823;
      Package@1240030006 : Record 14000701;
      PackageSummaryMgt@1240020000 : Codeunit 14000962;
      OriginalShippingCost@1000000000 : Decimal;
    BEGIN
      WITH CurrentPackage DO BEGIN
        TESTFIELD(Closed,FALSE);

        //<TPZ1435>
        IF Miscellaneous THEN
          TESTFIELD("Shortcut Dimension 5 Code");
        //</TPZ1435>

        PackingRule.GetPackingRule("Ship-to Type","Ship-to No.","Ship-to Code");
        IF "Source ID" <> '' THEN BEGIN
          IF PackingRule."Bill of Lading No. Mandatory" THEN BEGIN
            PackingControl.TestBillOfladingNo("Source Type","Source Subtype","Source ID");

            BillOfLadingLine.RESET;
            BillOfLadingLine.SETCURRENTKEY(Type,"No.",Closed,"Location Code");
            BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
            BillOfLadingLine.SETRANGE("No.","Source ID");
            BillOfLadingLine.SETRANGE(Closed,FALSE);
            IF ShippingSetup."Location Packing" THEN BEGIN
              GetPackingStation;
              BillOfLadingLine.SETRANGE("Location Code",PackingStation."Location Code");
            END;
            BillOfLadingLine.SETRANGE("Source Type","Source Type");
            BillOfLadingLine.SETRANGE("Source Subtype","Source Subtype");
            BillOfLadingLine.SETRANGE("Source ID","Source ID");
            IF NOT BillOfLadingLine.FIND('-') THEN
              ERROR(Text031);
          END;

          IF CurrentPackage."Multi Document Package" THEN BEGIN
            Package.RESET;
            Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
            Package.SETRANGE("Source Type","Source Type");
            Package.SETRANGE("Source Subtype","Source Subtype");
            Package.SETFILTER("Source ID",CurrentPackage."Multi Document No.");
            Package.SETFILTER("No.",'<>%1',CurrentPackage."No.");
            Package.SETRANGE(Closed,TRUE);
            Package.SETRANGE("Multi Document Package",TRUE);
            Package.SETRANGE("Multi Document Package Split",FALSE);
            Package.SETRANGE("Original Package No.",'');
            IF Package.FIND('-') THEN
              ERROR(Text042,Package."No.");
          END;
        END;

        GetShippingSetup;
        GetPackingStation;
        GetShippingAgent("Shipping Agent Code");
        GetShippingAgentService("Shipping Agent Code","Shipping Agent Service","World Wide Service");

        IF ShippingSetup."Package Dimensions Required" OR
           ShippingAgent."Package Dimensions Required" OR
           PackingRule."Package Dimensions Required"
        THEN
          IF "Override Dimensions" THEN BEGIN
            TESTFIELD("Override Length");
            TESTFIELD("Override Width");
            TESTFIELD("Override Height");
          END ELSE BEGIN
            CALCFIELDS(Length,Width,Height);
            TESTFIELD(Length);
            TESTFIELD(Width);
            TESTFIELD(Height);
          END;

        IF NOT ShippingSetup."Disable Export Documentation" THEN
          IF ShipperTypeMgt.ExportDocRequired(CurrentPackage,ShippingAgent,ShippingSetup) THEN BEGIN
            IF Miscellaneous THEN
              IF ExportDocMgt.CloseMiscPackage(CurrentPackage,ShippingSetup,PackingStation) THEN BEGIN
                MODIFY;
                COMMIT;
              END;

            IF PackingStation."Require AES ITN for Export" OR
               ShippingAgent."Require AES ITN for Export"
            THEN
              IF NOT ExportDocMgt.AESITNCheck(CurrentPackage,ShippingSetup,PackingStation) THEN
                ERROR(Text043,Package.FIELDCAPTION("AES ITN No."));
          END;

        IF PackingRule."Print UCC Closing Package" OR PackingRule."Assign UCC Closing Package" THEN
          IF LabelMgt.CreateUCCNo(CurrentPackage,PackingRule) THEN BEGIN
            MODIFY;
            COMMIT;
          END;

        IF ShippingSetup."Enable RF-ID" AND
           (PackingRule."Print RF-ID Closing Package" OR PackingRule."Assign RF-ID Closing Package")
        THEN
          IF RFIDMgt.CreatePackageRFIDNo(CurrentPackage,PackingRule) THEN BEGIN
            MODIFY;
            COMMIT;
          END;

        IF ShippingAgent."Shipper Type" <> ShippingAgent."Shipper Type"::" " THEN BEGIN
          ShipperTypeMgt.ClosePackage(CurrentPackage,MultiDocPackageTmp,ShippingAgent,PrintLabel);
        END ELSE BEGIN
          IF COD THEN
            TESTFIELD("COD Amount");

          IF ShippingAgent."Enter Ext. Track. No. on Close" THEN BEGIN
            COMMIT;

            EnterExternalTrackingNo(CurrentPackage,FALSE);
          END;

          //TM BEG 070815
          IF (ShippingAgent."Shipper Type" <> ShippingAgent."Shipper Type"::UPS) AND
             (ShippingAgent."Shipper Type" <> ShippingAgent."Shipper Type"::FEDEX) AND
             (ShippingAgent.Type <> ShippingAgent.Type::Pickup) AND
             ("Shipping Payment Type" <> "Shipping Payment Type"::"Third Party") THEN BEGIN
             OriginalShippingCost := "Shipping Cost";
          END;
          //TM END 070815


          "Closed by Packing Station Code" := PackingStation.Code;
          ClearTotalValueFields;
          VALIDATE("Calculation Weight",GetWeight);
          GetCalculationFields(0,'');
          ClearCost;
          ClearThirdPartyCost;
          "Packing Date" := WORKDATE;
          "Packing Time" := TIME;
          "Packed By" := USERID;
          "Shipping Cost" := 0;
          Markup := 0;

          //TM BEG 070815
          IF OriginalShippingCost <> 0 THEN
            "Shipping Cost" := OriginalShippingCost;
          //TM END 070815

          IF "Override Shipping Charge" <> 0 THEN
            "Shipping Charge" := "Override Shipping Charge"
          ELSE
            "Shipping Charge" := "Shipping Cost" + Markup + "Additional Shipping Charge";

          IF COD AND "Add Shipping Charge to COD Amt" THEN
            "COD Amount" := "COD Amount" + "Shipping Charge";

          Closed := TRUE;
          MODIFY;
          COMMIT;

          IF "Multi Document Package" THEN BEGIN
            MultiDocPackageMgt.SplitMultiDocPackage(
              CurrentPackage,MultiDocPackageTmp,PackingStation,ShippingSetup);
            COMMIT;
          END;
        END;

        IF NOT ShippingSetup."Disable Export Documentation" AND
           (CurrentPackage."Export Document No." <> '')
        THEN BEGIN
          ExportDocMgt.UpdateExpDoc(CurrentPackage);
          MODIFY;
          COMMIT;
        END;

        IF NOT Miscellaneous AND
           (("Source ID" <> '') OR "Multi Document Package") AND
           ("Shipping Agent Code" <> '') AND
           (("Shipping Charge" <> 0) OR ("Shipping Cost" <> 0)) AND
           (PackingStation."Add Shipping to Document on" =
            PackingStation."Add Shipping to Document on"::"Close Package and Order")
        THEN BEGIN
          IF "Multi Document Package" THEN BEGIN
            MultiDocPackageTmp.FIND('-');
            REPEAT
              CreateShipCharge("Source Type","Source Subtype",MultiDocPackageTmp."Source ID");
            UNTIL MultiDocPackageTmp.NEXT = 0;
          END ELSE
            CreateShipCharge("Source Type","Source Subtype","Source ID");

          COMMIT;
        END;

        IF ShippingSetup."Enable Label Printing" THEN BEGIN
          LabelMgt.ClosePackage(CurrentPackage,PrintLabel);

          IF PrintLabel AND ("Shipping Agent Code" <> '') THEN
            LabelMgt.PrintShippingAgentLabel(CurrentPackage,ShippingAgent,ShippingAgentService);
        END;

        IF PrintLabel THEN
          PrintPackagePackingList(CurrentPackage,FALSE);
      END;
    END;

    PROCEDURE OpenPackage@19(VAR CurrentPackage@1000000000 : Record 14000701);
    VAR
      PackageLine@1000000001 : Record 14000702;
      MultiDocPackageTmp@1240030000 : TEMPORARY Record 14000701;
    BEGIN
      WITH CurrentPackage DO BEGIN
        TESTFIELD(Closed);
        TESTFIELD("Manifest No.",'');

        PackageLine.RESET;
        PackageLine.SETCURRENTKEY(Type,"No.");
        PackageLine.SETRANGE(Type,PackageLine.Type::Package);
        PackageLine.SETRANGE("No.","No.");
        IF PackageLine.FIND('-') THEN
          ERROR(
            Text032,
            PackageLine."Package No.");

        IF "Multi Document Package" THEN BEGIN
          MultiDocPackageMgt.CombineMultiDocPackage(CurrentPackage,MultiDocPackageTmp);
          COMMIT;
        END;

        GetPackingStation;
        GetShippingAgent("Shipping Agent Code");
        IF ShippingAgent."Shipper Type" <> ShippingAgent."Shipper Type"::" " THEN BEGIN
            ShipperTypeMgt.OpenPackage(CurrentPackage,ShippingAgent);
        END ELSE BEGIN
          IF COD AND "Add Shipping Charge to COD Amt" THEN
            "COD Amount" := "COD Amount" - "Shipping Charge";

          Closed := FALSE;
          MODIFY;
          COMMIT;
        END;

        IF NOT Miscellaneous AND ("Source ID" <> '') AND ("Shipping Agent Code" <> '') AND
           (PackingStation."Add Shipping to Document on" =
            PackingStation."Add Shipping to Document on"::"Close Package and Order")
        THEN BEGIN
          IF "Multi Document Package" THEN BEGIN
            MultiDocPackageTmp.FIND('-');
            REPEAT
              CreateShipCharge("Source Type","Source Subtype",MultiDocPackageTmp."Source ID");
            UNTIL MultiDocPackageTmp.NEXT = 0;
          END ELSE
            CreateShipCharge("Source Type","Source Subtype","Source ID");

          COMMIT;
        END;
      END;
    END;

    PROCEDURE ReOpenPostedPackage@38(VAR CurrentPostedPackage@1000000000 : Record 14000704);
    BEGIN
      WITH CurrentPostedPackage DO BEGIN
        TESTFIELD(Closed);
        TESTFIELD("Manifest No.",'');

        GetShippingAgent("Shipping Agent Code");
        IF ShippingAgent."Shipper Type" <> ShippingAgent."Shipper Type"::" " THEN BEGIN
          ShipperTypeMgt.ReOpenPostedPackage(CurrentPostedPackage,ShippingAgent);
        END ELSE BEGIN
          IF COD AND "Add Shipping Charge to COD Amt" THEN
            "COD Amount" := "COD Amount" - "Shipping Charge";

          Closed := FALSE;
          MODIFY;
          COMMIT;
        END;
      END;
    END;

    PROCEDURE PrintShippingLabel@22(VAR CurrentPackage@1000000000 : Record 14000701);
    BEGIN
      WITH CurrentPackage DO BEGIN
        IF "Shipping Agent Code" <> '' THEN BEGIN
          GetShippingAgent("Shipping Agent Code");
          ShipperTypeMgt.PrintShippingLabel(CurrentPackage,ShippingAgent);

          GetShippingSetup;
          IF ShippingSetup."Enable Label Printing" THEN BEGIN
            GetShippingAgentService(
              "Shipping Agent Code","Shipping Agent Service","World Wide Service");
            LabelMgt.PrintShippingAgentLabel(CurrentPackage,ShippingAgent,ShippingAgentService);
          END;
        END;
      END;
    END;

    PROCEDURE RePrintShippingLabel@23(VAR CurrentPostedPackage@1000000000 : Record 14000704);
    BEGIN
      WITH CurrentPostedPackage DO BEGIN
        IF "Shipping Agent Code" <> '' THEN BEGIN
          GetShippingAgent("Shipping Agent Code");
          ShipperTypeMgt.RePrintShippingLabel(CurrentPostedPackage,ShippingAgent);

          GetShippingSetup;
          IF ShippingSetup."Enable Label Printing" THEN BEGIN
            GetShippingAgentService(
              "Shipping Agent Code","Shipping Agent Service","World Wide Service");
            LabelMgt.PrintPostedShippingAgentLabel(
              CurrentPostedPackage,ShippingAgent,ShippingAgentService);
          END;
        END;
      END;
    END;

    PROCEDURE PrintCODLabelsSalesHeader@36(SalesHeader@1240030000 : Record 36);
    VAR
      Package@1000000001 : Record 14000701;
    BEGIN
      Package.RESET;
      Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Package.SETRANGE("Source Type",DATABASE::"Sales Header");
      Package.SETRANGE("Source Subtype",SalesHeader."Document Type");
      Package.SETRANGE("Source ID",SalesHeader."No.");
      IF Package.FIND('-') THEN
        REPEAT
          IF Package."Shipping Agent Code" <> '' THEN BEGIN
            GetShippingAgent(Package."Shipping Agent Code");
            ShipperTypeMgt.PrintCODLabels(Package,ShippingAgent);
          END;
        UNTIL Package.NEXT = 0;
    END;

    PROCEDURE PrintCODLabelsPurchHeader@57(PurchHeader@1240030000 : Record 38);
    VAR
      Package@1240030001 : Record 14000701;
    BEGIN
      Package.RESET;
      Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Package.SETRANGE("Source Type",DATABASE::"Purchase Header");
      Package.SETRANGE("Source Subtype",PurchHeader."Document Type");
      Package.SETRANGE("Source ID",PurchHeader."No.");
      IF Package.FIND('-') THEN
        REPEAT
          IF Package."Shipping Agent Code" <> '' THEN BEGIN
            GetShippingAgent(Package."Shipping Agent Code");
            ShipperTypeMgt.PrintCODLabels(Package,ShippingAgent);
          END;
        UNTIL Package.NEXT = 0;
    END;

    PROCEDURE PrintPackagePackingList@21(CurrentPackage@1000000000 : Record 14000701;GiveError@1000000001 : Boolean);
    VAR
      PackingRule@1240030000 : Record 14000715;
    BEGIN
      GetShippingSetup;

      PackingRule.GetPackingRule(
        CurrentPackage."Ship-to Type",CurrentPackage."Ship-to No.",CurrentPackage."Ship-to Code");
      IF GiveError AND (PackingRule."Close Package Report ID" = 0) THEN
        ShippingSetup.TESTFIELD("Close Package Report ID");

      IF ShippingSetup."Close Package Report ID" <> 0 THEN BEGIN
        CurrentPackage.SETRECFILTER;
        REPORT.RUNMODAL(ShippingSetup."Close Package Report ID",FALSE,TRUE,CurrentPackage);
      END;

      IF PackingRule."Close Package Report ID" <> 0 THEN BEGIN
        CurrentPackage.SETRECFILTER;
        REPORT.RUNMODAL(PackingRule."Close Package Report ID",FALSE,TRUE,CurrentPackage);
      END;
    END;

    PROCEDURE PrintSalesHeaderPackingList@26(SalesHeader@1240030000 : Record 36;GiveError@1240030001 : Boolean);
    VAR
      PackingRule@1240030002 : Record 14000715;
    BEGIN
      GetShippingSetup;

      PackingRule.GetPackingRule(0,SalesHeader."Sell-to Customer No.",SalesHeader."Ship-to Code");
      IF GiveError AND (PackingRule."Close Sales Report ID" = 0) THEN
        ShippingSetup.TESTFIELD("Close Sales Report ID");

      //IF ShippingSetup."Close Sales Report ID" <> 0 THEN BEGIN
      IF (ShippingSetup."Close Sales Report ID" <> 0) AND (PackingRule."Close Sales Report ID" = 0) THEN BEGIN //<TPZ2682>
        SalesHeader.RESET;
        SalesHeader.SETRECFILTER;
        REPORT.RUNMODAL(ShippingSetup."Close Sales Report ID",FALSE,TRUE,SalesHeader);
      END;

      IF PackingRule."Close Sales Report ID" <> 0 THEN BEGIN
        SalesHeader.SETRECFILTER;
        REPORT.RUNMODAL(PackingRule."Close Sales Report ID",FALSE,TRUE,SalesHeader);
      END;

      //<TPZ1252>
      IF SalesHeader."COD Payment" THEN
        REPORT.RUNMODAL(REPORT::"Sales Pro Forma Invoice", FALSE, TRUE, SalesHeader);
      //</TPZ1252>
      //UTKARSH
      //IF SalesHeader."Shortcut Dimension 5 Code" = 'I' THEN
        //REPORT.RUNMODAL(REPORT::"Shipper's Letter of Inst.-SLI", FALSE, TRUE, SalesHeader);
      //UTKARSH
    END;

    PROCEDURE PrintPurchHeaderPackingList@61(PurchHeader@1240030000 : Record 38;GiveError@1240030001 : Boolean);
    VAR
      PackingRule@1240030002 : Record 14000715;
    BEGIN
      GetShippingSetup;

      PackingRule.GetPackingRule(1,PurchHeader."Buy-from Vendor No.",PurchHeader."Order Address Code");
      IF GiveError AND (PackingRule."Close Purchase Report ID" = 0) THEN
        ShippingSetup.TESTFIELD("Close Purchase Report ID");

      IF ShippingSetup."Close Purchase Report ID" <> 0 THEN BEGIN
        PurchHeader.RESET;
        PurchHeader.SETRECFILTER;
        REPORT.RUNMODAL(ShippingSetup."Close Purchase Report ID",FALSE,TRUE,PurchHeader);
      END;

      IF PackingRule."Close Purchase Report ID" <> 0 THEN BEGIN
        PurchHeader.SETRECFILTER;
        REPORT.RUNMODAL(PackingRule."Close Purchase Report ID",FALSE,TRUE,PurchHeader);
      END;
    END;

    PROCEDURE PrintTransferHeaderPackingList@1240030014(TransferHeader@1240030000 : Record 5740;GiveError@1240030001 : Boolean);
    VAR
      PackingRule@1240030002 : Record 14000715;
    BEGIN
      GetShippingSetup;

      PackingRule.GetPackingRule(7,TransferHeader."Transfer-to Code",'');
      IF GiveError AND (PackingRule."Close Transfer Report ID" = 0) THEN
        ShippingSetup.TESTFIELD("Close Transfer Report ID");

      IF ShippingSetup."Close Transfer Report ID" <> 0 THEN BEGIN
        TransferHeader.RESET;
        TransferHeader.SETRECFILTER;
        REPORT.RUNMODAL(ShippingSetup."Close Transfer Report ID",FALSE,TRUE,TransferHeader);
      END;

      IF PackingRule."Close Transfer Report ID" <> 0 THEN BEGIN
        TransferHeader.SETRECFILTER;
        REPORT.RUNMODAL(PackingRule."Close Transfer Report ID",FALSE,TRUE,TransferHeader);
      END;
    END;

    PROCEDURE WriteShipChargeRateShop@33(VAR SalesHeader@1000000000 : Record 36;RateShopLine@1000000001 : Record 14000742;ChangeShippingAgent@1000000004 : Boolean);
    VAR
      SalesHeader2@1000000002 : Record 36;
      SalesLine@1000000003 : Record 37;
      Currency@1240030000 : Record 4;
    BEGIN
      IF SalesHeader."Currency Factor" = 0 THEN
        SalesHeader."Currency Factor" := 1;
      IF NOT Currency.GET(SalesHeader."Currency Code") THEN
        Currency.INIT;

      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETFILTER("Outstanding Quantity",'<>0');
      SalesLine.SETRANGE("Rate Quoted",TRUE);
      IF SalesLine.FIND('-') THEN
        ERROR(
          Text033,
          SalesHeader."No.");

      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE("Shipping Charge",TRUE);
      SalesLine.SETRANGE("Quantity Shipped",0);
      SalesLine.SETFILTER("Qty. to Ship",'>%1',0);
      IF SalesLine.FIND('-') THEN
        REPEAT
          {DocumentDimension.RESET;
          DocumentDimension.SETRANGE("Table ID",DATABASE::"Sales Line");
          DocumentDimension.SETRANGE("Document Type",SalesLine."Document Type");
          DocumentDimension.SETRANGE("Document No.",SalesLine."Document No.");
          DocumentDimension.SETRANGE("Line No.",SalesLine."Line No.");
          DocumentDimension.DELETEALL;}

          SalesLine.DELETE;
        UNTIL SalesLine.NEXT = 0;

      GetShippingSetup;
      GetShippingAgent(RateShopLine."Shipping Agent Code");
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      IF SalesLine.FIND('+') THEN
        LineNo := SalesLine."Line No." + 10000
      ELSE
        LineNo := 10000;
      SalesLine.INIT;
      SalesLine."Document Type" := SalesHeader."Document Type";
      SalesLine."Document No." := SalesHeader."No.";
      SalesLine."Line No." := LineNo;
      ShippingAgent.TESTFIELD("Prepaid Freight Type");
      SalesLine.Type := ShippingAgent."Prepaid Freight Type";
      ShippingAgent.TESTFIELD("Prepaid Freight Code");
      SalesLine."Shipping Charge" := TRUE;
      SalesLine.VALIDATE("No.",ShippingAgent."Prepaid Freight Code");
      SalesLine.Description := COPYSTR(SalesLine.Description + Text023,1,30);
      SalesLine.VALIDATE(Quantity,1);
      IF ShippingSetup."No Discounts on Ship. Charge" THEN
        SalesLine.VALIDATE("Allow Invoice Disc.",FALSE);
      SalesLine.VALIDATE("Unit Cost (LCY)",RateShopLine."Shipping Cost");
      SalesLine.VALIDATE(
        "Unit Price",
        ROUND(
          SalesHeader."Currency Factor" * RateShopLine."Shipping Charge",
          Currency."Unit-Amount Rounding Precision"));
      SalesLine."Shipping Charge" := TRUE;
      SalesLine."Rate Quoted" := TRUE;
      SalesLine.INSERT(TRUE);

      IF SalesHeader."Free Freight" THEN BEGIN
        SalesLine.INIT;
        SalesLine."Line No." := SalesLine."Line No." + 10000;
        ShippingAgent.TESTFIELD("Free Freight Type");
        SalesLine.Type := ShippingAgent."Free Freight Type";
        ShippingAgent.TESTFIELD("Free Freight Code");
        SalesLine."Shipping Charge" := TRUE;
        SalesLine.VALIDATE("No.",ShippingAgent."Free Freight Code");
        SalesLine.Description := COPYSTR(SalesLine.Description + Text023,1,30);

        SalesLine.VALIDATE(Quantity,1);
        IF ShippingSetup."No Discounts on Ship. Charge" THEN
          SalesLine.VALIDATE("Allow Invoice Disc.",FALSE);
        SalesLine.VALIDATE("Unit Cost (LCY)",0);
        SalesLine.VALIDATE(
          "Unit Price",
          -ROUND(
             SalesHeader."Currency Factor" * RateShopLine."Shipping Charge",
             Currency."Unit-Amount Rounding Precision"));
        SalesLine."Shipping Charge" := TRUE;
        SalesLine."Rate Quoted" := TRUE;
        SalesLine.INSERT(TRUE);
      END;

      IF ChangeShippingAgent THEN BEGIN
        SalesHeader2.GET(SalesHeader."Document Type",SalesHeader."No.");
        IF SalesHeader2."Shipping Agent Code" <> RateShopLine."Shipping Agent Code" THEN
          SalesHeader2.VALIDATE("Shipping Agent Code",RateShopLine."Shipping Agent Code");
        SalesHeader2.TESTFIELD("World Wide Service",RateShopLine."World Wide Service");
        IF SalesHeader2."E-Ship Agent Service" <> RateShopLine."Shipping Agent Service" THEN
          SalesHeader2.VALIDATE("E-Ship Agent Service",RateShopLine."Shipping Agent Service");
        SalesHeader2.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetPackingStation@51();
    BEGIN
      IF PackingStation.Code = '' THEN
        PackingStation.GetPackingStation;
    END;

    LOCAL PROCEDURE GetUserPackingStation@1000000000(NewUserID@1000000000 : Code[50]);
    BEGIN
      // <TPZ162>
      IF PackingStation.Code = '' THEN
        PackingStation.GetUserPackingStation(NewUserID);
      // </TPZ162>
    END;

    LOCAL PROCEDURE GetShippingSetup@50();
    VAR
      SalesSetup@1000000000 : Record 311;
    BEGIN
      IF NOT ShippingSetupRetrieved THEN BEGIN
        ShippingSetup.GET;
        ShippingSetupRetrieved := TRUE;

        SalesSetup.GET;
        SalesSetup.TESTFIELD("Enable Shipping");
      END;
    END;

    LOCAL PROCEDURE GetShippingAgent@10(ShippingAgentCode@1000000000 : Code[10]);
    BEGIN
      IF (ShippingAgent.Code <> ShippingAgentCode) OR (ShippingAgentCode = '') THEN BEGIN
        GetShippingSetup;
        IF (ShippingAgentCode <> '') OR ShippingSetup."Shipping Agent Required" THEN
          ShippingAgent.GET(ShippingAgentCode)
        ELSE
          CLEAR(ShippingAgent);
      END;
    END;

    LOCAL PROCEDURE GetShippingAgentService@11(ShippingAgentCode@1000000000 : Code[10];ShippingAgentServiceCode@1000000001 : Code[30];WorldWideService@1000000002 : Boolean);
    BEGIN
      IF (ShippingAgentService.Code <> ShippingAgentCode) OR
         (ShippingAgentService."World Wide Service" <> WorldWideService) OR
         (ShippingAgentService.Code <> ShippingAgentServiceCode)
      THEN
        IF ShippingAgentCode = '' THEN
          CLEAR(ShippingAgentService)
        ELSE
          ShippingAgentService.GET(ShippingAgentCode,ShippingAgentServiceCode,WorldWideService);
    END;

    PROCEDURE ShowPackageOptions@7(CurrentPackage@1000000000 : Record 14000701);
    BEGIN
      WITH CurrentPackage DO BEGIN
        TESTFIELD("Shipping Agent Code");
        GetShippingAgent("Shipping Agent Code");
        ShipperTypeMgt.ShowPackageOptions(CurrentPackage,ShippingAgent);
      END;
    END;

    PROCEDURE ShowOptPageShipAgentService@9(CurrentShippingAgentService@1000000000 : Record 14000708);
    BEGIN
      WITH CurrentShippingAgentService DO BEGIN
        TESTFIELD("Shipping Agent Code");
        GetShippingAgent("Shipping Agent Code");
        GetShippingSetup;
        ShipperTypeMgt.ShowOptPageShipAgentService(
          CurrentShippingAgentService,ShippingAgent,ShippingSetup);
      END;
    END;

    PROCEDURE ShowOptPageShipDocument@8(PackingControl@1240030000 : Record 14000717);
    VAR
      OptionPage@1000000001 : Record 14000761;
      TableID@1240030001 : Integer;
    BEGIN
      WITH PackingControl DO BEGIN
        TESTFIELD("Shipping Agent Code");

        CASE PackingControl."Ship-to Type" OF
          PackingControl."Ship-to Type"::Customer:
            TableID := DATABASE::Customer;
          PackingControl."Ship-to Type"::Vendor:
            TableID := DATABASE::Vendor;
          PackingControl."Ship-to Type"::Location:
            TableID := DATABASE::Location;
        END;

        ShowOptPageShippingAgent(
          "Shipping Agent Code","E-Ship Agent Service","World Wide Service",
          OptionPage.Type::Document,"Source ID",PackingControl."Source Type",
          PackingControl."Source Subtype",
          TableID,PackingControl."Ship-to No.",PackingControl."Ship-to Code");
      END;
    END;

    PROCEDURE ShowOptPageShipBillOfLading@46(BillOfLading@1000000000 : Record 14000822);
    VAR
      OptionPage@1000000001 : Record 14000761;
      TableID@1240030000 : Integer;
    BEGIN
      WITH BillOfLading DO BEGIN
        TESTFIELD("Shipping Agent Code");

        CASE BillOfLading."Ship-to Type" OF
          BillOfLading."Ship-to Type"::Customer:
            TableID := DATABASE::Customer;
          BillOfLading."Ship-to Type"::Vendor:
            TableID := DATABASE::Vendor;
          BillOfLading."Ship-to Type"::Location:
            TableID := DATABASE::Location;
        END;

        ShowOptPageShippingAgent(
          "Shipping Agent Code","Shipping Agent Service","World Wide Service",
          OptionPage.Type::"Bill of Lading","No.",0,0,
          TableID,BillOfLading."Ship-to No.",BillOfLading."Ship-to Code");
      END;
    END;

    LOCAL PROCEDURE ShowOptPageShippingAgent@48(ShippingAgentCode@1000000000 : Code[10];ShippingAgentService@1000000001 : Code[30];WorldWideService@1000000002 : Boolean;ReferenceType@1000000003 : Integer;ReferenceSourceID@1000000004 : Code[20];ReferenceSourceType@1240030000 : Integer;ReferenceSourceSubtype@1240030001 : Integer;MasterDatTableID@1240030002 : Integer;MasterDataSourceID@1240030003 : Code[20];MasterDataSecondSourceID@1240030004 : Code[20]);
    BEGIN
      IF ShippingAgentCode = '' THEN
        ERROR(Text036);

      GetShippingAgent(ShippingAgentCode);
      ShipperTypeMgt.ShowOptPageShippingAgent(
        ShippingAgent,ShippingAgentService,WorldWideService,
        ReferenceType,ReferenceSourceID,ReferenceSourceType,ReferenceSourceSubtype,'',
        MasterDatTableID,MasterDataSourceID,MasterDataSecondSourceID);
    END;

    PROCEDURE ShowOptPageItemResource@1240030034(TableID@1240030000 : Integer;SourceID@1240030001 : Code[20]);
    BEGIN
      ShipperTypeMgt.ShowOptPageItemResource(TableID,SourceID);
    END;

    PROCEDURE ShowPostedPackageOptions@15(CurrentPostedPackage@1000000000 : Record 14000704);
    BEGIN
      WITH CurrentPostedPackage DO BEGIN
        TESTFIELD("Shipping Agent Code");
        GetShippingAgent("Shipping Agent Code");
        ShipperTypeMgt.ShowPostedPackageOptions(CurrentPostedPackage,ShippingAgent);
      END;
    END;

    PROCEDURE ShowOptPageMasterData@1240030021(TableID@1240030000 : Integer;SourceID@1240030001 : Code[20];SecondSourceID@1240030002 : Code[20]);
    BEGIN
      ShipperTypeMgt.ShowOptPageMasterData(TableID,SourceID,SecondSourceID);
    END;

    PROCEDURE DeleteDocumentOptionPages@1240030004(SourceID@1240030001 : Code[20];SourceType@1240030002 : Integer;SourceSubtype@1240030003 : Integer);
    BEGIN
      ShipperTypeMgt.DeleteDocumentOptionPages(SourceID,SourceType,SourceSubtype);
    END;

    PROCEDURE CloseManifest@28(CurrentManifestHeader@1000000000 : Record 14000712);
    VAR
      ManifestLine@1000000001 : Record 14000713;
      ManifestLineSummaryTmp@1000000002 : TEMPORARY Record 14000713;
      Package@1000000003 : Record 14000701;
      Package2@1000000007 : Record 14000701;
      PostedPackage@1000000004 : Record 14000704;
      PostedPackage2@1000000008 : Record 14000704;
      BillOfLading@1000000005 : Record 14000822;
      NewLineNo@1000000006 : Integer;
    BEGIN
      WITH CurrentManifestHeader DO BEGIN
        TESTFIELD("No.");
        TESTFIELD(Posted,FALSE);
        TESTFIELD("Pickup Date");
        TESTFIELD("UPS Processing Required",FALSE);
        TESTFIELD("FedEx Processing Required",FALSE);
        TESTFIELD("LTL Processing Required",FALSE);
        TESTFIELD("Generic Processing Required",FALSE);
        TESTFIELD("USPS Processing Required",FALSE);
        TESTFIELD("Airborne Processing Required",FALSE);
        TESTFIELD("DHL Processing Required",FALSE);
        TESTFIELD("USPostal Processing Required",FALSE);
        TESTFIELD("Rating Processing Required",FALSE);

        ManifestLineSummaryTmp.DELETEALL;

        ManifestLine.RESET;
        ManifestLine.SETRANGE("Manifest No.","No.");
        ManifestLine.SETRANGE(Type,ManifestLine.Type::Summary);
        ManifestLine.DELETEALL;

        ManifestLine.RESET;
        ManifestLine.SETRANGE("Manifest No.","No.");
        ManifestLine.SETFILTER("No.",'<>%1','');
        IF ManifestLine.FIND('-') THEN BEGIN
          REPEAT
            CASE ManifestLine.Type OF
              ManifestLine.Type::Package,ManifestLine.Type::"Miscellaneous Package":
                BEGIN
                  IF Package.GET(ManifestLine."No.") THEN BEGIN
                    IF Package."Manifest No." <> "No." THEN
                      Package.TESTFIELD("Manifest No.",'');
                    Package.TESTFIELD(Closed);
                    IF "Shipping Agent Code" <> '' THEN BEGIN
                      Package.TESTFIELD("Shipping Agent Code","Shipping Agent Code");
                      IF "Shipping Agent Account" <> '' THEN
                        Package.TESTFIELD("Shipping Agent Account No.","Shipping Agent Account");
                    END;

                    Package."Manifest No." := "No.";
                    Package."Pickup Date" := "Pickup Date";
                    Package.MODIFY;

                    IF Package."Multi Document Package" THEN BEGIN
                      Package2.RESET;
                      Package2.SETCURRENTKEY("Original Package No.");
                      Package2.SETRANGE("Original Package No.",Package."No.");
                      Package2.SETFILTER("No.",'<>%1',Package."No.");
                      IF Package2.FIND('-') THEN
                        REPEAT
                          Package2.TESTFIELD("Exclude From Manifest");
                          Package2."Manifest No." := "No.";
                          Package2."Pickup Date" := "Pickup Date";
                          Package2.MODIFY;
                        UNTIL Package2.NEXT = 0;
                    END;

                    ManifestLine.TransferFromPackage(Package);
                    ManifestLine.MODIFY;

                    UpdateManifestSummary(ManifestLineSummaryTmp,ManifestLine);
                  END ELSE BEGIN
                    PostedPackage.GET(ManifestLine."No.");

                    IF PostedPackage."Manifest No." <> "No." THEN
                      PostedPackage.TESTFIELD("Manifest No.",'');
                    PostedPackage.TESTFIELD(Closed);
                    IF "Shipping Agent Code" <> '' THEN BEGIN
                      PostedPackage.TESTFIELD("Shipping Agent Code","Shipping Agent Code");
                      IF "Shipping Agent Account" <> '' THEN
                        PostedPackage.TESTFIELD("Shipping Agent Account No.","Shipping Agent Account");
                    END;

                    PostedPackage."Manifest No." := "No.";
                    PostedPackage."Pickup Date" := "Pickup Date";
                    PostedPackage.MODIFY;

                    IF PostedPackage."Multi Document Package" THEN BEGIN
                      PostedPackage2.RESET;
                      PostedPackage2.SETCURRENTKEY("Original Package No.");
                      PostedPackage2.SETRANGE("Original Package No.",PostedPackage."No.");
                      PostedPackage2.SETFILTER("No.",'<>%1',PostedPackage."No.");
                      IF PostedPackage2.FIND('-') THEN
                        REPEAT
                          PostedPackage2.TESTFIELD("Exclude From Manifest");
                          PostedPackage2."Manifest No." := "No.";
                          PostedPackage2."Pickup Date" := "Pickup Date";
                          PostedPackage2.MODIFY;
                        UNTIL PostedPackage2.NEXT = 0;
                    END;

                    ManifestLine.TransferFromPostedPackage(PostedPackage);
                    ManifestLine.MODIFY;

                    UpdateManifestSummary(ManifestLineSummaryTmp,ManifestLine);
                  END;
                END;
              ManifestLine.Type::"Bill of Lading":
                BEGIN
                  BillOfLading.GET(ManifestLine."No.");

                  IF BillOfLading."Manifest No." <> "No." THEN
                    BillOfLading.TESTFIELD("Manifest No.",'');
                   BillOfLading.TESTFIELD(Released);
                  IF "Shipping Agent Code" <> '' THEN BEGIN
                    BillOfLading.TESTFIELD("Shipping Agent Code","Shipping Agent Code");
                    IF "Shipping Agent Account" <> '' THEN
                      BillOfLading.TESTFIELD("Shipping Agent Account No.","Shipping Agent Account");
                  END;

                  BillOfLading."Manifest No." := "No.";
                  BillOfLading."Pickup Date" := "Pickup Date";
                  BillOfLading.MODIFY;

                  ManifestLine.TransferFromBillOfLading(BillOfLading);
                  ManifestLine.MODIFY;

                  UpdateManifestSummary(ManifestLineSummaryTmp,ManifestLine);
                END;
            END;
          UNTIL ManifestLine.NEXT = 0;
        END ELSE
          ERROR(Text037);

        ManifestLineSummaryTmp.RESET;
        IF ManifestLineSummaryTmp.FIND('-') THEN BEGIN
          ManifestLine.RESET;
          ManifestLine.SETRANGE("Manifest No.","No.");
          IF ManifestLine.FIND('+') THEN
            NewLineNo := ManifestLine."Line No."
           ELSE
             NewLineNo := 0;

          REPEAT
            ManifestLine := ManifestLineSummaryTmp;
            NewLineNo := NewLineNo + 10000;
            ManifestLine."Line No." := NewLineNo;
            ManifestLine.INSERT;
          UNTIL ManifestLineSummaryTmp.NEXT = 0;
        END;

        SetCarrierProcessing(CurrentManifestHeader);

        "Closed By" := USERID;
        "Closing Date" := TODAY;
        Posted := TRUE;
        MODIFY;
        COMMIT;

        CloseManifestCarriers(CurrentManifestHeader);
      END;
    END;

    PROCEDURE CloseManifestCarriers@32(CurrentManifestHeader@1000000000 : Record 14000712);
    BEGIN
      WITH CurrentManifestHeader DO BEGIN
        TESTFIELD(Posted);

        ShipperTypeMgt.CloseManifestCarriers(CurrentManifestHeader);
      END;
    END;

    PROCEDURE OpenManifest@31(CurrentManifestHeader@1000000000 : Record 14000712);
    VAR
      ManifestLine@1000000001 : Record 14000713;
      ManifestLineSummaryTmp@1000000002 : TEMPORARY Record 14000713;
      Package@1000000003 : Record 14000701;
      Package2@1000000007 : Record 14000701;
      PostedPackage@1000000004 : Record 14000704;
      PostedPackage2@1000000008 : Record 14000704;
      BillOfLading@1000000005 : Record 14000822;
    BEGIN
      WITH CurrentManifestHeader DO BEGIN
        TESTFIELD("No.");
        TESTFIELD(Posted);

        ShipperTypeMgt.OpenManifest(CurrentManifestHeader);

        ManifestLineSummaryTmp.DELETEALL;

        SetCarrierProcessing(CurrentManifestHeader);

        ManifestLine.RESET;
        ManifestLine.SETRANGE("Manifest No.","No.");
        ManifestLine.SETRANGE(Type,ManifestLine.Type::Summary);
        ManifestLine.DELETEALL;

        ManifestLine.RESET;
        ManifestLine.SETRANGE("Manifest No.","No.");
        ManifestLine.SETFILTER("No.",'<>%1','');
        IF ManifestLine.FIND('-') THEN
          REPEAT
            CASE ManifestLine.Type OF
              ManifestLine.Type::Package,ManifestLine.Type::"Miscellaneous Package":
                BEGIN
                  IF Package.GET(ManifestLine."No.") THEN BEGIN
                    Package."Manifest No." := '';
                    Package."Pickup Date" := 0D;
                    Package.MODIFY;

                    IF Package."Multi Document Package" THEN BEGIN
                      Package2.RESET;
                      Package2.SETCURRENTKEY("Original Package No.");
                      Package2.SETRANGE("Original Package No.",Package."No.");
                      Package2.SETFILTER("No.",'<>%1',Package."No.");
                      IF Package2.FIND('-') THEN
                        REPEAT
                          Package2.TESTFIELD("Exclude From Manifest");
                          Package2."Manifest No." := '';
                          Package2."Pickup Date" := 0D;
                          Package2.MODIFY;
                        UNTIL Package2.NEXT = 0;
                    END;
                  END ELSE BEGIN
                    PostedPackage.GET(ManifestLine."No.");

                    PostedPackage."Manifest No." := '';
                    PostedPackage."Pickup Date" := 0D;
                    PostedPackage.MODIFY;

                    IF PostedPackage."Multi Document Package" THEN BEGIN
                      PostedPackage2.RESET;
                      PostedPackage2.SETCURRENTKEY("Original Package No.");
                      PostedPackage2.SETRANGE("Original Package No.",PostedPackage."No.");
                      PostedPackage2.SETFILTER("No.",'<>%1',PostedPackage."No.");
                      IF PostedPackage2.FIND('-') THEN
                        REPEAT
                          PostedPackage2.TESTFIELD("Exclude From Manifest");
                          PostedPackage2."Manifest No." := '';
                          PostedPackage2."Pickup Date" := 0D;
                          PostedPackage2.MODIFY;
                        UNTIL PostedPackage2.NEXT = 0;
                    END;
                  END;
                END;
              ManifestLine.Type::"Bill of Lading":
                BEGIN
                  BillOfLading.GET(ManifestLine."No.");

                  BillOfLading."Manifest No." := '';
                  BillOfLading."Pickup Date" := 0D;
                  BillOfLading.MODIFY;
                END;
            END;
          UNTIL ManifestLine.NEXT = 0;

        "Closed By" := '';
        "Closing Date" := 0D;
        Posted := FALSE;
        MODIFY;
        COMMIT;

        OpenManifestCarriers(CurrentManifestHeader);
      END;
    END;

    PROCEDURE OpenManifestCarriers@34(CurrentManifestHeader@1000000000 : Record 14000712);
    BEGIN
      WITH CurrentManifestHeader DO BEGIN
        TESTFIELD(Posted,FALSE);

        ShipperTypeMgt.OpenManifestCarriers(CurrentManifestHeader);
      END;
    END;

    LOCAL PROCEDURE UpdateManifestSummary@29(VAR ManifestLineSummary@1000000000 : Record 14000713;ManifestLine@1000000001 : Record 14000713);
    VAR
      RecordFound@1000000002 : Boolean;
    BEGIN
      WITH ManifestLine DO BEGIN
        ManifestLineSummary.RESET;
        ManifestLineSummary.SETCURRENTKEY(
          "Manifest No.",Type,"Shipping Agent Account No.",
          "Shipping Agent Code","World Wide Service","Shipping Agent Service");
        ManifestLineSummary.SETRANGE("Manifest No.",ManifestLine."Manifest No.");
        ManifestLineSummary.SETRANGE(Type,ManifestLineSummary.Type::Summary);
        ManifestLineSummary.SETRANGE("Shipping Agent Account No.","Shipping Agent Account No.");
        ManifestLineSummary.SETRANGE("Shipping Agent Code","Shipping Agent Code");
        ManifestLineSummary.SETRANGE("Shipping Agent Service","Shipping Agent Service");
        ManifestLineSummary.SETRANGE("World Wide Service","World Wide Service");
        RecordFound := ManifestLineSummary.FIND('-');
        IF NOT RecordFound THEN BEGIN
          ManifestLineSummary.RESET;
          IF ManifestLineSummary.FIND('+') THEN BEGIN
            ManifestLineSummary.INIT;
            ManifestLineSummary."Line No." := ManifestLineSummary."Line No." + 10000;
          END ELSE
            ManifestLineSummary."Line No." := 10000;

          ManifestLineSummary."Manifest No." := ManifestLine."Manifest No.";
          ManifestLineSummary.Type := ManifestLineSummary.Type::Summary;
          ManifestLineSummary."Shipping Agent Code" := "Shipping Agent Code";
          ManifestLineSummary."Shipping Agent Service" := "Shipping Agent Service";
          ManifestLineSummary."World Wide Service" := "World Wide Service";
          ManifestLineSummary."Shipping Agent Account No." := "Shipping Agent Account No.";
        END;

        ManifestLineSummary.Weight := ManifestLineSummary.Weight + Weight;
        ManifestLineSummary.Volume := ManifestLineSummary.Volume + Volume;
        ManifestLineSummary.Value := ManifestLineSummary.Value + Value;
        ManifestLineSummary."Shipping Cost" := ManifestLineSummary."Shipping Cost" + "Shipping Cost";
        ManifestLineSummary."Shipping Charge" :=
          ManifestLineSummary."Shipping Charge" + "Shipping Charge";

        ManifestLineSummary."Total Packages" := ManifestLineSummary."Total Packages" + "Total Packages";
        ManifestLineSummary."Domestic Packages" :=
          ManifestLineSummary."Domestic Packages" + "Domestic Packages";
        ManifestLineSummary."International Packages" :=
          ManifestLineSummary."International Packages" + "International Packages";
        ManifestLineSummary."Value Below 1000 Packages" :=
          ManifestLineSummary."Value Below 1000 Packages" + "Value Below 1000 Packages";
        ManifestLineSummary."Value 1000 to 5000 Packages" :=
          ManifestLineSummary."Value 1000 to 5000 Packages" + "Value 1000 to 5000 Packages";
        ManifestLineSummary."Value Above 5000 Packages" :=
          ManifestLineSummary."Value Above 5000 Packages" + "Value Above 5000 Packages";
        ManifestLineSummary."COD Packages" := ManifestLineSummary."COD Packages" + "COD Packages";
        ManifestLineSummary."Next Day Packages" :=
          ManifestLineSummary."Next Day Packages" + "Next Day Packages";
        ManifestLineSummary."Second Day Packages" :=
          ManifestLineSummary."Second Day Packages" + "Second Day Packages";
        ManifestLineSummary."Third Day Packages" :=
          ManifestLineSummary."Third Day Packages" + "Third Day Packages";

        IF RecordFound THEN
          ManifestLineSummary.MODIFY
        ELSE
          ManifestLineSummary.INSERT;
      END;
    END;

    PROCEDURE SetCarrierProcessing@35(VAR CurrentManifestHeader@1000000000 : Record 14000712);
    VAR
      ManifestLine@1000000001 : Record 14000713;
      ShippingAgent2@1000000002 : Record 291;
    BEGIN
      WITH CurrentManifestHeader DO BEGIN
        ManifestLine.RESET;
        ManifestLine.SETRANGE("Manifest No.","No.");
        ManifestLine.SETRANGE(Type,ManifestLine.Type::Summary);
        IF ManifestLine.FIND('-') THEN
          REPEAT
            IF (ShippingAgent2.Code <> ManifestLine."Shipping Agent Code") AND
               (ManifestLine."Shipping Agent Code" <> '')
            THEN
              ShippingAgent2.GET(ManifestLine."Shipping Agent Code");
            ShipperTypeMgt.SetCarrierProcessing(CurrentManifestHeader,ShippingAgent2);
          UNTIL ManifestLine.NEXT = 0;
      END;
    END;

    PROCEDURE ShowStandardSetupOptionPage@41(ShipperType@1000000000 : Integer;NewOptionPageNo@1000000001 : Code[20]);
    BEGIN
      ShipperTypeMgt.ShowStandardSetupOptionPage(ShipperType,NewOptionPageNo);
    END;

    PROCEDURE CombineMultiDocument@42(SourceType@1240030000 : Integer;SourceSubtype@1240030001 : Integer;DocumentNo1@1240030002 : Code[20];DocumentNo2@1240030003 : Code[20];VAR MultiDocumentNo@1240030004 : Code[250];VAR MultiDocument@1240030005 : Boolean);
    VAR
      SalesHeader@1240030006 : Record 36;
      PurchHeader@1240030007 : Record 38;
      TransferHeader@1240030009 : Record 5740;
      PackingControl@1240030008 : Record 14000717;
    BEGIN
      GetShippingSetup;
      GetPackingStation;
      MultiDocPackageMgt.CombineMultiSalesOrders(
        PackingStation,ShippingSetup,
        SourceType,SourceSubtype,DocumentNo1,DocumentNo2,MultiDocumentNo,MultiDocument);

      IF MultiDocument THEN BEGIN
        CASE SourceType OF
          DATABASE::"Sales Header":
            BEGIN
              SalesHeader.RESET;
              SalesHeader.SETRANGE("Document Type",SourceSubtype);
              SalesHeader.SETFILTER("No.",MultiDocumentNo);
              IF SalesHeader.FIND('-') THEN
                REPEAT
                  CreateShipChargeSalesHeader(SalesHeader);
                UNTIL SalesHeader.NEXT = 0;
            END;
          DATABASE::"Purchase Header":
            BEGIN
              PurchHeader.RESET;
              PurchHeader.SETRANGE("Document Type",SourceSubtype);
              PurchHeader.SETFILTER("No.",MultiDocumentNo);
              IF PurchHeader.FIND('-') THEN
                REPEAT
                  CreateShipChargePurchHeader(PurchHeader);
                UNTIL PurchHeader.NEXT = 0;
            END;
          DATABASE::"Transfer Header":
            BEGIN
              TransferHeader.RESET;
              TransferHeader.SETFILTER("No.",MultiDocumentNo);
              IF TransferHeader.FIND('-') THEN
                REPEAT
                  CreateShipChargeTransferHeader(TransferHeader);
                UNTIL TransferHeader.NEXT = 0;
            END;
          ELSE
            PackingControl.ErrorUnknownSourceType(SourceType,SourceSubtype,DocumentNo1);
        END;
      END;
    END;

    PROCEDURE DateToJulian@44(CalcDate@1000000000 : Date) : Decimal;
    VAR
      Day@1000000001 : Integer;
      Month@1000000002 : Integer;
      Year@1000000003 : Integer;
      TempInt@1000000004 : Integer;
      JulianDate@1000000005 : Integer;
    BEGIN
      Day := DATE2DMY(CalcDate,1);
      Month := DATE2DMY(CalcDate,2);
      Year := DATE2DMY(CalcDate,3);

      IF Year < 100 THEN
        ERROR(Text039);
      IF (Month < 1) OR (Month > 12) THEN
        ERROR(Text040);
      IF (Day < 1) OR (Day > 31) THEN
        ERROR(Text041);

      TempInt := (Month - 14) DIV 12;
      JulianDate := Day - 32075 + (1461 * (Year + 4800 + TempInt) DIV 4);
      JulianDate := JulianDate + (367 * (Month - 2 - TempInt * 12) DIV 12);
      JulianDate := JulianDate - (3 * ((Year + 4900 + TempInt) DIV 100) DIV 4);

      EXIT(JulianDate);
    END;

    PROCEDURE JulianToDate@43(JulianDate@1000000000 : Decimal) : Date;
    VAR
      Day@1000000001 : Integer;
      Month@1000000002 : Integer;
      Year@1000000003 : Integer;
      i@1000000004 : Decimal;
      j@1000000005 : Integer;
      k@1000000006 : Integer;
      l@1000000007 : Integer;
      n@1000000008 : Integer;
    BEGIN
      l := JulianDate + 68569.0;
      n := (4 * l) DIV 146097;
      l := l - ((146097 * n + 3) DIV 4);
      i := (4000 * (l + 1)) DIV 1461001;
      l := l - ((1461 * i) DIV 4) + 31;
      j := (80 * l) DIV 2447;
      k := l - (2447 * j) DIV 80;
      l := j DIV 11;
      j := j + 2 - 12 * l;
      i := 100 * (n - 49) + i + l;
      Year := i DIV 1;
      Month := j DIV 1;
      Day := k DIV 1;

      EXIT(DMY2DATE(Day,Month,Year));
    END;

    PROCEDURE EnterExternalTrackingNo@47(VAR CurrentPackage@1240030000 : Record 14000701;AlwaysOpenWindow@1240030001 : Boolean);
    VAR
      Package@1240030002 : Record 14000701;
      EnterExternalTrackingNoForm@1240030003 : Page 14000683;
    BEGIN
      WITH CurrentPackage DO BEGIN
        IF ("External Tracking No." = '') OR AlwaysOpenWindow THEN BEGIN
          Package := CurrentPackage;
          CLEAR(EnterExternalTrackingNoForm);
          EnterExternalTrackingNoForm.SetPackage(Package);
          IF EnterExternalTrackingNoForm.RUNMODAL = ACTION::OK THEN BEGIN
          EnterExternalTrackingNoForm.GetPackage(Package);
          IF "External Tracking No." <> Package."External Tracking No." THEN
            VALIDATE("External Tracking No.",Package."External Tracking No.");
        END;
      END;
      END;
    END;

    PROCEDURE PrintExportDocFromSourceID@72(SourceType@1240030005 : Integer;SourceSubtype@1240030004 : Integer;SourceID@1240030000 : Code[20];UseRequestForm@1240030001 : Boolean);
    VAR
      Package@1240030002 : Record 14000701;
    BEGIN
      Package.RESET;
      Package.SETRANGE("Source Type",SourceType);
      Package.SETRANGE("Source Subtype",SourceSubtype);
      Package.SETRANGE("Source ID",SourceID);

      IF Package.FIND('-') AND
         (Package."Export Document No." <> '')
      THEN
        IF ShipperTypeMgt.PrintExportDocs(Package."Export Document No.") THEN
          PrintExportDoc(Package."Export Document No.",UseRequestForm);
    END;

    PROCEDURE PrintExportDocFromPostedSrceID@73(SourceType@1240030005 : Integer;PostedSourceID@1240030001 : Code[20];UseRequestForm@1240030000 : Boolean);
    VAR
      PostedPackage@1240030002 : Record 14000704;
    BEGIN
      PostedPackage.RESET;
      PostedPackage.SETRANGE("Source Type",SourceType);
      PostedPackage.SETRANGE("Posted Source ID",PostedSourceID);

      IF PostedPackage.FIND('-') AND
         (PostedPackage."Export Document No." <> '')
      THEN
        IF ShipperTypeMgt.PrintExportDocs(PostedPackage."Export Document No.") THEN
          PrintExportDoc(PostedPackage."Export Document No.",UseRequestForm);
    END;

    PROCEDURE GetItemLabelInfo@54(CurrentPackage@1240030000 : Record 14000701;VAR ItemLabelInfo@1240030001 : ARRAY [10,8] OF Text[50]);
    VAR
      PackageLine@1240030002 : Record 14000702;
      PostedPackageLine@1240030003 : Record 14000705;
      LineCounter@1240030004 : Integer;
    BEGIN
      WITH CurrentPackage DO BEGIN
        CLEAR(ItemLabelInfo);
        LineCounter := 0;
        PackageLine.RESET;
        PackageLine.SETRANGE("Package No.","No.");
        IF PackageLine.FIND('-') THEN BEGIN
          REPEAT
            LineCounter := LineCounter + 1;
            ItemLabelInfo[LineCounter,1] := FORMAT(PackageLine.Type);
            ItemLabelInfo[LineCounter,2] := PackageLine."No.";
            ItemLabelInfo[LineCounter,3] := PackageLine."Variant Code";
            ItemLabelInfo[LineCounter,4] := PackageLine.Description;
            ItemLabelInfo[LineCounter,5] := PackageLine."Unit of Measure Code";
            ItemLabelInfo[LineCounter,6] := FORMAT(PackageLine.Quantity);
            ItemLabelInfo[LineCounter,7] := FORMAT(PackageLine."Quantity (Base)");
            ItemLabelInfo[LineCounter,8] := FORMAT(PackageLine."Line No.");
          UNTIL (PackageLine.NEXT = 0) OR (LineCounter >= ARRAYLEN(ItemLabelInfo,1) - 1);
        END ELSE BEGIN
          PostedPackageLine.RESET;
          PostedPackageLine.SETRANGE("Package No.","No.");
          IF PostedPackageLine.FIND('-') THEN
            REPEAT
              LineCounter := LineCounter + 1;
              ItemLabelInfo[LineCounter,1] := FORMAT(PostedPackageLine.Type);
              ItemLabelInfo[LineCounter,2] := PostedPackageLine."No.";
              ItemLabelInfo[LineCounter,3] := PostedPackageLine."Variant Code";
              ItemLabelInfo[LineCounter,4] := PostedPackageLine.Description;
              ItemLabelInfo[LineCounter,5] := PostedPackageLine."Unit of Measure Code";
              ItemLabelInfo[LineCounter,6] := FORMAT(PostedPackageLine.Quantity);
              ItemLabelInfo[LineCounter,7] := FORMAT(PostedPackageLine."Quantity (Base)");
              ItemLabelInfo[LineCounter,8] := FORMAT(PostedPackageLine."Line No.");
            UNTIL (PostedPackageLine.NEXT = 0) OR (LineCounter >= ARRAYLEN(ItemLabelInfo,1) -1);
        END;

        ItemLabelInfo[ARRAYLEN(ItemLabelInfo,1),1] := "No.";
        ItemLabelInfo[ARRAYLEN(ItemLabelInfo,1),2] := "Shipping Agent Code";
        ItemLabelInfo[ARRAYLEN(ItemLabelInfo,1),3] := "Shipping Agent Service";
        ItemLabelInfo[ARRAYLEN(ItemLabelInfo,1),4] := "External Tracking No.";
        ItemLabelInfo[ARRAYLEN(ItemLabelInfo,1),5] := "UCC No.";
        ItemLabelInfo[ARRAYLEN(ItemLabelInfo,1),6] := "Source ID";
        ItemLabelInfo[ARRAYLEN(ItemLabelInfo,1),7] := '';
        ItemLabelInfo[ARRAYLEN(ItemLabelInfo,1),8] := '';
      END;
    END;

    PROCEDURE DirectPrintOrionLabelInfo@58(VAR LabelFile@1240030000 : File;ItemLabelInfo@1240030001 : ARRAY [10,8] OF Text[50]);
    BEGIN
      IF ItemLabelInfo[1,8] <> '' THEN BEGIN
        LabelFile.WRITE(
          STRSUBSTNO(
            'A20,1250,0,3,1,2,N,"%1"',
            COPYSTR(
              ItemLabelInfo[ARRAYLEN(ItemLabelInfo,1),4] + ' (' +
              ItemLabelInfo[ARRAYLEN(ItemLabelInfo,1),6] + ' ' +
              ItemLabelInfo[ARRAYLEN(ItemLabelInfo,1),1] + ') ' +
              ItemLabelInfo[ARRAYLEN(ItemLabelInfo,1),2] + ' ' +
              ItemLabelInfo[ARRAYLEN(ItemLabelInfo,1),3],1,64)));

        LabelFile.WRITE('A50,1300,0,3,1,1,N,"Item No."');
        LabelFile.WRITE('A250,1300,0,3,1,1,N,"Description"');
        LabelFile.WRITE('A550,1300,0,3,1,1,N,"UOM"');
        LabelFile.WRITE('A650,1300,0,3,1,1,N,"Qty."');
        LabelFile.WRITE(STRSUBSTNO('A50,1340,0,2,1,1,N,"%1"',ItemLabelInfo[1,2]));
        LabelFile.WRITE(STRSUBSTNO('A250,1340,0,2,1,1,N,"%1"',FORMAT(ItemLabelInfo[1,4],24)));
        LabelFile.WRITE(STRSUBSTNO('A550,1340,0,2,1,1,N,"%1"',ItemLabelInfo[1,5]));
        LabelFile.WRITE(STRSUBSTNO('A650,1340,0,2,1,1,N,"%1"',ItemLabelInfo[1,6]));
        LabelFile.WRITE(STRSUBSTNO('A50,1370,0,2,1,1,N,"%1"',ItemLabelInfo[2,2]));
        LabelFile.WRITE(STRSUBSTNO('A250,1370,0,2,1,1,N,"%1"',FORMAT(ItemLabelInfo[2,4],24)));
        LabelFile.WRITE(STRSUBSTNO('A550,1370,0,2,1,1,N,"%1"',ItemLabelInfo[2,5]));
        LabelFile.WRITE(STRSUBSTNO('A650,1370,0,2,1,1,N,"%1"',ItemLabelInfo[2,6]));
        LabelFile.WRITE(STRSUBSTNO('A50,1400,0,2,1,1,N,"%1"',ItemLabelInfo[3,2]));
        LabelFile.WRITE(STRSUBSTNO('A250,1400,0,2,1,1,N,"%1"',FORMAT(ItemLabelInfo[3,4],24)));
        LabelFile.WRITE(STRSUBSTNO('A550,1400,0,2,1,1,N,"%1"',ItemLabelInfo[3,5]));
        LabelFile.WRITE(STRSUBSTNO('A650,1400,0,2,1,1,N,"%1"',ItemLabelInfo[3,6]));
        LabelFile.WRITE(STRSUBSTNO('A50,1430,0,2,1,1,N,"%1"',ItemLabelInfo[4,2]));
        LabelFile.WRITE(STRSUBSTNO('A250,1430,0,2,1,1,N,"%1"',FORMAT(ItemLabelInfo[4,4],24)));
        LabelFile.WRITE(STRSUBSTNO('A550,1430,0,2,1,1,N,"%1"',ItemLabelInfo[4,5]));
        LabelFile.WRITE(STRSUBSTNO('A650,1430,0,2,1,1,N,"%1"',ItemLabelInfo[4,6]));
        LabelFile.WRITE(STRSUBSTNO('A50,1460,0,2,1,1,N,"%1"',ItemLabelInfo[5,2]));
        LabelFile.WRITE(STRSUBSTNO('A250,1460,0,2,1,1,N,"%1"',FORMAT(ItemLabelInfo[5,4],24)));
        LabelFile.WRITE(STRSUBSTNO('A550,1460,0,2,1,1,N,"%1"',ItemLabelInfo[5,5]));
        LabelFile.WRITE(STRSUBSTNO('A650,1460,0,2,1,1,N,"%1"',ItemLabelInfo[5,6]));
        LabelFile.WRITE(STRSUBSTNO('A50,1490,0,2,1,1,N,"%1"',ItemLabelInfo[6,2]));
        LabelFile.WRITE(STRSUBSTNO('A250,1490,0,2,1,1,N,"%1"',FORMAT(ItemLabelInfo[6,4],24)));
        LabelFile.WRITE(STRSUBSTNO('A550,1490,0,2,1,1,N,"%1"',ItemLabelInfo[6,5]));
        LabelFile.WRITE(STRSUBSTNO('A650,1490,0,2,1,1,N,"%1"',ItemLabelInfo[6,6]));
        IF ItemLabelInfo[7,8] <> '' THEN
          LabelFile.WRITE('A50,1540,0,3,2,2,N,"MORE ITEMS IN PACKAGE"');
      END;
    END;

    PROCEDURE DirectPrintZebraLabelInfo@55(VAR LabelFile@1240030000 : File;ItemLabelInfo@1240030001 : ARRAY [10,8] OF Text[50]);
    BEGIN
      IF ItemLabelInfo[1,8] <> '' THEN BEGIN
        LabelFile.WRITE(
          STRSUBSTNO(
            '^FO20,1250^A0,N,58,29^FD%1^FS',
            COPYSTR(
              ItemLabelInfo[ARRAYLEN(ItemLabelInfo,1),4] + ' (' +
              ItemLabelInfo[ARRAYLEN(ItemLabelInfo,1),6] + ' ' +
              ItemLabelInfo[ARRAYLEN(ItemLabelInfo,1),1] + ') ' +
              ItemLabelInfo[ARRAYLEN(ItemLabelInfo,1),2] + ' ' +
              ItemLabelInfo[ARRAYLEN(ItemLabelInfo,1),3],1,64)));

        LabelFile.WRITE('^FO50,1300^A0,N,29,29^FDItem No.^FS');
        LabelFile.WRITE('^FO250,1300^A0,N,29,29^FDDescription^FS');
        LabelFile.WRITE('^FO550,1300^A0,N,29,29^FDUOM^FS');
        LabelFile.WRITE('^FO650,1300^A0,N,29,29^FDQty.^FS');
        LabelFile.WRITE(STRSUBSTNO('^FO50,1340^A0,N,29,29^FD%1^FS',ItemLabelInfo[1,2]));
        LabelFile.WRITE(STRSUBSTNO('^FO250,1340^A0,N,29,29^FD%1^FS',FORMAT(ItemLabelInfo[1,4],24)));
        LabelFile.WRITE(STRSUBSTNO('^FO550,1340^A0,N,29,29^FD%1^FS',ItemLabelInfo[1,5]));
        LabelFile.WRITE(STRSUBSTNO('^FO650,1340^A0,N,29,29^FD%1^FS',ItemLabelInfo[1,6]));
        LabelFile.WRITE(STRSUBSTNO('^FO50,1370^A0,N,29,29^FD%1^FS',ItemLabelInfo[2,2]));
        LabelFile.WRITE(STRSUBSTNO('^FO250,1370^A0,N,29,29^FD%1^FS',FORMAT(ItemLabelInfo[2,4],24)));
        LabelFile.WRITE(STRSUBSTNO('^FO550,1370^A0,N,29,29^FD%1^FS',ItemLabelInfo[2,5]));
        LabelFile.WRITE(STRSUBSTNO('^FO650,1370^A0,N,29,29^FD%1^FS',ItemLabelInfo[2,6]));
        LabelFile.WRITE(STRSUBSTNO('^FO50,1400^A0,N,29,29^FD%1^FS',ItemLabelInfo[3,2]));
        LabelFile.WRITE(STRSUBSTNO('^FO250,1400^A0,N,29,29^FD%1^FS',FORMAT(ItemLabelInfo[3,4],24)));
        LabelFile.WRITE(STRSUBSTNO('^FO550,1400^A0,N,29,29^FD%1^FS',ItemLabelInfo[3,5]));
        LabelFile.WRITE(STRSUBSTNO('^FO650,1400^A0,N,29,29^FD%1^FS',ItemLabelInfo[3,6]));
        LabelFile.WRITE(STRSUBSTNO('^FO50,1430^A0,N,29,29^FD%1^FS',ItemLabelInfo[4,2]));
        LabelFile.WRITE(STRSUBSTNO('^FO250,1430^A0,N,29,29^FD%1^FS',FORMAT(ItemLabelInfo[4,4],24)));
        LabelFile.WRITE(STRSUBSTNO('^FO550,1430^A0,N,29,29^FD%1^FS',ItemLabelInfo[4,5]));
        LabelFile.WRITE(STRSUBSTNO('^FO650,1430^A0,N,29,29^FD%1^FS',ItemLabelInfo[4,6]));
        LabelFile.WRITE(STRSUBSTNO('^FO50,1460^A0,N,29,29^FD%1^FS',ItemLabelInfo[5,2]));
        LabelFile.WRITE(STRSUBSTNO('^FO250,1460^A0,N,29,29^FD%1^FS',FORMAT(ItemLabelInfo[5,4],24)));
        LabelFile.WRITE(STRSUBSTNO('^FO550,1460^A0,N,29,29^FD%1^FS',ItemLabelInfo[5,5]));
        LabelFile.WRITE(STRSUBSTNO('^FO650,1460^A0,N,29,29^FD%1^FS',ItemLabelInfo[5,6]));
        LabelFile.WRITE(STRSUBSTNO('^FO50,1490^A0,N,29,29^FD%1^FS',ItemLabelInfo[6,2]));
        LabelFile.WRITE(STRSUBSTNO('^FO250,1490^A0,N,29,29^FD%1^FS',FORMAT(ItemLabelInfo[6,4],24)));
        LabelFile.WRITE(STRSUBSTNO('^FO550,1490^A0,N,29,29^FD%1^FS',ItemLabelInfo[6,5]));
        LabelFile.WRITE(STRSUBSTNO('^FO650,1490^A0,N,29,29^FD%1^FS',ItemLabelInfo[6,6]));
        IF ItemLabelInfo[7,8] <> '' THEN
          LabelFile.WRITE('^FO50,1540^A0,N,58,58^FDMORE ITEMS IN PACKAGE^FS');
      END;
    END;

    PROCEDURE USStateCheck@1240030018(State@1240030000 : Code[10]) : Boolean;
    BEGIN
      EXIT(
        State IN [
         'AK','AL','AR','AS','AZ','CA','CO','CT','DC','DE','FL','GA','HI','IA','ID','IL','IN',
         'KS','KY','LA','MA','MD','ME','MI','MN','MO','MS','MT','NC','ND','NE','NH','NJ','NM',
         'NV','NY','OH','OK','OR','PA','PR','RI','SC','SD','TN','TX','UT','VA','VI','VT','WA',
         'WI','WV','WY']);
    END;

    PROCEDURE PrintExportDoc@74(ExportDocNo@1240030000 : Code[20];UseRequestForm@1240030001 : Boolean);
    VAR
      ExportDoc@1240030008 : Record 14000981;
      ExportDocSetup@1240030002 : Record 14000991;
    BEGIN
      IF ShippingSetup."Disable Export Documentation" THEN
        EXIT;

      ExportDoc.GET(ExportDocNo);
      ExportDocSetup.GET;
      IF ExportDoc.GetISOCountryCode(ExportDoc."Ship-to Country Code") = 'US' THEN
        EXIT;

      ExportDoc.SETRECFILTER;

      IF ExportDocSetup."Print S.E.D." AND
         (ExportDoc."ITN No." = '')
      THEN
        REPORT.RUNMODAL(REPORT::"Export Document SED",UseRequestForm,FALSE,ExportDoc);

      IF ExportDocSetup."Print NAFTA Cert. of Origin" OR
         ExportDocSetup."Print U.S. Cert. of Origin"
      THEN
        IF ExportDoc."Alt. Ult. Consignee" THEN
          PrintExportDocCertOfOrigin(
            ExportDoc,ExportDocSetup."Print NAFTA Cert. of Origin",
            ExportDocSetup."Print U.S. Cert. of Origin",UseRequestForm)
        ELSE
          PrintExportDocCertOfOrigin(
            ExportDoc,ExportDocSetup."Print NAFTA Cert. of Origin",
            ExportDocSetup."Print U.S. Cert. of Origin",UseRequestForm);

      IF ExportDocSetup."Print Commercial Invoice" THEN
        REPORT.RUNMODAL(REPORT::"Export Doc. Commercial Inv.",UseRequestForm,FALSE,ExportDoc);
    END;

    PROCEDURE CheckEmailFormat@1240030019(EmailAddress@1240030000 : Text[50]) : Boolean;
    VAR
      AtSign@1240030001 : Integer;
      LocalPart@1240030002 : Text[50];
      HostPart@1240030003 : Text[50];
      i@1240030005 : Integer;
      Char@1240030006 : Char;
    BEGIN
      IF EmailAddress = '' THEN
        EXIT(TRUE);

      AtSign := STRPOS(EmailAddress,'@');

      IF AtSign = 0 THEN
        EXIT(FALSE);

      LocalPart := COPYSTR(EmailAddress,1,AtSign-1);
      i := 0;
      REPEAT
        i := i + 1;
        Char := LocalPart[i];
        IF (Char < 33) OR
           (Char > 126) OR
           (LocalPart[i] IN ['<','>','\','/','@','(',')',';',':','*','[',']',',','"'])
        THEN
          EXIT(FALSE);
      UNTIL i = STRLEN(LocalPart);

      HostPart := COPYSTR(EmailAddress,AtSign+1);

      IF STRPOS(HostPart,'.') = 0 THEN
        EXIT(FALSE);

      i := 0;
      REPEAT
        i := i + 1;
        Char := HostPart[i];

        IF (i = 1) AND
           (HostPart[i] IN ['-','.'])
        THEN
          EXIT(FALSE);

        IF (i = STRLEN(HostPart)) AND
           (HostPart[i] IN ['-','.'])
        THEN
          EXIT(FALSE);

        IF (Char < 45) OR
           (Char IN [47,58,59,60,61,62,63,64,91,92,93,94,95,96]) OR
           (Char > 126)
        THEN
          EXIT(FALSE); // A-Z,a-z,0-9,hyphen,period allowed

        IF i > 1 THEN
          IF (HostPart[i] = '.') AND
             (HostPart[i-1] = '.')
          THEN
            EXIT(FALSE);
      UNTIL i = STRLEN(HostPart);

      EXIT(TRUE);
    END;

    PROCEDURE VoidManifestLine@1240030020(ManifestLine@1240030000 : Record 14000713);
    VAR
      ShippingAgent@1240030001 : Record 291;
    BEGIN
      ShippingAgent.GET(ManifestLine."Shipping Agent Code");
      ShipperTypeMgt.VoidManifestLine(ManifestLine,ShippingAgent);
    END;

    PROCEDURE ExpDocAddFromOrder@1240030015(SourceType@1240030000 : Integer;SourceSubType@1240030001 : Integer;SourceID@1240030002 : Code[20]);
    BEGIN
      GetShippingSetup;
      ShippingSetup.TESTFIELD("Disable Export Documentation",FALSE);
      ExportDocMgt.AddFromOrder(SourceType,SourceSubType,SourceID);
    END;

    PROCEDURE TrackPackage@1240030016(Package@1240030000 : Record 14000701);
    BEGIN
      ShipperTypeMgt.TrackPackage(Package);
    END;

    PROCEDURE TrackPostedPackage@1240030017(PostedPackage@1240030000 : Record 14000704);
    BEGIN
      ShipperTypeMgt.TrackPostedPackage(PostedPackage);
    END;

    PROCEDURE CheckManifest@1240030100(CurrentManifestHeader@1240020000 : Record 14000712) : Boolean;
    BEGIN
      WITH CurrentManifestHeader DO BEGIN
        TESTFIELD(Posted,FALSE);
        EXIT(ShipperTypeMgt.CheckManifest(CurrentManifestHeader));
      END;
    END;

    PROCEDURE PrintExportDocCertOfOrigin@1240030023(VAR ExportDoc@1240030001 : Record 14000981;PrintUSMCACertOrigin@1240030004 : Boolean;PrintUSCertOrigin@1240030005 : Boolean;UseRequestForm@1240030003 : Boolean);
    VAR
      ExportSourceLine@1240030002 : Record 14000983;
      CountryISO2chr@1240030000 : Code[10];
    BEGIN
      IF ExportDoc."Alt. Ult. Consignee" THEN
        CountryISO2chr := ExportDoc.GetISOCountryCode(ExportDoc."Ult. Consig. Country Code")
      ELSE
        CountryISO2chr := ExportDoc.GetISOCountryCode(ExportDoc."Ship-to Country Code");

      IF CountryISO2chr IN ['CA','MX'] THEN BEGIN
        IF PrintUSMCACertOrigin THEN BEGIN
          ExportSourceLine.RESET;
          ExportSourceLine.SETRANGE("Export Document No.",ExportDoc."No.");
          ExportSourceLine.SETFILTER("Country of Origin ISO 2 Char",'%1|%2|%3','CA','MX','US');
          IF ExportSourceLine.FIND('-') THEN
            REPORT.RUNMODAL(REPORT::"Export Document USMCA Cert.",UseRequestForm,FALSE,ExportDoc);
        END;
      END ELSE BEGIN
        IF PrintUSCertOrigin THEN BEGIN
          ExportSourceLine.RESET;
          ExportSourceLine.SETRANGE("Export Document No.",ExportDoc."No.");
          ExportSourceLine.SETRANGE("Country of Origin ISO 2 Char",'US');
          IF ExportSourceLine.FIND('-') THEN
            REPORT.RUNMODAL(REPORT::"Export Doc. Cert. of Origin",UseRequestForm,FALSE,ExportDoc);
        END;
      END;
    END;

    PROCEDURE SetBillofLadingNo@1240020000(SalesHeader@1240020000 : Record 36;SalesShipmentHeader@1240020001 : Record 110;SalesInvoiceHeader@1240020002 : Record 112);
    VAR
      PackingRule@1240020003 : Record 14000715;
      SalesInvoiceHeader2@1240020004 : Record 112;
      ShipmentHeaderEdit@1240020005 : Codeunit 391;
    BEGIN
      IF (NOT SalesHeader.Invoice) OR
         (SalesHeader."Document Type" = SalesHeader."Document Type"::Invoice)
      THEN
        EXIT;

      IF SalesHeader."Shipment Invoice Override" THEN BEGIN
        SalesHeader.TESTFIELD("Invoice for Shipment No.",'');

        EXIT;
      END;

      GetPackingStation;

      // >> LS001
      //IF (PackingStation."Sales Order Close Action" =
      //    PackingStation."Sales Order Close Action"::"Ship and Invoice")
      //THEN
      //  << LS001
        IF SalesHeader.Ship THEN BEGIN
          SalesShipmentHeader.FIND;
          IF (SalesInvoiceHeader."Invoice for Shipment No." <> '') AND
             (SalesInvoiceHeader."Invoice for Bill of Lading No." = '')
          THEN BEGIN
            SalesInvoiceHeader2 := SalesInvoiceHeader;
            SalesInvoiceHeader2."Invoice for Bill of Lading No." :=
            SalesShipmentHeader."Bill of Lading No.";
            EShipShpmtHeadrEdit.SalesInvoiceHeaderEdit(SalesInvoiceHeader2);
            SalesInvoiceHeader.FIND;
          END;
        END;
    END;

    PROCEDURE EDICombineShipmentRequired@1240020001(SalesHeader@1240020000 : Record 36;Invoice@1240020002 : Boolean) : Boolean;
    VAR
      PackingRule@1240020001 : Record 14000715;
    BEGIN
      GetPackingStation;

      IF (PackingStation."Sales Order Close Action" =
          PackingStation."Sales Order Close Action"::"Ship and Invoice") AND
         (SalesHeader."Combine Shipments")
      THEN BEGIN
        PackingRule.GetPackingRule(0,SalesHeader."Sell-to Customer No.",SalesHeader."Ship-to Code");
        IF PackingRule."Combine Shipment Invoice Req." THEN
          EXIT(TRUE)
        ELSE
          EXIT(FALSE);
      END ELSE
        EXIT(Invoice);
    END;

    [Business]
    LOCAL PROCEDURE RateShopExtendedCarriers@1240020002(RateShopHeader@1240020000 : Record 14000741;RateShopLine@1240020001 : Record 14000742;PackingStation@1240020002 : Record 14000709);
    BEGIN
    END;

    PROCEDURE IsNASBackgroundClient@1000000003() : Boolean;
    VAR
      ActiveSession@1000 : Record 2000000110;
    BEGIN
      // <TPZ162>
      IF ActiveSession.GET(SERVICEINSTANCEID,SESSIONID) AND
         ((ActiveSession."Client Type" = ActiveSession."Client Type"::NAS) OR
          (ActiveSession."Client Type" = ActiveSession."Client Type"::Background))
      THEN
        EXIT(TRUE);

      EXIT(FALSE);
      // </TPZ162>
    END;

    BEGIN
    {
      2015-09-29 TPZ162 TAKHMETO
       CheckSalesHeader function has been modified, GetUserPackingStation function has been added
      2016-03-14 TPZ1435 TMEI
        Shortcut Dimension 5 Code mandatory for Misc. package
      2016-12-29 TPZ1763 TMEI
        Allow wms location users to post non-wms location purchase return shipment
      LS001 JH 03/23/18 - remove requirement for ship and invoice cloase action - they allows ship/invoice together at night
      2019-07-18 TPZ2482 UChouhan
        Added code for overwrap service item.

      2019-11-12 TPZ2693 VAHAMAD
       funtion CreateShipChargeSalesHeader changed to global
      2019-11-13 TPZ2682 UCHOUHAN
        Added condition Blind Packing Slip.
      2020-03-04 TPZ2786 VAHAMAD
        Code blocked in GetMarkup Function
      2020-03-30 28418 GGUPTA
        Code added for stop asn issue
      2021-02-03 TPZ3068 GGUPTA
        Code added for stop package programming error
    }
    END.
  }
}

