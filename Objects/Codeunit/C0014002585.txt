OBJECT Codeunit 14002585 RF Empty Bin Count
{
  OBJECT-PROPERTIES
  {
    Date=08/21/18;
    Time=12:00:00 PM;
    Version List=RF1.50.13;
  }
  PROPERTIES
  {
    TableNo=7700;
    OnRun=VAR
            MiniformMgmt@1000 : Codeunit 7702;
          BEGIN
            MiniformMgmt.Initialize(
              MiniformHeader,Rec,DOMxmlin,ReturnedNode,
              RootNode,XMLDOMMgmt,ADCSCommunication,LoginID,
              CurrentCode,StackCode,WhseEmpId,LocationFilter);

            IF Code <> CurrentCode THEN
              PrepareData
            ELSE
              ProcessSelection;

            CLEAR(DOMxmlin);
          END;

  }
  CODE
  {
    VAR
      MiniformHeader@1000 : Record 7700;
      MiniformHeader2@1001 : Record 7700;
      RFEmployeeSetup@1002 : Record 14002802;
      WhseEmployeeActivityEntry@1003 : Record 14002803;
      XMLDOMMgmt@1004 : Codeunit 6224;
      ADCSCommunication@1005 : Codeunit 7701;
      ADCSNASStartup@1006 : Codeunit 7700;
      DOMxmlin@1240020002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      ReturnedNode@1240020001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      RootNode@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      LoginID@1011 : Text[250];
      WhseEmpId@1240020004 : Text[250];
      TextValue@1240020003 : Text[250];
      Remark@1012 : Text[250];
      LocationFilter@1013 : Text[250];
      CurrentCode@1014 : Text[250];
      StackCode@1015 : Text[250];
      Text000@1016 : TextConst 'ENU=Function not Found';
      Text005@1017 : TextConst 'ENU=No input Node found';
      ActiveInputField@1018 : Integer;
      Text007@1240020012 : TextConst 'ENU=Journal Count %1 of %2.';
      Text010@1240020005 : TextConst 'ENU=Count failed to generate';
      RecRef@1240020013 : RecordRef;
      ReturnedNode2@1240020011 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      FromTable@1240020010 : Integer;
      FromRecord@1240020009 : RecordID;
      FromRecordLine@1240020008 : RecordID;
      FromMiniformCode@1240020007 : Code[20];
      Text011@1240020014 : TextConst 'ENU=Confirmation failed';
      BinCountExists@1240020006 : Boolean;
      Text012@1240020015 : TextConst 'ENU=Line Already Exists';
      Text013@1240020016 : TextConst 'ENU=Audit Count Batch not found';
      Text014@1240020017 : TextConst 'ENU=Audit Whse Jnl Lines not found';

    LOCAL PROCEDURE ProcessSelection@16();
    VAR
      FuncGroup@1000 : Record 7702;
      MiniformLine@1001 : Record 7701;
      BinCountLine@1240020000 : Record 14002581;
      TableNo@1240020008 : Integer;
      RecordId@1240020007 : RecordID;
      ForwardTableNo@1240020006 : Integer;
      ForwardTable@1240020005 : Boolean;
      ForwardRecordLine@1240020004 : Boolean;
      ForwardRecordId@1240020003 : RecordID;
      RecRef2@1240020002 : RecordRef;
    BEGIN
      IF XMLDOMMgmt.FindNode(RootNode,'Header/Input',ReturnedNode) THEN
        TextValue := ReturnedNode.InnerText
      ELSE
        ERROR(Text005);

      XMLDOMMgmt.FindNode(RootNode,'ExtraInfo',ReturnedNode2);
      ForwardTable := EVALUATE(ForwardTableNo,ADCSCommunication.GetNodeAttribute(ReturnedNode2,'ForwardTable'));
      IF ForwardTable THEN
        EVALUATE(TableNo,ADCSCommunication.GetNodeAttribute(ReturnedNode2,'ForwardTable'))
      ELSE
        EVALUATE(TableNo,ADCSCommunication.GetNodeAttribute(ReturnedNode,'TableNo'));

      RecRef.OPEN(TableNo);
      IF ForwardTable THEN
        EVALUATE(RecordId,ADCSCommunication.GetNodeAttribute(ReturnedNode2,'ForwardRecord'))
      ELSE
        EVALUATE(RecordId,ADCSCommunication.GetNodeAttribute(ReturnedNode,'RecordID'));

      EVALUATE(FromTable,ADCSCommunication.GetNodeAttribute(ReturnedNode2,'FromTable'));
      EVALUATE(FromRecord,ADCSCommunication.GetNodeAttribute(ReturnedNode2,'FromRecord'));
      EVALUATE(FromRecordLine,ADCSCommunication.GetNodeAttribute(ReturnedNode2,'FromRecordLine'));
      FromMiniformCode := ADCSCommunication.GetNodeAttribute(ReturnedNode2,'FromMiniformCode');

      ForwardRecordLine :=
        EVALUATE(ForwardRecordId,ADCSCommunication.GetNodeAttribute(ReturnedNode2,'ForwardRecordLine'));

      IF RecRef.GET(RecordId) THEN BEGIN
        RecRef.SETTABLE(BinCountLine);
        BinCountLine.RESET;
        BinCountLine.SETFILTER("Location Code",LocationFilter);
        BinCountLine.SETRANGE("Bin Count No.",BinCountLine."Bin Count No.");
        BinCountLine.SETFILTER("Assigned User ID",'%1|%2','',WhseEmpId);
        BinCountLine.SETRANGE("Count Performed",FALSE);
        RecRef.GETTABLE(BinCountLine);
        ADCSCommunication.SetRecRef(RecRef);
      END ELSE BEGIN
        ReturnToBinCountJnlLine;
        EXIT;
      END;

      MaintainExtraValues;
      FuncGroup.KeyDef := ADCSCommunication.GetFunctionKey(MiniformHeader.Code,TextValue);
      ActiveInputField := 1;

      CASE FuncGroup.KeyDef OF
        FuncGroup.KeyDef::Esc:
          BEGIN
            ReturnToBinCountJnlLine;
            EXIT;
          END;
        FuncGroup.KeyDef::Input:
          BEGIN
            MiniformLine.RESET;
            MiniformLine.SETRANGE("Miniform Code",MiniformHeader.Code);
            MiniformLine.SETRANGE(Hide,FALSE);
            MiniformLine.SETRANGE(Text,ReturnedNode.InnerText);
            IF MiniformLine.FIND('-') THEN
              ;
            CASE MiniformLine."RF Function No." OF
              1: // Return - No Answer
                BEGIN
                  ReturnToBinCountJnlLine;
                  EXIT;
                END;
              2: // Yes
                BEGIN
                  IF NOT EmptyBinConfirmed(BinCountLine) THEN
                    ERROR(Text011)
                  ELSE
                    EXIT;
                END;
              3: // No
                BEGIN
                  IF NOT GenerateWhseEmptyBinCount(BinCountLine) THEN
                    ERROR(Text010)
                  ELSE
                    EXIT;
                END;
              ELSE BEGIN
                ReturnToBinCountJnlLine;
                EXIT;
              END;
            END;
          END;
        ELSE
          ERROR(Text000);
      END;

      IF NOT (FuncGroup.KeyDef IN [FuncGroup.KeyDef::Esc,FuncGroup.KeyDef::Input]) THEN
        SendForm(ActiveInputField);
    END;

    LOCAL PROCEDURE PrepareData@4();
    VAR
      BinCountLine@1240020001 : Record 14002581;
      BinCountLine2@1240020003 : Record 14002581;
      RFEmployeeSetup@1240030000 : Record 14002802;
      ReturnedNode2@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      TableNo@1002 : Integer;
      RecordId@1003 : RecordID;
      ForwardTableNo@1240020008 : Integer;
      ForwardTable@1240020007 : Boolean;
      ForwardRecordLine@1240020006 : Boolean;
      ForwardRecordId@1240020005 : RecordID;
      RecRef2@1240020004 : RecordRef;
    BEGIN
      XMLDOMMgmt.FindNode(RootNode,'Header/Input',ReturnedNode);

      XMLDOMMgmt.FindNode(RootNode,'ExtraInfo',ReturnedNode2);
      ForwardTable := EVALUATE(ForwardTableNo,ADCSCommunication.GetNodeAttribute(ReturnedNode2,'ForwardTable'));
      IF ForwardTable THEN
        EVALUATE(TableNo,ADCSCommunication.GetNodeAttribute(ReturnedNode2,'ForwardTable'))
      ELSE
        EVALUATE(TableNo,ADCSCommunication.GetNodeAttribute(ReturnedNode,'TableNo'));

      RecRef.OPEN(TableNo);
      IF ForwardTable THEN
        EVALUATE(RecordId,ADCSCommunication.GetNodeAttribute(ReturnedNode2,'ForwardRecord'))
      ELSE
        EVALUATE(RecordId,ADCSCommunication.GetNodeAttribute(ReturnedNode,'RecordID'));

      EVALUATE(FromTable,ADCSCommunication.GetNodeAttribute(ReturnedNode2,'FromTable'));
      EVALUATE(FromRecord,ADCSCommunication.GetNodeAttribute(ReturnedNode2,'FromRecord'));
      EVALUATE(FromRecordLine,ADCSCommunication.GetNodeAttribute(ReturnedNode2,'FromRecordLine'));
      FromMiniformCode := ADCSCommunication.GetNodeAttribute(ReturnedNode2,'FromMiniformCode');

      IF RecRef2.GET(RecordId) THEN BEGIN
        RecRef2.SETTABLE(BinCountLine);
        BinCountLine2.RESET;
        IF BinCountLine2.GET(BinCountLine."Bin Count No.",BinCountLine."Bin Code",
          BinCountLine."Zone Code",BinCountLine."Location Code")
        THEN BEGIN
          MaintainExtraValues;
          RecRef.GETTABLE(BinCountLine2);
          ADCSCommunication.SetRecRef(RecRef);
          ActiveInputField := 1;
          SendForm(ActiveInputField);
          EXIT;
        END ELSE BEGIN
          ReturnToBinCountJnlLine;
          EXIT;
        END;
      END ELSE BEGIN
        ReturnToBinCountJnlLine;
        EXIT;
      END;
    END;

    LOCAL PROCEDURE SendForm@1(ActiveInputField@1000 : Integer);
    BEGIN
      RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);
      IF RFEmployeeSetup."Show User and Location" THEN
        ADCSCommunication.SetAlternativeText(
          STRSUBSTNO('%1 (%2)',LoginID,LocationFilter));

      ADCSCommunication.EncodeMiniForm(MiniformHeader,StackCode,DOMxmlin,ActiveInputField,'',LoginID);
      ADCSCommunication.GetReturnXML(DOMxmlin);
      ADCSNASStartup.SendXMLReply(DOMxmlin);
    END;

    [External]
    PROCEDURE GenerateWhseEmptyBinCount@1240020013(BinCountLine@1240030000 : Record 14002581) : Boolean;
    VAR
      MiniformHeader2@1240020005 : Record 7700;
      BinCount@1240020000 : Record 14002580;
      BinCountLine2@1240020011 : Record 14002581;
      WhseJournalBatch@1240020001 : Record 7310;
      RFEmployeeSetup@1240020010 : Record 14002802;
      ForwardRecID@1240020003 : RecordID;
      ForwardTableNo@1240020002 : Integer;
    BEGIN
      RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);

      IF RFEmployeeSetup."Allow Phys. Invt. Add Item" THEN
        CreateEmptyBinCount(BinCountLine);

      IF NOT BinCount.GET(BinCountLine."Bin Count No.") THEN
        EXIT(FALSE);

      BinCountLine2.RESET;
      IF BinCountLine2.GET(
          BinCountLine."Bin Count No.",BinCountLine."Bin Code",
          BinCountLine."Zone Code",BinCountLine."Location Code")
      THEN BEGIN
        WhseJournalBatch.RESET;
        IF WhseJournalBatch.GET(BinCount."Journal Template Name",
          BinCountLine2."Batch No.",BinCountLine2."Location Code")
        THEN BEGIN
          ForwardTableNo := DATABASE::"Warehouse Journal Batch";
          ForwardRecID := WhseJournalBatch.RECORDID;
          BinCountExists := TRUE;
          ADCSCommunication.SetExtraValue('BinCountExists',FORMAT(BinCountExists));
          ADCSCommunication.SetExtraValue('ForwardName',WhseJournalBatch.Name);
          ADCSCommunication.SetExtraValue('ForwardTable',FORMAT(ForwardTableNo));
          ADCSCommunication.SetExtraValue('ForwardRecord',FORMAT(ForwardRecID));
          ADCSCommunication.SetExtraValue('FromTable',FORMAT(DATABASE::"Bin Count Line"));
          ADCSCommunication.SetExtraValue('FromRecord',FORMAT(BinCountLine.RECORDID));
          ADCSCommunication.SetExtraValue('FromRecordLine',FORMAT(BinCountLine.RECORDID));
          ADCSCommunication.SetExtraValue('FromMiniformCode',FromMiniformCode);
          SendForm(ActiveInputField);

          MiniformHeader2.GET(MiniformHeader."Next Miniform");
          MiniformHeader2.SaveXMLin(DOMxmlin);
          CODEUNIT.RUN(MiniformHeader2."Handling Codeunit",MiniformHeader2);
          EXIT(TRUE);
        END;
      END;

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE CreateEmptyBinCount@1240020003(BinCountLine@1240020001 : Record 14002581);
    VAR
      BinCount@1240020000 : Record 14002580;
      BinCountLine2@1240020002 : Record 14002581;
      Bin@1240020009 : Record 7354;
      Location@1240020008 : Record 14;
      WarehouseJournalTemplate@1240020003 : Record 7309;
      WarehouseJournalBatch@1240020005 : Record 7310;
      WarehouseJournalLine@1240020006 : Record 7311;
      SourceCodeSetup@1240020012 : Record 242;
      BinCountMgt@1240020007 : Codeunit 14002580;
      AuditCountBatchNo@1240020010 : Code[10];
      BinCountLineNo@1240020004 : Code[10];
      LineNo@1240020011 : Integer;
    BEGIN
      IF NOT BinCount.GET(BinCountLine."Bin Count No.") THEN
        EXIT;

      WarehouseJournalTemplate.RESET;
      WarehouseJournalTemplate.SETRANGE(Type,WarehouseJournalTemplate.Type::"Physical Inventory");
      WarehouseJournalTemplate.FIND('-');

      IF ((BinCount."Count Type" <> BinCount."Count Type"::"Audited Count") AND
          (NOT BinCount."Marked for Register")) OR
         ((BinCount."Count Type" = BinCount."Count Type"::"Audited Count") AND
          (BinCount."Journal Batch Name" = '')) OR
         ((BinCount."Marked for Register") AND (BinCount."Journal Batch Name" = ''))
      THEN BEGIN
        IF BinCountLine2.GET(
          BinCountLine."Bin Count No.",BinCountLine."Bin Code",
          BinCountLine."Zone Code",BinCountLine."Location Code")
        THEN
          BinCountMgt.ToggleAssignedUserID(BinCountLine,TRUE,WhseEmpId);

        WarehouseJournalBatch.INIT;
        WarehouseJournalBatch."Journal Template Name" := WarehouseJournalTemplate.Name;
        IF ((BinCount."Count Type" = BinCount."Count Type"::"Audited Count") AND
          (BinCount."Journal Batch Name" = '')) OR
          ((BinCount."Marked for Register") AND (BinCount."Journal Batch Name" = ''))
        THEN
          BinCountLineNo := BinCountMgt.GetNextBinCountLineNo(WhseEmpId,BinCountLine."Location Code",TRUE)
        ELSE
          BinCountLineNo := BinCountMgt.GetNextBinCountLineNo(WhseEmpId,BinCountLine."Location Code",FALSE);
        WarehouseJournalBatch.Name := BinCountLineNo;
        IF BinCount."Count Type" = BinCount."Count Type"::"Audited Count" THEN
          AuditCountBatchNo := BinCountLineNo;
        WarehouseJournalBatch."Location Code" := BinCountLine."Location Code";
        WarehouseJournalBatch.Description := STRSUBSTNO(Text007,BinCountLineNo,BinCountLine."Bin Count No.");
        WarehouseJournalBatch."Delete Batch after Post" := TRUE;
        WarehouseJournalBatch.INSERT;

        WarehouseJournalLine.RESET;
        WarehouseJournalLine.SETRANGE(
          "Journal Template Name",WarehouseJournalBatch."Journal Template Name");
        WarehouseJournalLine.SETRANGE("Journal Batch Name",WarehouseJournalBatch.Name);
        WarehouseJournalLine.SETRANGE("Location Code",WarehouseJournalBatch."Location Code");
        WarehouseJournalLine.DELETEALL;

        WarehouseJournalLine.RESET;
        WarehouseJournalLine.SETRANGE(
          "Journal Template Name",WarehouseJournalBatch."Journal Template Name");
        WarehouseJournalLine.SETRANGE("Journal Batch Name",WarehouseJournalBatch.Name);
        WarehouseJournalLine.SETRANGE("Location Code",WarehouseJournalBatch."Location Code");
        IF NOT WarehouseJournalLine.FIND('-') THEN BEGIN
          WarehouseJournalLine."Journal Template Name" := WarehouseJournalBatch."Journal Template Name";
          WarehouseJournalLine."Journal Batch Name" := WarehouseJournalBatch.Name;
          WarehouseJournalLine."Location Code" := WarehouseJournalBatch."Location Code";
          WarehouseJournalLine."Registering Date" := TODAY;
          WarehouseJournalLine."Reference No." := BinCountLine."Bin Count No.";
          WarehouseJournalLine."Registering No. Series" := WarehouseJournalBatch."Registering No. Series";
          WarehouseJournalLine."User ID" := USERID;
          IF SourceCodeSetup.GET THEN
            WarehouseJournalLine."Source Code" := SourceCodeSetup."Whse. Phys. Invt. Journal";
          WarehouseJournalLine."Whse. Document No." := BinCountLine."Bin Count No.";
          WarehouseJournalLine."Whse. Document Type" :=
            WarehouseJournalLine."Whse. Document Type"::"Whse. Phys. Inventory";

          IF Location.GET(BinCountLine."Location Code") THEN
            Bin.GET(Location.Code,Location."Adjustment Bin Code");

          WarehouseJournalLine."From Zone Code" := Bin."Zone Code";
          WarehouseJournalLine."From Bin Code" := Bin.Code;
          WarehouseJournalLine."From Bin Type Code" := Bin."Bin Type Code";
          WarehouseJournalLine."To Zone Code" := BinCountLine."Zone Code";
          WarehouseJournalLine."To Bin Code" := BinCountLine."Bin Code";
          WarehouseJournalLine."Entry Type" := WarehouseJournalLine."Entry Type"::"Positive Adjmt.";
          WarehouseJournalLine."Zone Code" := BinCountLine."Zone Code";
          WarehouseJournalLine."Bin Code" := BinCountLine."Bin Code";

          WarehouseJournalLine."Line No." := 10000;
          WarehouseJournalLine.Description := '';
          WarehouseJournalLine."Item No." := '';
          WarehouseJournalLine.Quantity := 0;
          WarehouseJournalLine."Qty. (Base)" := 0;
          WarehouseJournalLine."Qty. (Absolute)" := 0;
          WarehouseJournalLine."Qty. (Absolute, Base)" := 0;
          WarehouseJournalLine.Cubage := 0;
          WarehouseJournalLine.Weight := 0;
          WarehouseJournalLine."Qty. (Calculated)" := 0;
          WarehouseJournalLine."Qty. (Calculated) (Base)" := 0;
          WarehouseJournalLine."Qty. (Phys. Inventory)" := 0;
          WarehouseJournalLine."Phys. Inventory" := FALSE;
          WarehouseJournalLine."Variant Code" := '';
          WarehouseJournalLine."Qty. per Unit of Measure" := 0;
          WarehouseJournalLine."Unit of Measure Code" := '';
          WarehouseJournalLine."Serial No." := '';
          WarehouseJournalLine."Lot No." := '';
          WarehouseJournalLine."Warranty Date" := 0D;
          WarehouseJournalLine."Expiration Date" := 0D;
          WarehouseJournalLine."First Scan Date" := 0D;
          WarehouseJournalLine."First Scan Time" := 0T;
          WarehouseJournalLine."Last Scan Date" := 0D;
          WarehouseJournalLine."Last Scan Time" := 0T;
          WarehouseJournalLine."Warehouse Employee Code" := '';
          WarehouseJournalLine."Original Qty. (Calculated)" := 0;
          WarehouseJournalLine."Qty. (Phys. Inventory, Hide)" := 0;
          WarehouseJournalLine."Pallet Action" := WarehouseJournalLine."Pallet Action"::Add;
          WarehouseJournalLine."Pallet Code" := '';
          WarehouseJournalLine."Box Code" := '';
          WarehouseJournalLine."Added From RF" := TRUE;
          WarehouseJournalLine.INSERT;
        END ELSE
          ERROR(Text012);
      END;

      IF (BinCount."Count Type" <> BinCount."Count Type"::"Audited Count") AND
          (NOT BinCount."Marked for Register")
      THEN
        IF (WhseEmpId <> '') AND (NOT RFEmployeeSetup."No UserID on Ad Hoc Counts") THEN BEGIN
          WarehouseJournalBatch.VALIDATE("Assigned User ID",WhseEmpId);
          WarehouseJournalBatch.MODIFY;
        END;

      IF ((BinCount."Count Type" = BinCount."Count Type"::"Audited Count") AND
          (BinCount."Journal Batch Name" <> '')) OR
         ((BinCount."Marked for Register") AND (BinCount."Journal Batch Name" <> ''))
      THEN BEGIN
        WarehouseJournalBatch.RESET;
        WarehouseJournalBatch.SETRANGE("Journal Template Name",BinCount."Journal Template Name");
        WarehouseJournalBatch.SETRANGE(Name,BinCount."Journal Batch Name");
        WarehouseJournalBatch.SETRANGE("Location Code",BinCount."Location Code");
        IF NOT WarehouseJournalBatch.FIND('-') THEN BEGIN
          BinCountMgt.ToggleAssignedUserID(BinCountLine,FALSE,WhseEmpId);
          ERROR(Text013);
        END;

        BinCountLineNo := WarehouseJournalBatch.Name;

        WarehouseJournalLine.RESET;
        WarehouseJournalLine.SETRANGE(
          "Journal Template Name",WarehouseJournalBatch."Journal Template Name");
        WarehouseJournalLine.SETRANGE("Journal Batch Name",WarehouseJournalBatch.Name);
        WarehouseJournalLine.SETRANGE("Location Code",WarehouseJournalBatch."Location Code");
        IF WarehouseJournalLine.FINDLAST THEN BEGIN
          LineNo := WarehouseJournalLine."Line No." + 10000;
          WarehouseJournalLine."Journal Template Name" := WarehouseJournalBatch."Journal Template Name";
          WarehouseJournalLine."Journal Batch Name" := WarehouseJournalBatch.Name;
          WarehouseJournalLine."Location Code" := WarehouseJournalBatch."Location Code";
          WarehouseJournalLine."Registering Date" := TODAY;
          WarehouseJournalLine."Reference No." := BinCountLine."Bin Count No.";
          WarehouseJournalLine."Registering No. Series" := WarehouseJournalBatch."Registering No. Series";
          WarehouseJournalLine."User ID" := USERID;
          IF SourceCodeSetup.GET THEN
            WarehouseJournalLine."Source Code" := SourceCodeSetup."Whse. Phys. Invt. Journal";
          WarehouseJournalLine."Whse. Document No." := BinCountLine."Bin Count No.";
          WarehouseJournalLine."Whse. Document Type" :=
            WarehouseJournalLine."Whse. Document Type"::"Whse. Phys. Inventory";

          IF Location.GET(BinCountLine."Location Code") THEN
            Bin.GET(Location.Code,Location."Adjustment Bin Code");

          WarehouseJournalLine."From Zone Code" := Bin."Zone Code";
          WarehouseJournalLine."From Bin Code" := Bin.Code;
          WarehouseJournalLine."From Bin Type Code" := Bin."Bin Type Code";
          WarehouseJournalLine."To Zone Code" := BinCountLine."Zone Code";
          WarehouseJournalLine."To Bin Code" := BinCountLine."Bin Code";
          WarehouseJournalLine."Entry Type" := WarehouseJournalLine."Entry Type"::"Positive Adjmt.";
          WarehouseJournalLine."Zone Code" := BinCountLine."Zone Code";
          WarehouseJournalLine."Bin Code" := BinCountLine."Bin Code";

          WarehouseJournalLine."Line No." := LineNo;
          WarehouseJournalLine.Description := '';
          WarehouseJournalLine."Item No." := '';
          WarehouseJournalLine.Quantity := 0;
          WarehouseJournalLine."Qty. (Base)" := 0;
          WarehouseJournalLine."Qty. (Absolute)" := 0;
          WarehouseJournalLine."Qty. (Absolute, Base)" := 0;
          WarehouseJournalLine.Cubage := 0;
          WarehouseJournalLine.Weight := 0;
          WarehouseJournalLine."Qty. (Calculated)" := 0;
          WarehouseJournalLine."Qty. (Calculated) (Base)" := 0;
          WarehouseJournalLine."Qty. (Phys. Inventory)" := 0;
          WarehouseJournalLine."Phys. Inventory" := FALSE;
          WarehouseJournalLine."Variant Code" := '';
          WarehouseJournalLine."Qty. per Unit of Measure" := 0;
          WarehouseJournalLine."Unit of Measure Code" := '';
          WarehouseJournalLine."Serial No." := '';
          WarehouseJournalLine."Lot No." := '';
          WarehouseJournalLine."Warranty Date" := 0D;
          WarehouseJournalLine."Expiration Date" := 0D;
          WarehouseJournalLine."First Scan Date" := 0D;
          WarehouseJournalLine."First Scan Time" := 0T;
          WarehouseJournalLine."Last Scan Date" := 0D;
          WarehouseJournalLine."Last Scan Time" := 0T;
          WarehouseJournalLine."Warehouse Employee Code" := '';
          WarehouseJournalLine."Original Qty. (Calculated)" := 0;
          WarehouseJournalLine."Qty. (Phys. Inventory, Hide)" := 0;
          WarehouseJournalLine."Added From RF" := TRUE;
          WarehouseJournalLine.INSERT;
        END ELSE BEGIN
          BinCountMgt.ToggleAssignedUserID(BinCountLine,FALSE,WhseEmpId);
          ERROR(Text014);
        END;
      END;

      WarehouseJournalLine.RESET;
      WarehouseJournalLine.SETRANGE(
        "Journal Template Name",WarehouseJournalBatch."Journal Template Name");
      WarehouseJournalLine.SETRANGE("Journal Batch Name",WarehouseJournalBatch.Name);
      WarehouseJournalLine.SETRANGE("Location Code",WarehouseJournalBatch."Location Code");
      IF WarehouseJournalLine.FIND('-') THEN BEGIN
        BinCountMgt.ToggleEmptyBin(BinCountLine,FALSE);
        IF NOT BinCountLine."Count Initiated" THEN BEGIN
          BinCountMgt.LineCountInitiated(
            BinCountLine."Bin Count No.",BinCountLine."Bin Code",
            BinCountLine."Zone Code",BinCountLine."Location Code",
            WhseEmpId,AuditCountBatchNo,BinCountLineNo);
        END ELSE BEGIN
          IF BinCountLine."Count Marked for Audit" AND
             BinCountLine."Count Performed"
          THEN BEGIN
            IF BinCountLine."Empty Bin Confirmed" THEN
              IF BinCountLine2.GET(
                BinCountLine."Bin Count No.",BinCountLine."Bin Code",
                BinCountLine."Zone Code",BinCountLine."Location Code")
              THEN BEGIN
                BinCountLine2."Empty Bin Confirmed" := FALSE;
                BinCountLine2."Count Registered" := FALSE;
                BinCountLine2."Count Registered Date" := 0D;
                BinCountLine2."Count Registered Time" := 0T;
                BinCountLine2."Count Registered DateTime" := 0DT;
                BinCountLine2.MODIFY;
              END;

            BinCountMgt.LineCountAuditInitiated(
              BinCountLine."Bin Count No.",BinCountLine."Bin Code",
              BinCountLine."Zone Code",BinCountLine."Location Code",
              WhseEmpId,AuditCountBatchNo,BinCountLineNo);
          END;
        END;
      END;
    END;

    [External]
    PROCEDURE EmptyBinConfirmed@1240020002(BinCountLine@1240020000 : Record 14002581) : Boolean;
    VAR
      MiniformHeader2@1240020014 : Record 7700;
      BinCount@1240020013 : Record 14002580;
      RFEmployeeSetup@1240020008 : Record 14002802;
      BinCountMgt@1240020015 : Codeunit 14002580;
      ForwardRecID@1240020005 : RecordID;
      ForwardTableNo@1240020004 : Integer;
    BEGIN
      BinCountMgt.ConfirmedBinEmpty(
        BinCountLine."Bin Count No.",BinCountLine."Bin Code",
        BinCountLine."Zone Code",BinCountLine."Location Code",WhseEmpId);

      IF FromMiniformCode <> '' THEN BEGIN
        ADCSCommunication.SetExtraValue('ForwardTable',FORMAT(FromTable));
        ADCSCommunication.SetExtraValue('ForwardRecord',FORMAT(FromRecord));
        ADCSCommunication.SetExtraValue('ForwardRecordLine',FORMAT(FromRecordLine));
        SendForm(ActiveInputField);

        MiniformHeader2.GET(FromMiniformCode);
        MiniformHeader2.SaveXMLin(DOMxmlin);
        CODEUNIT.RUN(MiniformHeader2."Handling Codeunit",MiniformHeader2);
        EXIT(TRUE);
      END ELSE BEGIN
        ReturnToBinCountJnlLine;
        EXIT(FALSE);
      END;

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE ReturnToBinCountJnlLine@1240020008();
    VAR
      MiniformHeader2@1240020000 : Record 7700;
    BEGIN
      IF FromMiniformCode <> '' THEN BEGIN
        ADCSCommunication.SetExtraValue('ForwardTable',FORMAT(FromTable));
        ADCSCommunication.SetExtraValue('ForwardRecord',FORMAT(FromRecord));
        ADCSCommunication.SetExtraValue('ForwardRecordLine',FORMAT(FromRecordLine));
        SendForm(ActiveInputField);

        MiniformHeader2.GET(FromMiniformCode);
        MiniformHeader2.SaveXMLin(DOMxmlin);
        CODEUNIT.RUN(MiniformHeader2."Handling Codeunit",MiniformHeader2);
        EXIT;
      END ELSE BEGIN
        ADCSCommunication.RunPreviousMiniform(DOMxmlin);
        EXIT;
      END;
    END;

    [External]
    PROCEDURE MaintainExtraValues@1240020001();
    BEGIN
      ADCSCommunication.SetExtraValue('FromTable',FORMAT(FromTable));
      ADCSCommunication.SetExtraValue('FromRecord',FORMAT(FromRecord));
      ADCSCommunication.SetExtraValue('FromRecordLine',FORMAT(FromRecordLine));
      ADCSCommunication.SetExtraValue('FromMiniformCode',FromMiniformCode);
      ADCSCommunication.SetExtraValue('BinCountExists',FORMAT(BinCountExists));
    END;

    EVENT DOMxmlin@1240020002::NodeInserting@93(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020002::NodeInserted@94(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020002::NodeRemoving@95(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020002::NodeRemoved@96(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020002::NodeChanging@97(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020002::NodeChanged@98(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    BEGIN
    END.
  }
}

