OBJECT Codeunit 14002357 E.D.I. Purchase Order Send
{
  OBJECT-PROPERTIES
  {
    Date=02/25/19;
    Time=12:00:00 PM;
    Version List=SE0.61,TPZEDI;
  }
  PROPERTIES
  {
    TableNo=38;
    Permissions=TableData 38=rimd;
    OnRun=BEGIN
            CASE ProcessID OF
              1:
                ExportPO(Rec);
              2:
                ExportWHSEShipAdvice(Rec);
            END;
          END;

  }
  CODE
  {
    VAR
      EDITemplate@1240030000 : Record 14002350;
      EDITradePartner@1240030001 : Record 14002360;
      EDIDocument@1240030002 : Record 14002353;
      EDISegment@1240030003 : Record 14002354;
      EDISegment2@1240030004 : Record 14002354;
      EDISendDocHdr@1240030005 : Record 14002369;
      EDISetup@1240030006 : Record 14002367;
      EDIElement@1240030007 : Record 14002355;
      EDIElementArray@1240030008 : ARRAY [100] OF TEMPORARY Record 14002355;
      BuyfromVendor@1240030009 : Record 23;
      CompanyInformation@1240030010 : Record 79;
      Item@1240030011 : Record 27;
      Location@1240030012 : Record 14;
      PaytoVendor@1240030013 : Record 23;
      PaymentTerms@1240030014 : Record 3;
      PurchaseHeader@1240030015 : Record 38;
      PurchaseLine@1240030016 : Record 39;
      SalespersonPurchaser@1240030017 : Record 13;
      ShipmentMethod@1240030018 : Record 10;
      PurchCommentLine@1240030054 : Record 43;
      ItemCrossReference@1240020009 : Record 5717;
      PurchCommentLineDetail@1240020010 : Record 43;
      EDIFormat@1240030019 : Codeunit 14002351;
      EDISend@1240030021 : Codeunit 14002356;
      ReleasePurchDoc@1240030046 : Codeunit 415;
      EDIPackageMapIntegration@1240030050 : Codeunit 14002378;
      EDIGetReverseCrossRef@1240020001 : Codeunit 14000373;
      CreateEDIAlert@1240020007 : Codeunit 14000375;
      EDILoadDBFields@1240020013 : Codeunit 14002392;
      EDILoadEDIOutFields@1240020017 : Codeunit 14000381;
      i@1240030022 : Integer;
      BooleanVariable@1240030023 : Boolean;
      BypassSegment@1240030024 : Boolean;
      DateVariable@1240030025 : Date;
      DecimalVariable@1240030026 : Decimal;
      DocumentNo@1240030031 : Code[10];
      GrossShipWeight@1240030032 : Decimal;
      IntegerVariable@1240030033 : Integer;
      LineNumber@1240030034 : Integer;
      NetShipWeight@1240030036 : Decimal;
      NewSegment@1240030037 : Boolean;
      OutErrorArray@1240030038 : ARRAY [100] OF Boolean;
      OutFldArray@1240030039 : ARRAY [100] OF Text[250];
      OutLenArray@1240030040 : ARRAY [100] OF Integer;
      OutputOff@1240030041 : Boolean;
      ProcessingLines@1240030042 : Boolean;
      TotalUnits@1240030043 : Decimal;
      TotalSegments@1240030044 : Integer;
      TradePtnrFound@1240030045 : Boolean;
      Text001@1001 : TextConst 'ENU=Vendor %1 is not set up as an EDI Trading Partner.';
      Text002@1002 : TextConst 'ENU=Location %1 is not set up for EDI transaction %2.';
      Text003@1003 : TextConst 'ENU=EDI Document %1 for Trading Partner %2 has a mapping error.';
      Text004@1004 : TextConst 'ENU=Purchase Order line not found for PO # %1.';
      Text005@1005 : TextConst 'ENU=Order %1 does not contain a shipping location in the header.';
      Text006@1006 : TextConst 'ENU=Trading partner %1 could not be found for Location %2.';
      Text007@1007 : TextConst 'ENU=Unable to find EDI segment definition for Trading Partner %1.';
      Text008@1008 : TextConst 'ENU="LINE END Command found before LINE BEGIN.  "';
      Text009@1009 : TextConst 'ENU=Check Segment Definition.';
      Text010@1010 : TextConst 'ENU=Unable to find EDI Segment Map for the following: %1 - %2 - %3 -%4';
      SegmentGroup@1240030048 : Integer;
      GoodLine@1240030049 : Boolean;
      Text011@1011 : TextConst 'ENU=Purchase Order line not found for PO # %1.';
      EDIVendorCrossRef@1240030051 : Record 14002366;
      LoopFinished@1240030053 : Boolean;
      RepeatCount@1240030052 : Integer;
      LoopCnt@1240020000 : Integer;
      RecordNo@1240020008 : Integer;
      ReverseCrossReference@1240020006 : Boolean;
      ReverseCrossRefArray@1240020005 : ARRAY [100] OF Text[40];
      ReverseCrossRefValue@1240020004 : Text[40];
      BypassSegment2@1240020003 : Boolean;
      OutError2@1240020002 : Boolean;
      ProcessID@1240020011 : Integer;
      OrderTaxPercent@1240020012 : Decimal;
      OrderTax@1240020411 : Decimal;
      TimeVariable@1240020014 : Time;
      DateTimeVariable@1240020015 : DateTime;
      RecRef@1240020016 : RecordRef;
      Text012@1240020018 : TextConst 'ENU=Vendor %1 is not set up for EDI transaction %2.';
      XMLDoc@1240020019 : Boolean;
      DiscPercent@1000000000 : Decimal;
      DiscAmt@1000000001 : Decimal;
      DiscountedAmt@1000000002 : Decimal;
      DiscDays@1000000003 : Integer;
      NetDays@1000000004 : Integer;

    PROCEDURE ExportPO@18(VAR CurrentPurchHdr@1240030001 : Record 38) ErrorCode@1240030000 : Boolean;
    VAR
      EDIXMLManagement@1240020002 : Codeunit 14099302;
    BEGIN
      CLEAR(EDILoadEDIOutFields);

      PurchaseHeader.COPY(CurrentPurchHdr);
      IF PurchaseHeader."EDI Internal Doc. No." = '' THEN BEGIN
        EDISetup.GET;
        EDISetup."Last Internal Doc. No." := INCSTR(EDISetup."Last Internal Doc. No.");
        PurchaseHeader."EDI Internal Doc. No." := EDISetup."Last Internal Doc. No.";
        EDISetup.MODIFY;
      END;
      PurchaseHeader.CALCFIELDS(Amount,"Amount Including VAT");

      TradePtnrFound := FALSE;

      EDITradePartner.SETCURRENTKEY("Vendor No.");
      EDITradePartner.SETRANGE("Vendor No.",PurchaseHeader."Buy-from Vendor No.");
      IF EDITradePartner.FIND('-') THEN
        TradePtnrFound := TRUE;

      IF NOT TradePtnrFound THEN BEGIN
        EDIVendorCrossRef.INIT;
        EDIVendorCrossRef.SETCURRENTKEY("Navision Buy-from Code");
        EDIVendorCrossRef.SETRANGE(
          "Navision Buy-from Code",PurchaseHeader."Buy-from Vendor No.");
        IF EDIVendorCrossRef.FIND('-') THEN BEGIN
          EDITradePartner.GET(EDIVendorCrossRef."Trade Partner No.");
          TradePtnrFound := TRUE;
        END;
      END;

      IF NOT TradePtnrFound THEN
        ERROR(Text001,PurchaseHeader."Buy-from Vendor No.");

      DocumentNo := 'E_PURORD';

      EDIDocument.SETRANGE("Trade Partner No.",EDITradePartner."No.");
      EDIDocument.SETFILTER(Status,'%1|%2',EDIDocument.Status::Test,EDIDocument.Status::Production);
      EDIDocument.SETRANGE("Navision Document",DocumentNo);
      EDIDocument.SETRANGE(Type,EDIDocument.Type::Export);
      IF NOT EDIDocument.FIND('-') THEN
        ERROR(Text012,PurchaseHeader."Buy-from Vendor No.",DocumentNo);
      XMLDoc := EDIDocument."XML Document";

      IF EDIDocument."Packaged Map" THEN BEGIN
        IF EDIPackageMapIntegration.EDIPurchaseOrderSend(PurchaseHeader) THEN
        // if EDIPurchaseOrderSendPM.ExportPO(PurchaseHeader) THEN
          EXIT(TRUE)
        ELSE
          EXIT(FALSE);
      END;

      EDIDocument.CALCFIELDS("Element Mapping Error","Conditional Mapping Error");
      IF EDIDocument."Element Mapping Error" OR EDIDocument."Conditional Mapping Error" THEN
        ERROR(
          Text003,
          EDIDocument."Navision Document",EDIDocument."Trade Partner No.");

      // Update Segment Group
      ReleasePurchDoc.Reopen(PurchaseHeader);
      PurchaseLine.SETRANGE(PurchaseLine."Document No.",PurchaseHeader."No.");

      IF NOT PurchaseLine.FIND('-') THEN
        ERROR(Text011,PurchaseHeader."No.");

      SegmentGroup := 0;
      REPEAT
        GoodLine := TRUE;
        CASE PurchaseLine.Type OF
          PurchaseLine.Type::"G/L Account":
            IF NOT EDIDocument."Export G/L Account Lines" THEN
              GoodLine := FALSE;
          PurchaseLine.Type::"Charge (Item)":
            IF NOT EDIDocument."Export Item Charge Lines" THEN
              GoodLine := FALSE;
        END;
        IF NOT EDIDocument."Export Zero Qty. Lines" THEN BEGIN
          IF PurchaseLine."Outstanding Quantity" = 0 THEN
            GoodLine := FALSE;
        END;
        IF GoodLine THEN BEGIN
          SegmentGroup := SegmentGroup + 1;
          PurchaseLine."EDI Segment Group" := SegmentGroup;
          PurchaseLine.MODIFY;
        END;
      UNTIL PurchaseLine.NEXT = 0;
      ReleasePurchDoc.RUN(PurchaseHeader);
      COMMIT;

      EDISendDocHdr."Internal Doc No." := PurchaseHeader."EDI Internal Doc. No.";
      EDISendDocHdr."Navision Document" := DocumentNo;
      EDISendDocHdr."Document No." := PurchaseHeader."No.";
      EDISend.CreateSendHdr(EDITradePartner,EDIDocument,EDISendDocHdr);

      ReadHdrAssocTables;

      LineNumber := 0;
      NetShipWeight := 0;
      GrossShipWeight := 0;
      TotalSegments := 0;
      OrderTaxPercent := 0;
      PurchaseHeader.CALCFIELDS("Amount Including VAT",Amount);
      OrderTax := PurchaseHeader."Amount Including VAT" - PurchaseHeader.Amount;
      IF PurchaseHeader.Amount <> 0 THEN
        OrderTaxPercent := (OrderTax / PurchaseHeader.Amount) * 100;


      // Get first purchase line.
      PurchaseLine.SETFILTER("EDI Segment Group",'<>%1',0);
      IF NOT PurchaseLine.FIND('-') THEN
        ERROR(Text004,PurchaseHeader."No.");

      ReadLineAssocTables;

      CreateSegments;

      IF XMLDoc THEN
        EDIXMLManagement.ResponseIDSubstitution(EDISendDocHdr);

      EXIT(TRUE);
    END;

    PROCEDURE ExportWHSEShipAdvice@1(VAR CurrentPurchHdr@1240030001 : Record 38) ErrorCode@1240030000 : Boolean;
    BEGIN
      CLEAR(EDILoadEDIOutFields);

      PurchaseHeader.COPY(CurrentPurchHdr);
      IF PurchaseHeader."EDI Internal Doc. No." = '' THEN BEGIN
        EDISetup.GET;
        EDISetup."Last Internal Doc. No." := INCSTR(EDISetup."Last Internal Doc. No.");
        PurchaseHeader."EDI Internal Doc. No." := EDISetup."Last Internal Doc. No.";
        EDISetup.MODIFY;
      END;
      PurchaseHeader.CALCFIELDS(Amount,"Amount Including VAT");

      IF PurchaseHeader."Location Code" = '' THEN
        ERROR(Text005,PurchaseHeader."No.");

      Location.GET(PurchaseHeader."Location Code");
      IF NOT EDITradePartner.GET(Location."EDI Trading Partner ID") THEN
        ERROR(
          Text006,Location."EDI Trading Partner ID",
          PurchaseHeader."Location Code");

      DocumentNo := 'E_PURWSA';

      // Find EDI Document
      EDIDocument.SETRANGE("Trade Partner No.",EDITradePartner."No.");
      EDIDocument.SETFILTER(Status,'%1|%2',EDIDocument.Status::Test,EDIDocument.Status::Production);
      EDIDocument.SETRANGE("Navision Document",DocumentNo);
      EDIDocument.SETRANGE(Type,EDIDocument.Type::Export);
      IF NOT EDIDocument.FIND('-') THEN
        ERROR(Text002,Location.Code,DocumentNo);

      EDISendDocHdr."Internal Doc No." := PurchaseHeader."EDI Internal Doc. No.";
      EDISendDocHdr."Navision Document" := DocumentNo;
      EDISendDocHdr."Document No." := PurchaseHeader."No.";
      EDISend.CreateSendHdr(EDITradePartner,EDIDocument,EDISendDocHdr);

      ReadHdrAssocTables;

      LineNumber := 0;
      NetShipWeight := 0;
      GrossShipWeight := 0;

      // Get first purchase line.
      PurchaseLine.SETRANGE(PurchaseLine."Document No.",PurchaseHeader."No.");
      IF NOT PurchaseLine.FIND('-') THEN
        ERROR(Text004,PurchaseHeader."No.");

      ReadLineAssocTables;

      CreateSegments;

      EXIT(TRUE);
    END;

    PROCEDURE CreateSegments@24();
    VAR
      NodeOnly@1240020000 : Boolean;
      CreateNode@1240020001 : Boolean;
    BEGIN
      EDISegment.SETRANGE(EDISegment."Trade Partner No.",EDIDocument."Trade Partner No.");
      EDISegment.SETRANGE(EDISegment."Navision Document",EDIDocument."Navision Document");
      EDISegment.SETRANGE(EDISegment."EDI Document No.",EDIDocument."EDI Document No.");
      EDISegment.SETRANGE(EDISegment.Version,EDIDocument.Version);
      EDISegment.SETRANGE(EDISegment.Type,EDIDocument.Type);
      IF NOT EDISegment.FIND('-') THEN
        ERROR(Text007,EDIDocument."Trade Partner No.");
      REPEAT
        CASE EDISegment."Segment Type" OF
          EDISegment."Segment Type"::Command:
            BEGIN
              IF (EDISegment.Segment = 'LINE BEGIN') OR
                 (EDISegment."Node Name" = 'LINE BEGIN')
              THEN BEGIN
                EDISegment2.COPY(EDISegment);
                ProcessingLines := TRUE;
              END;
              IF (EDISegment.Segment = 'LINE END') OR
                 (EDISegment."Node Name" = 'LINE END')
              THEN BEGIN
                IF NOT ProcessingLines THEN
                  ERROR(Text008 +
                        Text009);
                IF PurchaseLine.NEXT <> 0 THEN BEGIN
                  ReadLineAssocTables;
                  EDISegment.GET(
                    EDISegment2."Trade Partner No.",EDISegment2."Navision Document",
                    EDISegment2."EDI Document No.",EDISegment2.Version,EDISegment2.Type,
                    EDISegment2."Processing Sequence",EDISegment2.Segment);
                END;
              END;
            END;
          EDISegment."Segment Type"::Segment:
            BEGIN
              LoopFinished := TRUE;
              BypassSegment := FALSE;
              NodeOnly := FALSE;
              CreateNode := TRUE;
              EDIElement.SETRANGE("Trade Partner No.",EDISegment."Trade Partner No.");
              EDIElement.SETRANGE("Navision Document",EDISegment."Navision Document");
              EDIElement.SETRANGE("EDI Document No.",EDISegment."EDI Document No.");
              EDIElement.SETRANGE(Version,EDISegment.Version);
              EDIElement.SETRANGE(Type,EDISegment.Type);
              EDIElement.SETRANGE(Segment,EDISegment.Segment);
              EDIElement.SETRANGE(Type,EDIElement.Type::Export);
              IF NOT EDIElement.FIND('-') THEN BEGIN
                IF XMLDoc THEN BEGIN
                  EDISegment.CALCFIELDS("Has Attributes","Node Text");
                  IF EDISegment."Node Text" OR EDISegment."Has Attributes" THEN
                    ERROR(
                      Text010,
                        EDISegment."Trade Partner No.",EDISegment."Navision Document",
                        EDISegment.Version,EDISegment."Node Name")
                  ELSE
                    NodeOnly := TRUE;
                END ELSE
                  ERROR(
                    Text010,
                      EDISegment."Trade Partner No.",EDISegment."EDI Document No.",
                      EDISegment.Version);
              END ELSE
                IF XMLDoc AND EDIElement."Node Text" THEN
                  CreateNode := FALSE;
              IF (XMLDoc = FALSE) OR (XMLDoc AND NodeOnly = FALSE) THEN BEGIN
                TotalSegments := TotalSegments + 1;
                CLEAR(OutFldArray);
                CLEAR(OutLenArray);
                CLEAR(OutErrorArray);
                i := 1;
                LoopCnt := 1;
                REPEAT
                  ReverseCrossRefArray[i] := '';
                  ReverseCrossReference := EDIElement."Reverse Cross Reference";
                  IF ((EDIElement."Fixed Value" <> '') AND (XMLDoc = FALSE)) OR
                     ((EDIElement."XML Fixed Value" <> '') AND (XMLDoc))
                  THEN BEGIN
                    IF XMLDoc THEN
                      OutFldArray[i] := EDIElement."XML Fixed Value"
                    ELSE
                      OutFldArray[i] := EDIElement."Fixed Value";
                  END ELSE
                    CASE EDIElement.Origin OF
                      EDIElement.Origin::Navision:
                        BEGIN
                          LoadDBFields;
                          IF ReverseCrossReference THEN BEGIN
                            CLEAR(EDIGetReverseCrossRef);
                            ReverseCrossRefArray[i] :=
                              EDIGetReverseCrossRef.GetReverseCrossRef(
                                EDIElement,EDISendDocHdr,OutFldArray[i]);
                              EDIGetReverseCrossRef.FormatOutput(
                                EDISendDocHdr,EDIElement,OutError2,ReverseCrossRefArray,BypassSegment2,i);
                          END;
                        END;
                    EDIElement.Origin::"EDI In":
                      BEGIN
                        EDIFormat.LoadEDIInFields(
                          EDIElement,PurchaseHeader."EDI Internal Doc. No.",PurchaseLine."EDI Segment Group",
                          ProcessingLines,i,OutFldArray,BooleanVariable,DateVariable,DecimalVariable,IntegerVariable,
                          TimeVariable,DateTimeVariable);
                      END;
                      EDIElement.Origin::"EDI Out":
                        LoadEDIOutFields;
                    END;
                  OutLenArray[i] := EDIElement.Length;
                  EDIFormat.FormatOutput(
                    EDITemplate,EDIElement,OutFldArray,OutErrorArray,i,BypassSegment,
                    BooleanVariable,DateVariable,DecimalVariable,IntegerVariable,TimeVariable,
                    DateTimeVariable);
                  IF ReverseCrossReference THEN
                    OutErrorArray[i] := OutError2;
                  EDIElementArray[i].COPY(EDIElement);
                  i := i + 1;
                UNTIL EDIElement.NEXT = 0;
              END;
              NewSegment := TRUE;
              i := 1;
              IF ReverseCrossReference THEN
                BypassSegment := BypassSegment2;
              IF (LoopCnt = 1) AND (EDISegment."Repeat Segment") THEN BEGIN
                RepeatSegment;
                LoopCnt := LoopCnt + 1;
              END;
              IF (NOT BypassSegment) AND (NOT OutputOff) THEN BEGIN
                IF XMLDoc AND CreateNode THEN BEGIN
                  EDISend.CreateSendLine(
                    EDISendDocHdr,EDIElementArray[i],OutFldArray[i],OutLenArray[i],OutErrorArray[i],
                    NewSegment,ReverseCrossRefValue,EDIDocument,TRUE,EDISegment);
                  NewSegment := FALSE;
                END;
                IF (XMLDoc = FALSE) OR (XMLDoc AND NodeOnly = FALSE) THEN
                  REPEAT
                    ReverseCrossRefValue := ReverseCrossRefArray[i];
                    EDISend.CreateSendLine(
                      EDISendDocHdr,EDIElementArray[i],OutFldArray[i],OutLenArray[i],OutErrorArray[i],
                      NewSegment,ReverseCrossRefValue,EDIDocument,FALSE,EDISegment);
                    NewSegment := FALSE;
                    i := i + 1;
                  UNTIL OutLenArray[i] = 0;
              END ELSE
                TotalSegments := TotalSegments - 1;
            END;
        END;
        IF (EDISegment."Repeat Segment") AND (NOT LoopFinished) THEN BEGIN
          GetNextRecord;
          EDISegment.NEXT(-1);
        END;
      UNTIL EDISegment.NEXT = 0;

      IF EDISetup."Send Document Error" THEN BEGIN
        EDISendDocHdr.CALCFIELDS("Data Error");
        IF EDISendDocHdr."Data Error" THEN BEGIN
          CLEAR(CreateEDIAlert);
          CreateEDIAlert.CreateAlertSendDocError(EDISendDocHdr."No.",1,FALSE);
        END;
      END;

      CASE EDISegment."Navision Document" OF
        'E_PURWSA':
          BEGIN
            PurchaseHeader."EDI Ship Adv. Gen." := TRUE;
            PurchaseHeader."EDI Ship Adv. Gen Date" := TODAY;
          END;
        'E_PURORD':
          BEGIN
            PurchaseHeader."EDI PO Generated" := TRUE;
            PurchaseHeader."EDI PO Gen. Date" := TODAY;
          END;
      END;
      PurchaseHeader.MODIFY;
    END;

    PROCEDURE LoadEDIOutFields@16();
    BEGIN
      BooleanVariable := FALSE;
      DateVariable := 0D;
      IntegerVariable := 0;
      DecimalVariable := 0;
      TimeVariable := 0T;
      DateTimeVariable := 0DT;

      IF EDIElement.Origin = EDIElement.Origin::"EDI Out" THEN BEGIN
        CASE EDIElement."Field Name" OF
          ELSE BEGIN
            LoadEDIOutVariable;
            LoadEDIOutRecordRef;
            EDILoadEDIOutFields.PurchaseOrderSendEDIOut(
              EDIElement,OutFldArray,DecimalVariable,IntegerVariable,DateVariable,
              BooleanVariable,TimeVariable,DateTimeVariable,i);
          END;
        END;
      END;
    END;

    PROCEDURE UpdateLineTotals@28();
    BEGIN
      LineNumber := LineNumber + 1;

      TotalUnits := TotalUnits + PurchaseLine.Quantity;

      NetShipWeight := NetShipWeight + (PurchaseLine."Net Weight" * PurchaseLine.Quantity);
      GrossShipWeight := GrossShipWeight + (PurchaseLine."Gross Weight" * PurchaseLine.Quantity);
    END;

    PROCEDURE LoadDBFields@23();
    BEGIN
      CASE EDIElement."NAV Table No." OF
        3:
          BEGIN
            RecRef.OPEN(3);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(PaymentTerms);
          END;
        14:
          BEGIN
            RecRef.OPEN(14);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(Location);
          END;
        27:
          BEGIN
            RecRef.OPEN(27);
            IF RecRef.FIND('-') THEN BEGIN
              RecRef.GETTABLE(Item);
            END;
          END;
        38:
          BEGIN
            RecRef.OPEN(38);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(PurchaseHeader);
          END;
        39:
          BEGIN
            RecRef.OPEN(39);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(PurchaseLine);
          END;
        43:
          BEGIN
            RecRef.OPEN(43);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(PurchCommentLine);
          END;
        79:
          BEGIN
            RecRef.OPEN(79);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(CompanyInformation);
          END;
        5717:
          BEGIN
            RecRef.OPEN(5717);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(ItemCrossReference);
          END;
        10043:
          BEGIN
            RecRef.OPEN(43);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(PurchCommentLineDetail);
          END;
        20023:
          BEGIN
            RecRef.OPEN(23);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(BuyfromVendor);
          END;
        20024:
          BEGIN
            RecRef.OPEN(23);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(PaytoVendor);
          END;
        14002350:
          BEGIN
            RecRef.OPEN(14002350);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDITemplate);
          END;
        14002353:
          BEGIN
            RecRef.OPEN(14002353);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDIDocument);
          END;
        14002354:
          BEGIN
            RecRef.OPEN(14002354);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDISegment);
          END;
        14002360:
          BEGIN
            RecRef.OPEN(14002360);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDITradePartner);
          END;
          14002369:
          BEGIN
            RecRef.OPEN(14002369);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDISendDocHdr);
          END;
        ELSE
          EXIT;
      END;

      EDILoadDBFields.LoadDBFields(
        EDIElement,OutFldArray,DecimalVariable,IntegerVariable,DateVariable,
        BooleanVariable,TimeVariable,DateTimeVariable,i,RecRef);
      RecRef.CLOSE;
    END;

    PROCEDURE ReadHdrAssocTables@26();
    BEGIN
      // Get supporting data from other tables
      EDITemplate.GET(EDIDocument."EDI Template Code");

      CompanyInformation.GET;

      //</TPZEDI>
      PurchaseHeader.CALCFIELDS(PurchaseHeader.Amount,PurchaseHeader."Amount Including VAT");
      PaymentTerms.INIT;
      IF PurchaseHeader."Payment Terms Code" <> '' THEN BEGIN
        PaymentTerms.GET(PurchaseHeader."Payment Terms Code");
        DiscPercent := PaymentTerms."Discount %";
        DiscAmt := ROUND((PurchaseHeader."Amount Including VAT" * PaymentTerms."Discount %") / 100);
        DiscountedAmt := PurchaseHeader."Amount Including VAT" - DiscAmt;
        DiscDays := (CALCDATE(PaymentTerms."Discount Date Calculation",TODAY) - TODAY);
        NetDays := (CALCDATE(PaymentTerms."Due Date Calculation",TODAY) - TODAY);
      END ELSE BEGIN
        NetDays := 0;
        DiscDays := 0;
        DiscAmt := 0;
        DiscPercent := 0;
      END;
      //</TPZEDI>

      BuyfromVendor.GET(PurchaseHeader."Buy-from Vendor No.");

      PaytoVendor.GET(PurchaseHeader."Pay-to Vendor No.");

      SalespersonPurchaser.INIT;
      IF PurchaseHeader."Purchaser Code" <> '' THEN
        SalespersonPurchaser.GET(PurchaseHeader."Purchaser Code");

      ShipmentMethod.INIT;
      IF PurchaseHeader."Shipment Method Code" <> '' THEN
        ShipmentMethod.GET(PurchaseHeader."Shipment Method Code");

      PurchCommentLine.RESET;
      PurchCommentLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchCommentLine.SETRANGE("No.",PurchaseHeader."No.");
      PurchCommentLine.SETRANGE("Document Line No.",0);
      IF NOT PurchCommentLine.FIND('-') THEN
        PurchCommentLine.INIT;

      // Add any other tables associated with the purchase header here.
    END;

    PROCEDURE ReadLineAssocTables@27();
    BEGIN
      UpdateLineTotals;

      // Get Line supporting data from other tables.
      IF PurchaseLine.Type = PurchaseLine.Type::Item THEN
        Item.GET(PurchaseLine."No.")
      ELSE
        Item.INIT;

      ItemCrossReference.RESET;
      ItemCrossReference.SETRANGE("Item No.",PurchaseLine."No.");
      ItemCrossReference.SETRANGE("Variant Code",PurchaseLine."Variant Code");
      ItemCrossReference.SETRANGE("Unit of Measure",PurchaseLine."Unit of Measure Code");
      ItemCrossReference.SETFILTER(
        "Cross-Reference Type",'<>%1',ItemCrossReference."Cross-Reference Type"::Customer);
      ItemCrossReference.SETFILTER(
        "Cross-Reference Type No.",'%1|%2',PurchaseHeader."Buy-from Vendor No.",'');
      ItemCrossReference.SETRANGE("Discontinue Bar Code",FALSE);
      IF NOT ItemCrossReference.FIND('-') THEN BEGIN
        ItemCrossReference.SETRANGE("Cross-Reference Type No.",'');
        IF NOT ItemCrossReference.FIND('-') THEN
          ItemCrossReference.INIT;
      END;

      PurchCommentLineDetail.RESET;
      PurchCommentLineDetail.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchCommentLineDetail.SETRANGE("No.",PurchaseHeader."No.");
      PurchCommentLineDetail.SETRANGE("Document Line No.",PurchaseLine."Line No.");
      IF NOT PurchCommentLineDetail.FIND('-') THEN
        PurchCommentLineDetail.INIT;

      //
      // Add any other tables associated with the purchase line here.
      //
    END;

    PROCEDURE RepeatSegment@1240030005() : Boolean;
    VAR
      PurchCommentLine2@1240020000 : Record 43;
      PurchCommentLineDetail2@1240020001 : Record 43;
      EDIElement2@1240020002 : Record 14002355;
      LastRecord@1240030002 : Boolean;
      Found@1240020004 : Boolean;
    BEGIN
      LoopFinished := TRUE;
      LastRecord := FALSE;
      Found := FALSE;
      RecordNo := 0;

      EDIElement2.SETRANGE("Trade Partner No.",EDISegment."Trade Partner No.");
      EDIElement2.SETRANGE("Navision Document",EDISegment."Navision Document");
      EDIElement2.SETRANGE("EDI Document No.",EDISegment."EDI Document No.");
      EDIElement2.SETRANGE(Version,EDISegment.Version);
      EDIElement2.SETRANGE(Type,EDISegment.Type);
      EDIElement2.SETRANGE(Segment,EDISegment.Segment);
      IF EDIElement2.FIND('-') THEN
        REPEAT
          CASE EDIElement2.Origin OF
            EDIElement2.Origin::"EDI Out":
              BEGIN
              END;
            EDIElement2.Origin::Navision:
              CASE EDIElement2."NAV Table No." OF
                DATABASE::"Purch. Comment Line":
                  BEGIN
                    Found := TRUE;
                    RecordNo := 1;
                    PurchCommentLine2.COPY(PurchCommentLine);
                    IF EDISegment.Maximum <> 0 THEN BEGIN
                      IF NOT BypassSegment THEN
                        RepeatCount := RepeatCount + 1;
                      IF (PurchCommentLine2.NEXT = 0) OR (RepeatCount = EDISegment.Maximum) THEN
                        LastRecord := TRUE
                      ELSE
                        LoopFinished := FALSE;
                    END ELSE BEGIN
                      IF PurchCommentLine2.NEXT = 0 THEN
                        LastRecord := TRUE
                      ELSE
                        LoopFinished := FALSE;
                    END;
                  END;
                10043:
                  BEGIN
                    Found := TRUE;
                    RecordNo := 100;
                    PurchCommentLineDetail2.COPY(PurchCommentLineDetail);
                    IF EDISegment.Maximum <> 0 THEN BEGIN
                      IF NOT BypassSegment THEN
                        RepeatCount := RepeatCount + 1;
                      IF (PurchCommentLineDetail2.NEXT = 0) OR (RepeatCount = EDISegment.Maximum) THEN
                        LastRecord := TRUE
                      ELSE
                        LoopFinished := FALSE;
                    END ELSE BEGIN
                      IF PurchCommentLineDetail2.NEXT = 0 THEN
                        LastRecord := TRUE
                      ELSE
                        LoopFinished := FALSE;
                    END;
                  END;

                // Add additional tables here
              END;
          END;
        UNTIL (EDIElement2.NEXT = 0) OR (Found = TRUE);

      IF LastRecord THEN BEGIN
        LoopFinished := TRUE;
        RecordNo := 0;
        RepeatCount := 0;
      END;
    END;

    PROCEDURE GetNextRecord@1240020000();
    BEGIN
      CASE RecordNo OF
        1:
          PurchCommentLine.NEXT;
        100:
          PurchCommentLineDetail.NEXT;

          // Add additional tables here

      END;
    END;

    PROCEDURE SetProcessID@1240020001(ID@1240020000 : Integer);
    BEGIN
      ProcessID := ID;
    END;

    PROCEDURE LoadEDIOutRecordRef@1240020002();
    BEGIN
      RecRef.OPEN(3);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(PaymentTerms);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(10);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(ShipmentMethod);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(13);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(SalespersonPurchaser);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(23);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(BuyfromVendor);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'Buy-from Vendor');
        RecRef.GETTABLE(PaytoVendor);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'Pay-to Vendor');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(27);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(Item);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(38);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(PurchaseHeader);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(39);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(PurchaseLine);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(43);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(PurchCommentLine);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(79);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(CompanyInformation);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(5717);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(ItemCrossReference);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14002350);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(EDITemplate);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14002353);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(EDIDocument);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14002359);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(EDISendDocHdr);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14002360);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(EDITradePartner);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;
    END;

    PROCEDURE LoadEDIOutVariable@1240020003();
    BEGIN
      EDILoadEDIOutFields.SetPurchaseOrderSendVariable(
        LineNumber,TotalUnits,NetShipWeight,GrossShipWeight,TotalSegments);
    END;

    PROCEDURE RoundValue@1240030001(DecimalValue@1240030004 : Decimal) RoundedValue : Decimal;
    VAR
      RoundingPrecision@1240030003 : Decimal;
      DecimalPlaces@1240030001 : Integer;
      Decimals@1240030000 : Integer;
      RoundingPrecisionString@1240030002 : Text[20];
    BEGIN
      IF EDIElement."NAV Data Type" = EDIElement."NAV Data Type"::Decimal THEN BEGIN
        Decimals := EDIElement.Decimals;
        DecimalPlaces := 0;
        IF Decimals > 0 THEN BEGIN
          RoundingPrecisionString  := '0.1';
          IF Decimals = 1 THEN
            DecimalPlaces := 1
          ELSE
            DecimalPlaces := Decimals - 1;
          WHILE DecimalPlaces > 0 DO BEGIN
            RoundingPrecisionString := INSSTR(RoundingPrecisionString,'0',3);
            DecimalPlaces := DecimalPlaces - 1;
          END;
        END ELSE
          RoundingPrecisionString := '1';
        EVALUATE(RoundingPrecision,RoundingPrecisionString);
        RoundedValue := ROUND(DecimalValue,RoundingPrecision);
      END;
    END;

    BEGIN
    {
      2015-07-08 TPZ848 TAKHMETO
        Function LoadEDIOutField has been modified
      2016-11-22 TPZEDI SDESAI
        LoadEDIOutField now refers to CU - E.D.I. Load EDI Out Fields (14000381)
        Changes made here(TPZ848) are transferred to Function: PurchaseOrderSendEDIOutin CU 14000381.
    }
    END.
  }
}

