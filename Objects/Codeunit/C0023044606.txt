OBJECT Codeunit 23044606 DSHIP E-mail Management
{
  OBJECT-PROPERTIES
  {
    Date=01/21/19;
    Time=[ 1:03:19 PM];
    Version List=DSHIP2.2.3;
  }
  PROPERTIES
  {
    TableNo=23044615;
    OnRun=VAR
            lcuSMTP@1000000000 : Codeunit 400;
            lisLoadBody@1000000002 : InStream;
            lbtEmailBody@1000000003 : BigText;
            lsEmailBody@1000000004 : Text;
          BEGIN
            //<FUNC>
            //  Description: Should be launched as a separate session. Takes the rec and emails it
            //  Called From: DSHIP Package List Management (CU23044600)
            //               DSHIP Package Rate Management (CU23044602)
            //  Side Effect: None
            //</FUNC>

            IF ( FINDSET(FALSE) ) THEN BEGIN
              REPEAT
                CALCFIELDS("E-mail Body");
                "E-mail Body".CREATEINSTREAM(lisLoadBody);
                lbtEmailBody.READ(lisLoadBody);
                lbtEmailBody.GETSUBTEXT(lsEmailBody, 1, lbtEmailBody.LENGTH);

                lcuSMTP.CreateMessage("Sender Name",//name
                                      "Sender E-mail",//email of sender
                                      "Receiver E-mail",//email of receiver
                                      "E-mail Subject",//subject
                                      lsEmailBody,//body
                                      TRUE);//use html formatting
                lcuSMTP.Send;
              UNTIL Rec.NEXT = 0;
            END; // if rec.findset
          END;

  }
  CODE
  {
    VAR
      recDShipConfig@1000000002 : Record 23044600;
      recSMTPConfig@1000000001 : Record 409;
      tcConfigSMTPServer@1000000003 : TextConst 'ENU=The SMTP Server has not been configured.';
      tcNoUserSMTPConfig@1000000000 : TextConst 'ENU=The SMTP Configuration needs to have a user defined.';
      cuPackMgmt@100000000 : Codeunit 23044601;
      sTrackingURL@1000000004 : Text;
      sCarrierName@1000000005 : Text;

    PROCEDURE initEmailBuffer@1000000002(VAR precrRecRef@1000000000 : RecordRef;VAR ptrecDShipEmailDetailsBuffer@1000000001 : TEMPORARY Record 23044615);
    VAR
      lrecSalesHeader@1000000002 : Record 36;
      lrecWhseShipHeader@1000000003 : Record 7320;
      lrecLPHeader@1000000004 : Record 23044505;
      ltrecOrderBuffer@1000000008 : TEMPORARY Record 23044601;
      lcuRateMgmt@1000000005 : Codeunit 23044602;
      loptDocType@1000000006 : Option;
      lcodDocNo@1000000007 : Code[20];
      lsEmail@1000000009 : Text;
    BEGIN
      //<FUNC>
      //  Description: Sets the email details buffer based on the order
      //  Called From: DSHIP Package List Management (CU23044600)
      //               DSHIP Package Rate Management (CU23044602)
      //  Side Effect: None
      //</FUNC>

      checkRequirements;

      CASE precrRecRef.NUMBER OF
        DATABASE::"Sales Header":
          BEGIN
            precrRecRef.SETTABLE(lrecSalesHeader);
            setCarrierName(lrecSalesHeader."Shipping Agent Code");
            setTrackingURL(lrecLPHeader."Source Document"::"Sales Order", lrecSalesHeader."No.");
            setEmailSalesOrder(lrecSalesHeader, ptrecDShipEmailDetailsBuffer);
            loptDocType := ltrecOrderBuffer."Document Type"::"Sales Order";
            lcodDocNo := lrecSalesHeader."No.";
          END;
        DATABASE::"Warehouse Shipment Header":
          BEGIN
            precrRecRef.SETTABLE(lrecWhseShipHeader);
            setCarrierName(lrecWhseShipHeader."Shipping Agent Code");
            setTrackingURL(lrecLPHeader."Source Document"::Shipment, lrecWhseShipHeader."No.");
            setEmailWhseShip(lrecWhseShipHeader, ptrecDShipEmailDetailsBuffer);
            loptDocType := ltrecOrderBuffer."Document Type"::"Warehouse Shipment";
            lcodDocNo := lrecWhseShipHeader."No.";
          END;
      END;

      IF ( lcuRateMgmt.callTrackingEmailExtension(recDShipConfig."Shipment Extension Codeunit", loptDocType, lcodDocNo, lsEmail) ) THEN BEGIN
        ptrecDShipEmailDetailsBuffer."Receiver E-mail" := lsEmail;
        ptrecDShipEmailDetailsBuffer.MODIFY(FALSE);
      END;
    END;

    LOCAL PROCEDURE checkRequirements@1000000072();
    BEGIN
      //<FUNC>
      //  Description: Checks error states
      //  Called From: This codeunit (23044606)
      //  Side Effect: None
      //</FUNC>

      recDShipConfig.GET;
      recSMTPConfig.GET;

      IF ( recSMTPConfig."SMTP Server" = '' ) THEN
        ERROR(tcConfigSMTPServer);

      IF ( recSMTPConfig."User ID" = '' ) THEN
        ERROR(tcNoUserSMTPConfig);
    END;

    LOCAL PROCEDURE setEmailSalesOrder@1000000015(VAR precSalesHeader@1000000000 : Record 36;VAR ptrecDShipEmailDetailsBuffer@1000000001 : TEMPORARY Record 23044615);
    VAR
      lasParameters@1000000002 : ARRAY [10] OF Text;
      liEmailSource@1000000003 : Integer;
      liID@1000000008 : Integer;
    BEGIN
      //<FUNC>
      //  Description: Sends the customer an email based on options configured in DSHIP
      //  Called From: This codeunit (23044606)
      //  Side Effect: None
      //</FUNC>

      IF ( ptrecDShipEmailDetailsBuffer.FINDLAST ) THEN
        liID := ptrecDShipEmailDetailsBuffer.ID + 1;
      ptrecDShipEmailDetailsBuffer.RESET;
      ptrecDShipEmailDetailsBuffer.ID := liID;
      ptrecDShipEmailDetailsBuffer."Sender E-mail" := recSMTPConfig."User ID";

      fillParametersFromSalesHeader(lasParameters, precSalesHeader);

      liEmailSource := applyCustomerOptions(precSalesHeader."Sell-to Customer No.", precSalesHeader."Ship-to Code", lasParameters, ptrecDShipEmailDetailsBuffer);
      IF ( ptrecDShipEmailDetailsBuffer."Receiver E-mail" = '' ) THEN
          ptrecDShipEmailDetailsBuffer."Receiver E-mail" := getReceiverEmailFromSalesHeader(precSalesHeader, liEmailSource);

      ptrecDShipEmailDetailsBuffer.INSERT;
    END;

    LOCAL PROCEDURE setEmailWhseShip@1000000016(VAR precWhseShipHeader@1000000000 : Record 7320;VAR ptrecDShipEmailDetailsBuffer@1000000001 : TEMPORARY Record 23044615);
    VAR
      lrecServiceHeader@1000000005 : Record 5900;
      lrecSalesHeader@1000000002 : Record 36;
      lrecWhseShipLine@1000000004 : Record 7321;
      lqDShipWhseShipLine@1000000003 : Query 23044600;
    BEGIN
      //<FUNC>
      //  Description: Send the customers of associated Sales Orders an email
      //  Called From: This codeunit (2304460)
      //  Side Effect: None
      //</FUNC>

      lqDShipWhseShipLine.SETRANGE(No, precWhseShipHeader."No.");
      lqDShipWhseShipLine.OPEN;
      WHILE lqDShipWhseShipLine.READ DO BEGIN
      //  IF (( lqDShipWhseShipLine.Source_Document = lqDShipWhseShipLine.Source_Document::"Sales Order" ) AND
        IF ( (lqDShipWhseShipLine.Source_Document = lrecWhseShipLine."Source Document"::"Sales Order") AND
             (lrecSalesHeader.GET(lrecSalesHeader."Document Type"::Order, lqDShipWhseShipLine.Source_No)) ) THEN BEGIN
          setEmailSalesOrder(lrecSalesHeader, ptrecDShipEmailDetailsBuffer);
          lqDShipWhseShipLine.CLOSE;
          EXIT;
        END ELSE IF ( (lqDShipWhseShipLine.Source_Document = lrecWhseShipLine."Source Document"::"Service Order") AND
             (lrecServiceHeader.GET(lrecServiceHeader."Document Type"::Order, lqDShipWhseShipLine.Source_No)) ) THEN BEGIN
          setEmailServiceOrder(lrecServiceHeader, ptrecDShipEmailDetailsBuffer);
          lqDShipWhseShipLine.CLOSE;
          EXIT;
        END;
      END; // while lqDShipWhseShipLine.READ
      lqDShipWhseShipLine.CLOSE;
    END;

    LOCAL PROCEDURE setEmailServiceOrder@1000000001(VAR precServiceHeader@1000000000 : Record 5900;VAR ptrecDShipEmailDetailsBuffer@1000000001 : TEMPORARY Record 23044615);
    VAR
      lasParameters@1000000004 : ARRAY [10] OF Text;
      liEmailSource@1000000003 : Integer;
      liID@1000000002 : Integer;
    BEGIN
      //<FUNC>
      //  Description: Sends the customer an email based on options configured in DSHIP
      //  Called From: This codeunit (23044606)
      //  Side Effect: None
      //</FUNC>

      IF ( ptrecDShipEmailDetailsBuffer.FINDLAST ) THEN
        liID := ptrecDShipEmailDetailsBuffer.ID + 1;
      ptrecDShipEmailDetailsBuffer.RESET;
      ptrecDShipEmailDetailsBuffer.ID := liID;
      ptrecDShipEmailDetailsBuffer."Sender E-mail" := recSMTPConfig."User ID";

      fillParametersFromServiceHeader(lasParameters, precServiceHeader);

      liEmailSource := applyCustomerOptions(precServiceHeader."Customer No.", precServiceHeader."Ship-to Code", lasParameters, ptrecDShipEmailDetailsBuffer);
      IF ( ptrecDShipEmailDetailsBuffer."Receiver E-mail" = '' ) THEN
          ptrecDShipEmailDetailsBuffer."Receiver E-mail" := getReceiverEmailFromServiceHeader(precServiceHeader, liEmailSource);

      ptrecDShipEmailDetailsBuffer.INSERT;
    END;

    LOCAL PROCEDURE setTrackingURL@1000000009(poptSourceDoc@1000000001 : Option;pcodSourceNo@1000000002 : Code[20]);
    VAR
      lrecLPHeader@1000000000 : Record 23044505;
    BEGIN
      //<FUNC>
      //  Description: Sets the global sTrackingURL
      //  Called From: This codeunit (23044606)
      //  Side Effect: None
      //</FUNC>

      lrecLPHeader.SETRANGE("No.", cuPackMgmt.CreateLPNoFilterFirstWithLPSourceDoc(poptSourceDoc, pcodSourceNo));
      IF ( lrecLPHeader.FINDFIRST ) THEN
        sTrackingURL := lrecLPHeader."Shipment Tracking URL"
      ELSE
        sTrackingURL := '';
    END;

    LOCAL PROCEDURE setCarrierName@1000000025(codShipAgent@1000000001 : Code[20]);
    VAR
      lrecShipAgent@1000000000 : Record 291;
    BEGIN
      //<FUNC>
      //  Description: Sets the global sCarrierName
      //  Called From: This codeunit (23044606)
      //  Side Effect: None
      //</FUNC>

      IF ( lrecShipAgent.GET(codShipAgent) ) THEN
        sCarrierName := lrecShipAgent.Name;
    END;

    LOCAL PROCEDURE applyCustomerOptions@1000000012(pcodCustomer@1000000011 : Code[20];pcodShipTo@1000000000 : Code[20];VAR pasParameters@1000000003 : ARRAY [10] OF Text;VAR ptrecDShipEmailDetailsBuffer@1000000012 : TEMPORARY Record 23044615) riEmailSource : Integer;
    VAR
      lrecCustomerOptions@1000000005 : Record 23044614;
      lrecEmailTmpl@1000000006 : Record 23044613;
      lcodEmailTmpl@1000000007 : Code[20];
      lsBody@1000000002 : Text;
      lbtEmailBody@1000000009 : BigText;
      lisLoadBody@1000000010 : InStream;
      losSaveBody@1000000001 : OutStream;
    BEGIN
      //<FUNC>
      //  Description: Retrieves customer options and a parameter replaced email template
      //  Called From: This codeunit (23044606)
      //  Side Effect: None
      //</FUNC>

      // get the defaults
      lcodEmailTmpl := recDShipConfig."Tracking E-mail Template";
      riEmailSource := recDShipConfig."Tracking E-mail Customer Src.";

      IF ( lrecCustomerOptions.GET(pcodCustomer, pcodShipTo) ) THEN BEGIN
        IF ( lrecCustomerOptions."E-Mail Template Code" <> '' ) THEN
          lcodEmailTmpl := lrecCustomerOptions."E-Mail Template Code";
        riEmailSource := lrecCustomerOptions."Customer E-mail Source";
        IF ( lrecCustomerOptions."Customer E-mail Source" = lrecCustomerOptions."Customer E-mail Source"::"Manual E-mail Entry") THEN BEGIN
          ptrecDShipEmailDetailsBuffer."Receiver E-mail" := lrecCustomerOptions."Manual E-mail";
        END; // if "manual e-mail"
      END; // if lrecCxOpt.GET

      IF ( lrecEmailTmpl.GET(lcodEmailTmpl) ) THEN BEGIN
        ptrecDShipEmailDetailsBuffer."Sender Name" := lrecEmailTmpl."Sender Name";

        ptrecDShipEmailDetailsBuffer."E-mail Subject" := replacePlaceholders(pasParameters, lrecEmailTmpl."E-mail Subject");

        lrecEmailTmpl.CALCFIELDS("E-mail Body");
        IF ( lrecEmailTmpl."E-mail Body".HASVALUE ) THEN BEGIN
          lrecEmailTmpl."E-mail Body".CREATEINSTREAM(lisLoadBody);
          lbtEmailBody.READ(lisLoadBody);
          lbtEmailBody.GETSUBTEXT(lsBody, 1, lbtEmailBody.LENGTH);
          lsBody := replacePlaceholders(pasParameters, lsBody);
          ptrecDShipEmailDetailsBuffer."E-mail Body".CREATEOUTSTREAM(losSaveBody);
          losSaveBody.WRITETEXT(lsBody);
        END; // if "e-mail body".hasvalue

      END; // if lrecEmailTmpl.GET
    END;

    LOCAL PROCEDURE replacePlaceholders@1000000003(VAR pasParameters@1000000000 : ARRAY [10] OF Text;VAR psToReplace@1000000001 : Text) : Text;
    BEGIN
      //<FUNC>
      //  Description: Replaces the placeholders with the corresponding data
      //               %1  - Ship-From Location Name [if blank, Company Name]
      //               %2  - Order No.
      //               %3  - External Document No.
      //               %4  - Ship-to Contact Name [if blank, sell-to contact, if blank, sell-to customer name]
      //               %5  - Carrier Name
      //               %6  - Tracking URL
      //               %7  - Custom (future feature)
      //               %8  - Custom (future feature)
      //               %9  - Custom (future feature)
      //               %10 - Custom (future feature)
      //  Called From: This codeunit (23044606)
      //  Side Effect: None
      //</FUNC>

      EXIT(STRSUBSTNO(psToReplace,
                      pasParameters[1],
                      pasParameters[2],
                      pasParameters[3],
                      pasParameters[4],
                      sCarrierName,
                      sTrackingURL));
    END;

    LOCAL PROCEDURE getReceiverEmailFromSalesHeader@1000000033(VAR precSalesHeader@1000000000 : Record 36;poptEmailCxSrc@1000000001 : Option) : Text[250];
    VAR
      lrecCustomer@1000000002 : Record 18;
      lrecContact@1000000003 : Record 5050;
      lrecShipToAddr@1000000004 : Record 222;
      lrecCxOpt@1000000005 : Record 23044614;
    BEGIN
      //<FUNC>
      //  Description: Retrieves the send to email address depending on configured option
      //  Called From: This codeunit (23044606)
      //  Side Effect: None
      //</FUNC>

      CASE poptEmailCxSrc OF
        recDShipConfig."Tracking E-mail Customer Src."::"Sell-To Customer No.":
        BEGIN
          lrecCustomer.GET(precSalesHeader."Sell-to Customer No.");
          EXIT(lrecCustomer."E-Mail");
        END;
        recDShipConfig."Tracking E-mail Customer Src."::"Sell-To Contact No.":
        BEGIN
          lrecContact.GET(precSalesHeader."Sell-to Contact No.");
          EXIT(lrecContact."E-Mail");
        END;
        recDShipConfig."Tracking E-mail Customer Src."::"Ship-To Address":
        BEGIN
          IF ( precSalesHeader."Ship-to Code" <> '' ) THEN BEGIN
            lrecShipToAddr.GET(precSalesHeader."Sell-to Customer No.", precSalesHeader."Ship-to Code");
            EXIT(lrecShipToAddr."E-Mail");
          END ELSE BEGIN
            // default to sell-to cx no if ship-to doesn't exist
            EXIT(getReceiverEmailFromSalesHeader(precSalesHeader,
                                  recDShipConfig."Tracking E-mail Customer Src."::"Sell-To Customer No."));
          END; // if "ship-to code" <> ''
        END;
        recDShipConfig."Tracking E-mail Customer Src."::"Bill-To Customer No.":
        BEGIN
          lrecCustomer.GET(precSalesHeader."Bill-to Customer No.");
          EXIT(lrecCustomer."E-Mail");
        END;
        recDShipConfig."Tracking E-mail Customer Src."::"Bill-To Contact No.":
        BEGIN
          lrecContact.GET(precSalesHeader."Bill-to Contact No.");
          EXIT(lrecContact."E-Mail");
        END;
      END;
    END;

    LOCAL PROCEDURE getReceiverEmailFromServiceHeader@1000000018(VAR precServiceHeader@1000000000 : Record 5900;poptEmailCxSrc@1000000001 : Option) : Text[250];
    VAR
      lrecCustomer@1000000002 : Record 18;
      lrecContact@1000000003 : Record 5050;
      lrecShipToAddr@1000000004 : Record 222;
      lrecCxOpt@1000000005 : Record 23044614;
    BEGIN
      //<FUNC>
      //  Description: Retrieves the send to email address depending on configured option
      //  Called From: This codeunit (23044606)
      //  Side Effect: None
      //</FUNC>

      CASE poptEmailCxSrc OF
        recDShipConfig."Tracking E-mail Customer Src."::"Sell-To Customer No.":
        BEGIN
          lrecCustomer.GET(precServiceHeader."Customer No.");
          EXIT(lrecCustomer."E-Mail");
        END;
        recDShipConfig."Tracking E-mail Customer Src."::"Sell-To Contact No.":
        BEGIN
          lrecContact.GET(precServiceHeader."Contact No.");
          EXIT(lrecContact."E-Mail");
        END;
        recDShipConfig."Tracking E-mail Customer Src."::"Ship-To Address":
        BEGIN
          IF ( precServiceHeader."Ship-to Code" <> '' ) THEN BEGIN
            lrecShipToAddr.GET(precServiceHeader."Customer No.", precServiceHeader."Ship-to Code");
            EXIT(lrecShipToAddr."E-Mail");
          END ELSE BEGIN
            // default to sell-to cx no if ship-to doesn't exist
            EXIT(getReceiverEmailFromServiceHeader(precServiceHeader,
                                  recDShipConfig."Tracking E-mail Customer Src."::"Sell-To Customer No."));
          END; // if "ship-to code" <> ''
        END;
        recDShipConfig."Tracking E-mail Customer Src."::"Bill-To Customer No.":
        BEGIN
          lrecCustomer.GET(precServiceHeader."Bill-to Customer No.");
          EXIT(lrecCustomer."E-Mail");
        END;
        recDShipConfig."Tracking E-mail Customer Src."::"Bill-To Contact No.":
        BEGIN
          lrecContact.GET(precServiceHeader."Bill-to Contact No.");
          EXIT(lrecContact."E-Mail");
        END;
      END;
    END;

    LOCAL PROCEDURE fillParametersFromSalesHeader@1000000004(VAR pasParameters@1000000000 : ARRAY [10] OF Text;precSalesHeader@1000000001 : Record 36);
    VAR
      lrecLocation@1000000006 : Record 14;
    BEGIN
      //<FUNC>
      //  Description: Fills the parameter array from the sales header
      //  Called From: This codeunit (CU23044606)
      //  Side Effect: None
      //</FUNC>

      pasParameters[2] := precSalesHeader."No.";
      pasParameters[3] := precSalesHeader."External Document No.";

      IF ( lrecLocation.GET(precSalesHeader."Location Code") ) THEN
        pasParameters[1] := lrecLocation.Name
      ELSE
        pasParameters[1] := COMPANYNAME;

      pasParameters[4] := precSalesHeader."Ship-to Contact";
      IF ( pasParameters[4] = '' ) THEN
        pasParameters[4] := precSalesHeader."Sell-to Contact";
      IF ( pasParameters[4] = '' ) THEN
        pasParameters[4] := precSalesHeader."Sell-to Customer Name";
    END;

    LOCAL PROCEDURE fillParametersFromServiceHeader@1000000007(VAR pasParameters@1000000000 : ARRAY [10] OF Text;precServiceHeader@1000000001 : Record 5900);
    VAR
      lrecLocation@1000000006 : Record 14;
    BEGIN
      //<FUNC>
      //  Description: Fills the parameter array from the service header
      //  Called From: This codeunit (CU23044606)
      //  Side Effect: None
      //</FUNC>

      pasParameters[2] := precServiceHeader."No.";

      IF ( lrecLocation.GET(precServiceHeader."Location Code") ) THEN
        pasParameters[1] := lrecLocation.Name
      ELSE
        pasParameters[1] := COMPANYNAME;

      pasParameters[4] := precServiceHeader."Ship-to Contact";
      IF ( pasParameters[4] = '' ) THEN
        pasParameters[4] := precServiceHeader."Contact Name";
    END;

    BEGIN
    {
      ************************
      Copyright Notice
      This objects content is copyright of Insight Works 2011.  All rights reserved.
      Any redistribution or reproduction of part or all of the contents in any form is prohibited.
      ************************
    }
    END.
  }
}

