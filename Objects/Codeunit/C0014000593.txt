OBJECT Codeunit 14000593 AFP Job Queue
{
  OBJECT-PROPERTIES
  {
    Date=03/01/20;
    Time=12:00:00 PM;
    Version List=UBP3.02;
  }
  PROPERTIES
  {
    TableNo=472;
    OnRun=VAR
            LogEntryNo@1240020000 : Integer;
            VendBuyingCalendar@1240020021 : Record 14000563;
            UBPLog@1240020020 : Record 14000574;
            CreateSuggestedOrder@1240020019 : Codeunit 14000559;
            InventoryManagement@1240020018 : Codeunit 14000553;
            PeriodEndYesNo@1240020017 : Codeunit 14000556;
            CreateMultipleSugOrder@1240020016 : Codeunit 14000592;
            CalculateSurplus@1240020015 : Codeunit 14000577;
            CreateReplSugTranYN@1240020014 : Codeunit 14000584;
            CreateSurpSugTranyN@1240020013 : Codeunit 14000585;
            ForecastSummary@1240020012 : Codeunit 14000578;
            CreateAFPProdPlanYN@1240020011 : Codeunit 14002674;
            CreateAFPAlerts@1240020004 : Codeunit 14002701;
            Char@1240020010 : Char;
            CmdArray@1240020009 : ARRAY [20] OF Text[20];
            CmdCount@1240020008 : Integer;
            CmdCharCount@1240020007 : Integer;
            Command@1240020006 : Text[20];
            DisplayCmd@1240020005 : Boolean;
            StringCharCount@1240020003 : Integer;
            LogCount@1240020002 : Text[30];
            LogDescr@1240020001 : Text[40];
          BEGIN
            WORKDATE := TODAY;

            LogDescr := '*** Job Queue Started - Count=';
            IF (UBPLog.FIND('+')) AND
               (COPYSTR(UBPLog."Log Description",1,30) = LogDescr)
            THEN BEGIN
              LogCount := COPYSTR(UBPLog."Log Description",31,4);
              IF LogCount = '' THEN
                LogCount := '0000';
              LogCount := INCSTR(LogCount);
              UBPLog."Log Description" := COPYSTR(UBPLog."Log Description",1,30) + LogCount;
              UBPLog."Log Date" := TODAY;
              UBPLog."Start Time" := TIME;
              UBPLog.MODIFY;
              LogEntryNo := UBPLog."Entry No.";
            END ELSE
              InventoryManagement.CreateLogEntry('',LogDescr + '0001',LogEntryNo);

            COMMIT;

            CLEAR(CmdArray);
            CmdCount := 0;
            StringCharCount := 1;
            CmdCharCount := 1;
            Command := '*';
            REPEAT
              IF "Parameter String"[StringCharCount] = '/' THEN BEGIN
                IF Command <> '*' THEN
                  CmdArray[CmdCount] := Command;
                CmdCount := CmdCount + 1;
                CmdCharCount := 1;
                Command := '';
                StringCharCount := StringCharCount + 1;
              END ELSE BEGIN
                Command[CmdCharCount] := "Parameter String"[StringCharCount];
                StringCharCount := StringCharCount + 1;
                CmdCharCount := CmdCharCount + 1;
              END;
            UNTIL ("Parameter String"[StringCharCount] = Char);

            CmdCount := 1;
            REPEAT
              CmdArray[CmdCount] := UPPERCASE(CmdArray[CmdCount]);
              IF CmdArray[CmdCount] = 'DISPLAY' THEN
                DisplayCmd := TRUE;
              IF DisplayCmd THEN
                IF CONFIRM(CmdArray[CmdCount]) THEN;
              CmdCount := CmdCount + 1;
            UNTIL CmdArray[CmdCount] = '';

            CmdCount := 1;

            REPEAT

              CASE CmdArray[CmdCount] OF
                'DAILY', 'AFPDAILY', 'DPDAILY':
                  BEGIN
                    CLEAR(PeriodEndYesNo);
                    CLEARLASTERROR;
                    IF NOT PeriodEndYesNo.RUN THEN BEGIN
                      InventoryManagement.CreateLogEntry('',COPYSTR(GETLASTERRORTEXT, 1, 250), LogEntryNo);
                    END;
                  END;
                'SUGORD':
                  BEGIN
                    CLEAR(CreateMultipleSugOrder);
                    CLEARLASTERROR;
                    IF NOT CreateMultipleSugOrder.RUN THEN BEGIN
                      InventoryManagement.CreateLogEntry('',COPYSTR(GETLASTERRORTEXT, 1, 250), LogEntryNo);
                    END;
                  END;
                'SUGREPLPATH':
                  BEGIN
                    CLEAR(CreateReplSugTranYN);
                    CreateReplSugTranYN.Selected;
                  END;
                'SUGINVBAL':
                  BEGIN
                    CLEAR(CreateSurpSugTranyN);
                    CreateSurpSugTranyN.Selected;
                  END;
                'FORSUMMARY':
                  BEGIN
                    ForecastSummary.CreateViaJobQueue;
                  END;
                'SURPLUS':
                  BEGIN
                    CLEAR(CalculateSurplus);
                    CLEARLASTERROR;
                    IF NOT CalculateSurplus.RUN THEN BEGIN
                      InventoryManagement.CreateLogEntry('',COPYSTR(GETLASTERRORTEXT, 1, 250), LogEntryNo);
                    END;
                  END;
                'PRODPLAN':
                  BEGIN
                    CLEAR(CreateAFPProdPlanYN);
                    CreateAFPProdPlanYN.SetOverrideExecutionModeProd;
                    CLEARLASTERROR;
                    IF NOT CreateAFPProdPlanYN.RUN THEN BEGIN
                      InventoryManagement.CreateLogEntry('',COPYSTR(GETLASTERRORTEXT, 1, 250), LogEntryNo);
                    END;
                  END;
                'ASSYFORECAST':
                  BEGIN
                    CLEAR(CreateAFPProdPlanYN);
                    CreateAFPProdPlanYN.SetOverrideExecutionModeAssy;
                    CLEARLASTERROR;
                    IF NOT CreateAFPProdPlanYN.RUN THEN BEGIN
                      InventoryManagement.CreateLogEntry('',COPYSTR(GETLASTERRORTEXT, 1, 250), LogEntryNo);
                    END;
                  END;
                'FULLPLAN':
                  BEGIN
                    CLEAR(CreateAFPProdPlanYN);
                    CLEARLASTERROR;
                    IF NOT CreateAFPProdPlanYN.RUN THEN BEGIN
                      InventoryManagement.CreateLogEntry('',COPYSTR(GETLASTERRORTEXT, 1, 250), LogEntryNo);
                    END;
                  END;
                'ALERTS':
                  BEGIN
                    CLEAR(CreateAFPAlerts);
                    CLEARLASTERROR;
                    IF NOT CreateAFPAlerts.RUN THEN BEGIN
                      InventoryManagement.CreateLogEntry('',COPYSTR(GETLASTERRORTEXT, 1, 250), LogEntryNo);
                    END;
                  END;
                ELSE BEGIN
                  ERROR(STRSUBSTNO('%1 is not a recognized option', CmdArray[CmdCount]));
                END;
              END;
              CmdCount := CmdCount + 1;
            UNTIL CmdArray[CmdCount] = '';
            COMMIT;
            InventoryManagement.CloseLogEntry(LogEntryNo,'');
            COMMIT;
          END;

  }
  CODE
  {

    BEGIN
    {
      The following commands are executed in order of their occurance.
      Each command should be started and terminated by /
      Example:  /AFPDaily/SUGORD/FORSUMMARY/
      This will execute 3 commands;

      Valid Commands:

      DAILY - Run Day End/Period End Process
      SUGORD - Create Suggested Orders
      SUGREPLPATH - Create Suggested Replenishment Path Transfers
      SUGINVBAL - Create Suggested Inventory Balancing Transfers
      FORSUMMARY - Create a Forecast Summary set to be run from Job Queue
      SURPLUS - Create Surplus Inventory
      PRODPLAN - Create AFP Production plan if Location is Enabled.  Auto Process does not have to be on.
      ASSYFORECAST - Create AFP Assembly Forecast.
      FULLPLAN - Create Combined Production and Assembly plan
      ALERTS - Create AFP Alerts - still must be active in setup.
    }
    END.
  }
}

