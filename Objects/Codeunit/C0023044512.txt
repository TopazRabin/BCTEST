OBJECT Codeunit 23044512 WHI Production Mgmt.
{
  OBJECT-PROPERTIES
  {
    Date=02/25/21;
    Time=[ 4:04:45 PM];
    Modified=Yes;
    Version List=WHI2.4.7684.0;
  }
  PROPERTIES
  {
    TableNo=23044511;
    OnRun=VAR
            liEventID@1000000002 : Integer;
            ltxtOutputText@1000000001 : BigText;
            losReturnMessage@1000000000 : OutStream;
          BEGIN
            codRegionCode := Rec.getValue('device_culture');

            liEventID := Rec.getEvent();
            executeEvent(liEventID, Rec, ltxtOutputText);
            "Extensibility Blob".CREATEOUTSTREAM( losReturnMessage );
            ltxtOutputText.WRITE(losReturnMessage);
            MODIFY();
          END;

  }
  CODE
  {
    VAR
      recConfig@1000000014 : Record 23044504;
      cuCommonFuncs@1000000002 : Codeunit 23044501;
      cuPrintingMgmt@1000000029 : Codeunit 23044525;
      cuJnlFunctions@1000000032 : Codeunit 23044528;
      cuActivityLogMgt@1000000012 : Codeunit 23044537;
      cuCommonBase@1000000013 : Codeunit 23044519;
      cuLPCommon@1000000030 : Codeunit 23044541;
      cuLPMgmt@1000000031 : Codeunit 23044520;
      cuTranslationMgmt@1000000033 : Codeunit 23044526;
      txtErrorConsumptionReason@1000000027 : Text[200];
      iEventID@1000000015 : Integer;
      codRegionCode@1000000005 : Code[10];

    PROCEDURE executeEvent@1000000010(piEventID@1000000000 : Integer;VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000002 : BigText);
    BEGIN
      iEventID := piEventID;
      cuCommonFuncs.getDeviceConfig( recConfig,ptrecEventParams );

      CASE piEventID OF
        40001:  getConsumptionJournal(ptrecEventParams, pbsOutput);
        40002:  addConsumptionLine(ptrecEventParams, pbsOutput);
        40003:  updateConsumptionLine(ptrecEventParams, pbsOutput);
        40004:  deleteConsumptionLine(ptrecEventParams, pbsOutput);
        40005:  getProductionBOM(ptrecEventParams, pbsOutput);
        40006:  getProdOrderList(ptrecEventParams, pbsOutput);
        40007:  getProdOrderOutput(ptrecEventParams, pbsOutput);
        40008:  changeProdOutput(ptrecEventParams, pbsOutput);
        40009:  cuPrintingMgmt.handlePrint( ptrecEventParams, pbsOutput);
        40010:  postConsumption(ptrecEventParams, pbsOutput);
        40011:  getReservationEntriesForLine(ptrecEventParams, pbsOutput);
        40012:  getQuantityForLotInTheBin(ptrecEventParams, pbsOutput);
      END;
    END;

    LOCAL PROCEDURE getConsumptionJournal@1000000005(VAR ptrecEventParams@1000000006 : TEMPORARY Record 23044511;VAR pbsOutput@1000000004 : BigText);
    VAR
      lrecProductionOrder@1000000002 : Record 5405;
      lcodBatchName@1000000005 : Code[10];
      lsSerialNumber@1000000009 : Text;
      lsLotNumber@1000000010 : Text;
      lcodProdOrderNumber@1000000011 : Code[20];
      liProdOrderLineNumber@1000000012 : Integer;
      lrecConsumptionEntry@1000000003 : Record 23044503;
      lrecItem@1000000015 : Record 27;
      lcodOperationNo@1000000013 : Code[10];
      lrecConfig@1000000008 : Record 23044504;
      ltxtProdBarcode@1000000007 : Text[100];
      lrecProdOrderRoutingLine@1000000001 : Record 5409;
      lcodRoutingLinkCode@1000000000 : Code[10];
      lbShowBin@1000000016 : Boolean;
      lrrefHeader@1000000020 : RecordRef;
      lrrefLine@1000000019 : RecordRef;
      lcuDataSetTools@1000000018 : Codeunit 23044535;
      ldnOutput@1000000014 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
    BEGIN
      // Returns a Consumption Journal by batch with lines.
      lcodBatchName := cuJnlFunctions.GetConsumptionBatchToUse(ptrecEventParams);
      lsSerialNumber := ptrecEventParams.getSerialNo();
      lsLotNumber := ptrecEventParams.getLotNo();
      lcodProdOrderNumber := ptrecEventParams.getValue('doc_num');
      liProdOrderLineNumber := ptrecEventParams.getValueAsInt('prod_line_number');
      lcodOperationNo := ptrecEventParams.getValue('oper');

      cuCommonFuncs.getDeviceConfig( lrecConfig,ptrecEventParams );
      lrecConfig.SETRECFILTER(); // this is for dataset tools recordref

      ltxtProdBarcode := ptrecEventParams.getValue('prodbarcode');

      testDoesProdOrderLineNeedLotTr( lrecConfig, lcodProdOrderNumber, liProdOrderLineNumber, lsSerialNumber, lsLotNumber );


      //Converted to use DS Tools Standard
      // prepare the recordrefs >> PDAConfig already fetched above
      lrecConsumptionEntry.SETRANGE("Batch Name",lcodBatchName);

      IF( lcodProdOrderNumber <> '' ) THEN BEGIN
        lrecConsumptionEntry.SETRANGE("Prod. Order No.",lcodProdOrderNumber);
        lrecConsumptionEntry.SETRANGE("Prod. Order Line No.",liProdOrderLineNumber);

        lrecProductionOrder.GET(lrecProductionOrder.Status::Released,lcodProdOrderNumber);
        assignProductionOrder(lrecProductionOrder, ptrecEventParams);
      END;

      IF( lsSerialNumber <> '' ) THEN
        lrecConsumptionEntry.SETRANGE("Prod. Serial No.",lsSerialNumber);

      IF( lsLotNumber <> '' ) THEN
        lrecConsumptionEntry.SETRANGE("Prod. Lot No.",lsLotNumber);

      IF( lrecConsumptionEntry.FINDSET(FALSE) ) THEN; // then nothing, always return a dataset




      lrrefHeader.GETTABLE( lrecConfig );
      lrrefLine.GETTABLE( lrecConsumptionEntry );

      ldnOutput := ldnOutput.StringBuilder();
      lcuDataSetTools.BuildHeaderLineDataset(
        iEventID,
        lrrefHeader,
        lrrefLine,
        TRUE, // include item tracking table
        ldnOutput );

      pbsOutput.ADDTEXT( ldnOutput.ToString() );

      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"WMDM Consumption Entry"));
      ptrecEventParams.setValue('Document No.', lrecConsumptionEntry."Batch Name");
      ptrecEventParams.setValue('Source Document Type', FORMAT(DATABASE::"Prod. Order Line"));
      ptrecEventParams.setValue('Source Document No.', lcodProdOrderNumber);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    LOCAL PROCEDURE addConsumptionLine@1000000007(VAR ptrecEventParams@1000000005 : TEMPORARY Record 23044511;VAR pbsOutput@1000000003 : BigText);
    VAR
      lrecProdOrderLine@1000000017 : Record 5406;
      lrecLocation@1000000015 : Record 14;
      lrrefHeader@1000000019 : RecordRef;
      lcodLocation@1000000004 : Code[10];
      lcodBatchName@1000000002 : Code[10];
      lcodProdOrderNumber@1000000018 : Code[20];
      liProdOrderLineNumber@1000000001 : Integer;
      lcodProdSerialNumber@1000000021 : Code[20];
      lcodProdLotNumber@1000000031 : Code[20];
      lcodConsItemNumber@1000000020 : Text;
      ldQuantity@1000000022 : Decimal;
      lsBarcodeData@1000000023 : Text[250];
      lcodConsSerialNumber@1000000032 : Code[20];
      lcodConsLotNumber@1000000033 : Code[20];
      lrecItem@1000000026 : Record 27;
      liNextLineNumber@1000000024 : Integer;
      liType@1000000028 : Integer;
      lrecConsumptionEntry@1000000030 : Record 23044503;
      lcodUserName@1000000025 : Code[50];
      lcodBinCode@1000000006 : Code[20];
      lcodOperation@1000000000 : Code[10];
      lcodConsVariantCode@1000000007 : Text;
      lrecConfig@1000000008 : Record 23044504;
      lcodUoM@1000000009 : Code[20];
      lrrefLine@1000000011 : RecordRef;
      lcuDataSetTools@1000000012 : Codeunit 23044535;
      lrecWarehouseEntry@1000000010 : Record 7312;
      lrecItemTrackingCode@1000000014 : Record 6502;
      liCompLineNo@1000000016 : Integer;
    BEGIN
      // Creates a Consumption Entry.
      //<FUNC>
      // Re-wrote many portions to use new dataset tools for performance and for unit of measure
      //</FUNC>
      lcodLocation := ptrecEventParams.getValue('location');
      lcodBatchName := cuJnlFunctions.GetConsumptionBatchToUse(ptrecEventParams);
      lcodProdOrderNumber := ptrecEventParams.getDocumentNo();
      liProdOrderLineNumber := ptrecEventParams.getValueAsInt('prod_line_number');
      lcodProdSerialNumber := ptrecEventParams.getValue('prod_serial_number');
      lcodProdLotNumber := ptrecEventParams.getValue('prod_lot_numbr');
      lcodConsItemNumber := ptrecEventParams.getValue('cons_item_number');
      ldQuantity := ptrecEventParams.getValueAsDecimal('qty');
      lsBarcodeData := ptrecEventParams.getValue('barcode');
      lcodConsSerialNumber := ptrecEventParams.getValue('cons_serial_number');
      lcodConsLotNumber := ptrecEventParams.getValue('cons_lot_number');
      lcodUserName := ptrecEventParams.getValue('user_name');
      lcodUoM := ptrecEventParams.getValue('uom');
      lcodBinCode := ptrecEventParams.getBin();

      liCompLineNo := ptrecEventParams.getValueAsInt('prod_order_comp_line_number');

      cuCommonFuncs.getDeviceConfig( lrecConfig,ptrecEventParams );
      lcodOperation := ptrecEventParams.getValue('oper');
      lcodConsVariantCode := ptrecEventParams.getValue('cons_variant_code');


      lrecItem.GET(lcodConsItemNumber);
      lrecLocation.GET(lcodLocation);

      IF (lrecItemTrackingCode.GET(lrecItem."Item Tracking Code") AND lrecLocation."Bin Mandatory") THEN BEGIN
        IF (((lrecItemTrackingCode."SN Warehouse Tracking") AND (lcodConsSerialNumber <> '')) OR
            ((lrecItemTrackingCode."Lot Warehouse Tracking") AND (lcodConsLotNumber <> ''))) THEN BEGIN
          lrecWarehouseEntry.SETRANGE("Serial No.", lcodConsSerialNumber);
          lrecWarehouseEntry.SETRANGE("Lot No.", lcodConsLotNumber);
          lrecWarehouseEntry.SETRANGE("Bin Code", lcodBinCode);
          IF (NOT lrecWarehouseEntry.FINDFIRST) THEN BEGIN
            IF (lcodConsLotNumber <> '') THEN BEGIN
              ERROR(cuTranslationMgmt.getTranslatedString('ERR_PROD_NO_LN_IN_BIN', codRegionCode), lcodConsItemNumber, lcodConsLotNumber, lcodBinCode);
            END ELSE BEGIN
              ERROR(cuTranslationMgmt.getTranslatedString('ERR_PROD_NO_SN_IN_BIN', codRegionCode), lcodConsItemNumber, lcodConsLotNumber, lcodBinCode);
            END;
          END;
        END;
      END;

      // check to make sure this entry is allowed
      IF((lrecConfig.Code <> '') AND
          (lrecConfig."Enforce BOM" <> lrecConfig."Enforce BOM"::"No Enforcement")) THEN BEGIN
        IF (NOT isConsumptionValid(getTemplate(PAGE::"Consumption Journal"),
                                   lcodProdOrderNumber,liProdOrderLineNumber,
                                   lcodProdSerialNumber,
                                   lcodProdLotNumber,
                                   lcodConsItemNumber,
                                   lcodConsVariantCode,
                                   ldQuantity,
                                   lrecConfig."Enforce BOM",
                                   lcodUoM,
                                   liCompLineNo
                                   ))
        THEN BEGIN
          ERROR(STRSUBSTNO(cuTranslationMgmt.getTranslatedString('ERR_CONS_CANNOT_USE_ITEM', codRegionCode),ldQuantity, lcodConsItemNumber) + '  ' + txtErrorConsumptionReason);
        END;
      END;


      //
      // create the entry
      //
      lrecConsumptionEntry.INIT;
      lrecConsumptionEntry."Location Code" := lcodLocation;
      lrecConsumptionEntry."Batch Name" := lcodBatchName;
      lrecConsumptionEntry."Posting Date" := TODAY;
      lrecConsumptionEntry."User ID" := lcodUserName;
      lrecConsumptionEntry."Config ID" := lrecConfig.Code;
      lrecConsumptionEntry."Prod. Order No." := lcodProdOrderNumber;
      lrecConsumptionEntry."Prod. Order Line No." := liProdOrderLineNumber;

      lrecConsumptionEntry."Prod. Order Comp. Line No." := liCompLineNo;

      lrecConsumptionEntry."Prod. Serial No." := lcodProdSerialNumber;
      lrecConsumptionEntry."Prod. Lot No." := lcodProdLotNumber;
      lrecConsumptionEntry."Cons. Item No." := lcodConsItemNumber;
      lrecConsumptionEntry."Cons. Variant Code" := lcodConsVariantCode;
      lrecConsumptionEntry."Cons. Serial No." := lcodConsSerialNumber;
      lrecConsumptionEntry."Cons. Lot No." := lcodConsLotNumber;
      lrecConsumptionEntry."Cons. Barcode Data" := lsBarcodeData;
      lrecConsumptionEntry."Cons. Quantity" := ldQuantity;

      IF(lcodUoM <> '') THEN BEGIN
        lrecConsumptionEntry."Cons. Unit of Measure Code" := lcodUoM;
      END;

      lrecConsumptionEntry."Bin Code" := lcodBinCode;
      lrecConsumptionEntry."Operation Code" := lcodOperation;
      lrecConsumptionEntry.INSERT(TRUE);


      cuCommonFuncs.generateSuccessReturn(1, pbsOutput);

      {
      lrecConsumptionEntry.SETRECFILTER();
      lrrefLine.GETTABLE( lrecConsumptionEntry );
      ldnOutput := ldnOutput.StringBuilder();
      lcuDataSetTools.BuildLineTable(40001, lrrefLine, ldnOutput);
      pbsOutput.ADDTEXT( ldnOutput.ToString() );
      }

      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"WMDM Consumption Entry"));
      ptrecEventParams.setValue('Document No.', lcodBatchName);
      ptrecEventParams.setValue('Document Line No.', FORMAT(lrecConsumptionEntry."Line No."));
      ptrecEventParams.setValue('Source Document Type', FORMAT(DATABASE::"Prod. Order Line"));
      ptrecEventParams.setValue('Source Document No.', lcodProdOrderNumber);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    LOCAL PROCEDURE updateConsumptionLine@1000000009(VAR ptrecEventParams@1000000006 : TEMPORARY Record 23044511;VAR pbsOutput@1000000003 : BigText);
    VAR
      liLineNumber@1000000001 : Integer;
      ldQuantity@1000000000 : Decimal;
      lrecConsumptionEntry@1000000002 : Record 23044503;
      lcodUserName@1000000012 : Code[50];
      ldTestQty@1000000005 : Decimal;
      lcodVariantCode@1000000004 : Text;
      lrecConfig@1000000009 : Record 23044504;
      lcodUoM@1000000010 : Code[20];
      lrrefLine@1000000014 : RecordRef;
      ldnOutput@1000000008 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      lcuDataSetTools@1000000011 : Codeunit 23044535;
      ldPreviousQuantity@1000000007 : Decimal;
    BEGIN
      // Updates the specified consumption entry line quantity.
      //<FUNC>
      // Re-wrote to use dataset tools for performance purposes and to leverage uom
      //</FUNC>

      liLineNumber := ptrecEventParams.getLineNo();
      ldQuantity := ptrecEventParams.getValueAsDecimal('qty');
      lcodUserName := ptrecEventParams.getValue('user_name');
      cuCommonFuncs.getDeviceConfig( lrecConfig,ptrecEventParams );
      lcodVariantCode := ptrecEventParams.getValue('cons_variant_code');
      lcodUoM := ptrecEventParams.getValue('uom');
      lrecConsumptionEntry.GET(liLineNumber);

      IF (lcodVariantCode <> lrecConsumptionEntry."Cons. Variant Code") THEN BEGIN
        lrecConsumptionEntry.VALIDATE("Cons. Variant Code", lcodVariantCode);
      END;

      ldTestQty := ldQuantity;

      IF( lrecConsumptionEntry."Cons. Quantity" < ldQuantity ) THEN BEGIN
        ldTestQty := ldQuantity - lrecConsumptionEntry."Cons. Quantity";
        // check to make sure this entry is allowed
        IF((lrecConfig.Code <> '') AND
            (lrecConfig."Enforce BOM" <> lrecConfig."Enforce BOM"::"No Enforcement")) THEN BEGIN
          IF (NOT isConsumptionValid(getTemplate(PAGE::"Consumption Journal"),
                                    lrecConsumptionEntry."Prod. Order No.",
                                    lrecConsumptionEntry."Prod. Order Line No.",
                                    lrecConsumptionEntry."Prod. Serial No.",
                                    lrecConsumptionEntry."Prod. Lot No.",
                                    lrecConsumptionEntry."Cons. Item No.",
                                    lrecConsumptionEntry."Cons. Variant Code",
                                    ldTestQty,
                                    lrecConfig."Enforce BOM",
                                    lcodUoM,
                                    lrecConsumptionEntry."Prod. Order Comp. Line No."
                                    ))
            THEN BEGIN
            ERROR(STRSUBSTNO(cuTranslationMgmt.getTranslatedString('ERR_CONS_CANNOT_USE_ITEM', codRegionCode),ldQuantity, lrecConsumptionEntry."Cons. Item No.") + '  ' + txtErrorConsumptionReason);
          END;
        END;
      END;

      ldPreviousQuantity := lrecConsumptionEntry."Cons. Quantity";
      lrecConsumptionEntry.VALIDATE("Cons. Quantity", ldQuantity);
      lrecConsumptionEntry.VALIDATE("User ID", lcodUserName);

      IF(lcodUoM <> '') THEN BEGIN
        lrecConsumptionEntry.VALIDATE("Cons. Unit of Measure Code", lcodUoM);
      END;

      lrecConsumptionEntry."Config ID" := lrecConfig.Code;
      lrecConsumptionEntry.MODIFY();
      lrecConsumptionEntry.SETRECFILTER();

      lrrefLine.GETTABLE( lrecConsumptionEntry );
      ldnOutput := ldnOutput.StringBuilder();
      lcuDataSetTools.BuildLineTable(40001, lrrefLine, ldnOutput);
      pbsOutput.ADDTEXT( ldnOutput.ToString() );

      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"WMDM Consumption Entry"));
      ptrecEventParams.setValue('Document No.', lrecConsumptionEntry."Batch Name");
      ptrecEventParams.setValue('Document Line No.', FORMAT(liLineNumber));
      ptrecEventParams.setValue('Source Document Type', FORMAT(DATABASE::"Prod. Order Line"));
      ptrecEventParams.setValue('Source Document No.', lrecConsumptionEntry."Prod. Order No.");
      ptrecEventParams.setValue('Source Document Line No.', FORMAT(lrecConsumptionEntry."Prod. Order Line No."));
      ptrecEventParams.setValue('Previous Quantity', FORMAT(ldPreviousQuantity));
      ptrecEventParams.setValue('New Quantity', FORMAT(ldQuantity));
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    LOCAL PROCEDURE deleteConsumptionLine@1000000014(VAR ptrecEventParams@1000000003 : TEMPORARY Record 23044511;VAR pbsOutput@1000000001 : BigText);
    VAR
      liLineNumber@1000000004 : Integer;
      lrecConsumptionEntry@1000000002 : Record 23044503;
    BEGIN
      // Deletes a specified consumption line.
      liLineNumber := ptrecEventParams.getLineNo();
      lrecConsumptionEntry.GET(liLineNumber);
      lrecConsumptionEntry.DELETE(TRUE);
      cuCommonFuncs.generateSuccessReturn(1, pbsOutput);

      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"WMDM Consumption Entry"));
      ptrecEventParams.setValue('Document No.', lrecConsumptionEntry."Batch Name");
      ptrecEventParams.setValue('Document Line No.', FORMAT(liLineNumber));
      ptrecEventParams.setValue('Source Document Type', FORMAT(DATABASE::"Prod. Order Line"));
      ptrecEventParams.setValue('Source Document No.', lrecConsumptionEntry."Prod. Order No.");
      ptrecEventParams.setValue('Source Document Line No.', FORMAT(lrecConsumptionEntry."Prod. Order Line No."));
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    LOCAL PROCEDURE getProductionBOM@1000000011(VAR ptrecEventParams@1000000026 : TEMPORARY Record 23044511;VAR pbsOutput@1000000019 : BigText);
    VAR
      lrecProdOrderLine@1000000037 : Record 5406;
      lrecConfig@1000000014 : Record 23044504;
      lrecProdOrderComp@1000000005 : Record 5407;
      lrecProdOrderRoutingLine@1000000003 : Record 5409;
      lrrefHeader@1000000016 : RecordRef;
      ldnOutput@1000000002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      lcodLocation@1000000001 : Code[10];
      lcodProdOrderNumber@1000000004 : Code[20];
      lsSerialNumber@1000000018 : Text;
      lsLotNumber@1000000024 : Text;
      lcodOperationNo@1000000029 : Code[10];
      lcodRoutingLinkCode@1000000000 : Code[10];
      liProdOrderLineNumber@1000000017 : Integer;
    BEGIN
      // Returns the Production BOM Components for the specified order.
      lcodLocation := ptrecEventParams.getValue('location');
      lcodProdOrderNumber := ptrecEventParams.getDocumentNo();
      liProdOrderLineNumber := ptrecEventParams.getValueAsInt('prod_line_number');
      lsSerialNumber := UPPERCASE(ptrecEventParams.getValue('prod_serial_number'));
      lsLotNumber := UPPERCASE(ptrecEventParams.getValue('prod_lot_number'));

      EVALUATE( lcodOperationNo, ptrecEventParams.getValue('oper') );
      cuCommonFuncs.getDeviceConfig( lrecConfig,ptrecEventParams );

      ldnOutput := ldnOutput.StringBuilder();


      lrecProdOrderLine.GET(lrecProdOrderLine.Status::Released,lcodProdOrderNumber,liProdOrderLineNumber);
      lrecProdOrderLine.SETRECFILTER();
      lrrefHeader.GETTABLE( lrecProdOrderLine );
      ldnOutput.Append('<DATASET><TABLE id="header"><COLS>');
      cuCommonFuncs.initializeColumns( TRUE );
      cuCommonFuncs.addDSColumnsFromConfigDN(ldnOutput,iEventID,'', DATABASE::"Prod. Order Line" );
      ldnOutput.Append('</COLS><ROWS><R><FIELDS>');
      cuCommonFuncs.addDSFieldsForRecordDN(ldnOutput,lrrefHeader,iEventID,'');
      ldnOutput.Append('</FIELDS></R></ROWS>');
      ldnOutput.Append('</TABLE>');
      ldnOutput.Append('<TABLE id="line">');
      ldnOutput.Append('<COLS>');
      cuCommonFuncs.initializeColumns( TRUE );
      cuCommonFuncs.addDSColumnsFromConfigDN(ldnOutput,iEventID,'', DATABASE::"Prod. Order Component" );
      cuCommonFuncs.addDSTrackingColumnsDN(ldnOutput);
      ldnOutput.Append('</COLS><ROWS>');

      lrecProdOrderComp.SETRANGE(Status, lrecProdOrderComp.Status::Released);
      lrecProdOrderComp.SETRANGE("Prod. Order No.", lcodProdOrderNumber);
      lrecProdOrderComp.SETRANGE("Prod. Order Line No.",liProdOrderLineNumber);

      //  If the operation was part of the barcode, and if this device config was setup
      //  to limit components by routing link code, then find the routing link code associated
      //  with the production order routing line.
      //
      IF(  ( '' <> lcodOperationNo ) AND ( lrecConfig.COUNT() > 0 ) AND ( lrecConfig."Limits Components by RLC" ) ) THEN BEGIN
        // first, get the routing link code
        lrecProdOrderRoutingLine.RESET();
        lrecProdOrderRoutingLine.SETRANGE("Prod. Order No.", lcodProdOrderNumber);
        lrecProdOrderRoutingLine.SETRANGE("Routing Reference No.",liProdOrderLineNumber);
        lrecProdOrderRoutingLine.SETRANGE("Operation No.", lcodOperationNo );
        IF ( lrecProdOrderRoutingLine.FINDFIRST() ) THEN BEGIN
          lcodRoutingLinkCode := lrecProdOrderRoutingLine."Routing Link Code";
          lrecProdOrderComp.SETRANGE("Routing Link Code", lcodRoutingLinkCode );
        END;
      END;


      IF( lrecProdOrderComp.FIND('-') ) THEN BEGIN
        REPEAT
          getProdConsBOMLine(ldnOutput, lrecProdOrderLine, lrecProdOrderComp, lsSerialNumber, lsLotNumber, lcodOperationNo);
        UNTIL(lrecProdOrderComp.NEXT=0);

        lrecProdOrderComp.FINDSET(FALSE);
      END;

      ldnOutput.Append('</ROWS></TABLE></DATASET>');
      pbsOutput.ADDTEXT( ldnOutput.ToString() );

      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"Prod. Order Component"));
      ptrecEventParams.setValue('Document No.', lcodProdOrderNumber);
      ptrecEventParams.setValue('Document Line No.', FORMAT(liProdOrderLineNumber));
      ptrecEventParams.setValue('Source Document Type', FORMAT(DATABASE::"Prod. Order Line"));
      ptrecEventParams.setValue('Source Document No.', lcodProdOrderNumber);
      ptrecEventParams.setValue('Source Document Line No.', FORMAT(liProdOrderLineNumber));
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE getProdConsBOMLine@1000000020(VAR pdnOutput@1000000011 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";precProdOrderLine@1000000004 : Record 5406;precProdOrderComp@1000000001 : Record 5407;psSerialNumber@1000000006 : Text;psLotNumber@1000000007 : Text;pcodOperationNo@1000000002 : Code[10]);
    VAR
      lrecItem@1000000003 : Record 27;
      lrrefLine@1000000010 : RecordRef;
      ldUnPostedQuantity@1000000005 : Decimal;
      ldPostedQuantity@1000000008 : Decimal;
      ldRemainingQuantity@1000000009 : Decimal;
    BEGIN
      pdnOutput.Append('<R><FIELDS>');

      ldUnPostedQuantity := getProdConsUnpostedQty(precProdOrderComp, psSerialNumber, psLotNumber,pcodOperationNo);
      ldPostedQuantity := getProdConsPostedQty(precProdOrderComp,psSerialNumber,psLotNumber);

      cuCommonFuncs.setDSFieldOverrideValue(40005,'',DATABASE::"Prod. Order Component",-2,STRSUBSTNO('%1', ldPostedQuantity + ldUnPostedQuantity));

      // Calculate remaining quantity
      ldRemainingQuantity := 0;
      IF (psSerialNumber <> '') THEN BEGIN
        ldRemainingQuantity := precProdOrderComp.Quantity - ldPostedQuantity;
      END ELSE IF (psLotNumber <> '') THEN BEGIN
        ldRemainingQuantity := getRemainingQtyForLot(precProdOrderComp, psLotNumber);
      END ELSE BEGIN
        ldRemainingQuantity := precProdOrderComp."Remaining Quantity";
      END;

      cuCommonFuncs.setDSFieldOverrideValue(40005,'',DATABASE::"Prod. Order Component",-3,STRSUBSTNO('%1', ldRemainingQuantity));

      lrecItem.GET(precProdOrderComp."Item No.");
      lrrefLine.GETTABLE(precProdOrderComp);
      cuCommonFuncs.addDSFieldsForRecordDN(pdnOutput,lrrefLine,40005,'');
      cuCommonFuncs.addDSFieldDN(pdnOutput,lrecItem."Item Tracking Code");
      pdnOutput.Append('</FIELDS></R>');
    END;

    PROCEDURE getProdConsUnpostedQty@1000000021(precProdOrderComp@1000000001 : Record 5407;psSerialNumber@1000000004 : Text;psLotNumber@1000000005 : Text;pcodOperationNo@1000000009 : Code[10]) : Decimal;
    VAR
      lrecConsumptionEntry@1000000003 : Record 23044503;
      lrecItem@1000000007 : Record 27;
      lrecItemJournalLine@1000000008 : Record 83;
      lcodComponentUOM@1000000006 : Code[20];
      ldUnPostedQuantity@1000000002 : Decimal;
      ldTempQuantity@1000000000 : Decimal;
    BEGIN
      //
      // get the unposted quantity
      // this makes the assumption that the item doesn't appear more than once in the BOM
      //

      psSerialNumber := UPPERCASE(psSerialNumber);
      psLotNumber := UPPERCASE(psLotNumber);
      lcodComponentUOM := precProdOrderComp."Unit of Measure Code";
      lrecItem.GET(precProdOrderComp."Item No.");
      ldUnPostedQuantity := 0;

      //
      // check device consumption
      //
      lrecConsumptionEntry.SETRANGE("Prod. Order No.", precProdOrderComp."Prod. Order No.");
      lrecConsumptionEntry.SETRANGE("Prod. Order Line No.", precProdOrderComp."Prod. Order Line No.");
      lrecConsumptionEntry.SETRANGE("Prod. Serial No.", psSerialNumber);
      lrecConsumptionEntry.SETRANGE("Prod. Lot No.",psLotNumber);
      lrecConsumptionEntry.SETRANGE("Cons. Item No.",precProdOrderComp."Item No.");
      lrecConsumptionEntry.SETRANGE("Cons. Variant Code",precProdOrderComp."Variant Code");
      lrecConsumptionEntry.SETFILTER("Prod. Order Comp. Line No.",'%1|%2',0,precProdOrderComp."Line No.");

      IF (lrecConsumptionEntry.FINDSET(FALSE)) THEN BEGIN
        REPEAT
          // convert to bom uom quantity
          ldTempQuantity := cuCommonFuncs.ConvertUnitOfMeasure(lrecItem,
                                                                  lrecConsumptionEntry."Cons. Quantity",
                                                                  lrecConsumptionEntry."Cons. Unit of Measure Code",
                                                                  lcodComponentUOM);

          ldUnPostedQuantity := ldUnPostedQuantity + ldTempQuantity;
        UNTIL (lrecConsumptionEntry.NEXT = 0);
      END;

      //
      // check the item journal (maybe some were already transfered)
      //
      lrecItemJournalLine.SETRANGE("Journal Template Name",getTemplate(PAGE::"Consumption Journal"));
      lrecItemJournalLine.SETRANGE("Order Type",lrecItemJournalLine."Order Type"::Production);
      lrecItemJournalLine.SETRANGE("Order No.", precProdOrderComp."Prod. Order No.");
      lrecItemJournalLine.SETRANGE("Order Line No.", precProdOrderComp."Prod. Order Line No.");
      lrecItemJournalLine.SETRANGE("Item No.", precProdOrderComp."Item No.");
      lrecItemJournalLine.SETRANGE("Variant Code",precProdOrderComp."Variant Code");
      lrecItemJournalLine.SETRANGE("WHI Prod. Serial No.",psSerialNumber);
      lrecItemJournalLine.SETRANGE("WHI Prod. Lot No.",psLotNumber);
      lrecItemJournalLine.SETFILTER("Prod. Order Comp. Line No.",'%1|%2',0,precProdOrderComp."Line No.");

      // If an operation was supplied, then add that operation as part of the item journal check
      //
      IF ( '' <> pcodOperationNo ) THEN BEGIN
        lrecItemJournalLine.SETRANGE("Operation No.", pcodOperationNo );
      END;

      IF (lrecItemJournalLine.FINDSET(FALSE)) THEN BEGIN
        REPEAT
          ldTempQuantity := cuCommonFuncs.ConvertUnitOfMeasure(lrecItem,lrecItemJournalLine.Quantity,lrecItemJournalLine."Unit of Measure Code",lcodComponentUOM);
          ldUnPostedQuantity := ldUnPostedQuantity + ldTempQuantity;
        UNTIL(lrecItemJournalLine.NEXT = 0);
      END;

      EXIT(ldUnPostedQuantity);
    END;

    PROCEDURE getProdConsPostedQty@1000000022(precProdOrderComp@1000000002 : Record 5407;psSerialNumber@1000000001 : Text;psLotNumber@1000000000 : Text) : Decimal;
    VAR
      lrecComponentUsage@1000000004 : Record 23044501;
      lrecItem@1000000007 : Record 27;
      lcodComponentUOM@1000000006 : Code[20];
      ldPostedQuantity@1000000003 : Decimal;
      ldTempQuantity@1000000005 : Decimal;
    BEGIN
      //
      // get the posted quantity
      //

      psSerialNumber := UPPERCASE(psSerialNumber);
      psLotNumber := UPPERCASE(psLotNumber);
      ldPostedQuantity := 0;
      lcodComponentUOM := precProdOrderComp."Unit of Measure Code";
      lrecItem.GET(precProdOrderComp."Item No.");


      lrecComponentUsage.SETRANGE("Prod. Order No.",precProdOrderComp."Prod. Order No.");
      lrecComponentUsage.SETRANGE("Prod. Order Line No.",precProdOrderComp."Prod. Order Line No.");
      lrecComponentUsage.SETRANGE("Prod. Serial No.",psSerialNumber);
      lrecComponentUsage.SETRANGE("Prod. Lot No.",psLotNumber);
      lrecComponentUsage.SETRANGE("Cons. Item No.",precProdOrderComp."Item No.");
      lrecComponentUsage.SETRANGE("Cons. Variant Code",precProdOrderComp."Variant Code");
      lrecComponentUsage.SETFILTER("Prod. Order Comp. Line No.",'%1|%2',0,precProdOrderComp."Line No.");

      IF (lrecComponentUsage.FINDSET(FALSE)) THEN BEGIN
        REPEAT
          ldTempQuantity := cuCommonFuncs.ConvertUnitOfMeasure(lrecItem,lrecComponentUsage."Cons. Quantity",lrecComponentUsage."Cons. Unit of Measure Code",lcodComponentUOM);
          ldPostedQuantity := ldPostedQuantity + ldTempQuantity;
        UNTIL(lrecComponentUsage.NEXT = 0);
      END;

      EXIT(ldPostedQuantity);
    END;

    PROCEDURE isConsumptionValid@1000000046(pcodTemplateName@1000000010 : Code[10];pcodProdOrderNumber@1000000000 : Code[20];piProdOrderLineNumber@1000000004 : Integer;psSerialNumber@1000000001 : Text;psLotNumber@1000000012 : Text;pcodItemNumber@1000000002 : Text;pcodItemVariantCode@1000000013 : Text;pdQuantity@1000000003 : Decimal;poptEnforceBOM@1000000014 : ' ,Enforce Item,Enforce Quantity';pcodUoM@1000000016 : Code[20];piProdOrderCompLineNumber@1000000020 : Integer) : Boolean;
    VAR
      lrecProdOrderComp@1000000005 : Record 5407;
      lrecCompUsage@1000000011 : Record 23044501;
      ldTotalQuantity@1000000007 : Decimal;
      ldConsumedQuantity@1000000008 : Decimal;
      lrecConsumptionEntry@1000000006 : Record 23044503;
      lrecItemJournalLine@1000000009 : Record 83;
      lbIsValidConsumption@1000000015 : Boolean;
      lcodComponentUOM@1000000017 : Code[20];
      lrecItem@1000000018 : Record 27;
      ldTempQuantity@1000000019 : Decimal;
    BEGIN
      // check consumption journal
      // check component usage
      // compare to bom components (total quantity)

      psSerialNumber := UPPERCASE(psSerialNumber);
      psLotNumber := UPPERCASE(psLotNumber);
      ldTotalQuantity := 0;
      lbIsValidConsumption := FALSE;

      // find the required quantity (per unit)
      lrecProdOrderComp.SETRANGE(Status,lrecProdOrderComp.Status::Released);
      lrecProdOrderComp.SETRANGE("Prod. Order No.", pcodProdOrderNumber);
      lrecProdOrderComp.SETRANGE("Prod. Order Line No.",piProdOrderLineNumber);
      lrecProdOrderComp.SETRANGE("Item No.", pcodItemNumber);
      lrecProdOrderComp.SETRANGE("Variant Code", pcodItemVariantCode);

      IF piProdOrderCompLineNumber <> 0 THEN
        lrecProdOrderComp.SETRANGE("Line No.",piProdOrderCompLineNumber);

      IF( lrecProdOrderComp.FIND('-') ) THEN BEGIN
        IF (poptEnforceBOM = poptEnforceBOM::"Enforce Item") THEN BEGIN
          lbIsValidConsumption := TRUE;
        END;

        lcodComponentUOM := lrecProdOrderComp."Unit of Measure Code";

        REPEAT
          IF( (psSerialNumber <> '') AND (psLotNumber <> '') ) THEN BEGIN
            ldTotalQuantity := ldTotalQuantity + lrecProdOrderComp.Quantity;
          END
          ELSE BEGIN
            ldTotalQuantity := ldTotalQuantity + lrecProdOrderComp."Remaining Quantity";
          END;
        UNTIL( lrecProdOrderComp.NEXT=0 );
      END;

      IF (poptEnforceBOM = poptEnforceBOM::"Enforce Quantity")THEN BEGIN
      //
      // find the consumed quantity (by serial or lot number)
      //
        lrecItem.GET(pcodItemNumber);
        // need to change quantity to bom unit of meausure
        pdQuantity := cuCommonFuncs.ConvertUnitOfMeasure(lrecItem, pdQuantity, pcodUoM, lcodComponentUOM);

        // check the current device consumption
        lrecConsumptionEntry.SETRANGE("Prod. Order No.", pcodProdOrderNumber);
        lrecConsumptionEntry.SETRANGE("Prod. Order Line No.", piProdOrderLineNumber);
        lrecConsumptionEntry.SETRANGE("Cons. Item No.", pcodItemNumber);
        lrecConsumptionEntry.SETRANGE("Cons. Variant Code", pcodItemVariantCode);
        lrecConsumptionEntry.SETRANGE("Cons. Serial No.", psSerialNumber);
        lrecConsumptionEntry.SETRANGE("Cons. Lot No.", psLotNumber);

        IF piProdOrderCompLineNumber <> 0 THEN
          lrecConsumptionEntry.SETRANGE("Prod. Order Comp. Line No.",piProdOrderCompLineNumber);

        // May have different UOM, can't do that
        ldConsumedQuantity := pdQuantity;
        IF (lrecConsumptionEntry.FINDSET(FALSE)) THEN BEGIN
          REPEAT
            // convert to bom uom quantity
            ldTempQuantity := cuCommonFuncs.ConvertUnitOfMeasure(lrecItem,
                                                                lrecConsumptionEntry."Cons. Quantity",
                                                                lrecConsumptionEntry."Cons. Unit of Measure Code",
                                                                lcodComponentUOM);

            ldConsumedQuantity := ldConsumedQuantity + ldTempQuantity;
          UNTIL (lrecConsumptionEntry.NEXT = 0);
        END;

        // check item journal lines in case manually added or in between posting
        lrecItemJournalLine.SETRANGE("Journal Template Name",pcodTemplateName);
        lrecItemJournalLine.SETRANGE("Order Type",lrecItemJournalLine."Order Type"::Production);
        lrecItemJournalLine.SETRANGE("Order No.", pcodProdOrderNumber);
        lrecItemJournalLine.SETRANGE("Order Line No.", piProdOrderLineNumber);
        lrecItemJournalLine.SETRANGE("Item No.", pcodItemNumber);
        lrecItemJournalLine.SETRANGE("Variant Code", pcodItemVariantCode);
        lrecItemJournalLine.SETRANGE("WHI Prod. Serial No.", psSerialNumber);
        lrecItemJournalLine.SETRANGE("WHI Prod. Lot No.", psLotNumber);

        IF piProdOrderCompLineNumber <> 0 THEN
          lrecItemJournalLine.SETRANGE("Prod. Order Comp. Line No.",piProdOrderCompLineNumber);

        // Changed to CalcSums to improve performance
        IF (lrecItemJournalLine.FINDSET(FALSE)) THEN BEGIN
          REPEAT
            ldTempQuantity := cuCommonFuncs.ConvertUnitOfMeasure(lrecItem,
                                                                lrecItemJournalLine.Quantity,
                                                                lrecItemJournalLine."Unit of Measure Code",
                                                                lcodComponentUOM);

            ldConsumedQuantity := ldConsumedQuantity + ldTempQuantity;

          UNTIL(lrecItemJournalLine.NEXT = 0);
        END;

        // check any posted quantities
        lrecCompUsage.SETRANGE("Prod. Order No.",pcodProdOrderNumber);
        lrecCompUsage.SETRANGE("Prod. Order Line No.", piProdOrderLineNumber);
        lrecCompUsage.SETRANGE("Prod. Serial No.",psSerialNumber);
        lrecCompUsage.SETRANGE("Prod. Lot No.",psLotNumber);
        lrecCompUsage.SETRANGE("Cons. Item No.",pcodItemNumber);
        lrecCompUsage.SETRANGE("Cons. Variant Code",pcodItemVariantCode);

        IF piProdOrderCompLineNumber <> 0 THEN
          lrecCompUsage.SETRANGE("Prod. Order Comp. Line No.",piProdOrderCompLineNumber);

        // Changed to calc sums
        IF (lrecCompUsage.FINDSET(FALSE)) THEN BEGIN
          REPEAT
            ldTempQuantity := cuCommonFuncs.ConvertUnitOfMeasure(lrecItem,
                                                                lrecCompUsage."Cons. Quantity",
                                                                lrecCompUsage."Cons. Unit of Measure Code",
                                                                lcodComponentUOM);

            ldConsumedQuantity := ldConsumedQuantity + ldTempQuantity;

          UNTIL(lrecCompUsage.NEXT = 0);
        END;

        IF ( ((ldTotalQuantity - ldConsumedQuantity)>=0) ) THEN BEGIN
          txtErrorConsumptionReason:= '';
        END ELSE BEGIN
          IF ( ldTotalQuantity = 0 ) THEN BEGIN
            txtErrorConsumptionReason:= STRSUBSTNO(cuTranslationMgmt.getTranslatedString('ERR_CONS_ITEM_NOT_REQUIRED', codRegionCode),ldTotalQuantity,ldConsumedQuantity);
          END ELSE BEGIN
            txtErrorConsumptionReason:= STRSUBSTNO(cuTranslationMgmt.getTranslatedString('ERR_CONSUMPTION_NEED', codRegionCode),ldTotalQuantity,ldConsumedQuantity);
          END;
        END;
        lbIsValidConsumption := ((ldTotalQuantity - ldConsumedQuantity)>=0);
      END;

      // any item/quantity is allowable
      IF poptEnforceBOM = poptEnforceBOM::" " THEN
        lbIsValidConsumption := TRUE;

      EXIT(lbIsValidConsumption);
    END;

    PROCEDURE getExpectedQuantity@1000000025(pcodProdOrderNumber@1000000000 : Code[20];piProdOrderLineNumber@1000000001 : Integer) : Decimal;
    VAR
      lrecProdOrderComp@1000000003 : Record 5407;
      ldTotalPartQty@1000000002 : Decimal;
    BEGIN
      ldTotalPartQty := 0;

      // determine the total number of parts required
      lrecProdOrderComp.SETRANGE(Status, lrecProdOrderComp.Status::Released);
      lrecProdOrderComp.SETRANGE("Prod. Order No.", pcodProdOrderNumber);
      lrecProdOrderComp.SETRANGE("Prod. Order Line No.", piProdOrderLineNumber);

      IF( lrecProdOrderComp.FIND('-') ) THEN BEGIN
        REPEAT
          ldTotalPartQty := ldTotalPartQty + lrecProdOrderComp.Quantity;
        UNTIL( lrecProdOrderComp.NEXT=0 );
      END;

      EXIT(ldTotalPartQty);
    END;

    PROCEDURE getProdOrderList@1000000000(VAR ptrecEventParams@1000000008 : TEMPORARY Record 23044511;VAR pbsOutput@1000000007 : BigText);
    VAR
      lrecProdOrder@1000000005 : Record 5405;
      lrecProdOrderLine@1000000004 : Record 5406;
      lrecConfig@1000000001 : Record 23044504;
      lrecItem@1000000000 : Record 27;
      lrecItemTrackingCode@1000000020 : Record 6502;
      ltrecDocList@1000000016 : TEMPORARY Record 23044535;
      lrrefDocListRef@1000000017 : RecordRef;
      lcuDataSetTools@1000000018 : Codeunit 23044535;
      ldnOutput@1000000012 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      lsFilter@1000000006 : Text[250];
      lsTestOptionalFlag@1000000014 : Text[100];
      ltxtItemNumber@1000000010 : Text;
      lcodUserName@1000000002 : Code[50];
      liCount@1000000009 : Integer;
      liOptionalType@1000000013 : Integer;
      liEntryNo@1000000003 : Integer;
      lbAddByTracking@1000000022 : Boolean;
      lsMissingText@1000000011 : Text;
    BEGIN
      // Returns a listing of the Released Production Orders by Line No.
      lcodUserName := ptrecEventParams.getValue('user_name');
      lsFilter := ptrecEventParams.getValue('filter');
      ltxtItemNumber := ptrecEventParams.getItemNo();

      IF( lsFilter <> '' ) THEN BEGIN
        lsFilter := '*' + lsFilter + '*';
      END;

      cuCommonFuncs.getDeviceConfig( lrecConfig,ptrecEventParams );

      liOptionalType := 0; // 0 is undefined
      // 1 = consumption
      // 2 = output
      EVALUATE( lsTestOptionalFlag, ptrecEventParams.getValue('prod_action_type') );
      IF ( lsTestOptionalFlag <> '' ) THEN BEGIN
        EVALUATE( liOptionalType, lsTestOptionalFlag );
      END;

      lrecProdOrder.SETRANGE(Status,lrecProdOrderLine.Status::Released);

      IF ( NOT lrecConfig."Ignore Prod. Order Location" ) THEN BEGIN
        lrecProdOrder.SETRANGE("Location Code", lrecConfig."Location Code");
      END;


      IF ( NOT lrecConfig."Show All Documents" ) AND ( lcodUserName<>'' ) THEN BEGIN
        lrecProdOrder.SETFILTER("Assigned User ID",'%1|%2','','*'+  lcodUserName);
      END;

      IF( lsFilter <> '' ) THEN
        lrecProdOrder.SETFILTER("No.", lsFilter);

      IF (NOT lrecProdOrder.FINDSET(FALSE)) THEN BEGIN
        IF (ltxtItemNumber <> '') THEN BEGIN
          lrecProdOrder.SETRANGE("No.");
          lrecProdOrder.SETFILTER("Source No.", ltxtItemNumber);
          IF (NOT lrecProdOrder.FINDSET(FALSE)) THEN BEGIN
      //      createProdOrder(lrecConfig."Location Code", ltxtItemNumber);
          END;
        END;
      END;


      lsMissingText := cuTranslationMgmt.getTranslatedString('ERR_PROD_MISSING_SNLN', codRegionCode);

      liEntryNo := 1;

      IF( lrecProdOrder.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          lrecProdOrderLine.SETRANGE("Prod. Order No.",lrecProdOrder."No.");
          lrecProdOrderLine.SETRANGE(Status,lrecProdOrder.Status);
          IF( lrecProdOrderLine.FINDSET(FALSE) ) THEN BEGIN
            REPEAT
              lbAddByTracking := FALSE;
              IF(lrecConfig."Prod. List Per Tracking Line") THEN BEGIN
                lrecItem.GET( lrecProdOrderLine."Item No." );
                IF lrecItemTrackingCode.GET(lrecItem."Item Tracking Code") THEN BEGIN
                  lbAddByTracking := lrecItemTrackingCode."SN Manuf. Inbound Tracking" OR lrecItemTrackingCode."Lot Manuf. Inbound Tracking";
                END;
              END;

              IF(lbAddByTracking) THEN BEGIN
                // add unique lines (e.g. same lot # should not show up twice).
                liCount := getUnPostedProdOrderTracking(ltrecDocList, liEntryNo, lrecProdOrderLine);
                liCount += getPostedProdOrderTracking(ltrecDocList, liEntryNo, lrecProdOrderLine, lrecProdOrder);
                IF( liCount < 1 ) THEN BEGIN
                  addProdOrderToList(ltrecDocList, liEntryNo,lrecProdOrderLine."Prod. Order No.",
                                              lrecProdOrderLine."Line No.",lrecProdOrderLine."Item No.",lsMissingText, lsMissingText);
                END;
              END ELSE BEGIN
                  addProdOrderToList(ltrecDocList, liEntryNo,lrecProdOrderLine."Prod. Order No.",
                                              lrecProdOrderLine."Line No.",lrecProdOrderLine."Item No.",'', '');
              END;
            UNTIL(lrecProdOrderLine.NEXT=0);
          END;
        UNTIL lrecProdOrder.NEXT = 0;
      END;


      ltrecDocList.RESET;
      lrrefDocListRef.GETTABLE( ltrecDocList  );
      IF ( lrrefDocListRef.FINDFIRST() ) THEN;

      ldnOutput := ldnOutput.StringBuilder();
      lcuDataSetTools.BuildLinesOnlyDataset(
        iEventID,
        lrrefDocListRef,
        FALSE,
        ldnOutput);

      pbsOutput.ADDTEXT( ldnOutput.ToString() );

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE getUnPostedProdOrderTracking@1000000018(VAR ptrecDocList@1000000000 : TEMPORARY Record 23044535;VAR piEntryNo@1000000003 : Integer;precProdOrderLine@1000000001 : Record 5406) : Integer;
    VAR
      lrecReservationEntry@1000000002 : Record 337;
      liCount@1000000004 : Integer;
    BEGIN
      //<FUNC>
      // Gets the current item tracking for the production order line
      // Duplicates ignored
      //</FUNC>
      lrecReservationEntry.RESET();
      lrecReservationEntry.SETRANGE("Item No.", precProdOrderLine."Item No.");
      //lrecReservationEntry.SETRANGE("Reservation Status", lrecReservationEntry."Reservation Status"::Surplus);
      lrecReservationEntry.SETRANGE("Source Type", DATABASE::"Prod. Order Line" );
      lrecReservationEntry.SETRANGE("Source ID", precProdOrderLine."Prod. Order No." );
      lrecReservationEntry.SETRANGE("Source Prod. Order Line", precProdOrderLine."Line No." );
      lrecReservationEntry.SETFILTER("Item Tracking", '<>%1', lrecReservationEntry."Item Tracking"::None);

      IF ( lrecReservationEntry.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          IF( (lrecReservationEntry."Serial No."<>'') OR (lrecReservationEntry."Lot No." <> '') ) THEN BEGIN
            ptrecDocList.RESET;
            ptrecDocList.SETRANGE("Document No.", precProdOrderLine."Prod. Order No.");
            ptrecDocList.SETRANGE("Custom Integer 1", precProdOrderLine."Line No.");
            ptrecDocList.SETRANGE("Custom Text 1", lrecReservationEntry."Lot No.");
            ptrecDocList.SETRANGE("Custom Text 2", lrecReservationEntry."Serial No.");
            IF( NOT ptrecDocList.FINDFIRST ) THEN BEGIN
              liCount+=1;
              addProdOrderToList(ptrecDocList, piEntryNo,precProdOrderLine."Prod. Order No.",
                                              precProdOrderLine."Line No.",precProdOrderLine."Item No.",lrecReservationEntry."Serial No.", lrecReservationEntry."Lot No.");
            END;
          END;
        UNTIL( lrecReservationEntry.NEXT() = 0 );
      END;

      EXIT(liCount);
    END;

    PROCEDURE getPostedProdOrderTracking@1000000033(VAR ptrecDocList@1000000002 : TEMPORARY Record 23044535;VAR piEntryNo@1000000001 : Integer;precProdOrderLine@1000000000 : Record 5406;precProdOrder@1000000006 : Record 5405) : Integer;
    VAR
      lrecItemLedger@1000000005 : Record 32;
      ldtMinDate@1000000004 : Date;
      liCount@1000000003 : Integer;
    BEGIN
      //<FUNC>
      // Gets the posted item tracking for the production order line
      // Duplicates ignored
      //</FUNC>


      // filters for posted
      lrecItemLedger.SETRANGE("Order Type", lrecItemLedger."Order Type"::Production );
      lrecItemLedger.SETRANGE("Order No.", precProdOrderLine."Prod. Order No.");
      lrecItemLedger.SETRANGE("Order Line No.", precProdOrderLine."Line No.");
      lrecItemLedger.SETRANGE("Item No.", precProdOrderLine."Item No.");
      lrecItemLedger.SETRANGE("Entry Type",  lrecItemLedger."Entry Type"::Output);
      lrecItemLedger.SETRANGE(Open,  TRUE );

      ldtMinDate := precProdOrder."Starting Date";
      IF ( precProdOrder."Creation Date" < ldtMinDate ) THEN BEGIN
        ldtMinDate := precProdOrder."Creation Date";
      END;
      lrecItemLedger.SETFILTER("Posting Date",'>=%1', ldtMinDate );

      IF ( lrecItemLedger.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          ptrecDocList.RESET;
          ptrecDocList.SETRANGE("Document No.", precProdOrderLine."Prod. Order No.");
          ptrecDocList.SETRANGE("Custom Integer 1", precProdOrderLine."Line No.");
          ptrecDocList.SETRANGE("Custom Text 1", lrecItemLedger."Lot No.");
          ptrecDocList.SETRANGE("Custom Text 2", lrecItemLedger."Serial No.");
          IF( NOT ptrecDocList.FINDFIRST ) THEN BEGIN
            liCount+=1;
            addProdOrderToList(ptrecDocList, piEntryNo, precProdOrderLine."Prod. Order No.",
                                              precProdOrderLine."Line No.", precProdOrderLine."Item No.",lrecItemLedger."Serial No.", lrecItemLedger."Lot No.");
          END;
        UNTIL( lrecItemLedger.NEXT() = 0 );
      END;

      EXIT(liCount);
    END;

    PROCEDURE addProdOrderToList@1000000017(VAR ptrecDocList@1000000001 : Record 23044535;VAR piLineCounter@1000000000 : Integer;pcodProdOrderNo@1000000002 : Code[20];piProdOrderLineNo@1000000003 : Integer;psItemNo@1000000006 : Text;psSerialNo@1000000004 : Text;psLotNo@1000000005 : Text);
    VAR
      lrecProdOrder@1000000007 : Record 5405;
      lsBarcode@1000000008 : Text;
    BEGIN
      //<FUNC>
      // Add the production order to the lookup list result set
      //</FUNC>
      IF lrecProdOrder.GET(lrecProdOrder.Status::Released,pcodProdOrderNo) THEN BEGIN
        piLineCounter += 1;
        ptrecDocList.INIT;
        ptrecDocList."Entry No." := piLineCounter;
        ptrecDocList."Source Table" := DATABASE::"Production Order";
        ptrecDocList."Reference No." := psItemNo;
        ptrecDocList."Document No." := pcodProdOrderNo;
        ptrecDocList."No." := pcodProdOrderNo;
        ptrecDocList."Custom Integer 1" := piProdOrderLineNo;
        ptrecDocList."Custom Text 1" := psLotNo;
        ptrecDocList."Custom Text 2" := psSerialNo;
        ptrecDocList."Assigned User ID" := lrecProdOrder."Assigned User ID";
        ptrecDocList."Due Date" := lrecProdOrder."Due Date";

        lsBarcode := '%P%' + STRSUBSTNO('%1 %2',pcodProdOrderNo,piProdOrderLineNo);
        IF psSerialNo <> '' THEN BEGIN
          lsBarcode += STRSUBSTNO(' SN:%1',psSerialNo);
        END;

        IF psLotNo <> '' THEN BEGIN
          lsBarcode += STRSUBSTNO(' LN:%3',psLotNo);
        END;

        ptrecDocList.Barcode := lsBarcode;
        ptrecDocList.INSERT;
      END;
    END;

    PROCEDURE getProdOrderOutput@1000000001(VAR ptrecEventParams@1000000011 : TEMPORARY Record 23044511;VAR pbsOutput@1000000010 : BigText);
    VAR
      lrecProductionORder@1000000013 : Record 5405;
      lrecProdOrderLine@1000000008 : Record 5406;
      lrecProdOrderRtngLine@1000000007 : Record 5409;
      lrecItemTrackingCode@1000000009 : Record 6502;
      lrrefHeader@1000000005 : RecordRef;
      lrrefLine@1000000001 : RecordRef;
      lrecConfig@1000000017 : Record 23044504;
      lcodUserName@1000000004 : Code[50];
      lcodProdOrderNo@1000000002 : Code[20];
      lcodOperation@1000000012 : Code[10];
      liProdOrderLineNo@1000000006 : Integer;
      lcuDataSetTools@1000000003 : Codeunit 23044535;
      ldnOutput@1000000014 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      liSteps@1000000016 : Integer;
    BEGIN
      // Returns the posted and current output for the production order.
      lcodUserName := ptrecEventParams.getValue('user_name');
      lcodProdOrderNo := ptrecEventParams.getDocumentNo();
      liProdOrderLineNo := ptrecEventParams.getLineNo();
      lcodOperation := ptrecEventParams.getValue('oper');
      ldnOutput := ldnOutput.StringBuilder();

      lrecProductionORder.GET(lrecProductionORder.Status::Released,lcodProdOrderNo);
      assignProductionOrder(lrecProductionORder, ptrecEventParams);

      lrecProdOrderLine.GET(lrecProdOrderLine.Status::Released,lcodProdOrderNo,liProdOrderLineNo);
      lrecProdOrderLine.SETRECFILTER();
      lrrefHeader.GETTABLE( lrecProdOrderLine );
      ldnOutput.Append('<DATASET><TABLE id="header"><COLS>');
      cuCommonFuncs.initializeColumns( TRUE );
      cuCommonFuncs.addDSColumnsFromConfigDN(ldnOutput,iEventID,'', DATABASE::"Prod. Order Line" );
      ldnOutput.Append('</COLS><ROWS><R><FIELDS>');
      cuCommonFuncs.addDSFieldsForRecordDN(ldnOutput,lrrefHeader,iEventID,'');
      ldnOutput.Append('</FIELDS></R></ROWS>');
      ldnOutput.Append('</TABLE>');
      ldnOutput.Append('<TABLE id="line">');
      ldnOutput.Append('<COLS>');
      cuCommonFuncs.initializeColumns( TRUE );
      cuCommonFuncs.addDSColumnsFromConfigDN(ldnOutput,iEventID,'', DATABASE::"Prod. Order Routing Line" );
      cuCommonFuncs.addDSTrackingColumnsDN(ldnOutput);
      ldnOutput.Append('</COLS><ROWS>');

      lrecProdOrderRtngLine.ASCENDING(FALSE);
      lrecProdOrderRtngLine.SETRANGE(Status,lrecProdOrderLine.Status);
      lrecProdOrderRtngLine.SETRANGE("Prod. Order No.",lrecProdOrderLine."Prod. Order No.");
      lrecProdOrderRtngLine.SETRANGE("Routing Reference No.",lrecProdOrderLine."Routing Reference No.");
      lrecProdOrderRtngLine.SETRANGE("Routing No.",lrecProdOrderLine."Routing No.");

      cuCommonFuncs.getDeviceConfig( lrecConfig,ptrecEventParams );
      IF( lrecConfig."Output To Last Operation" ) THEN BEGIN
        lrecProdOrderRtngLine.SETFILTER("Next Operation No.",'%1','');
      END;

      IF lcodOperation <> '' THEN
        lrecProdOrderRtngLine.SETRANGE("Operation No.",lcodOperation);

      IF( lrecProdOrderRtngLine.FIND('-') ) THEN BEGIN
        REPEAT
          getProdOutputRtngLine(ldnOutput, lrecProdOrderLine, lrecProdOrderRtngLine);
        UNTIL (lrecProdOrderRtngLine.NEXT = 0);
        REPEAT
          liSteps := lrecProdOrderRtngLine.NEXT(-10000);  // Back to the top
        UNTIL (liSteps <= 0)
      END;


      ldnOutput.Append('</ROWS></TABLE></DATASET>');
      pbsOutput.ADDTEXT( ldnOutput.ToString() );

      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"Prod. Order Routing Line"));
      ptrecEventParams.setValue('Document No.', lcodProdOrderNo);
      ptrecEventParams.setValue('Document Line No.', FORMAT(liProdOrderLineNo));
      ptrecEventParams.setValue('Source Document Type', FORMAT(DATABASE::"Prod. Order Line"));
      ptrecEventParams.setValue('Source Document No.', lcodProdOrderNo);
      ptrecEventParams.setValue('Source Document Line No.', FORMAT(liProdOrderLineNo));
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE getProdOutputRtngLine@1000000015(VAR pdnOutput@1000000009 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";precProdOrderLine@1000000006 : Record 5406;precProdOrderRtngLine@1000000001 : Record 5409);
    VAR
      lrecCapacityLedgerEntries@1000000004 : Record 5832;
      lrecItem@1000000008 : Record 27;
      lrrefLine@1000000007 : RecordRef;
      ldScrapQty@1000000003 : Decimal;
      ldOutputQty@1000000002 : Decimal;
      ldRemainingQty@1000000005 : Decimal;
    BEGIN
      pdnOutput.Append('<R><FIELDS>');

      ldOutputQty := 0;
      ldScrapQty := 0;

      lrecCapacityLedgerEntries.SETRANGE("Order Type", lrecCapacityLedgerEntries."Order Type"::Production);
      lrecCapacityLedgerEntries.SETRANGE("Order No.", precProdOrderLine."Prod. Order No.");
      lrecCapacityLedgerEntries.SETRANGE("Order Line No.", precProdOrderLine."Line No.");
      lrecCapacityLedgerEntries.SETRANGE("Operation No.", precProdOrderRtngLine."Operation No.");
      IF( lrecCapacityLedgerEntries.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          ldScrapQty := ldScrapQty +
              cuCommonFuncs.ConvertUnitOfMeasure(lrecItem, lrecCapacityLedgerEntries."Scrap Quantity", lrecItem."Base Unit of Measure", precProdOrderLine."Unit of Measure Code");
          ldOutputQty := ldOutputQty +
              cuCommonFuncs.ConvertUnitOfMeasure(lrecItem, lrecCapacityLedgerEntries."Output Quantity", lrecItem."Base Unit of Measure", precProdOrderLine."Unit of Measure Code");
        UNTIL( lrecCapacityLedgerEntries.NEXT=0);
      END;

      ldRemainingQty := precProdOrderLine.Quantity - ldOutputQty;

      IF( ldRemainingQty < 0 ) THEN
        ldRemainingQty := 0;

      cuCommonFuncs.setDSFieldOverrideValue(40007,'',DATABASE::"Prod. Order Routing Line",-1,STRSUBSTNO('%1', ldRemainingQty));
      cuCommonFuncs.setDSFieldOverrideValue(40007,'',DATABASE::"Prod. Order Routing Line",-2,STRSUBSTNO('%1', ldOutputQty));
      cuCommonFuncs.setDSFieldOverrideValue(40007,'',DATABASE::"Prod. Order Routing Line",-3,STRSUBSTNO('%1', ldScrapQty));
      cuCommonFuncs.setDSFieldOverrideValue(40007,'',DATABASE::"Prod. Order Routing Line",-4,precProdOrderLine."Unit of Measure Code");
      cuCommonFuncs.setDSFieldOverrideValue(40007,'',DATABASE::"Prod. Order Routing Line",-5,precProdOrderLine."Item No.");

      lrecItem.GET(precProdOrderLine."Item No.");

      lrrefLine.GETTABLE(precProdOrderRtngLine);
      cuCommonFuncs.addDSFieldsForRecordDN(pdnOutput,lrrefLine,40007,'');
      cuCommonFuncs.addDSFieldDN(pdnOutput,lrecItem."Item Tracking Code");

      pdnOutput.Append('</FIELDS></R>');
    END;

    PROCEDURE changeProdOutput@1000000003(VAR ptrecEventParams@1000000016 : TEMPORARY Record 23044511;VAR pbsOutput@1000000015 : BigText);
    VAR
      lrecLPSetup@1000000017 : Record 23044523;
      lrecProdOrderRtngLine@1000000019 : Record 5409;
      lrecProdOrderLine@1000000009 : Record 5406;
      lrecConfig@1000000000 : Record 23044504;
      lcodUserName@1000000004 : Code[50];
      lcodProdOrderNo@1000000003 : Code[20];
      liProdOrderLineNo@1000000002 : Integer;
      lcodOperation@1000000006 : Code[10];
      ldOutputQty@1000000007 : Decimal;
      ldScrapQty@1000000008 : Decimal;
      lcodBatchName@1000000010 : Code[10];
      lsSerialNumber@1000000011 : Text;
      lsLotNumber@1000000001 : Text;
      ldSetupTime@1000000013 : Decimal;
      ldRunTime@1000000014 : Decimal;
      lbsOutputTemp@1000000012 : BigText;
      ldtExpirationDate@1000000005 : Date;
      lcodLPNumber@1000000018 : Code[20];
      ldnOutput@1000000025 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      liSteps@1000000020 : Integer;
      ldPreviousLPQty@1000000022 : Decimal;
      ldNewLPQty@1000000023 : Decimal;
      liNumberOfLabels@1000000024 : Integer;
      liLPLineNumber@100000000 : Integer;
    BEGIN
      // Creates and posts the output line.
      lcodUserName := ptrecEventParams.getValue('user_name');
      lcodProdOrderNo := ptrecEventParams.getDocumentNo();
      liProdOrderLineNo := ptrecEventParams.getLineNo();
      lcodOperation := ptrecEventParams.getValue('oper');
      ldOutputQty := ptrecEventParams.getValueAsDecimal('qty_to_output');
      ldScrapQty := ptrecEventParams.getValueAsDecimal('qty_to_scrap');
      liNumberOfLabels :=  ptrecEventParams.getValueAsInt('number_of_labels');

      // this will automatically look for an appropriate batch based on the user ID, or
      // it will attempt to use a specific batch if it's defined in the device config card.
      lcodBatchName := cuJnlFunctions.getItemJnlOutputBatchToUse(ptrecEventParams);
      ldSetupTime := ptrecEventParams.getValueAsDecimal('setup_time');
      ldRunTime := ptrecEventParams.getValueAsDecimal('run_time');
      lsSerialNumber := ptrecEventParams.getSerialNo();
      lsLotNumber := ptrecEventParams.getLotNo();
      ldtExpirationDate := cuCommonFuncs.getExpirationDate(ptrecEventParams);

      lcodLPNumber := ptrecEventParams.getValue('lp_number');
      lrecLPSetup.GET;
      IF( lrecLPSetup."Require LP On Output" AND (lcodLPNumber='') ) THEN BEGIN
        ERROR(cuTranslationMgmt.getTranslatedString('ERR_PROD_LP_NOT_STARTED', codRegionCode), lcodProdOrderNo);
      END;

      cuCommonFuncs.getDeviceConfig( lrecConfig,ptrecEventParams );

      lrecProdOrderLine.GET(lrecProdOrderLine.Status::Released,lcodProdOrderNo,liProdOrderLineNo);

      createOutputEntry(
        getTemplate(PAGE::"Output Journal"),
        lcodBatchName,
        lrecProdOrderLine,
        lcodOperation,
        ldOutputQty,
        ldScrapQty,
        lcodUserName,
        ldSetupTime,
        ldRunTime,
        lsSerialNumber,
        lsLotNumber,
        ldtExpirationDate
      );

      IF( lrecConfig."Auto Print On Output" ) THEN BEGIN
        ptrecEventParams.setValue('label_include_qty',FORMAT(TRUE));
        ptrecEventParams.setValue('label_quantity', FORMAT(ldOutputQty));
        ptrecEventParams.setValue('label_uom', lrecProdOrderLine."Unit of Measure Code");
        ptrecEventParams.setValue('label_numcopies',FORMAT(liNumberOfLabels));
        ptrecEventParams.setValue('label_variant_code',lrecProdOrderLine."Variant Code");
        ptrecEventParams.setValue('label_item_number',lrecProdOrderLine."Item No.");
        ptrecEventParams.setValue('label_ledger_entry_number',FORMAT(0));
        ptrecEventParams.setValue('label_tracking_number', lsLotNumber+lsSerialNumber);
        ptrecEventParams.setValue('label_expiry_date', FORMAT(ldtExpirationDate));

        cuPrintingMgmt.handlePrint( ptrecEventParams, lbsOutputTemp);
      END;


      IF(lcodLPNumber <> '') THEN BEGIN
        liLPLineNumber := cuLPMgmt.updateLicensePlateLine(
          lcodLPNumber,
          lrecProdOrderLine."Item No.",
          lrecProdOrderLine."Variant Code",
          lsLotNumber,
          ldtExpirationDate,
          lsSerialNumber,
          '',   // barcode date
          ldOutputQty,
          lrecProdOrderLine."Unit of Measure Code",
          lrecConfig.Code,
          ldPreviousLPQty,
          ldNewLPQty
        );

        CreateOutputLPLineUsage(lcodLPNumber, liLPLineNumber, lrecProdOrderLine."Prod. Order No.", lrecProdOrderLine."Line No.", ldOutputQty);
      END;

      ldnOutput := ldnOutput.StringBuilder();
      ldnOutput.Append('<DATASET>');
      ldnOutput.Append('<TABLE id="line">');
      ldnOutput.Append('<COLS>');
      cuCommonFuncs.initializeColumns( TRUE );
      cuCommonFuncs.addDSColumnsFromConfigDN(ldnOutput,40007,'', DATABASE::"Prod. Order Routing Line" );
      cuCommonFuncs.addDSTrackingColumnsDN(ldnOutput);
      ldnOutput.Append('</COLS><ROWS>');

      lrecProdOrderRtngLine.ASCENDING(FALSE);
      lrecProdOrderRtngLine.SETRANGE(Status,lrecProdOrderLine.Status);
      lrecProdOrderRtngLine.SETRANGE("Prod. Order No.",lrecProdOrderLine."Prod. Order No.");
      lrecProdOrderRtngLine.SETRANGE("Routing Reference No.",lrecProdOrderLine."Routing Reference No.");
      lrecProdOrderRtngLine.SETRANGE("Routing No.",lrecProdOrderLine."Routing No.");
      lrecProdOrderRtngLine.SETRANGE("Operation No.",lcodOperation);

      IF( lrecProdOrderRtngLine.FIND('-') ) THEN BEGIN
        REPEAT
          getProdOutputRtngLine(ldnOutput, lrecProdOrderLine, lrecProdOrderRtngLine);
        UNTIL (lrecProdOrderRtngLine.NEXT = 0);
        REPEAT
          liSteps := lrecProdOrderRtngLine.NEXT(-10000);  // Back to the top
        UNTIL (liSteps <= 0)
      END;

      ldnOutput.Append('</ROWS></TABLE></DATASET>');
      pbsOutput.ADDTEXT( ldnOutput.ToString() );

      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"Prod. Order Line"));
      ptrecEventParams.setValue('Document No.', lcodProdOrderNo);
      ptrecEventParams.setValue('Document Line No.', FORMAT(liProdOrderLineNo));
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE getTemplate@1000000012(piFormID@1000000000 : Integer) : Code[10];
    VAR
      lrecItemJnlTemplate@1000000001 : Record 82;
    BEGIN
      lrecItemJnlTemplate.SETRANGE("Page ID",piFormID);
      lrecItemJnlTemplate.FINDFIRST;
      EXIT(lrecItemJnlTemplate.Name);
    END;

    PROCEDURE testDoesProdOrderLineNeedLotTr@1000000013(VAR precConfig@1000000005 : Record 23044504;pcodProdOrderNo@1000000000 : Code[20];piLineNo@1000000001 : Integer;psSerialNo@1000000002 : Text;psLotNo@1000000003 : Text);
    VAR
      lrecProdOrderLine@1000000004 : Record 5406;
      lrecItem@1000000006 : Record 27;
      lrecItemTracking@1000000007 : Record 6502;
    BEGIN
      // If the device config requires us to check for tracking before we're allowed
      // to consume, then start checking the item tracking line as well.
      IF ( precConfig."Require Tracking Before Cons." ) THEN BEGIN
        lrecProdOrderLine.GET(lrecProdOrderLine.Status::Released,pcodProdOrderNo,piLineNo);

        IF ( lrecItem.GET( lrecProdOrderLine."Item No." ) ) THEN BEGIN
          IF (lrecItem."Item Tracking Code" <> '' ) THEN BEGIN
            // TODO: Tim
            // get the item tracking code, if it needs sn or ln tracking inbound then
            // make sure that it has the specified sn or lot.
            IF ( lrecItemTracking.GET(lrecItem."Item Tracking Code") ) THEN BEGIN
              IF ( lrecItemTracking."SN Manuf. Inbound Tracking" ) THEN BEGIN
                verifySerialInProdOrderLine( lrecProdOrderLine, psSerialNo );
              END; // if we are configured to track inbound manufacturing tracking.

              IF ( lrecItemTracking."Lot Manuf. Inbound Tracking" ) THEN BEGIN
                verifyLotInProdOrderLine( lrecProdOrderLine, psLotNo );
              END; // if we are configured to track inbound manufacturing tracking.
            END; // if we can get the item tracking code
          END; // if the item has a tracking code
        END; // if the item exists

      END; // if we're configured to check
    END;

    PROCEDURE verifySerialInProdOrderLine@1000000054(VAR precProdOrderLine@1000000000 : Record 5406;psSerialNo@1000000001 : Text);
    VAR
      lrecReservationEntry@1000000002 : Record 337;
      lrecItemLedger@1000000003 : Record 32;
    BEGIN
      // Need to check reservation entries first.
      // If not found check item ledger entries.
      //
      // If not found in either, error.
      //
      // This function should only be called after it is known that a serial number is needed.

      psSerialNo := UPPERCASE(psSerialNo);

      // first make sure one is required
      IF ( psSerialNo = '' ) THEN BEGIN
        ERROR( cuTranslationMgmt.getTranslatedString('ERR_CONS_SN_REQUIRED', codRegionCode), precProdOrderLine."Prod. Order No.", precProdOrderLine."Item No." );
      END;

      // filters for unposted
      lrecReservationEntry.RESET();
      lrecReservationEntry.SETRANGE("Item No.", precProdOrderLine."Item No.");
      lrecReservationEntry.SETRANGE("Reservation Status", lrecReservationEntry."Reservation Status"::Surplus);
      lrecReservationEntry.SETRANGE("Source Type", DATABASE::"Prod. Order Line" );
      lrecReservationEntry.SETRANGE("Source ID", precProdOrderLine."Prod. Order No." );
      lrecReservationEntry.SETRANGE("Source Prod. Order Line", precProdOrderLine."Line No." );
      lrecReservationEntry.SETRANGE("Serial No.", psSerialNo );

      IF ( lrecReservationEntry.FINDFIRST() ) THEN BEGIN
        // if we found a matching reservation entry, then it is valid
        // return
        EXIT;
      END;

      //
      // At this point there is no matching reservation entry
      // so check the posted entries.

      // filters for posted
      lrecItemLedger.SETRANGE("Order Type", lrecItemLedger."Order Type"::Production );
      lrecItemLedger.SETRANGE("Order No.", precProdOrderLine."Prod. Order No.");
      lrecItemLedger.SETRANGE("Order Line No.", precProdOrderLine."Line No.");
      lrecItemLedger.SETRANGE("Item No.", precProdOrderLine."Item No.");
      lrecItemLedger.SETRANGE("Entry Type",  lrecItemLedger."Entry Type"::Output);
      lrecItemLedger.SETRANGE("Serial No.", psSerialNo );
      IF ( lrecItemLedger.FINDFIRST() ) THEN BEGIN
        // if we found a matching item ledger entry
        // then exit.
      END;

      // at this point it's a failure.
      ERROR(cuTranslationMgmt.getTranslatedString('ERR_PROD_INVALID_SN', codRegionCode), psSerialNo, precProdOrderLine."Prod. Order No.", precProdOrderLine."Item No." );
    END;

    PROCEDURE verifyLotInProdOrderLine@1000000049(VAR precProdOrderLine@1000000000 : Record 5406;psLotNo@1000000001 : Text);
    VAR
      lrecReservationEntry@1000000002 : Record 337;
      lrecItemLedger@1000000003 : Record 32;
    BEGIN
      // Need to check reservation entries first.
      // If not found check item ledger entries.
      //
      // If not found in either, error.
      //
      // This function should only be called after it is known that a LOT number is needed.

      psLotNo := UPPERCASE(psLotNo);

      // first make sure one is required
      IF ( psLotNo = '' ) THEN BEGIN
        ERROR( cuTranslationMgmt.getTranslatedString('ERR_CONS_LN_REQUIRED', codRegionCode) , precProdOrderLine."Prod. Order No.", precProdOrderLine."Item No." );
      END;


      // filters for unposted
      lrecReservationEntry.RESET();
      lrecReservationEntry.SETRANGE("Item No.", precProdOrderLine."Item No.");
      lrecReservationEntry.SETRANGE("Reservation Status", lrecReservationEntry."Reservation Status"::Surplus);
      lrecReservationEntry.SETRANGE("Source Type", DATABASE::"Prod. Order Line" );
      lrecReservationEntry.SETRANGE("Source ID", precProdOrderLine."Prod. Order No." );
      lrecReservationEntry.SETRANGE("Source Prod. Order Line", precProdOrderLine."Line No." );
      lrecReservationEntry.SETRANGE("Lot No.", psLotNo );

      IF ( lrecReservationEntry.FINDFIRST() ) THEN BEGIN
        // if we found a matching reservation entry, then it is valid
        // return
        EXIT;
      END;

      //
      // At this point there is no matching reservation entry
      // so check the posted entries.

      // filters for posted
      lrecItemLedger.SETRANGE("Order Type", lrecItemLedger."Order Type"::Production );
      lrecItemLedger.SETRANGE("Order No.", precProdOrderLine."Prod. Order No.");
      lrecItemLedger.SETRANGE("Order Line No.", precProdOrderLine."Line No.");
      lrecItemLedger.SETRANGE("Item No.", precProdOrderLine."Item No.");
      lrecItemLedger.SETRANGE("Entry Type",  lrecItemLedger."Entry Type"::Output);
      lrecItemLedger.SETRANGE("Lot No.", psLotNo );
      IF ( lrecItemLedger.FINDFIRST() ) THEN BEGIN
        // if we found a matching item ledger entry
        // then exit.
        EXIT;
      END;

      // at this point it's a failure.
      ERROR( cuTranslationMgmt.getTranslatedString('ERR_PROD_INVALID_LN', codRegionCode), psLotNo, precProdOrderLine."Prod. Order No.", precProdOrderLine."Item No." );
    END;

    PROCEDURE createOutputEntry@1000000002(pcodTemplateName@1000000010 : Code[10];pcodBatchName@1000000013 : Code[10];precProdOrderLine@1000000004 : Record 5406;pcodOperationNo@1000000003 : Code[10];pdOutputQuantity@1000000015 : Decimal;pdScrapQuantity@1000000002 : Decimal;pcodUserID@1000000006 : Code[20];pdSetupTime@1000000021 : Decimal;pdRunTime@1000000022 : Decimal;VAR psSerialNumberOutput@1000000019 : Text;VAR psLotNumberOutput@1000000020 : Text;pdtExpirationDate@1000000007 : Date);
    VAR
      liLineNo@1000000000 : Integer;
      lrecOutJnl@1000000012 : Record 83;
      lrecWORouting@1000000011 : Record 5409;
      lrecCapacityLedgerEntry@1000000001 : Record 5832;
      lrecItem@100000001 : Record 27;
      lbLastOperation@1000000009 : Boolean;
      ldPostedOutputQty@1000000016 : Decimal;
      lcuItemJnlPostBatch@1000000005 : Codeunit 23;
      lrecItemJnlTemplate@1000000023 : Record 82;
      lcuResMgmt@100000000 : Codeunit 23044514;
    BEGIN
      // Creates an output entry and posts it.
      liLineNo := 1111;
      lrecItemJnlTemplate.GET(pcodTemplateName);

      // allow checking of existing output journal line.
      lrecOutJnl.RESET();
      lrecOutJnl.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Line No.");
      lrecOutJnl.SETRANGE("Journal Template Name", pcodTemplateName );
      lrecOutJnl.SETRANGE("Journal Batch Name", pcodBatchName );
      lrecOutJnl.ASCENDING(TRUE);
      IF ( lrecOutJnl.FINDLAST() ) THEN BEGIN
        liLineNo := lrecOutJnl."Line No." + 10000;
      END;

      lrecOutJnl.INIT;
      lrecOutJnl."Journal Template Name" := pcodTemplateName;
      lrecOutJnl."Journal Batch Name" := pcodBatchName;
      lrecOutJnl."Line No." := liLineNo;
      lrecOutJnl."Source Code" := lrecItemJnlTemplate."Source Code";
      lrecOutJnl."Document Date" := TODAY;
      lrecOutJnl."Entry Type" := lrecOutJnl."Entry Type"::Output;
      lrecOutJnl.VALIDATE("Order Type",lrecOutJnl."Order Type"::Production);
      lrecOutJnl.VALIDATE("Order No.", precProdOrderLine."Prod. Order No.");
      lrecOutJnl.VALIDATE("Order Line No.",precProdOrderLine."Line No.");
      lrecOutJnl.VALIDATE("Routing Reference No.",precProdOrderLine."Line No.");
      lrecOutJnl.VALIDATE("Item No.", precProdOrderLine."Item No.");
      lrecOutJnl.VALIDATE("Variant Code", precProdOrderLine."Variant Code");
      lrecOutJnl.VALIDATE("Operation No.", pcodOperationNo);
      lrecOutJnl."Posting Date" := TODAY;

      //
      // checking for last operation
      // Note: Not used but left in for ease of use for implementors to determine if
      // status change should be done, workflow stuff, etc.
      //
      lbLastOperation := FALSE;
      lrecWORouting.RESET;
      lrecWORouting.SETRANGE("Prod. Order No.",precProdOrderLine."Prod. Order No.");
      lrecWORouting.SETRANGE("Routing Reference No.",precProdOrderLine."Routing Reference No.");
      lrecWORouting.SETRANGE("Routing No.",precProdOrderLine."Routing No.");
      lrecWORouting.SETRANGE("Operation No.",pcodOperationNo);
      IF( lrecWORouting.FIND('-') ) THEN BEGIN
        lbLastOperation := (lrecWORouting."Next Operation No." = '');
      END ELSE BEGIN
        IF (pcodOperationNo = '') THEN BEGIN
          lbLastOperation := TRUE;
        END;
      END;

      // determine the already output quantity
      lrecItem.GET(precProdOrderLine."Item No.");
      ldPostedOutputQty := 0;
      lrecCapacityLedgerEntry.SETRANGE("Order Type",lrecCapacityLedgerEntry."Order Type"::Production);
      lrecCapacityLedgerEntry.SETRANGE("Order No.",precProdOrderLine."Prod. Order No.");
      lrecCapacityLedgerEntry.SETRANGE("Order Line No.",precProdOrderLine."Line No.");
      lrecCapacityLedgerEntry.SETRANGE("Operation No.",pcodOperationNo);
      IF( lrecCapacityLedgerEntry.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          ldPostedOutputQty := ldPostedOutputQty +
             cuCommonFuncs.ConvertUnitOfMeasure(lrecItem, lrecCapacityLedgerEntry."Output Quantity", lrecItem."Base Unit of Measure", precProdOrderLine."Unit of Measure Code");
        UNTIL(lrecCapacityLedgerEntry.NEXT=0);
      END;


      // note: can further limit this based on last operation and limiting to max output allowed, etc.
      // default is to accept whatever is passed in
      lrecOutJnl.VALIDATE("Output Quantity",pdOutputQuantity);
      lrecOutJnl.VALIDATE("Scrap Quantity",pdScrapQuantity);

      IF( (ldPostedOutputQty + pdOutputQuantity) >= precProdOrderLine.Quantity ) THEN
        lrecOutJnl.Finished := TRUE;

      IF( lrecOutJnl."Location Code" = '' ) THEN
        lrecOutJnl.VALIDATE("Location Code",precProdOrderLine."Location Code");

      IF( lrecOutJnl."Bin Code" = '' ) THEN
        lrecOutJnl.VALIDATE("Bin Code",precProdOrderLine."Bin Code");

      lrecOutJnl.VALIDATE("Setup Time",pdSetupTime);
      lrecOutJnl.VALIDATE("Run Time",pdRunTime);

      lrecOutJnl.INSERT(TRUE);

      IF( lbLastOperation ) THEN BEGIN
      lcuResMgmt.AddOutputTracking(lrecOutJnl,
                            psSerialNumberOutput,
                            psLotNumberOutput,
                            lrecOutJnl."Output Quantity",
                            pdtExpirationDate
                            );

      END;

      //
      // post the entry
      //
      lrecOutJnl.SETFILTER("Journal Template Name", pcodTemplateName);
      lrecOutJnl.SETFILTER("Journal Batch Name", pcodBatchName);
      lrecOutJnl.SETRANGE("Line No.", liLineNo);
      IF( lrecOutJnl.FIND('-') ) THEN BEGIN
        lcuItemJnlPostBatch.RUN(lrecOutJnl);
      END;
    END;

    PROCEDURE createOutputTrackingEntries@1000000016(precOutputJnl@1000000000 : Record 83;precProdOrderLine@1000000006 : Record 5406;VAR psLotNumberOutput@1000000009 : Text;VAR psSerialNumberOutput@1000000007 : Text;pdtExpirationDate@1000000011 : Date);
    VAR
      lcuItemTrkMgmt@1000000001 : Codeunit 6500;
      lrecItem@1000000005 : Record 27;
      lrecItemTracking@1000000004 : Record 6502;
      lcuResMgmt@1000000003 : Codeunit 23044514;
      lcuDataManager@1000000008 : Codeunit 23044502;
      ltrecTrackSpec@1000000010 : TEMPORARY Record 336;
      lnCurrentSN@1000000002 : Integer;
    BEGIN
      //<FUNC>
      // Creates or copies item tracking entries for specified output journal line
      // Uses the passed in serial # or lot # if they contain values.
      //</FUNC>

      lrecItem.GET(precOutputJnl."Item No.");

      IF( lrecItemTracking.GET( lrecItem."Item Tracking Code") ) THEN BEGIN

        // first try to copy item tracking from production order
        IF((psLotNumberOutput = '') AND (psSerialNumberOutput='')) THEN BEGIN
          lcuItemTrkMgmt.CopyItemTracking(precProdOrderLine.RowID1, precOutputJnl.RowID1, FALSE);
          IF lcuItemTrkMgmt.RetrieveItemTracking(precOutputJnl, ltrecTrackSpec) THEN BEGIN
            // the copy action generated item tracking - return the last SN and/or last lot #
            //  (ideally function would return all SNs, lot #'s, but this is OK for now since device does not use this return)
            IF ltrecTrackSpec.FINDSET THEN BEGIN
              REPEAT
                IF ltrecTrackSpec."Lot No."<>'' THEN
                  psLotNumberOutput := ltrecTrackSpec."Lot No.";
                IF ltrecTrackSpec."Serial No."<>'' THEN
                  psSerialNumberOutput := ltrecTrackSpec."Serial No.";
              UNTIL (ltrecTrackSpec.NEXT = 0);
              //EXIT;
            END;//if for tracking
          END;//if
        END;

        IF( lrecItemTracking."Lot Manuf. Inbound Tracking" ) THEN BEGIN
          // generate the lot number. Note: this will also create a lot information card if required
          IF( (psLotNumberOutput = '') AND recConfig."Gen. Tracking Info. On Output" ) THEN
            psLotNumberOutput := lcuDataManager.generateLotNumber(precOutputJnl."Item No.", precOutputJnl."Variant Code");

          IF (psLotNumberOutput <> '') THEN BEGIN
            lcuResMgmt.AddOutputTracking(precOutputJnl,
              '', // SN
              psLotNumberOutput, precOutputJnl."Output Quantity",
              pdtExpirationDate // expiration date
              );
          END;
        END;

        IF( lrecItemTracking."SN Manuf. Inbound Tracking" ) THEN BEGIN
          IF psSerialNumberOutput <> '' THEN BEGIN
            //if only one SN specified, add the item tracking
            lcuResMgmt.AddOutputTracking(precOutputJnl,
              psSerialNumberOutput,
              '', //lot #
              1,
              pdtExpirationDate
              );
          END ELSE BEGIN
            // if SN not specified, create new SN for each qty
            IF  recConfig."Gen. Tracking Info. On Output" THEN BEGIN
              FOR lnCurrentSN := 1 TO precOutputJnl."Output Quantity" DO BEGIN
                psSerialNumberOutput := lcuDataManager.generateSerialNumber(precOutputJnl."Item No.", precOutputJnl."Variant Code");
                IF psSerialNumberOutput <> '' THEN BEGIN
                  lcuResMgmt.AddOutputTracking(precOutputJnl,
                    psSerialNumberOutput,
                    '', //lot #
                    1,
                    pdtExpirationDate
                    );
                END ELSE
                  lnCurrentSN := precOutputJnl."Output Quantity"; //break out of loop if can't create SN
              END;//for
            END;
          END; //if need multiple SN's
        END;
      END;
    END;

    PROCEDURE CreateOutputLPLineUsage@100000000(pcodLPNumber@100000000 : Code[20];piLPLineNumber@100000001 : Integer;pcodProdOrderNumber@100000002 : Code[20];piProdOrderLineNumber@100000003 : Integer;pdQuantity@100000004 : Decimal);
    VAR
      lrecLPLineUsage@100000005 : Record 23044507;
    BEGIN
      lrecLPLineUsage.INIT();
      lrecLPLineUsage."License Plate No." := pcodLPNumber;
      lrecLPLineUsage."License Plate Line No." := piLPLineNumber;
      lrecLPLineUsage."Source Document" := lrecLPLineUsage."Source Document"::"Prod. Order";
      lrecLPLineUsage."Source No." := pcodProdOrderNumber;
      lrecLPLineUsage."Source Line No." := piProdOrderLineNumber;
      lrecLPLineUsage.Quantity := pdQuantity;
      lrecLPLineUsage."Posting Date" := TODAY;
      lrecLPLineUsage.INSERT(TRUE);
    END;

    PROCEDURE postConsumption@1000000004(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lcodProdOrderNumber@1000000006 : Code[20];
      lrecConfig@1000000008 : Record 23044504;
      lrptTransferConsumption@1000000009 : Report 23044500;
      lrecItemJnlLine@1000000002 : Record 83;
      lcodBatchName@100000000 : Code[10];
    BEGIN
      //////////////////////////////////////////////
      //<Summary>
      // Posts consumption by batch and config id.
      //</Summary>
      //<Author>R.Trudeau</Author>
      //<Date>06/11/2014</Date>
      //<Issue>TFS1529</Issue>
      //<Version>IW14.11</Version>
      //////////////////////////////////////////////

      // get the params
      lcodBatchName := cuJnlFunctions.GetConsumptionBatchToUse(ptrecEventParams);
      cuCommonFuncs.getDeviceConfig( lrecConfig,ptrecEventParams );

      // first need to transfer the consumption entries
      lrptTransferConsumption.setTemplateBatchName(getTemplate(PAGE::"Consumption Journal"), lcodBatchName);
      lrptTransferConsumption.setConfigIDFilter(lrecConfig.Code);

      lcodProdOrderNumber := ptrecEventParams.getDocumentNo();
      lrptTransferConsumption.setProductionOrder(lcodProdOrderNumber);

      lrptTransferConsumption.USEREQUESTPAGE(FALSE);
      lrptTransferConsumption.RUNMODAL;

      // now post them
      lrecItemJnlLine.SETRANGE("Journal Template Name",getTemplate(PAGE::"Consumption Journal"));
      lrecItemJnlLine.SETRANGE("Journal Batch Name",lcodBatchName);
      lrecItemJnlLine.SETRANGE("WHI Config ID", lrecConfig.Code);
      IF( lrecItemJnlLine.FIND('-') ) THEN BEGIN
        CODEUNIT.RUN(CODEUNIT::"Item Jnl.-Post Batch",lrecItemJnlLine);
      END;

      // generate the return result
      cuCommonFuncs.generateSuccessReturn(1, pbsOutput);

      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"Item Journal Line"));
      ptrecEventParams.setValue('Source Document Type', FORMAT(DATABASE::"Prod. Order Line"));
      ptrecEventParams.setValue('Source Document No.', lcodProdOrderNumber);
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE getReservationEntriesForLine@1000000006(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lcodLocation@1000000004 : Code[10];
      lcodItemNumber@1000000003 : Text;
      lcodVariantCode@1000000002 : Text;
      lcodProdOrderNumber@1000000006 : Code[20];
      liProdOrderLineNumber@1000000005 : Integer;
      lcuDataSetTools@1000000009 : Codeunit 23044535;
      lrecReservationEntry@1000000010 : Record 337;
      lrrefReservationEntry@1000000011 : RecordRef;
    BEGIN
      //<FUNC>
      // Return all item tracking lines for a production line
      //</FUNC>

      lcodLocation := ptrecEventParams.getValue('location');
      lcodVariantCode := ptrecEventParams.getVariant();
      lcodItemNumber := ptrecEventParams.getItemNo();
      lcodProdOrderNumber := ptrecEventParams.getDocumentNo();
      liProdOrderLineNumber := ptrecEventParams.getLineNo();

      pbsOutput.ADDTEXT('<DATASET>');
      pbsOutput.ADDTEXT('<TABLE id="list">');
      pbsOutput.ADDTEXT('<COLS>');

      cuCommonFuncs.initializeColumns( TRUE );
      cuCommonFuncs.addDSColumnsFromConfig( pbsOutput, iEventID,'', DATABASE::"Reservation Entry" );
      pbsOutput.ADDTEXT('</COLS>');
      pbsOutput.ADDTEXT('<ROWS>');

      lrecReservationEntry.SETRANGE("Reservation Status", lrecReservationEntry."Reservation Status"::Surplus);
      lrecReservationEntry.SETRANGE("Location Code", lcodLocation);
      lrecReservationEntry.SETRANGE("Source Type", DATABASE::"Prod. Order Line");
      lrecReservationEntry.SETRANGE("Source ID", lcodProdOrderNumber);
      lrecReservationEntry.SETRANGE("Source Prod. Order Line", liProdOrderLineNumber);

      IF (lrecReservationEntry.FIND('-') ) THEN BEGIN
        REPEAT
          pbsOutput.ADDTEXT('<R><FIELDS>');
          lrrefReservationEntry.GETTABLE( lrecReservationEntry);
          cuCommonFuncs.addDSFieldsForRecord(pbsOutput, lrrefReservationEntry, iEventID, '');
          pbsOutput.ADDTEXT('</FIELDS></R>');
        UNTIL (lrecReservationEntry.NEXT() = 0);
      END; // IF FIND Lot/Serial in Item Ledger Entry

      pbsOutput.ADDTEXT('</ROWS>');
      pbsOutput.ADDTEXT('</TABLE>');
      pbsOutput.ADDTEXT('</DATASET>');

      ptrecEventParams.setValue('Document Type', FORMAT(DATABASE::"Reservation Entry"));
      ptrecEventParams.setValue('Source Document Type', FORMAT(DATABASE::"Prod. Order Line"));
      ptrecEventParams.setValue('Source Document No.', lcodProdOrderNumber);
      ptrecEventParams.setValue('Source Document Line No.', FORMAT(liProdOrderLineNumber));
      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE getRemainingQtyForLot@1000000032(precProdOrderComp@1000000000 : Record 5407;psLotNumber@1000000002 : Text) : Decimal;
    VAR
      lrecReservationEntry@1000000001 : Record 337;
      lrecItemLedger@1000000003 : Record 32;
      ldTotalRemainingQuantity@1000000005 : Decimal;
      ldTotalQuantityFoLot@1000000006 : Decimal;
    BEGIN
      //<FUNC>
      // Return consumption remaining quantity for a specific lot
      //</FUNC>

      psLotNumber := UPPERCASE(psLotNumber);

      // NEED to convert ot component uom quantity
      // filters for unposted
      lrecReservationEntry.RESET();
      lrecReservationEntry.SETRANGE("Reservation Status", lrecReservationEntry."Reservation Status"::Surplus);
      lrecReservationEntry.SETRANGE("Source Type", DATABASE::"Prod. Order Line" );
      lrecReservationEntry.SETRANGE("Source ID", precProdOrderComp."Prod. Order No." );
      lrecReservationEntry.SETRANGE("Source Prod. Order Line", precProdOrderComp."Prod. Order Line No." );
      lrecReservationEntry.SETRANGE("Lot No.", psLotNumber);

      // filters for posted
      lrecItemLedger.SETRANGE("Order Type", lrecItemLedger."Order Type"::Production );
      lrecItemLedger.SETRANGE("Order No.", precProdOrderComp."Prod. Order No.");
      lrecItemLedger.SETRANGE("Order Line No.", precProdOrderComp."Prod. Order Line No.");
      lrecItemLedger.SETRANGE("Lot No.", psLotNumber);
      lrecItemLedger.SETRANGE("Entry Type",  lrecItemLedger."Entry Type"::Output);
      lrecItemLedger.SETRANGE(Open,  TRUE );

      ldTotalQuantityFoLot := 0;
      ldTotalRemainingQuantity := 0;

      IF ( lrecReservationEntry.FINDSET(FALSE) ) THEN BEGIN
        REPEAT
          ldTotalQuantityFoLot := ldTotalQuantityFoLot + lrecReservationEntry."Quantity (Base)";
        UNTIL( lrecReservationEntry.NEXT() = 0 );
        // end if we found unposted
      END ELSE IF ( lrecItemLedger.FINDSET(FALSE) ) THEN BEGIN
        // try posted if we found no unposted
        REPEAT
          ldTotalQuantityFoLot := ldTotalQuantityFoLot + (lrecItemLedger.Quantity * lrecItemLedger."Qty. per Unit of Measure");
        UNTIL( lrecItemLedger.NEXT() = 0 );
      END ELSE BEGIN
        EXIT(precProdOrderComp."Remaining Quantity");
      END;

      ldTotalRemainingQuantity := ldTotalQuantityFoLot * precProdOrderComp."Quantity per";
      IF (ldTotalRemainingQuantity > precProdOrderComp."Remaining Quantity") THEN BEGIN
        // Prevent over consume
        ldTotalRemainingQuantity := precProdOrderComp."Remaining Quantity";
      END;

      EXIT(ldTotalRemainingQuantity);
    END;

    PROCEDURE getQuantityForLotInTheBin@1000000008(VAR ptrecEventParams@1000000001 : TEMPORARY Record 23044511;VAR pbsOutput@1000000000 : BigText);
    VAR
      lcodLocation@1000000004 : Code[10];
      lcodItemNumber@1000000003 : Text;
      lsLotNumber@1000000007 : Text;
      lrecBinContent@1000000002 : Record 7302;
      lcodVariantCode@1000000005 : Text;
      lcodUoM@1000000006 : Code[20];
      lcodBinCode@1000000008 : Code[20];
      ldQuantity@1000000009 : Decimal;
      lbWhseTracked@1000000010 : Boolean;
      lcuCommonBase@1000000011 : Codeunit 23044519;
      lrecItemLedgerEntry@1000000012 : Record 32;
    BEGIN
      //<FUNC>
      // Get the quantity for a specific lot in the bin
      //</FUNC>

      lcodLocation := ptrecEventParams.getValue('location');
      lcodItemNumber := ptrecEventParams.getItemNo();
      lcodVariantCode := ptrecEventParams.getVariant();
      lcodUoM := ptrecEventParams.getValue('uom');
      lcodBinCode := ptrecEventParams.getBin();
      lsLotNumber := ptrecEventParams.getLotNo();

      ldQuantity:= 0;
      lbWhseTracked := lcuCommonBase.isWhseTracked( lcodItemNumber);
      IF (lbWhseTracked) THEN BEGIN
        lrecBinContent.SETRANGE("Location Code",lcodLocation);
        lrecBinContent.SETRANGE("Bin Code", lcodBinCode);
        lrecBinContent.SETRANGE("Item No.",lcodItemNumber);
        IF( lcodVariantCode <> '' ) THEN BEGIN
          lrecBinContent.SETRANGE("Variant Code", lcodVariantCode);
        END;

        IF (lcodUoM <> '') THEN BEGIN
          lrecBinContent.SETRANGE("Unit of Measure Code", lcodUoM);
        END;

        lrecBinContent.SETRANGE("Lot No. Filter", lsLotNumber);

        IF (lrecBinContent.FINDSET(FALSE)) THEN BEGIN
          ldQuantity := lrecBinContent.CalcQtyUOM();
        END;
      END ELSE BEGIN
        lrecItemLedgerEntry.SETCURRENTKEY("Item No.", Open, "Variant Code", "Location Code", "Item Tracking", "Lot No.", "Serial No.");
        lrecItemLedgerEntry.SETRANGE("Item No.", lcodItemNumber);
        lrecItemLedgerEntry.SETRANGE(Open, TRUE);
        lrecItemLedgerEntry.SETRANGE("Variant Code", lcodVariantCode);
        lrecItemLedgerEntry.SETRANGE("Location Code", lcodLocation);
        lrecItemLedgerEntry.SETRANGE("Item Tracking", lrecItemLedgerEntry."Item Tracking"::"Lot No.");
        lrecItemLedgerEntry.SETRANGE("Lot No.", lsLotNumber);
        lrecItemLedgerEntry.CALCSUMS("Remaining Quantity");
        ldQuantity := lrecItemLedgerEntry."Remaining Quantity";
      END;

      pbsOutput.ADDTEXT(STRSUBSTNO('<VALUE>%1</VALUE>', ldQuantity));

      cuActivityLogMgt.logActivity(ptrecEventParams);
    END;

    PROCEDURE createProdOrder@1000000023(pcodLocationCode@1000000001 : Code[10];pcodItemNumber@1000000002 : Code[20]);
    VAR
      lrecProductionOrder@1000000000 : Record 5405;
    BEGIN
      //////////////////////////////////////////////
      //<Summary>
      // Create production order
      //</Summary>
      //<Author>H.Zhao</Author>
      //<Date>08/09/2014</Date>
      //<Issue>SP2625</Issue>
      //<Version>DMS1.4</Version>
      //////////////////////////////////////////////

      lrecProductionOrder.RESET();
      lrecProductionOrder.INIT;
      lrecProductionOrder.Status := lrecProductionOrder.Status::Released;
      lrecProductionOrder.INSERT(TRUE);
      lrecProductionOrder.VALIDATE("Source Type", lrecProductionOrder."Source Type"::Item);
      lrecProductionOrder.VALIDATE("Source No.", pcodItemNumber);
      lrecProductionOrder.VALIDATE("Due Date", WORKDATE);
      lrecProductionOrder.VALIDATE("Location Code", pcodLocationCode);
      lrecProductionOrder.VALIDATE(Quantity, 1);
      lrecProductionOrder.MODIFY;

      refreshProdOrder(lrecProductionOrder);
    END;

    PROCEDURE refreshProdOrder@1000000029(VAR precProductionOrder@1000000000 : Record 5405);
    VAR
      lcuCalcProdOrder@1000000017 : Codeunit 99000773;
      lcuCreateProdOrderLines@1000000016 : Codeunit 99000787;
      lcuWhseProdRelease@1000000015 : Codeunit 5774;
      lcuWhseOutputProdRelease@1000000014 : Codeunit 7325;
      loptDirection@1000000012 : 'Forward,Backward';
      lbCalcLines@1000000011 : Boolean;
      lbCalcRoutings@1000000010 : Boolean;
      lbCalcComponents@1000000009 : Boolean;
      lbCreateInbRqst@1000000008 : Boolean;
      lrecItem@1000000007 : Record 27;
      lrecProdOrderLine@1000000006 : Record 5406;
      lrecProdOrderRtngLine@1000000005 : Record 5409;
      lrecProdOrderComp@1000000004 : Record 5407;
      Family@1000000003 : Record 99000773;
      lcuProdOrderStatusMgt@1000000002 : Codeunit 5407;
      lcodRoutingNo@1000000001 : Code[20];
    BEGIN
      //////////////////////////////////////////////
      //<Summary>
      // refresh input production order
      //</Summary>
      //<Author>H.Zhao</Author>
      //<Date>08/09/2014</Date>
      //<Issue>SP2625</Issue>
      //<Version>DMS1.4</Version>
      //////////////////////////////////////////////

      loptDirection := loptDirection::Backward;
      lbCalcLines := TRUE;
      lbCalcComponents := TRUE;
      WITH precProductionOrder DO BEGIN
        IF loptDirection = loptDirection::Backward THEN
          TESTFIELD("Due Date");

        lcodRoutingNo := "Routing No.";
        CASE "Source Type" OF
          "Source Type"::Item:
            IF lrecItem.GET("Source No.") THEN
              lcodRoutingNo := lrecItem."Routing No.";
          "Source Type"::Family:
            IF Family.GET("Source No.") THEN
              lcodRoutingNo := Family."Routing No.";
        END;
        IF lcodRoutingNo <> "Routing No." THEN BEGIN
          "Routing No." := lcodRoutingNo;
          MODIFY;
        END;

        lrecProdOrderLine.LOCKTABLE;

        IF lbCalcLines OR lbCalcComponents THEN
          checkExistingReservation(precProductionOrder, lbCalcLines, lbCalcComponents);

        IF lbCalcLines THEN BEGIN
          {// 2013-::begin
          lcuCreateProdOrderLines.Copy(precProductionOrder, loptDirection, '');
          }// 2013-::end
          // 2013R2+::begin
          lcuCreateProdOrderLines.Copy(precProductionOrder, loptDirection, '', FALSE);
          // 2013R2+::end

        END ELSE BEGIN
          lrecProdOrderLine.SETRANGE(Status,Status);
          lrecProdOrderLine.SETRANGE("Prod. Order No.","No.");
          IF lbCalcRoutings OR lbCalcComponents THEN BEGIN
            IF lrecProdOrderLine.FIND('-') THEN
              REPEAT
                IF lbCalcRoutings THEN BEGIN
                  lrecProdOrderRtngLine.SETRANGE(Status,Status);
                  lrecProdOrderRtngLine.SETRANGE("Prod. Order No.","No.");
                  lrecProdOrderRtngLine.SETRANGE("Routing Reference No.", lrecProdOrderLine."Routing Reference No.");
                  lrecProdOrderRtngLine.SETRANGE("Routing No.", lrecProdOrderLine."Routing No.");
                  lrecProdOrderRtngLine.DELETEALL(TRUE);
                END;
                IF lbCalcComponents THEN BEGIN
                  lrecProdOrderComp.SETRANGE(Status,Status);
                  lrecProdOrderComp.SETRANGE("Prod. Order No.","No.");
                  lrecProdOrderComp.SETRANGE("Prod. Order Line No.", lrecProdOrderLine."Line No.");
                  lrecProdOrderComp.DELETEALL(TRUE);
                END;
              UNTIL lrecProdOrderLine.NEXT = 0;
            IF lrecProdOrderLine.FIND('-') THEN
              REPEAT
                lrecProdOrderLine."Due Date" := "Due Date";
                {// 2013-::begin
                lcuCalcProdOrder.Calculate(lrecProdOrderLine, loptDirection, lbCalcRoutings, lbCalcComponents,FALSE);
                }// 2013-::end
                // 2013R2+::begin
                lcuCalcProdOrder.Calculate(lrecProdOrderLine, loptDirection, lbCalcRoutings, lbCalcComponents,FALSE,FALSE);
                // 2013R2+::end
              UNTIL lrecProdOrderLine.NEXT = 0;
          END;
        END;
        IF (loptDirection = loptDirection::Backward) AND
           ("Source Type" = "Source Type"::Family)
        THEN BEGIN
          SetUpdateEndDate;
          VALIDATE("Due Date","Due Date");
        END;

        IF Status = Status::Released THEN BEGIN
          lcuProdOrderStatusMgt.FlushProdOrder(precProductionOrder, precProductionOrder.Status, WORKDATE);
          lcuWhseProdRelease.Release(precProductionOrder);
          IF lbCreateInbRqst THEN
            lcuWhseOutputProdRelease.Release(precProductionOrder);
        END;
      END;
    END;

    LOCAL PROCEDURE checkExistingReservation@2(VAR precProdOrder@1240070000 : Record 5405;pbCalcLines@1240070001 : Boolean;pbCalcComponents@1240070002 : Boolean);
    VAR
      lrecProdOrderLine@1002 : Record 5406;
      lrecProdOrderComp@1000 : Record 5407;
      lrecReservEntry@1003 : Record 337;
    BEGIN
      //////////////////////////////////////////////
      //<Summary>
      // Not allowed to refresh if reservations exist
      //</Summary>
      //<Author>H.Zhao</Author>
      //<Date>08/09/2014</Date>
      //<Issue>SP2625</Issue>
      //<Version>DMS1.4</Version>
      //////////////////////////////////////////////
      lrecReservEntry.SETCURRENTKEY("Source ID", "Source Ref. No.", "Source Type", "Source Subtype", "Source Batch Name");
      lrecReservEntry.SETRANGE("Source Batch Name",'');
      lrecReservEntry.SETRANGE("Reservation Status", lrecReservEntry."Reservation Status"::Reservation);

      lrecProdOrderLine.SETRANGE(Status, precProdOrder.Status);
      lrecProdOrderLine.SETRANGE("Prod. Order No.", precProdOrder."No.");
      IF lrecProdOrderLine.FIND('-') THEN
        REPEAT
          IF pbCalcLines THEN BEGIN
            lrecProdOrderLine.CALCFIELDS("Reserved Qty. (Base)");
            IF lrecProdOrderLine."Reserved Qty. (Base)" <> 0 THEN BEGIN
              lrecReservEntry.SETRANGE("Source ID", lrecProdOrderLine."Prod. Order No.");
              lrecReservEntry.SETRANGE("Source Ref. No.",0);
              lrecReservEntry.SETRANGE("Source Type",DATABASE::"Prod. Order Line");
              lrecReservEntry.SETRANGE("Source Subtype", lrecProdOrderLine.Status);
              lrecReservEntry.SETRANGE("Source Prod. Order Line", lrecProdOrderLine."Line No.");
              IF lrecReservEntry.FIND('-') THEN BEGIN
                IF NOT ((lrecReservEntry."Source Type" = DATABASE::"Prod. Order Component") AND
                        (lrecReservEntry."Source ID" = lrecProdOrderLine."Prod. Order No.") AND
                        (lrecReservEntry."Source Subtype" = lrecProdOrderLine.Status))
                THEN
                  lrecProdOrderLine.TESTFIELD("Reserved Qty. (Base)",0);
              END;
            END;
          END;

          IF pbCalcLines OR pbCalcComponents THEN BEGIN
            lrecProdOrderComp.SETRANGE(Status, lrecProdOrderLine.Status);
            lrecProdOrderComp.SETRANGE("Prod. Order No.", lrecProdOrderLine."Prod. Order No.");
            lrecProdOrderComp.SETRANGE("Prod. Order Line No.", lrecProdOrderLine."Line No.");
            IF lrecProdOrderComp.FIND('-') THEN
              REPEAT
                lrecProdOrderComp.CALCFIELDS("Reserved Qty. (Base)");
                IF lrecProdOrderComp."Reserved Qty. (Base)" <> 0 THEN BEGIN
                  lrecReservEntry.SETRANGE("Source ID", lrecProdOrderComp."Prod. Order No.");
                  lrecReservEntry.SETRANGE("Source Ref. No.", lrecProdOrderComp."Line No.");
                  lrecReservEntry.SETRANGE("Source Type",DATABASE::"Prod. Order Component");
                  lrecReservEntry.SETRANGE("Source Subtype", lrecProdOrderComp.Status);
                  lrecReservEntry.SETRANGE("Source Prod. Order Line", lrecProdOrderComp."Prod. Order Line No.");
                  IF lrecReservEntry.FIND('-') THEN BEGIN
                    lrecReservEntry.GET(lrecReservEntry."Entry No.", NOT lrecReservEntry.Positive);
                    IF NOT ((lrecReservEntry."Source Type" = DATABASE::"Prod. Order Line") AND
                            (lrecReservEntry."Source ID" = lrecProdOrderComp."Prod. Order No.") AND
                            (lrecReservEntry."Source Subtype" = lrecProdOrderComp.Status))
                    THEN
                      lrecProdOrderComp.TESTFIELD("Reserved Qty. (Base)",0);
                  END;
                END;
              UNTIL lrecProdOrderComp.NEXT = 0;
          END;
        UNTIL lrecProdOrderLine.NEXT = 0;
    END;

    PROCEDURE assignProductionOrder@1000000024(VAR precProductionOrder@1000000000 : Record 5405;VAR ptrecEventParams@1000000002 : TEMPORARY Record 23044511);
    VAR
      lrecConfig@1000000003 : Record 23044504;
      lcodUserName@1000000001 : Code[50];
    BEGIN
      //<FUNC>
      //  Description: Assigns the user to the production if required.
      //  Side Effect: None
      //</FUNC>

      lcodUserName := cuCommonFuncs.getUserNameWithDomain(ptrecEventParams);

      IF( lcodUserName <> '' ) THEN BEGIN
        cuCommonFuncs.getDeviceConfig(lrecConfig,ptrecEventParams);

        IF (lrecConfig."Assign Document" = lrecConfig."Assign Document"::Always) OR
          ((lrecConfig."Assign Document" = lrecConfig."Assign Document"::Unassigned) AND (precProductionOrder."Assigned User ID"='')) THEN BEGIN
          precProductionOrder."Assigned User ID" := lcodUserName;
      //    precProductionOrder."Assignment Date" := TODAY;
      //    precProductionOrder."Assignment Time" := TIME;
          precProductionOrder.MODIFY;
        END;
      END;
    END;

    BEGIN
    {
      ************************
      Copyright Notice
      This objects content is copyright of Insight Works 2011.  All rights reserved.
      Any redistribution or reproduction of part or all of the contents in any form is prohibited.
      ************************
    }
    END.
  }
}

