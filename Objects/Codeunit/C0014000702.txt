OBJECT Codeunit 14000702 Package Management
{
  OBJECT-PROPERTIES
  {
    Date=09/24/20;
    Time=[ 8:28:38 AM];
    Modified=Yes;
    Version List=SE0.61,TOP040;
  }
  PROPERTIES
  {
    Permissions=TableData 37=rimd,
                TableData 5765=rm,
                TableData 5773=rm;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      PackingStation@1240030000 : Record 14000709;
      ShippingSetup@1240030001 : Record 14000707;
      Country@1240030009 : Record 9;
      Shipping@1000000000 : Codeunit 14000701;
      ScalesComm@1000000001 : Codeunit 37031002;
      LabelMgt@1000000002 : Codeunit 14000841;
      Window@1000000003 : Dialog;
      MessageLine@1000000004 : Text[250];
      Initialized@1240030002 : Boolean;
      Text002@1002 : TextConst 'ENU=No Package Added';
      Text003@1003 : TextConst 'ENU=Package does not exist %1';
      Text004@1004 : TextConst 'ENU=Package %1 is not closed';
      Text005@1005 : TextConst 'ENU=Wrong Location %1';
      Text006@1006 : TextConst 'ENU=Package Already in %1';
      Text007@1007 : TextConst 'ENU=Multi Document Package setup is different';
      Text008@1008 : TextConst 'ENU=Package is for %1';
      Text009@1009 : TextConst 'ENU=No packages within filter';
      Text010@1010 : TextConst 'ENU=UOM Packed must be %1';
      Text011@1011 : TextConst 'ENU=%1 must be equal to Sales Line';
      Text016@1016 : TextConst 'ENU=Quantity must be entered.';
      Text017@1017 : TextConst 'ENU=Quantity cannot be less than already packed';
      Text018@1018 : TextConst 'ENU=Required E-Ship Agnet Service must be entered';
      Text019@1019 : TextConst 'ENU=Require %1 %2';
      Text020@1020 : TextConst 'ENU=Over Pack';
      Text021@1021 : TextConst 'ENU=Duplicate Serial Number on %1 package %2 is packed but not shipped.';
      Text022@1022 : TextConst 'ENU=No Package Open';
      Text023@1023 : TextConst 'ENU=No Weight from Scale';
      Text024@1024 : TextConst 'ENU=Package Open';
      Text025@1025 : TextConst 'ENU=Package %1 is open';
      Text027@1027 : TextConst 'ENU=No Package Opened';
      Text029@1029 : TextConst 'ENU=Package exist in other package';
      Text030@1030 : TextConst 'ENU=Package is not for this Order';
      Text031@1031 : TextConst 'ENU=No Package Exists';
      Text033@1033 : TextConst 'ENU=No Package Copied';
      Text034@1034 : TextConst 'ENU=Over Pack %1 packages created';
      Text036@1036 : TextConst 'ENU=No Label(s) Copied';
      Text037@1037 : TextConst 'ENU=No Labels Copied';
      Text038@1038 : TextConst 'ENU=Too Few Packages %1 of %2';
      Text039@1039 : TextConst 'ENU=Package Numbering are wrong.';
      Text040@1040 : TextConst 'ENU=COD Amount has not been calculated.';
      Text041@1041 : TextConst 'ENU=Not Fully Packed';
      Text042@1042 : TextConst 'ENU=Multiple Shipments exists. Only one can exists when closing an order.';
      Text043@1043 : TextConst 'ENU=%1 %2 has not been posted.';
      Text044@1044 : TextConst 'ENU=No Warehouse ship lines found for %1 %2.';
      Text045@1045 : TextConst 'ENU=Packages not posted';
      Text049@1049 : TextConst 'ENU=%1 %2 Not Packed Complete';
      Text050@1050 : TextConst 'ENU=Warehouse documents must be modified manually.';
      Text051@1051 : TextConst 'ENU=Negative sales lines for %1 %2 not supported for set Quantity.';
      Text052@1052 : TextConst 'ENU=More packed %1 %2 than on order.';
      Text053@1053 : TextConst 'ENU=Negative purchase lines for %1 %2 not supported for set Quantity.';
      Text054@1054 : TextConst 'ENU=Negative Transfer lines for %1 not supported for set Quantity.';
      Text055@1055 : TextConst 'ENU=Packages Already Exists';
      Text056@1056 : TextConst 'ENU=Nothing to pack';
      Text057@1057 : TextConst 'ENU=Package %1 have different total package count';
      Text058@1058 : TextConst 'ENU=Total COD Amount on previous packages are to big.';
      Text059@1059 : TextConst 'ENU=Details must be packed to use COD Distribute to All';
      Text060@1060 : TextConst 'ENU=Code must be added to use COD Custom';
      Text062@1062 : TextConst 'ENU=Must be greather than 0';
      Text063@1063 : TextConst 'ENU=Open Package Found';
      Text064@1064 : TextConst 'ENU=No UCC 128 Label Created';
      Text083@1083 : TextConst 'ENU=Multi Document do not support standard pack.';
      Text084@1084 : TextConst 'ENU=Nothing to pack.';
      Text085@1085 : TextConst 'ENU=Quantity of Item %1 is not an even Std. Pack Unit of Measure.';
      Text086@1086 : TextConst 'ENU=Quantity of Item %1 is not an even number of Packages.';
      Text087@1087 : TextConst 'ENU=COD Amount was not set. Package not closed.';
      Text088@1088 : TextConst 'ENU=Inconsistent Required Shipping Agent information.';
      Text089@1089 : TextConst 'ENU=There is no Base Unit of Measure for Item %1';
      Text090@1090 : TextConst 'ENU=Orders cannot be added when open packages exist';
      Text092@1092 : TextConst 'ENU=No document added';
      Text093@1093 : TextConst 'ENU=No available documents';
      Text094@1094 : TextConst 'ENU=%1 not found';
      Text095@1095 : TextConst 'ENU=Document has no External Document No.';
      Text096@1096 : TextConst 'ENU=Document is not Released';
      Text097@1097 : TextConst 'ENU=%1 is not released.';
      Text098@1098 : TextConst 'ENU=%1 has open packages.';
      Text099@1099 : TextConst 'ENU=Order is already in Multi Document Package';
      Text100@1100 : TextConst 'ENU=%1 must be %2';
      Text101@1101 : TextConst 'ENU=No Current package';
      Text102@1102 : TextConst 'ENU=No Current Sales Order';
      Text103@1103 : TextConst 'ENU=Bill of Lading must be %1 in %2 %3.';
      Text104@1104 : TextConst 'ENU=Bill of Lading must be %1 in %2.';
      Text105@1105 : TextConst 'ENU=Bill of Lading not assigned';
      Text106@1106 : TextConst 'ENU=No Warehouse Activity Lines.';
      Text107@1107 : TextConst 'ENU=No Warehouse Shipment Lines.';
      Text108@1108 : TextConst 'ENU=Package Open.';
      Text109@1109 : TextConst 'ENU=Cannot be the same Shipment.';
      Text110@1110 : TextConst 'ENU=Shipping Agent must be Fedex.';
      Text111@1111 : TextConst 'ENU=Must be World Wide Service.';
      Text112@1112 : TextConst 'ENU=Prepack cannot be set.';
      Text113@1113 : TextConst 'ENU=Package %1 is packed in another package.';
      Text114@1114 : TextConst 'ENU=No Serial or Lot to scan.';
      Text115@1115 : TextConst 'ENU=No Labels to export';
      Text117@1117 : TextConst 'ENU=Output file could not be created';
      Text118@1118 : TextConst 'ENU=Exporting Labels';
      Text119@1119 : TextConst 'ENU=Has not been initialized.';
      Text120@1240030003 : TextConst 'ENU=Force Closed is not allowed on this document.';
      Text121@1240030004 : TextConst 'ENU=Warehouse Activity %1 cannot be registered.';
      Text122@1240030005 : TextConst 'ENU=No Open Bill of Lading';
      Text123@1240030006 : TextConst 'ENU=No Bill of Lading Label';
      Text124@1240030007 : TextConst 'ENU=No RF-ID Label Created';
      Text125@1240030008 : TextConst 'ENU=Not %1 and %2 packages exist.';
      ExportDocMgt@1240030011 : Codeunit 14000981;
      Text001@1001 : TextConst 'ENU=Current API version does not support renumbering all packages.';
      Text126@1240030010 : TextConst 'ENU=Not finished entering Item Tracking';
      EShipValidation@1240020000 : Codeunit 14000240;
      Text50000@1000000005 : TextConst 'ENU=No Warehouse Activity Header found.';
      Text50001@1000000006 : TextConst 'ENU=No Warehouse Activity Lines found.';
      Text50002@1000000007 : TextConst 'ENU=Tracking No. must not be blank. Please enter Tracking No.';
      Text50003@1000000008 : TextConst 'ENU=Shipping Cost must not be zero. Please enter Shipping Cost.';
      Text50004@1000000009 : TextConst 'ENU=Pick %1 must be registered first before packing.';
      Text50005@1000000010 : TextConst 'ENU=Pick %1 is still open. Are you sure to continue packing?';

    PROCEDURE AddPackageToPackage@39(VAR Package@1240030000 : Record 14000701;VAR PackingControl@1240030001 : Record 14000717;PackageNo@1240030002 : Code[20]) : Boolean;
    VAR
      Package2@1000000006 : Record 14000701;
      PackageLine@1000000007 : Record 14000702;
      EShipInput@1240030003 : Record 14000728;
      EShipEnterPackageNo@1240030004 : Page 14050106;
    BEGIN
      TestInitialized;

      IF PackageNo = '' THEN BEGIN
        CLEAR(EShipInput);
        EShipInput."Source Type" := PackingControl."Source Type";
        EShipInput."Source Subtype" := PackingControl."Source Subtype";
        EShipInput."Source ID" := PackingControl."Source ID";
        EShipInput."Multi Document No." := PackingControl."Multi Document No.";

        CLEAR(EShipEnterPackageNo);
        EShipEnterPackageNo.LOOKUPMODE(TRUE);
        EShipEnterPackageNo.SetEShipInput(EShipInput);
        IF EShipEnterPackageNo.RUNMODAL = ACTION::LookupOK THEN BEGIN
        EShipEnterPackageNo.GetEShipInput(EShipInput);
        IF (EShipInput."Package No." <> '') AND
           (COPYSTR(EShipInput."Package No.",1,2) <> '//')
        THEN
            PackageNo := EShipInput."Package No.";
        END;

        IF PackageNo = '' THEN BEGIN
          PackingControl."Error Message" := Text002;
          EXIT(FALSE);
        END;

        PackageNo := GetPackageNo(PackageNo);
      END;

      IF NOT Package2.GET(PackageNo) THEN BEGIN
        PackingControl."Error Message" := STRSUBSTNO(Text003,PackageNo);
        EXIT(FALSE);
      END;

      IF NOT Package2.Closed THEN BEGIN
        PackingControl."Error Message" := STRSUBSTNO(Text004,PackageNo);
        EXIT(FALSE);
      END;

      IF ShippingSetup."Location Packing" THEN
        IF Package2."Location Code" <> PackingStation."Location Code" THEN BEGIN
          PackingControl."Error Message" :=
            STRSUBSTNO(Text005,Package2."Location Code");
          EXIT(FALSE);
        END;

      IF Package2."Multi Document Package" THEN
        IF Package2."Original Package No." <> '' THEN
          IF Package2."Original Package No." <> Package2."No." THEN BEGIN
            Package2.GET(Package2."Original Package No.");
            PackageNo := Package2."No.";
          END;

      PackageLine.RESET;
      PackageLine.SETCURRENTKEY(Type,"No.");
      PackageLine.SETRANGE(Type,PackageLine.Type::Package);
      PackageLine.SETRANGE("No.",PackageNo);
      IF PackageLine.FIND('-') THEN BEGIN
        PackingControl."Error Message" := STRSUBSTNO(Text006,PackageLine."Package No.");
        EXIT(FALSE);
      END;

      IF Package2."Multi Document Package" THEN BEGIN
        IF Package2."Multi Document Package" <> PackingControl."Multi Document Package" THEN BEGIN
          PackingControl."Error Message" := Text007;
          EXIT(FALSE);
        END;

        IF Package2."Multi Document No." <> PackingControl."Multi Document No." THEN BEGIN
          PackingControl."Error Message" := Text007;
          EXIT(FALSE);
        END;
      END ELSE BEGIN
        IF (Package2."Source Type" <> PackingControl."Source Type") OR
           (Package2."Source Subtype" <> PackingControl."Source Subtype") OR
           (Package2."Source ID" <> PackingControl."Source ID")
        THEN BEGIN
          PackingControl."Error Message" :=
            STRSUBSTNO(Text008,PackingControl.FormatSource2);
          EXIT(FALSE);
        END;
      END;

      IF NOT PackingControl."Package Open" THEN
        CreatePackage(Package,PackingControl);

      PackageLine.RESET;
      PackageLine.SETRANGE("Package No.",Package."No.");
      IF PackageLine.FIND('+') THEN
        PackageLine."Line No." := PackageLine."Line No." + 10000
      ELSE
        PackageLine."Line No." := 10000;
      PackageLine."Package No." := Package."No.";
      PackageLine.INIT;
      PackageLine."Source Type" := Package."Source Type";
      PackageLine."Source Subtype" := Package."Source Subtype";
      PackageLine."Source ID" := Package."Source ID";
      PackageLine.INSERT(TRUE);
      PackageLine.VALIDATE(Type,PackageLine.Type::Package);
      PackageLine.VALIDATE("No.",PackageNo);
      PackageLine.VALIDATE(Quantity,1);
      PackageLine.MODIFY(TRUE);

      EXIT(TRUE);
    END;

    PROCEDURE AddAllPackagesToPackage@45(VAR Package@1240030000 : Record 14000701;VAR PackingControl@1240030001 : Record 14000717);
    VAR
      Package2@1000000005 : Record 14000701;
      Package3@1000000012 : Record 14000701;
      PackageLine@1000000006 : Record 14000702;
      PackageLine2@1000000007 : Record 14000702;
    BEGIN
      TestInitialized;
      Package2.RESET;
      Package2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Package2.SETRANGE("Source Type",PackingControl."Source Type");
      Package2.SETRANGE("Source Subtype",PackingControl."Source Subtype");
      IF PackingControl."Multi Document Package" THEN
        Package2.SETFILTER("Source ID",PackingControl."Multi Document No.")
      ELSE
        Package2.SETRANGE("Source ID",PackingControl."Source ID");
      IF PackingControl."Package Open" THEN
        Package2.SETFILTER("No.",'<>%1',Package."No.");
      IF ShippingSetup."Location Packing" THEN
        Package2.SETRANGE("Location Code",PackingStation."Location Code");
      IF Package2.FIND('-') THEN
        REPEAT
          Package3 := Package2;

          IF Package2."Original Package No." <> '' THEN
            IF Package2."Original Package No." <> Package2."No." THEN
              Package2.GET(Package2."Original Package No.");

          PackageLine2.RESET;
          PackageLine2.SETCURRENTKEY(Type,"No.");
          PackageLine2.SETRANGE(Type,PackageLine2.Type::Package);
          PackageLine2.SETRANGE("No.",Package2."No.");
          IF NOT PackageLine2.FIND('-') THEN BEGIN
            PackageLine2.RESET;
            PackageLine2.SETRANGE("Package No.",Package2."No.");
            PackageLine2.SETRANGE(Type,PackageLine2.Type::Package);
            IF NOT PackageLine2.FIND('-') THEN BEGIN
              IF NOT PackingControl."Package Open" THEN BEGIN
                CreatePackage(Package,PackingControl);
                Package2.SETFILTER("No.",'<>%1',Package."No.");
              END;

              PackageLine.RESET;
              PackageLine.SETRANGE("Package No.",Package."No.");
              IF PackageLine.FIND('+') THEN
                PackageLine."Line No." := PackageLine."Line No." + 10000
              ELSE
                PackageLine."Line No." := 10000;
              PackageLine."Package No." := Package."No.";
              PackageLine.INIT;
              PackageLine."Source Type" := PackingControl."Source Type";
              PackageLine."Source Subtype" := PackingControl."Source Subtype";
              PackageLine."Source ID" := PackingControl."Source ID";
              PackageLine.INSERT(TRUE);
              PackageLine.VALIDATE(Type,PackageLine.Type::Package);
              PackageLine.VALIDATE("No.",Package2."No.");
              PackageLine.VALIDATE(Quantity,1);
              PackageLine.MODIFY(TRUE);
            END;
          END;

          Package2 := Package3;
        UNTIL Package2.NEXT = 0;

      Package.GET(Package."No.");
      Package.ClearTotalValueFields;
      Package.TotalNetWeight;
    END;

    PROCEDURE AddMultiplePackagesToPackage@11(VAR Package@1240030000 : Record 14000701;VAR PackingControl@1240030001 : Record 14000717) : Boolean;
    VAR
      Package3@1000000006 : Record 14000701;
      EShipInput@1240030002 : Record 14000728;
      EShipEnterPackNoFilter@1240030003 : Page 14050107;
      PackageNo@1000000007 : Code[20];
      InputLine@1000000008 : Code[50];
      PackagesAdded@1000000009 : Integer;
      Finished@1000000010 : Boolean;
      LoopFinished@1240030004 : Boolean;
    BEGIN
      TestInitialized;
      PackagesAdded := 0;

      CLEAR(EShipInput);
      EShipInput."Source Type" := PackingControl."Source Type";
      EShipInput."Source Subtype" := PackingControl."Source Subtype";
      EShipInput."Source ID" := PackingControl."Source ID";
      EShipInput."Multi Document No." := PackingControl."Multi Document No.";

      LoopFinished := FALSE;
      REPEAT
        CLEAR(EShipInput);
        EShipInput."Packages Added" := PackagesAdded;
        CLEAR(EShipEnterPackNoFilter);
        EShipEnterPackNoFilter.LOOKUPMODE(TRUE);
        EShipEnterPackNoFilter.SetEShipInput(EShipInput);
        IF EShipEnterPackNoFilter.RUNMODAL = ACTION::LookupOK THEN BEGIN
        EShipEnterPackNoFilter.GetEShipInput(EShipInput);
        InputLine := EShipInput."Package No. Filter";
        IF (InputLine = '') OR (COPYSTR(InputLine,1,2) = '//') THEN
          LoopFinished := TRUE;
        END ELSE
          LoopFinished := TRUE;

        IF NOT LoopFinished THEN BEGIN
          Finished := TRUE;

          REPEAT
            IF STRPOS(InputLine,'..') <> 0 THEN BEGIN
              IF Finished THEN BEGIN
                Package3.RESET;
                Package3.SETFILTER("No.",InputLine);
                Package3.SETRANGE("Source Type",PackingControl."Source Type");
                Package3.SETRANGE("Source Subtype",PackingControl."Source Subtype");
                IF PackingControl."Multi Document Package" THEN
                  Package3.SETRANGE("Source ID",'')
                ELSE
                  Package3.SETRANGE("Source ID",PackingControl."Source ID");
                Package3.SETRANGE("Exist in Other Package",FALSE);
                Package3.SETRANGE("External Tracking No.",'');
                IF NOT Package3.FIND('-') THEN BEGIN
                  Window.CLOSE;
                  PackingControl."Error Message" := Text009;
                  EXIT(FALSE);
                END;
              END;

              PackageNo := Package3."No.";
              Finished := FALSE;
            END ELSE
              PackageNo := COPYSTR(InputLine,1,20);

            PackageNo := GetPackageNo(PackageNo);

            IF NOT AddPackageToPackage(
                     Package,PackingControl,PackageNo)
            THEN BEGIN
              EXIT(FALSE);
            END ELSE
              PackagesAdded := PackagesAdded + 1;

            IF STRPOS(InputLine,'..') <> 0 THEN
              Finished := Package3.NEXT = 0;
          UNTIL Finished;

          COMMIT;
        END;
      UNTIL LoopFinished;

      IF PackagesAdded = 0 THEN BEGIN
        PackingControl."Error Message" := Text002;
        EXIT(FALSE);
      END ELSE
        EXIT(TRUE);
    END;

    PROCEDURE AddSelectedPackagesToPackage@27(VAR Package@1240030000 : Record 14000701;VAR PackingControl@1240030001 : Record 14000717) : Boolean;
    VAR
      Package2@1000000004 : Record 14000701;
      SelectPackages@1000000005 : Page 14000684;
    BEGIN
      TestInitialized;
      Package2.RESET;
      Package2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Package2.SETRANGE("Source Type",PackingControl."Source Type");
      Package2.SETRANGE("Source Subtype",PackingControl."Source Subtype");
      IF PackingControl."Multi Document Package" THEN
        Package2.SETFILTER("Source ID",PackingControl."Multi Document No.")
      ELSE
        Package2.SETRANGE("Source ID",PackingControl."Source ID");
      Package2.SETRANGE(Closed,TRUE);
      Package2.SETRANGE("Exist in Other Package",FALSE);
      Package2.SETRANGE("Original Exist in Other Pack.",FALSE);
      IF ShippingSetup."Location Packing" THEN
        Package2.SETRANGE("Location Code",PackingStation."Location Code");

      CLEAR(SelectPackages);
      SelectPackages.SetPackageInfo(Package,PackingStation,ShippingSetup,PackingControl);
        SelectPackages.SETTABLEVIEW(Package2);
      SelectPackages.RUNMODAL;

      SelectPackages.GetPackageInfo(Package,PackingControl);
    END;

    PROCEDURE CreatePackage@3(VAR Package@1240030000 : Record 14000701;VAR PackingControl@1240030001 : Record 14000717) : Boolean;
    VAR
      Package2@1000000005 : Record 14000701;
      PackageLine@1000000006 : Record 14000702;
      WhseRequest@1000000000 : Record 5765;
      OutWhseReqMgt@1000000001 : Codeunit 14002863;
    BEGIN
      TestInitialized;
      IF PackingControl."Package Open" THEN BEGIN
        PackageLine.RESET;
        PackageLine.SETRANGE("Package No.",Package."No.");
        IF NOT PackageLine.FIND('-') THEN
          EXIT(FALSE);
      END;

      //TM BEG 061615
      WhseRequest.SETCURRENTKEY("Source Type","Source Subtype","Source No.");
      WhseRequest.SETRANGE("Location Code", PackingStation."Location Code");
      WhseRequest.SETRANGE("Source Subtype", PackingControl."Source Subtype");
      WhseRequest.SETRANGE("Source Type", PackingControl."Source Type"+1);
      IF PackingControl."Multi Document Package" = FALSE THEN
        WhseRequest.SETRANGE("Source No.", PackingControl."Source ID")
      ELSE
        WhseRequest.SETFILTER("Source No.", PackingControl."Multi Document No.");
      IF WhseRequest.FINDFIRST THEN
      REPEAT
        //<TPZ1036>
        CheckPickExist(WhseRequest."Source Type"-1, WhseRequest."Source Subtype", WhseRequest."Source No.");
        //</TPZ1036>

        OutWhseReqMgt.SetWhseActivStatusToPacking(WhseRequest);
        WhseRequest.MODIFY;
      UNTIL WhseRequest.NEXT = 0;
      //TM END 061615

      Package.RESET;
      Package.INIT;
      Package.VALIDATE(Package."No.",'');
      Package."Source Type" := PackingControl."Source Type";
      Package."Source Subtype" := PackingControl."Source Subtype";
      Package."Source ID" := PackingControl."Source ID";
      IF PackingControl."Multi Document Package" THEN BEGIN
        Package."Multi Document Package" := TRUE;
        Package."Multi Document No." := PackingControl."Multi Document No.";
      END;

      IF PackingControl."Total Package Count" = 0 THEN BEGIN
        Package2.RESET;
        Package2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
        Package2.SETRANGE("Source Type",PackingControl."Source Type");
        Package2.SETRANGE("Source Subtype",PackingControl."Source Subtype");
        IF PackingControl."Multi Document Package" THEN
          Package2.SETFILTER("Source ID",PackingControl."Multi Document No.")
        ELSE
          Package2.SETRANGE("Source ID",PackingControl."Source ID");
        IF ShippingSetup."Location Packing" THEN
          Package2.SETRANGE("Location Code",PackingStation."Location Code");
        IF Package2.FIND('+') THEN BEGIN
          PackingControl."Total Package Count" := Package2."Total Packages";
          PackingControl."Last Package No." := Package2."Package No.";
        END ELSE BEGIN
          PackingControl."Total Package Count" := 1;
          PackingControl."Last Package No." := 0;
        END;
      END;

      IF PackingControl."Last Package No." < PackingControl."Total Package Count" THEN BEGIN
        Package."Package No." := PackingControl."Last Package No." + 1;
        Package."Total Packages" := PackingControl."Total Package Count";
      END ELSE BEGIN
        Package."Package No." := 1;
        Package."Total Packages" := 1;
      END;
      Package."Export Document No." := PackingControl."Export Document No.";
      Package.INSERT(TRUE);

      IF PackingControl."Last Package No." = 0 THEN BEGIN
        CreateSelectExportDoc(PackingControl,Package."No.",TRUE,TRUE);
        IF PackingControl."Export Document No." <> '' THEN BEGIN
          Package."Export Document No." := PackingControl."Export Document No.";
          Package.MODIFY(TRUE);
        END;
      END;

      IF PackingControl.Prepack THEN BEGIN
        ShippingSetup.TESTFIELD("Prepack Shipping Agent Code");
        ShippingSetup.TESTFIELD("Prepack Shipping Agent Service");

        Package.VALIDATE("Shipping Agent Code",ShippingSetup."Prepack Shipping Agent Code");
        Package.VALIDATE("Shipping Agent Service",ShippingSetup."Prepack Shipping Agent Service");
        Package.MODIFY(TRUE);
      END;

      PackingControl."Last Package No." := PackingControl."Last Package No." + 1;
      Package.ClearTotalValueFields;
      Package.TotalNetWeight;

      PackingControl."Package Open" := TRUE;

      EXIT(TRUE);
    END;

    PROCEDURE CreatePackageLine@4(VAR Package@1240030000 : Record 14000701;VAR PackingControl@1240030001 : Record 14000717;LineUOM@1240030002 : Code[10];LineQuantity@1240030003 : Decimal;FixedQuantity@1240030004 : Decimal) : Boolean;
    VAR
      PackageLine@1000000012 : Record 14000702;
      PackageLine2@1000000013 : Record 14000702;
      FastPackLineTmp@1240030005 : TEMPORARY Record 14000711;
      EShipInput@1240030006 : Record 14000728;
      EShipEnterQuantity@1240030007 : Page 14050111;
      PackLotNumber@1240020000 : Boolean;
      QuantityEntered@1000000014 : Decimal;
      QuantityToAdd@1000000016 : Decimal;
    BEGIN
      TestInitialized;
      IF PackingControl."Input Serial Number" <> '' THEN
        IF (PackingControl."Input Unit of Measure Code" <> '') AND
           (PackingControl."Input Unit of Measure Code" <> LineUOM)
        THEN BEGIN
          PackingControl."Error Message" := STRSUBSTNO(Text010,LineUOM);
          EXIT(FALSE);
        END;

      IF (PackingStation."Enter Quantities" OR
          PackingControl."Input Always Enter Quantity" OR
          PackingControl."Always Enter Quantity") AND
         (PackingControl."Input Serial Number" = '') AND
         ((LineQuantity <> 1) OR
          NOT PackingStation."Do Not Enter Quantity of One") AND
         (FixedQuantity = 0)
      THEN BEGIN
        EShipInput.INIT;
        EShipInput.Type := PackingControl."Input Type";
        EShipInput."No." := PackingControl."Input No.";
        EShipInput."Variant Code" := PackingControl."Input Variant Code";
        IF PackingControl."Input Unit of Measure Code" <> '' THEN
          EShipInput."Unit of Measure" := PackingControl."Input Unit of Measure Code"
        ELSE
          EShipInput."Unit of Measure" := LineUOM;
        EShipInput.Description := PackingControl."Input Description";

        PackageLine.RESET;
        PackageLine.SETRANGE("Package No.",Package."No.");
        PackageLine.SETRANGE(Type,PackingControl."Input Type");
        PackageLine.SETRANGE("No.",PackingControl."Input No.");
        PackageLine.SETRANGE("Variant Code",PackingControl."Input Variant Code");
        IF PackingControl."Input Unit of Measure Code" <> '' THEN
          PackageLine.SETRANGE("Unit of Measure Code",PackingControl."Input Unit of Measure Code")
        ELSE
          PackageLine.SETRANGE("Unit of Measure Code",LineUOM);
        EShipInput.Quantity := 0;
        IF PackageLine.FIND('-') THEN
          REPEAT
            IF PackingControl."Pack Serial Number" AND
               (PackageLine."Unit of Measure Code" <> LineUOM)
            THEN BEGIN
              PackingControl."Error Message" :=
                STRSUBSTNO(Text011,PackageLine.FIELDNAME("Unit of Measure Code"));
              EXIT(FALSE);
            END;
            EShipInput."Already Packed Quantity" :=
              EShipInput."Already Packed Quantity" + PackageLine.Quantity;
          UNTIL PackageLine.NEXT = 0;

        EShipInput.Quantity := 0;
        CLEAR(EShipEnterQuantity);
        EShipEnterQuantity.LOOKUPMODE(TRUE);
        EShipEnterQuantity.SetEShipInput(EShipInput);
        IF EShipEnterQuantity.RUNMODAL <> ACTION::LookupOK THEN BEGIN
          PackingControl."Error Message" := Text016;
          EXIT(FALSE);
        END ELSE
          EShipEnterQuantity.GetEShipInput(EShipInput);

        IF (PackingControl."Pack Serial Number" OR PackingControl."Pack Lot Number" OR
            PackingControl."Pack Warranty Date" OR PackingControl."Pack Expiration Date") AND
           (EShipInput.Quantity <= EShipInput."Already Packed Quantity") AND
           NOT PackingStation."Accumulate Qty when Entered"
        THEN BEGIN
          PackingControl."Error Message" := Text017;
          EXIT(FALSE);
        END;

        IF PackingStation."Accumulate Qty when Entered" THEN
          QuantityToAdd := EShipInput.Quantity
        ELSE
          QuantityToAdd := EShipInput.Quantity - EShipInput."Already Packed Quantity";
      END ELSE
        IF FixedQuantity <> 0 THEN
          QuantityToAdd := FixedQuantity
        ELSE
          QuantityToAdd := 1;

      IF PackingControl."Required Shipping Agent Code" <> '' THEN BEGIN
        IF PackingControl."Required E-Ship Agent Service" = '' THEN BEGIN
          PackingControl."Error Message" := Text018;
          EXIT(FALSE);
        END;

        IF (Package."Shipping Agent Code" <> PackingControl."Required Shipping Agent Code") OR
           (Package."Shipping Agent Service" <> PackingControl."Required E-Ship Agent Service")
        THEN BEGIN
          PackageLine2.RESET;
          PackageLine2.SETRANGE("Package No.",Package."No.");
          IF PackageLine2.FIND('-') THEN BEGIN
            IF NOT PackingControl."Allow Other Ship. Agent/Serv." THEN BEGIN
              PackingControl."Error Message" :=
                STRSUBSTNO(
                  Text019,PackingControl."Required Shipping Agent Code",
                  PackingControl."Required E-Ship Agent Service");
              EXIT(FALSE);
            END;
          END ELSE BEGIN
            Package.VALIDATE("Shipping Agent Code",PackingControl."Required Shipping Agent Code");
            Package.VALIDATE("Shipping Agent Service",PackingControl."Required E-Ship Agent Service");
            Package.MODIFY(TRUE);
          END;
        END;
      END;

      FastPackLineTmp.RESET;
      FastPackLineTmp.DELETEALL;
      IF ShippingSetup."Select Multi Document Source" AND Package."Multi Document Package" THEN BEGIN
        IF PackingControl.LookupSelectedSourceID(
             Package,FastPackLineTmp,0,PackingControl."Input Type",PackingControl."Input No.",
             PackingControl."Input Variant Code",QuantityToAdd)
        THEN BEGIN
          FastPackLineTmp.RESET;
          FastPackLineTmp.SETFILTER("Qty. to Ship (Base)",'<>0');
          IF NOT FastPackLineTmp.FIND('-') THEN BEGIN
            PackingControl."Error Message" := Text018;
            EXIT(FALSE);
          END;
        END ELSE
          CLEAR(FastPackLineTmp);
      END;

      PackageLine.RESET;
      PackageLine.SETRANGE("Package No.",Package."No.");
      PackageLine.SETRANGE(Type,PackingControl."Input Type");
      PackageLine.SETRANGE("No.",PackingControl."Input No.");
      PackageLine.SETRANGE("Variant Code",PackingControl."Input Variant Code");
      IF PackingControl."Input Unit of Measure Code" <> '' THEN
        PackageLine.SETRANGE("Unit of Measure Code",PackingControl."Input Unit of Measure Code")
      ELSE
        PackageLine.SETRANGE("Unit of Measure Code",LineUOM);
      PackageLine.SETRANGE("Serial No.",'');
      IF PackingControl."Input Lot Number" <> '' THEN BEGIN
        PackageLine.SETRANGE("Lot No.",PackingControl."Input Lot Number");
        PackLotNumber := FALSE;
      END ELSE BEGIN
        PackageLine.SETRANGE("Lot No.",'');
        PackLotNumber := TRUE;
      END;
      PackageLine.SETRANGE("Warranty Date",0D);
      PackageLine.SETRANGE("Expiration Date",0D);
      IF ShippingSetup."Select Multi Document Source" AND Package."Multi Document Package" THEN
        PackageLine.SETRANGE("Selected Source ID",FastPackLineTmp."From Source ID");
      IF PackageLine.FIND('-') AND
         NOT PackingControl."Pack Serial Number" AND NOT PackLotNumber AND
         NOT PackingControl."Pack Warranty Date" AND NOT PackingControl."Pack Expiration Date"
      THEN BEGIN
        PackageLine.VALIDATE(Quantity,PackageLine.Quantity + QuantityToAdd);
        IF PackageLine.OverPackError THEN BEGIN
          PackingControl."Error Message" := Text020;
          EXIT(FALSE);
        END;
        PackageLine.MODIFY(TRUE);
      END ELSE BEGIN
        PackageLine.RESET;
        PackageLine.SETRANGE("Package No.",Package."No.");
        IF PackageLine.FIND('+') THEN
          PackageLine."Line No." := PackageLine."Line No." + 10000
        ELSE
          PackageLine."Line No." := 10000;
        PackageLine."Package No." := Package."No.";
        PackageLine.INIT;
        PackageLine."Source Type" := Package."Source Type";
        PackageLine."Source Subtype" := Package."Source Subtype";
        PackageLine."Source ID" := Package."Source ID";

        //TOP040 KT ABCSI Sales Order Split by Location 03032015
        PackageLine."Ship-to Type" := Package."Ship-to Type";
        PackageLine."Ship-to No." := Package."Ship-to No.";
        PackageLine."Ship-to Code" := Package."Ship-to Code";
        PackageLine."Ship-to Name" := Package."Ship-to Name";
        //TOP040 KT ABCSI Sales Order Split by Location 03032015

        PackageLine.VALIDATE(Type,PackingControl."Input Type");
        PackageLine.VALIDATE("No.",PackingControl."Input No.");
        IF PackingControl."Input Variant Code" <> '' THEN
          PackageLine.VALIDATE("Variant Code",PackingControl."Input Variant Code");
        IF PackingControl."Input No." <> '' THEN
          PackageLine.VALIDATE(Quantity,QuantityToAdd)
        ELSE
          PackageLine.VALIDATE(Quantity,0);
        IF PackingControl."Input Unit of Measure Code" <> '' THEN
          PackageLine.VALIDATE("Unit of Measure Code",PackingControl."Input Unit of Measure Code")
        ELSE
          PackageLine.VALIDATE("Unit of Measure Code",LineUOM);
        IF PackageLine.OverPackError THEN BEGIN
          PackingControl."Error Message" := Text020;
          EXIT(FALSE);
        END;

        IF PackingControl."Pack Lot Number" AND (PackingControl."Input Lot Number" <> '') THEN
          PackageLine.VALIDATE("Lot No.",PackingControl."Input Lot Number");

        IF PackingControl."Pack Warranty Date" AND (PackingControl."Input Warranty Date" <> 0D) THEN
          PackageLine.VALIDATE("Warranty Date",PackingControl."Input Warranty Date");

        IF PackingControl."Pack Expiration Date" AND (PackingControl."Input Expiration Date" <> 0D) THEN
          PackageLine.VALIDATE("Expiration Date",PackingControl."Input Expiration Date");

        PackageLine.VALIDATE("Scanned No.",PackingControl."Scanned No.");

        IF PackingControl."Pack Serial Number" AND (PackingControl."Input Serial Number" = '')
        THEN BEGIN
          QuantityEntered := 0;
          WHILE QuantityEntered < QuantityToAdd DO BEGIN
            QuantityEntered := QuantityEntered + 1;
            PackageLine.VALIDATE(Quantity,1);
            IF QuantityEntered > 1 THEN
              PackageLine."Line No." := PackageLine."Line No." + 10000;
            IF PackageLine.OverPackError THEN BEGIN
              PackingControl."Error Message" := Text020;
              EXIT(FALSE);
            END;

            IF ShippingSetup."Select Multi Document Source" AND Package."Multi Document Package" AND
               (FastPackLineTmp."From Source ID" <> '')
            THEN BEGIN
              IF FastPackLineTmp."Qty. to Ship (Base)" >= PackageLine."Quantity (Base)" THEN BEGIN
                PackageLine.VALIDATE("Selected Source ID",FastPackLineTmp."From Source ID");
                FastPackLineTmp."Qty. to Ship (Base)" :=
                  FastPackLineTmp."Qty. to Ship (Base)" - PackageLine."Quantity (Base)";
              END ELSE BEGIN
                IF FastPackLineTmp."Quantity (Base)" <> 0 THEN
                  ERROR(Text020);

                IF FastPackLineTmp.NEXT = 0 THEN
                  ERROR(Text020);

                PackageLine.VALIDATE("Selected Source ID",FastPackLineTmp."From Source ID");
                FastPackLineTmp."Qty. to Ship (Base)" :=
                  FastPackLineTmp."Qty. to Ship (Base)" - PackageLine."Quantity (Base)";

                IF FastPackLineTmp."Quantity (Base)" < 0 THEN
                  ERROR(Text020);
              END;
            END;

            PackageLine.INSERT(TRUE);
          END;
        END ELSE BEGIN
          IF PackingControl."Input Serial Number" <> '' THEN BEGIN
            PackageLine2.RESET;
            PackageLine2.SETCURRENTKEY("No.","Serial No.");
            PackageLine2.SETRANGE("No.",PackingControl."Input No.");
            PackageLine2.SETRANGE("Serial No.",PackingControl."Input Serial Number");
            IF PackageLine2.FIND('-') THEN BEGIN
              PackingControl."Error Message" :=
                STRSUBSTNO(
                  Text021,
                  PackingControl.FormatSource2,PackageLine2."Package No.");
              EXIT(FALSE);
            END;

            PackageLine.VALIDATE("Serial No.",PackingControl."Input Serial Number");
          END;

          IF ShippingSetup."Select Multi Document Source" AND Package."Multi Document Package" AND
             (FastPackLineTmp."From Source ID" <> '')
          THEN BEGIN
            REPEAT
              IF FastPackLineTmp."Qty. to Pack (Base)" <> PackageLine."Quantity (Base)" THEN BEGIN
                IF FastPackLineTmp."Qty. per Unit of Measure" <>
                   PackageLine."Qty. per Unit of Measure"
                THEN BEGIN
                  IF PackageLine."Qty. per Unit of Measure" = 0 THEN
                    PackageLine."Qty. per Unit of Measure" := 1;
                  PackageLine.VALIDATE(
                    Quantity,
                    ROUND(
                      PackageLine."Qty. per Unit of Measure" /
                      FastPackLineTmp."Qty. to Pack (Base)",0.00001));
                END ELSE
                  PackageLine.VALIDATE(Quantity,FastPackLineTmp."Qty. to Pack");
                PackageLine.VALIDATE("Quantity (Base)",FastPackLineTmp."Qty. to Pack (Base)");
              END;
              PackageLine.VALIDATE("Selected Source ID",FastPackLineTmp."From Source ID");

              PackageLine.INSERT(TRUE);

              PackageLine."Line No." := PackageLine."Line No." + 10000;
            UNTIL FastPackLineTmp.NEXT = 0;
          END ELSE
            PackageLine.INSERT(TRUE);

        END;
      END;

      Package.GET(Package."No.");
      Package.ClearTotalValueFields;
      Package.TotalNetWeight;

      EXIT(TRUE);
    END;

    PROCEDURE ClosePackage@8(VAR Package@1240030000 : Record 14000701;ShippingAgent@1240030001 : Record 291;ScaleInterface@1240030002 : Record 14000746;VAR PackingControl@1240030003 : Record 14000717;PrintLabel@1240030004 : Boolean) : Boolean;
    VAR
      PackageLine@1240030008 : Record 14000702;
      PackingRule@1240030009 : Record 14000715;
    BEGIN
      TestInitialized;
      PackingRule.GetPackingRule(
        PackingControl."Ship-to Type",PackingControl."Ship-to No.",PackingControl."Ship-to Code");
      IF NOT PackingControl."Package Open" THEN BEGIN
        IF NOT PackingRule.PackDetail(
                 Package."Source Type",Package."Source Subtype",Package."Shipping Agent Code")
        THEN BEGIN
          IF NOT PackingControl."Package Open" THEN BEGIN
            CreatePackage(Package,PackingControl);
            COMMIT;
          END;
        END ELSE BEGIN
          PackingControl."Error Message" := Text022;
          EXIT(FALSE);
        END;
      END;

      Package.GET(Package."No.");

      //<TPZ1435>
      IF Package.Miscellaneous THEN
        Package.TESTFIELD("Shortcut Dimension 5 Code");
      //</TPZ1435>

      Package."Packing Date" := WORKDATE;
      PackageLine.RESET;
      PackageLine.SETRANGE("Package No.",Package."No.");
      IF NOT PackageLine.FIND('-') AND
         PackingRule.PackDetail(
           Package."Source Type",Package."Source Subtype",Package."Shipping Agent Code")
      THEN BEGIN
        Package.DELETE(TRUE);
        PackingControl."Package Open" := FALSE;
        CLEAR(Package);
        Package.INIT;
        Package."No." := '';
        EXIT(FALSE);
      END ELSE BEGIN
        //TM BEG 070815
        IF (ShippingAgent."Shipper Type" <> ShippingAgent."Shipper Type"::UPS) AND
           (ShippingAgent."Shipper Type" <> ShippingAgent."Shipper Type"::FEDEX) AND
           (ShippingAgent.Type <> ShippingAgent.Type::Pickup) AND (ShippingAgent.Type <> ShippingAgent.Type::"Local") AND
           (PackingStation."Manually Enter Value" = FALSE)
           //(Package."Shipping Payment Type" <> Package."Shipping Payment Type"::"Third Party")
          THEN BEGIN
          ValueOverride(Package);
        END;
        //TM END 070815

        IF PackingStation."Scale Interface Code" <> '' THEN BEGIN
          IF PackingControl."Scale Weight" <> 0 THEN BEGIN
            Package.VALIDATE("Scale Weight",PackingControl."Scale Weight");
          END ELSE BEGIN
            IF NOT ScalesComm.GetPackageWeight(ScaleInterface,Package) THEN BEGIN
              PackingControl."Error Message" := Text023;
              EXIT(FALSE);
            END;

            //TM BEG 041116
            IF (Package."Scale Weight" <= 0) AND (Package."Location Code" = '76') THEN
              WeightOverride(Package);
            //TM END 041116

          END;
        END ELSE
          IF PackingStation."Manually Enter Weight" THEN
            IF PackingControl."Manual Weight" <> 0 THEN
              Package.VALIDATE("Override Weight",PackingControl."Manual Weight")
            ELSE
              WeightOverride(Package);

        IF PackingStation."Manually Enter Value" THEN
          IF PackingControl."Manual Value" <> 0 THEN
            Package.VALIDATE("Override Value",PackingControl."Manual Value")
          ELSE
            ValueOverride(Package);

        IF PackingStation."Manually Enter Dimensions" THEN
          //TM BEG 071415 <TPZ842>
          IF ShippingAgent."Shipper Type" IN [ShippingAgent."Shipper Type"::UPS,
                                              ShippingAgent."Shipper Type"::FEDEX] THEN
          //TM END 071415 <TPZ842>
          VolumeOverride(Package);

        //<TPZ1296> //EB
         IF (PackingStation."CubiScan Connected"=TRUE) THEN BEGIN
            IF ShippingAgent."Shipper Type" IN [ShippingAgent."Shipper Type"::UPS,
                                              ShippingAgent."Shipper Type"::FEDEX] THEN
            VolumeAndWeightOverride(Package,ScaleInterface);
         END;
        //</TPZ1296> //EB END




      END;

      IF Package.COD OR PackingControl."COD Payment" THEN
        IF NOT SetCODAmount(Package,PackingControl) THEN
          EXIT(FALSE);

      Package."No AES Required" := PackingControl."No AES Required";

      Shipping.ClosePackage(Package,PrintLabel);

      PackingControl."Package Open" := FALSE;

      EXIT(TRUE);
    END;

    PROCEDURE OpenPackage@23(BillOfLading@1240030000 : Record 14000822;VAR Package@1240030001 : Record 14000701;VAR PackingControl@1240030002 : Record 14000717) : Boolean;
    VAR
      Package2@1000000009 : Record 14000701;
      EShipInput@1240030004 : Record 14000728;
      EShipEnterPackageNo@1240030003 : Page 14050106;
      PackageNo@1000000010 : Code[250];
    BEGIN
      TestInitialized;
      IF PackingControl."Package Open" THEN BEGIN
        PackingControl."Error Message" := Text024;
        EXIT(FALSE);
      END;

      Package2.RESET;
      Package2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Package2.SETRANGE("Source Type",PackingControl."Source Type");
      Package2.SETRANGE("Source Subtype",PackingControl."Source Subtype");
      IF PackingControl."Multi Document Package" THEN
        Package2.SETFILTER("Source ID",PackingControl."Multi Document No.")
      ELSE
        Package2.SETRANGE("Source ID",PackingControl."Source ID");
      Package2.SETRANGE(Closed,FALSE);
      IF Package2.FIND('-') THEN BEGIN
        PackingControl."Error Message" := STRSUBSTNO(Text025,Package2."No.");
        EXIT(FALSE);
      END;

      CLEAR(EShipInput);
      EShipInput."Source Type" := PackingControl."Source Type";
      EShipInput."Source Subtype" := PackingControl."Source Subtype";
      EShipInput."Source ID" := PackingControl."Source ID";
      EShipInput."Multi Document No." := PackingControl."Multi Document No.";

      CLEAR(EShipEnterPackageNo);
      EShipEnterPackageNo.LOOKUPMODE(TRUE);
      EShipEnterPackageNo.SetEShipInput(EShipInput);
      IF EShipEnterPackageNo.RUNMODAL = ACTION::LookupOK THEN BEGIN
      EShipEnterPackageNo.GetEShipInput(EShipInput);
      IF (EShipInput."Package No." <> '') AND
         (COPYSTR(EShipInput."Package No.",1,2) <> '//')
      THEN
          PackageNo := EShipInput."Package No.";
      END;

      IF PackageNo = '' THEN BEGIN
        PackingControl."Error Message" := Text027;
        EXIT(FALSE);
      END;

      PackageNo := GetPackageNo(PackageNo);

      IF NOT Package2.GET(PackageNo) THEN BEGIN
        PackingControl."Error Message" := STRSUBSTNO(Text003,PackageNo);
        EXIT(FALSE);
      END;

      Package2.CALCFIELDS("Exist in Other Package");
      IF Package2."Exist in Other Package"THEN BEGIN
        PackingControl."Error Message" := Text029;
        EXIT(FALSE);
      END;

      IF PackingControl."Multi Document Package" THEN BEGIN
        IF NOT ((Package2."Multi Document No." = PackingControl."Source ID") OR
                (STRPOS(Package2."Multi Document No.",'|' + PackingControl."Source ID") <> 0) OR
                (STRPOS(Package2."Multi Document No.",PackingControl."Source ID" + '|') <> 0))
        THEN BEGIN
          PackingControl."Error Message" := Text030;
          EXIT(FALSE);
        END;

        IF Package2."Original Package No." <> '' THEN BEGIN
          PackageNo := Package2."Original Package No.";

          Package.GET(PackageNo);
        END ELSE BEGIN
          Package.RESET;
          Package.SETCURRENTKEY("Original Package No.");
          Package.SETRANGE("Original Package No.",Package2."No.");
          Package.FIND('-');
        END;
      END ELSE BEGIN
        IF (Package2."Source Type" <> PackingControl."Source Type") OR
           (Package2."Source Subtype" <> PackingControl."Source Subtype") OR
           (Package2."Source ID" <> PackingControl."Source ID")
        THEN BEGIN
          PackingControl."Error Message" := STRSUBSTNO(Text008,PackingControl.FormatSource2);
          EXIT(FALSE);
        END;

        Package.GET(PackageNo);
      END;

      Shipping.OpenPackage(Package);

      Package.GET(PackageNo);
      IF PackingControl.Prepack THEN BEGIN
        ShippingSetup.TESTFIELD("Prepack Shipping Agent Code");
        ShippingSetup.TESTFIELD("Prepack Shipping Agent Service");

        IF (Package."Shipping Agent Code" <> ShippingSetup."Prepack Shipping Agent Code") OR
           (Package."Shipping Agent Service" <> ShippingSetup."Prepack Shipping Agent Service")
        THEN BEGIN
          Package.VALIDATE("Shipping Agent Code",ShippingSetup."Prepack Shipping Agent Code");
          Package.VALIDATE("Shipping Agent Service",ShippingSetup."Prepack Shipping Agent Service");
        END;
      END ELSE BEGIN
        IF (PackingControl."Bill of Lading No." <> '') AND ShippingSetup."Use Shipping Agent from BOL"
        THEN BEGIN
          IF (Package."Shipping Agent Code" <> BillOfLading."Shipping Agent Code") OR
             (Package."Shipping Agent Service" <> BillOfLading."Shipping Agent Service")
          THEN BEGIN
            Package2.VALIDATE("Shipping Agent Code",BillOfLading."Shipping Agent Code");
            Package2.VALIDATE("Shipping Agent Service",BillOfLading."Shipping Agent Service");
          END;
        END ELSE
          IF (Package."Shipping Agent Code" <> PackingControl."Shipping Agent Code") OR
             (Package."Shipping Agent Service" <> PackingControl."E-Ship Agent Service")
          THEN BEGIN
            Package.VALIDATE("Shipping Agent Code",PackingControl."Shipping Agent Code");
            Package.VALIDATE("Shipping Agent Service",PackingControl."E-Ship Agent Service");
          END;
      END;
      Package.MODIFY(TRUE);

      PackingControl."Package Open" := TRUE;

      EXIT(TRUE);
    END;

    PROCEDURE CopyLastPackage@42(VAR Package@1240030000 : Record 14000701;VAR PackingControl@1240030001 : Record 14000717;PrintLabel@1240030002 : Boolean) : Boolean;
    VAR
      Package2@1000000005 : Record 14000701;
      EShipInput@1240030003 : Record 14000728;
      EShipNoOfCopies@1240030004 : Page 14050101;
      NoOfPackages@1000000007 : Integer;
      CreatedPackages@1000000008 : Integer;
    BEGIN
      TestInitialized;
      Package2.RESET;
      Package2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Package2.SETRANGE("Source Type",PackingControl."Source Type");
      Package2.SETRANGE("Source Subtype",PackingControl."Source Subtype");
      IF PackingControl."Multi Document Package" THEN
        Package2.SETFILTER("Source ID",PackingControl."Multi Document No.")
      ELSE
        Package2.SETRANGE("Source ID",PackingControl."Source ID");
      Package2.SETRANGE(Closed,TRUE);
      IF ShippingSetup."Location Packing" THEN
        Package2.SETRANGE("Location Code",PackingStation."Location Code");
      IF NOT Package2.FIND('+') THEN BEGIN
        PackingControl."Error Message" := Text031;
        EXIT(FALSE);
      END;
      IF Package2."Original Package No." <> '' THEN BEGIN
        Package2.GET(Package2."Original Package No.");
        Package2."Source Type" := PackingControl."Source Type";
        Package2."Source Subtype" := PackingControl."Source Subtype";
        Package2."Source ID" := PackingControl."Source ID";
      END;

      CLEAR(EShipNoOfCopies);
      EShipNoOfCopies.LOOKUPMODE(TRUE);
      IF EShipNoOfCopies.RUNMODAL = ACTION::LookupOK THEN BEGIN
      EShipNoOfCopies.GetEShipInput(EShipInput);
      NoOfPackages := EShipInput."No. of Copies";
      END ELSE
        EXIT(FALSE);

      IF NoOfPackages < 1 THEN BEGIN
        PackingControl."Error Message" := Text033;
        EXIT(FALSE);
      END;

      CreatedPackages := Package2.CopyPackage(NoOfPackages,FALSE,PrintLabel);

      Package2.FIND('+');
      Package := Package2;
      PackingControl."Last Package No." := Package."Package No.";
      PackingControl."Total Package Count" := Package."Total Packages";
      Package.ClearTotalValueFields;
      Package.TotalNetWeight;

      IF CreatedPackages < NoOfPackages THEN BEGIN
        PackingControl."Error Message" := STRSUBSTNO(Text034,CreatedPackages);

        EXIT(FALSE);
      END ELSE
        EXIT(TRUE);
    END;

    PROCEDURE CopyLastLabel@33(VAR Package@1240030000 : Record 14000701;VAR PackingControl@1240030001 : Record 14000717) : Boolean;
    VAR
      Package2@1240030003 : Record 14000701;
      LabelFile@1240030004 : Record 14000710;
      EShipInput@1240030002 : Record 14000728;
      EShipNoOfCopies@1240030007 : Page 14050101;
      i@1240030006 : Integer;
    BEGIN
      TestInitialized;
      Package2.RESET;
      Package2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Package2.SETRANGE("Source Type",PackingControl."Source Type");
      Package2.SETRANGE("Source Subtype",PackingControl."Source Subtype");
      IF PackingControl."Multi Document Package" THEN
        Package2.SETFILTER("Source ID",PackingControl."Multi Document No.")
      ELSE
        Package2.SETRANGE("Source ID",PackingControl."Source ID");
      Package2.SETRANGE(Closed,TRUE);
      IF NOT Package2.FIND('+') THEN BEGIN
        PackingControl."Error Message" := Text031;
        EXIT(FALSE);
      END;
      IF Package2."Original Package No." <> '' THEN BEGIN
        Package2.GET(Package2."Original Package No.");
        Package2."Source Type" := PackingControl."Source Type";
        Package2."Source Subtype" := PackingControl."Source Subtype";
        Package2."Source ID" := PackingControl."Source ID";
      END;

      CLEAR(EShipInput);
      EShipInput."No. of Copies" := 1;
      CLEAR(EShipNoOfCopies);
      EShipNoOfCopies.LOOKUPMODE(TRUE);
      EShipNoOfCopies.SetEShipInput(EShipInput);
      IF EShipNoOfCopies.RUNMODAL = ACTION::LookupOK THEN BEGIN
      EShipNoOfCopies.GetEShipInput(EShipInput);
      END ELSE BEGIN
        PackingControl."Error Message" := Text036;
        EXIT(FALSE);
      END;

      IF EShipInput."No. of Copies" < 1 THEN BEGIN
        PackingControl."Error Message" := Text037;
        EXIT(FALSE);
      END;

      LabelFile.RESET;
      LabelFile.SETRANGE(Type,LabelFile.Type::Package);
      LabelFile.SETRANGE("No.",Package2."No.");
      IF LabelFile.FIND('-') THEN
        REPEAT
          FOR i := 1 TO EShipInput."No. of Copies" DO BEGIN
            LabelFile.PrintLabel;

            LabelFile.FIND;
          END;
        UNTIL LabelFile.NEXT = 0;

      EXIT(TRUE);
    END;

    PROCEDURE CheckPackageOpen@24(VAR Package@1240030000 : Record 14000701;VAR PackingControl@1240030001 : Record 14000717);
    VAR
      Package2@1000000006 : Record 14000701;
      OpenPackageFound@1000000011 : Boolean;
      ClosedPackageFound@1000000012 : Boolean;
      FinishedSearch@1000000013 : Boolean;
    BEGIN
      TestInitialized;
      Package2.RESET;
      Package2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Package2.SETRANGE("Source Type",PackingControl."Source Type");
      Package2.SETRANGE("Source Subtype",PackingControl."Source Subtype");
      Package2.SETRANGE("Source ID",PackingControl."Source ID");
      Package2.SETRANGE(Closed,FALSE);
      Package2.SETRANGE("Multi Document Package",FALSE);
      IF ShippingSetup."Location Packing" THEN
        Package2.SETRANGE("Location Code",PackingStation."Location Code");
      OpenPackageFound := Package2.FIND('-');
      IF NOT OpenPackageFound THEN BEGIN
        Package2.RESET;
        Package2.SETRANGE("Source Type",PackingControl."Source Type");
        Package2.SETRANGE("Source Subtype",PackingControl."Source Subtype");
        Package2.SETFILTER("Multi Document No.",'*' + PackingControl."Source ID" + '*');
        Package2.SETRANGE(Closed,FALSE);
        Package2.SETRANGE("Multi Document Package",TRUE);
        IF ShippingSetup."Location Packing" THEN
          Package2.SETRANGE("Location Code",PackingStation."Location Code");
        IF Package2.FIND('-') THEN BEGIN
          FinishedSearch := FALSE;
          REPEAT
            IF (Package2."Multi Document No." = PackingControl."Source ID") OR
               (STRPOS(Package2."Multi Document No.",'|' + PackingControl."Source ID") <> 0) OR
               (STRPOS(Package2."Multi Document No.",PackingControl."Source ID" + '|') <> 0)
            THEN
              OpenPackageFound := TRUE;

            IF NOT OpenPackageFound THEN
              FinishedSearch := Package2.NEXT = 0;
          UNTIL OpenPackageFound OR FinishedSearch;
        END;
      END;

      IF OpenPackageFound THEN BEGIN
        Package.GET(Package2."No.");
        Package.ClearTotalValueFields;
        Package.TotalNetWeight;
        PackingControl."Package Open" := TRUE;
        PackingControl."Last Package No." := Package."Package No.";
        PackingControl."Total Package Count" := Package."Total Packages";
        IF Package."Multi Document Package" THEN
          PackingControl."Multi Document No." := Package."Multi Document No.";
        PackingControl."Multi Document Package" := Package."Multi Document Package";
      END ELSE BEGIN
        Package2.RESET;
        Package2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
        Package2.SETRANGE("Source Type",PackingControl."Source Type");
        Package2.SETRANGE("Source Subtype",PackingControl."Source Subtype");
        Package2.SETRANGE("Source ID",PackingControl."Source ID");
        Package2.SETRANGE(Closed,TRUE);
        Package2.SETRANGE("Multi Document Package",FALSE);
        IF ShippingSetup."Location Packing" THEN
          Package2.SETRANGE("Location Code",PackingStation."Location Code");
        ClosedPackageFound := Package2.FIND('+');
        IF NOT ClosedPackageFound THEN BEGIN
          Package2.RESET;
          Package2.SETFILTER("Multi Document No.",'*' + PackingControl."Source ID" + '*');
          Package2.SETRANGE(Closed,TRUE);
          Package2.SETRANGE("Multi Document Package",TRUE);
          IF ShippingSetup."Location Packing" THEN
            Package2.SETRANGE("Location Code",PackingStation."Location Code");
          IF Package2.FIND('+') THEN BEGIN
            FinishedSearch := FALSE;
            REPEAT
              IF (Package2."Multi Document No." = PackingControl."Source ID") OR
                 (STRPOS(Package2."Multi Document No.",'|' + PackingControl."Source ID") <> 0) OR
                 (STRPOS(Package2."Multi Document No.",PackingControl."Source ID" + '|') <> 0)
              THEN
                ClosedPackageFound := TRUE;

              IF NOT ClosedPackageFound THEN
                FinishedSearch := Package2.NEXT = 0;
            UNTIL ClosedPackageFound OR FinishedSearch;
          END;
        END;

        IF ClosedPackageFound THEN BEGIN
          PackingControl."Last Package No." := Package2."Package No.";
          PackingControl."Total Package Count" := Package2."Total Packages";
          IF Package2."Multi Document Package" THEN
            PackingControl."Multi Document No." := Package2."Multi Document No.";
          PackingControl."Multi Document Package" := Package2."Multi Document Package";
        END ELSE
          IF PackingStation."Always Enter Total Packages" THEN
            ChangeTotalPackageCount(Package,PackingControl);
        Package.INIT;
        PackingControl."Package Open" := FALSE;
        CLEAR(Package);
      END;
    END;

    PROCEDURE CloseOrder@12(ShippingAgent@1240030000 : Record 291;VAR PackingControl@1240030001 : Record 14000717;PrintOrder@1240030002 : Boolean;ForceClose@1240030003 : Boolean;FuturePacking@1240030004 : Boolean) : Boolean;
    VAR
      SalesSetup@1000000002 : Record 311;
      Package@1240030005 : Record 14000701;
      Package2@1240030006 : Record 14000701;
      PackageTmp@1240030031 : TEMPORARY Record 14000701;
      PostedPackage@1240030038 : Record 14000704;
      SalesHeader@1240030007 : Record 36;
      SalesShipmentHeader@1240030023 : Record 110;
      SalesInvoiceHeader@1240030024 : Record 112;
      PurchHeader@1240030008 : Record 38;
      ReturnShipmentHeader@1240030025 : Record 6650;
      PurchCreditMemoHeader@1240030026 : Record 124;
      TransferHeader@1240030020 : Record 5740;
      TransferShipmentHeader@1240030027 : Record 5744;
      PackingRule@1240030009 : Record 14000715;
      BillOfLading@1240030010 : Record 14000822;
      BillOfLadingScanning@1240030012 : Page 14000837;
      SalesPost@1240030013 : Codeunit 80;
      PurchPost@1240030014 : Codeunit 90;
      TransferOrderPostShipment@1240030021 : Codeunit 5704;
      EShipSetGlobalVariable@1240020000 : Codeunit 14000246;
      PackageNo@1240030015 : Integer;
      DocumentPosted@1240030016 : Boolean;
      PostedPackageFound@1240030030 : Boolean;
      ExportDocsPrinted@1240030017 : Boolean;
      ExportDocSetup@1240030011 : Record 14000991;
      WhseRequest@1000000000 : Record 5765;
      OutWhseReqMgt@1000000001 : Codeunit 14002863;
      WhseSalesPostViaJobQueue@1170000007 : Codeunit 50008;
    BEGIN
      TestInitialized;
      ExportDocSetup.INIT;
      IF NOT ShippingSetup."Disable Export Documentation" THEN
        ExportDocSetup.GET;

      IF ForceClose AND
         NOT (((PackingControl."Source Type" = DATABASE::"Sales Header") AND
               (PackingControl."Source Subtype" = SalesHeader."Document Type"::Order)) OR
              ((PackingControl."Source Type" = DATABASE::"Purchase Header") AND
               (PackingControl."Source Subtype" = PurchHeader."Document Type"::"Return Order")) OR
              (PackingControl."Source Type" = DATABASE::"Transfer Header"))
      THEN BEGIN
        PackingControl."Error Message" := Text120;
        EXIT(FALSE);
      END;

      IF PackingStation."Test Package No. on Close Ord." THEN BEGIN
        IF PackingControl."Multi Document Package" THEN BEGIN
          Package.RESET;
          Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
          Package.SETRANGE("Source Type",PackingControl."Source Type");
          Package.SETRANGE("Source Subtype",PackingControl."Source Subtype");
          IF PackingControl."Multi Document Package" THEN
            Package.SETFILTER("Source ID",PackingControl."Multi Document No.")
          ELSE
            Package.SETRANGE("Source ID",PackingControl."Source ID");
          IF ShippingSetup."Location Packing" THEN
            Package.SETRANGE("Location Code",PackingStation."Location Code");
          IF Package.FIND('-') THEN
            REPEAT
              IF Package."Original Package No." <> '' THEN BEGIN
                PackageTmp."No." := Package."Original Package No.";
                IF NOT PackageTmp.INSERT THEN
                  ;
              END;
            UNTIL Package.NEXT = 0;

          PostedPackageFound := FALSE;
          IF PackageTmp.FIND('-') THEN
            REPEAT
              PostedPackage.RESET;
              PostedPackage.SETCURRENTKEY("Original Package No.");
              PostedPackage.SETRANGE("Original Package No.",PackageTmp."No.");
              PostedPackageFound := PostedPackage.FIND('-');
            UNTIL (PackageTmp.NEXT = 0) OR PostedPackageFound;
        END ELSE
          PostedPackageFound := FALSE;

        IF NOT PostedPackageFound THEN BEGIN
          IF PackingControl."Total Package Count" > PackingControl."Last Package No." THEN BEGIN
            PackingControl."Error Message" :=
              STRSUBSTNO(
                Text038,
                PackingControl."Last Package No.",PackingControl."Total Package Count");
            EXIT(FALSE);
          END;

          Package.RESET;
          Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
          Package.SETRANGE("Source Type",PackingControl."Source Type");
          Package.SETRANGE("Source Subtype",PackingControl."Source Subtype");
          IF PackingControl."Multi Document Package" THEN BEGIN
            Package.SETRANGE("Source ID",'');
            Package.SETRANGE("Multi Document No.",PackingControl."Multi Document No.");
          END ELSE
            Package.SETRANGE("Source ID",PackingControl."Source ID");
          Package.SETFILTER("Total Packages",'<>1');
          IF ShippingSetup."Location Packing" THEN
            Package.SETRANGE("Location Code",PackingStation."Location Code");
          IF Package.FIND('-') THEN BEGIN
            Package.SETFILTER("Total Packages",'<>%1',Package."Total Packages");
            IF Package.FIND('-') THEN BEGIN
              PackingControl."Error Message" := Text039;
              EXIT(FALSE);
            END;
            Package.SETRANGE("Total Packages");

            Package.SETFILTER("Package No.",'<1|>%1',Package."Total Packages");
            IF Package.FIND('-') THEN BEGIN
              PackingControl."Error Message" := Text039;
              EXIT(FALSE);
            END;

            FOR PackageNo := 1 TO Package."Total Packages" DO BEGIN
              Package.SETRANGE("Package No.",PackageNo);
              IF NOT Package.FIND('-') THEN BEGIN
                PackingControl."Error Message" := Text039;
                EXIT(FALSE);
              END ELSE
                IF Package.NEXT <> 0 THEN BEGIN
                  PackingControl."Error Message" := Text039;
                  EXIT(FALSE);
                END;
            END;
          END ELSE BEGIN
            Package.SETRANGE("Total Packages");
            Package.SETRANGE("Exist in Other Package",TRUE);
            IF NOT Package.FIND('-') THEN BEGIN
              Package.SETRANGE("Exist in Other Package");
              IF Package.FIND('-') THEN
                IF Package.NEXT <> 0 THEN BEGIN
                  PackingControl."Error Message" := Text039;
                  EXIT(FALSE);
                END;
            END;
          END;
        END;
      END;

      IF ForceClose THEN BEGIN
        IF PackingControl."COD Payment" THEN BEGIN
          IF PackingStation.GetCODRule(ShippingAgent) = 1 THEN BEGIN // All on Last Package
            Package.RESET;
            Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
            Package.SETRANGE("Source Type",PackingControl."Source Type");
            Package.SETRANGE("Source Subtype",PackingControl."Source Subtype");
            IF PackingControl."Multi Document Package" THEN BEGIN
              Package.SETRANGE("Source ID",'');
              Package.SETRANGE("Multi Document No.",PackingControl."Multi Document No.");
            END ELSE
              Package.SETRANGE("Source ID",PackingControl."Source ID");
            Package.SETRANGE(COD,TRUE);
            IF NOT Package.FIND('-') THEN BEGIN
              PackingControl."Error Message" := Text040;
              EXIT(FALSE);
            END;
          END;
        END;

        SetQtyToShipToPacked(PackingControl);
      END;

      IF NOT PackedComplete(ShippingAgent,PackingControl) THEN BEGIN
        PackingControl."Error Message" := Text041;
        EXIT(FALSE);
      END;

      //TM BEG 061615
      WhseRequest.SETCURRENTKEY("Source Type","Source Subtype","Source No.");
      WhseRequest.SETRANGE("Location Code", PackingStation."Location Code");
      WhseRequest.SETRANGE("Source Subtype", PackingControl."Source Subtype");
      WhseRequest.SETRANGE("Source Type", PackingControl."Source Type"+1);
      IF PackingControl."Multi Document Package" = FALSE THEN
        WhseRequest.SETRANGE("Source No.", PackingControl."Source ID")
      ELSE
        WhseRequest.SETFILTER("Source No.", PackingControl."Multi Document No.");
      IF WhseRequest.FINDFIRST THEN
      REPEAT
        OutWhseReqMgt.SetWhseActivStatusToPacked(WhseRequest);
        WhseRequest.MODIFY;
      UNTIL WhseRequest.NEXT = 0;
      //TM END 061615

      CASE PackingControl."Source Type" OF
        DATABASE::"Sales Header":
          BEGIN
            SalesHeader.RESET;
            SalesHeader.SETRANGE("Document Type",PackingControl."Source Subtype");
            IF PackingControl."Multi Document Package" THEN BEGIN
              SalesHeader.SETFILTER("No.",PackingControl."Multi Document No.");
              IF PackingStation."Simple Multi Document Posting" THEN BEGIN
                SalesHeader.SETRANGE("Package Exists",TRUE);
                IF ShippingSetup."Location Packing" THEN
                  SalesHeader.SETRANGE("Location Filter",PackingStation."Location Code");
              END;
            END ELSE
              SalesHeader.SETRANGE("No.",PackingControl."Source ID");
            SalesHeader.FIND('-');
            REPEAT
              Shipping.CloseSalesHeader(SalesHeader,PrintOrder,ExportDocsPrinted);
              IF ExportDocSetup."One Copy Export Doc Per Shpmt" THEN
                ExportDocsPrinted := TRUE;

              IF SalesHeader."COD Payment" THEN
                Shipping.PrintCODLabelsSalesHeader(SalesHeader);
            UNTIL SalesHeader.NEXT = 0;
          END;
        DATABASE::"Purchase Header":
          BEGIN
            PurchHeader.RESET;
            PurchHeader.SETRANGE("Document Type",PackingControl."Source Subtype");
            IF PackingControl."Multi Document Package" THEN BEGIN
              PurchHeader.SETFILTER("No.",PackingControl."Multi Document No.");
              IF PackingStation."Simple Multi Document Posting" THEN BEGIN
                PurchHeader.SETRANGE("Package Exists",TRUE);
                IF ShippingSetup."Location Packing" THEN
                  PurchHeader.SETRANGE("Location Filter",PackingStation."Location Code");
              END;
            END ELSE
              PurchHeader.SETRANGE("No.",PackingControl."Source ID");
            PurchHeader.FIND('-');
            REPEAT
              Shipping.ClosePurchHeader(PurchHeader,PrintOrder,ExportDocsPrinted);
              IF ExportDocSetup."One Copy Export Doc Per Shpmt" THEN
                ExportDocsPrinted := TRUE;

              IF PurchHeader."COD Payment" THEN
                Shipping.PrintCODLabelsPurchHeader(PurchHeader);
            UNTIL PurchHeader.NEXT = 0;
          END;
        DATABASE::"Transfer Header":
          BEGIN
            TransferHeader.RESET;
            IF PackingControl."Multi Document Package" THEN BEGIN
              TransferHeader.SETFILTER("No.",PackingControl."Multi Document No.");
              IF PackingStation."Simple Multi Document Posting" THEN BEGIN
                TransferHeader.SETRANGE("Package Exists",TRUE);
                IF ShippingSetup."Location Packing" THEN
                  TransferHeader.SETRANGE("Location Filter",PackingStation."Location Code");
              END;
            END ELSE
              TransferHeader.SETRANGE("No.",PackingControl."Source ID");
            TransferHeader.FIND('-');
            REPEAT
              Shipping.CloseTransferHeader(TransferHeader,PrintOrder,ExportDocsPrinted);
              IF ExportDocSetup."One Copy Export Doc Per Shpmt" THEN
                ExportDocsPrinted := TRUE;
            UNTIL TransferHeader.NEXT = 0;
          END;
        ELSE
          PackingControl.ErrorUnknownSourceType2;
      END;

      IF FuturePacking THEN BEGIN
        Package.RESET;
        Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
        Package.SETRANGE("Source Type",PackingControl."Source Type");
        Package.SETRANGE("Source Subtype",PackingControl."Source Subtype");
        IF PackingControl."Multi Document Package" THEN
          Package.SETFILTER("Source ID",PackingControl."Multi Document No.")
        ELSE
          Package.SETRANGE("Source ID",PackingControl."Source ID");
        IF ShippingSetup."Location Packing" THEN
          Package.SETRANGE("Location Code",PackingStation."Location Code");
        IF Package.FIND('-') THEN
          REPEAT
            IF Package."Original Package No." <> '' THEN BEGIN
              Package2.GET(Package."Original Package No.");
              IF NOT Package2."Future Package" THEN BEGIN
                Package2."Future Package" := TRUE;
                Package2.MODIFY;
              END;
            END;

            Package."Future Package" := TRUE;
            Package.MODIFY;
          UNTIL Package.NEXT = 0;

          IF PackingStation."Register Pick on Future Close" THEN
            RegisterPick(
              PackingControl."Source Type",PackingControl."Source Subtype",PackingControl."Source ID");
      END ELSE BEGIN
        // <TPZ162>
        SalesSetup.GET;
        // </TPZ162>
        DocumentPosted := FALSE;

        CASE PackingControl."Source Type" OF
          DATABASE::"Sales Header":
            BEGIN
              SalesHeader.FIND('-');
              REPEAT
                CASE TRUE OF
                  (SalesHeader."Document Type" = SalesHeader."Document Type"::Order) AND
                  (PackingStation."Sales Order Close Action" IN
                   [PackingStation."Sales Order Close Action"::Ship,
                    PackingStation."Sales Order Close Action"::"Ship and Invoice"]):
                    BEGIN
                      IF ShippingSetup."Location Packing" THEN
                        SalesHeader.SETRANGE("Location Filter",PackingStation."Location Code");
                      // <TPZ162>
                      IF SalesSetup."Post from Whse. with Job Q." AND
                         (PackingStation."Sales Order Close Action" = PackingStation."Sales Order Close Action"::Ship)
                      THEN
                        WhseSalesPostViaJobQueue.EnqueueWhseDoc(SalesHeader);
                      // </TPZ162>
                      SalesHeader.CALCFIELDS(
                        "E-Ship Whse. Outst. Qty (Base)","E-Ship Whse. Ship. Qty (Base)");
                      IF (SalesHeader."E-Ship Whse. Outst. Qty (Base)" <> 0) OR
                         (SalesHeader."E-Ship Whse. Ship. Qty (Base)" <> 0)
                      THEN BEGIN
                        EShipSetGlobalVariable."SalesPost-PostingSalesDoc"(TRUE);
                          PostWhseShipment(
                            PackingControl."Source Type",SalesHeader."Document Type",SalesHeader."No.",
                            PackingStation."Sales Order Close Action" =
                            PackingStation."Sales Order Close Action"::"Ship and Invoice");
                        EShipSetGlobalVariable."SalesPost-PostingSalesDoc"(FALSE);
                      END ELSE BEGIN
                        SalesHeader.CALCFIELDS("E-Ship Invt. Outst. Qty (Base)");
                        IF SalesHeader."E-Ship Invt. Outst. Qty (Base)" <> 0 THEN BEGIN
                          EShipSetGlobalVariable."SalesPost-PostingSalesDoc"(TRUE);
                            PostInvtPick(
                              PackingControl."Source Type",SalesHeader."Document Type",SalesHeader."No.",
                              PackingStation."Sales Order Close Action" =
                              PackingStation."Sales Order Close Action"::"Ship and Invoice");
                          EShipSetGlobalVariable."SalesPost-PostingSalesDoc"(FALSE);
                        END ELSE BEGIN
                          SalesHeader.Ship := TRUE;
                          SalesHeader.Invoice :=
                            PackingStation."Sales Order Close Action" =
                            PackingStation."Sales Order Close Action"::"Ship and Invoice";
                          EShipSetGlobalVariable."SalesPost-PostingSalesDoc"(TRUE);
                          CLEAR(SalesPost);
                          SalesPost.RUN(SalesHeader);
                          EShipSetGlobalVariable."SalesPost-PostingSalesDoc"(FALSE);
                        END;
                      END;

                      IF PackingStation."Print Shipment Report on Close" AND PrintOrder THEN BEGIN
                        SalesShipmentHeader.RESET;
                        SalesShipmentHeader.SETCURRENTKEY("Order No.");
                        SalesShipmentHeader.SETRANGE("Order No.",SalesHeader."No.");
                        IF SalesShipmentHeader.FIND('+') THEN
                          PrintSalesShipmentReport(SalesShipmentHeader."No.");
                      END;

                      IF PackingStation."Print Invoice Report on Close" AND PrintOrder AND
                         (PackingStation."Sales Order Close Action" =
                          PackingStation."Sales Order Close Action"::"Ship and Invoice")
                      THEN BEGIN
                        SalesInvoiceHeader.RESET;
                        SalesInvoiceHeader.SETCURRENTKEY("Order No.");
                        SalesInvoiceHeader.SETRANGE("Order No.",SalesHeader."No.");
                        IF SalesInvoiceHeader.FIND('+') THEN
                          PrintSalesInvoiceReport(SalesInvoiceHeader."No.");
                      END;

                      DocumentPosted := TRUE;
                    END;
                  ((SalesHeader."Document Type" = SalesHeader."Document Type"::Invoice) AND
                   (PackingStation."Sales Invoice Close Action" =
                    PackingStation."Sales Invoice Close Action"::Invoice)):
                    BEGIN
                      SalesHeader.Ship := TRUE;
                      SalesHeader.Invoice := TRUE;
                      EShipSetGlobalVariable."SalesPost-PostingSalesDoc"(TRUE);
                      CLEAR(SalesPost);
                      SalesPost.RUN(SalesHeader);
                      EShipSetGlobalVariable."SalesPost-PostingSalesDoc"(FALSE);

                      IF PackingStation."Print Shipment Report on Close" AND PrintOrder THEN BEGIN
                        SalesShipmentHeader.RESET;
                        SalesShipmentHeader.SETCURRENTKEY("Order No.");
                        SalesShipmentHeader.SETRANGE("Order No.",SalesHeader."No.");
                        IF SalesShipmentHeader.FIND('+') THEN
                          PrintSalesShipmentReport(SalesShipmentHeader."No.");
                      END;

                      IF PackingStation."Print Invoice Report on Close" AND PrintOrder THEN BEGIN
                        SalesInvoiceHeader.RESET;
                        SalesInvoiceHeader.SETCURRENTKEY("Order No.");
                        SalesInvoiceHeader.SETRANGE("Order No.",SalesHeader."No.");
                        IF SalesInvoiceHeader.FIND('+') THEN
                          PrintSalesInvoiceReport(SalesInvoiceHeader."No.");
                      END;

                      DocumentPosted := TRUE;
                    END;
                  (SalesHeader."Document Type" = SalesHeader."Document Type"::Order) AND
                  (PackingStation."Sales Order Close Action" =
                   PackingStation."Sales Order Close Action"::" "):
                    BEGIN
                      IF PackingStation."Auto Post Pick with No Action" THEN
                        RegisterPick(
                          PackingControl."Source Type",PackingControl."Source Subtype",
                          PackingControl."Source ID");
                      // <TPZ162>
                      IF SalesSetup."Post from Whse. with Job Q." THEN
                        WhseSalesPostViaJobQueue.EnqueueWhseDoc(SalesHeader);
                      // </TPZ162>
                    END;
                  // <TPZ162>
                  ((SalesHeader."Document Type" = SalesHeader."Document Type"::Invoice) AND
                   (PackingStation."Sales Invoice Close Action" =
                    PackingStation."Sales Invoice Close Action"::" ")):
                      IF SalesSetup."Post from Whse. with Job Q." THEN
                        WhseSalesPostViaJobQueue.EnqueueWhseDoc(SalesHeader);
                  // </TPZ162>
                END;
              UNTIL SalesHeader.NEXT = 0;

              IF PackingStation."Open Order after Close" THEN BEGIN
                COMMIT;

                SalesHeader.SETRANGE("Package Exists");
                IF SalesHeader.FIND('-') THEN
                  REPEAT
                    CASE SalesHeader."Document Type" OF
                      SalesHeader."Document Type"::Order:
                        PAGE.RUNMODAL(PAGE::"Sales Order",SalesHeader);
                      SalesHeader."Document Type"::Invoice:
                        PAGE.RUNMODAL(PAGE::"Sales Invoice",SalesHeader);
                      ELSE
                        PAGE.RUNMODAL(0,SalesHeader);
                    END;
                  UNTIL SalesHeader.NEXT = 0;
              END;
            END;
          DATABASE::"Purchase Header":
            BEGIN
              PurchHeader.FIND('-');
              REPEAT
                CASE TRUE OF
                  (PurchHeader."Document Type" = PurchHeader."Document Type"::"Return Order") AND
                  (PackingStation."Return Order Close Action" IN
                   [PackingStation."Return Order Close Action"::Ship,
                    PackingStation."Return Order Close Action"::"Ship and Invoice"]):
                    BEGIN
                      IF ShippingSetup."Location Packing" THEN
                        PurchHeader.SETRANGE("Location Filter",PackingStation."Location Code");
                      PurchHeader.CALCFIELDS(
                        "E-Ship Whse. Outst. Qty (Base)","E-Ship Whse. Ship. Qty (Base)");
                      IF (PurchHeader."E-Ship Whse. Outst. Qty (Base)" <> 0) OR
                         (PurchHeader."E-Ship Whse. Ship. Qty (Base)" <> 0)
                      THEN BEGIN
                        EShipSetGlobalVariable."PurchPost-PostingPurchDoc"(TRUE);
                          PostWhseShipment(
                            PackingControl."Source Type",PurchHeader."Document Type",PurchHeader."No.",
                            PackingStation."Return Order Close Action" =
                            PackingStation."Return Order Close Action"::"Ship and Invoice");
                        EShipSetGlobalVariable."PurchPost-PostingPurchDoc"(FALSE);
                      END ELSE BEGIN
                        PurchHeader.CALCFIELDS("E-Ship Invt. Outst. Qty (Base)");
                        IF PurchHeader."E-Ship Invt. Outst. Qty (Base)" <> 0 THEN BEGIN
                          EShipSetGlobalVariable."PurchPost-PostingPurchDoc"(TRUE);
                            PostInvtPick(
                              PackingControl."Source Type",PurchHeader."Document Type",PurchHeader."No.",
                              PackingStation."Return Order Close Action" =
                              PackingStation."Return Order Close Action"::"Ship and Invoice");
                          EShipSetGlobalVariable."PurchPost-PostingPurchDoc"(FALSE);
                        END ELSE BEGIN
                          PurchHeader.Ship := TRUE;
                          PurchHeader.Invoice :=
                            PackingStation."Return Order Close Action" =
                            PackingStation."Return Order Close Action"::"Ship and Invoice";
                          EShipSetGlobalVariable."PurchPost-PostingPurchDoc"(TRUE);
                          PurchPost.RUN(PurchHeader);
                          EShipSetGlobalVariable."PurchPost-PostingPurchDoc"(FALSE);
                        END;
                      END;

                      IF PackingStation."Print Shipment Report on Close" AND PrintOrder THEN BEGIN
                        ReturnShipmentHeader.RESET;
                        ReturnShipmentHeader.SETCURRENTKEY("Return Order No.");
                        ReturnShipmentHeader.SETRANGE("Return Order No.",PurchHeader."No.");
                        IF ReturnShipmentHeader.FIND('+') THEN
                          PrintPurchShipmentReport(ReturnShipmentHeader."No.");
                      END;

                      IF PackingStation."Print Invoice Report on Close" AND PrintOrder AND
                         (PackingStation."Return Order Close Action" =
                          PackingStation."Return Order Close Action"::"Ship and Invoice")
                      THEN BEGIN
                        PurchCreditMemoHeader.RESET;
                        PurchCreditMemoHeader.SETCURRENTKEY("Return Order No.");
                        PurchCreditMemoHeader.SETRANGE("Return Order No.",PurchHeader."No.");
                        IF PurchCreditMemoHeader.FIND('+') THEN
                          PrintPurchInvoiceReport(PurchCreditMemoHeader."No.");
                      END;

                      DocumentPosted := TRUE;
                    END;
                  ((PurchHeader."Document Type" = PurchHeader."Document Type"::"Credit Memo") AND
                   (PackingStation."Purchase Cr. Memo Close Action" =
                    PackingStation."Purchase Cr. Memo Close Action"::Invoice)):
                    BEGIN
                      PurchHeader.Ship := TRUE;
                      PurchHeader.Invoice := TRUE;
                      EShipSetGlobalVariable."PurchPost-PostingPurchDoc"(TRUE);
                      PurchPost.RUN(PurchHeader);
                      EShipSetGlobalVariable."PurchPost-PostingPurchDoc"(FALSE);

                      IF PackingStation."Print Invoice Report on Close" AND PrintOrder THEN BEGIN
                        PurchCreditMemoHeader.RESET;
                        PurchCreditMemoHeader.SETCURRENTKEY("Pre-Assigned No.");
                        PurchCreditMemoHeader.SETRANGE("Pre-Assigned No.",PurchHeader."No.");
                        IF PurchCreditMemoHeader.FIND('+') THEN
                          PrintPurchInvoiceReport(PurchCreditMemoHeader."No.");
                      END;

                      DocumentPosted := TRUE;
                    END;
                  (PurchHeader."Document Type" = PurchHeader."Document Type"::"Return Order") AND
                  (PackingStation."Return Order Close Action" =
                   PackingStation."Return Order Close Action"::" "):
                    BEGIN
                      IF PackingStation."Auto Post Pick with No Action" THEN
                        RegisterPick(
                          PackingControl."Source Type",PackingControl."Source Subtype",
                          PackingControl."Source ID");
                    END;
                END;
              UNTIL PurchHeader.NEXT = 0;

              IF PackingStation."Open Order after Close" THEN BEGIN
                COMMIT;

                PurchHeader.SETRANGE("Package Exists");
                IF PurchHeader.FIND('-') THEN
                  REPEAT
                    CASE PurchHeader."Document Type" OF
                      PurchHeader."Document Type"::"Credit Memo":
                        PAGE.RUNMODAL(PAGE::"Purchase Credit Memo",PurchHeader);
                      PurchHeader."Document Type"::"Return Order":
                        PAGE.RUNMODAL(PAGE::"Purchase Return Order",PurchHeader);
                      ELSE
                        PAGE.RUNMODAL(0,PurchHeader);
                    END;
                  UNTIL PurchHeader.NEXT = 0;
              END;
            END;
          DATABASE::"Transfer Header":
            BEGIN
              TransferHeader.FIND('-');
              REPEAT
                CASE TRUE OF
                  (PackingStation."Transfer Order Close Action" =
                   PackingStation."Transfer Order Close Action"::Ship):
                    BEGIN
                      IF ShippingSetup."Location Packing" THEN
                        TransferHeader.SETRANGE("Location Filter",PackingStation."Location Code");
                      TransferHeader.CALCFIELDS(
                        "E-Ship Whse. Outst. Qty (Base)","E-Ship Whse. Ship. Qty (Base)");
                      IF (TransferHeader."E-Ship Whse. Outst. Qty (Base)" <> 0) OR
                         (TransferHeader."E-Ship Whse. Ship. Qty (Base)" <> 0)
                      THEN BEGIN
                        EShipSetGlobalVariable."TransferOrder-PostShipment"(TRUE);
                          PostWhseShipment(PackingControl."Source Type",0,TransferHeader."No.",TRUE);
                        EShipSetGlobalVariable."TransferOrder-PostShipment"(FALSE);
                      END ELSE BEGIN
                        TransferHeader.CALCFIELDS("E-Ship Invt. Outst. Qty (Base)");
                        IF TransferHeader."E-Ship Invt. Outst. Qty (Base)" <> 0 THEN BEGIN
                          EShipSetGlobalVariable."TransferOrder-PostShipment"(TRUE);
                            PostInvtPick(
                              PackingControl."Source Type",0,TransferHeader."No.",
                              TRUE);
                          EShipSetGlobalVariable."TransferOrder-PostShipment"(FALSE);
                        END ELSE BEGIN
                          EShipSetGlobalVariable."TransferOrder-PostShipment"(TRUE);
                          CLEAR(TransferOrderPostShipment);
                          TransferOrderPostShipment.RUN(TransferHeader);
                          EShipSetGlobalVariable."TransferOrder-PostShipment"(FALSE);
                        END;
                      END;

                      IF PackingStation."Print Shipment Report on Close" AND PrintOrder THEN BEGIN
                        TransferShipmentHeader.RESET;
                        TransferShipmentHeader.SETRANGE("Transfer Order No.",TransferHeader."No.");
                        IF TransferShipmentHeader.FIND('+') THEN
                          PrintTransferShipmentReport(TransferShipmentHeader."No.");
                      END;

                      DocumentPosted := TRUE;
                    END;
                  (PackingStation."Transfer Order Close Action" =
                   PackingStation."Transfer Order Close Action"::" "):
                    BEGIN
                      IF PackingStation."Auto Post Pick with No Action" THEN
                        RegisterPick(
                          PackingControl."Source Type",PackingControl."Source Subtype",
                          PackingControl."Source ID");
                    END;
                END;
              UNTIL TransferHeader.NEXT = 0;

              IF PackingStation."Open Order after Close" THEN BEGIN
                COMMIT;

                TransferHeader.SETRANGE("Package Exists");
                IF TransferHeader.FIND('-') THEN
                  REPEAT
                    PAGE.RUNMODAL(PAGE::"Transfer Order",TransferHeader);
                  UNTIL TransferHeader.NEXT = 0;
              END;
            END;
          ELSE
            PackingControl.ErrorUnknownSourceType2;
        END;

        IF DocumentPosted THEN BEGIN
          PackingRule.GetPackingRule(
            PackingControl."Ship-to Type",PackingControl."Ship-to No.",PackingControl."Ship-to Code");
          IF ((PackingControl."Bill of Lading No." <> '') OR
              PackingRule."Auto Bill of Lading When Ship") AND
             NOT PackingRule."Auto Release Summary" AND
             PackingStation."Open BOL on Close Order"
          THEN BEGIN
            COMMIT;

            IF PackingControl."Bill of Lading No." <> '' THEN
              BillOfLading.GET(PackingControl."Bill of Lading No.")
            ELSE BEGIN
              BillOfLading.RESET;
              BillOfLading.SETRANGE(Released,FALSE);
              BillOfLading.SETRANGE("Ship-to Type",PackingControl."Ship-to Type");
              BillOfLading.SETRANGE("Ship-to No.",PackingControl."Ship-to No.");
              BillOfLading.SETRANGE("Ship-to Code",PackingControl."Ship-to Code");
              IF ShippingSetup."Location Packing" THEN
                BillOfLading.SETRANGE("Location Code",PackingStation."Location Code");
              BillOfLading.FIND('+');
            END;
            BillOfLading.RESET;
            BillOfLading.SETRECFILTER;

            CASE PackingStation."Open Bill of Lading Form" OF
              PackingStation."Open Bill of Lading Form"::"Bill of Lading":
                PAGE.RUNMODAL(PAGE::"Bill of Lading",BillOfLading);
              PackingStation."Open Bill of Lading Form"::Worksheet:
                PAGE.RUNMODAL(PAGE::"Bill of Lading Worksheet",BillOfLading);
              PackingStation."Open Bill of Lading Form"::"Bill of Lading Scanning":
                BEGIN
                  CLEAR(BillOfLadingScanning);
                  BillOfLadingScanning.OpenWithBillOfLading(BillOfLading."No.",TRUE);
                  BillOfLadingScanning.RUNMODAL;
                END;
            END;
          END;
        END;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE PackedComplete@9(ShippingAgent@1240030000 : Record 291;VAR PackingControl@1240030001 : Record 14000717) : Boolean;
    VAR
      PackageLine@1240030002 : Record 14000702;
      PackingRule@1240030003 : Record 14000715;
      FastPackLineTmp@1240030004 : TEMPORARY Record 14000711;
    BEGIN
      TestInitialized;
      PackingRule.GetPackingRule(
        PackingControl."Ship-to Type",PackingControl."Ship-to No.",PackingControl."Ship-to Code");
      IF NOT PackingRule.PackDetail(
               PackingControl."Source Type",PackingControl."Source Subtype",
               PackingControl."Shipping Agent Code")
      THEN BEGIN
        PackageLine.RESET;
        PackageLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID","No.","Variant Code");
        PackageLine.SETRANGE("Source Type",PackingControl."Source Type");
        PackageLine.SETRANGE("Source Subtype",PackingControl."Source Subtype");
        IF PackingControl."Multi Document Package" THEN
          PackageLine.SETFILTER("Source ID",PackingControl."Multi Document No.")
        ELSE
          PackageLine.SETRANGE("Source ID",PackingControl."Source ID");
        IF ShippingSetup."Location Packing" THEN
          PackageLine.SETRANGE("Location Code",PackingStation."Location Code");
        IF NOT PackageLine.FIND('-') THEN
          EXIT(TRUE);
      END;

      UpdateFastPackLines(
        PackingControl,FastPackLineTmp,PackingRule,
        FALSE,FALSE,FALSE,0,'','');
      IF FastPackLineTmp.FIND('-') THEN BEGIN
        MessageLine :=
          STRSUBSTNO(Text049,FastPackLineTmp.Type,FastPackLineTmp."No.");
        EXIT(FALSE);
      END ELSE
        EXIT(TRUE);
    END;

    PROCEDURE SetQtyToShipToPacked@16(VAR PackingControl@1240030000 : Record 14000717);
    VAR
      PackageLine2@1240030001 : Record 14000702;
      SalesHeader@1240030009 : Record 36;
      SalesLine2@1240030002 : Record 37;
      SalesLineTmp@1240030003 : TEMPORARY Record 37;
      SalesLineTmp2@1240030004 : TEMPORARY Record 37;
      PurchHeader@1240030010 : Record 38;
      PurchLine2@1240030005 : Record 39;
      PurchLineTmp@1240030006 : TEMPORARY Record 39;
      PurchLineTmp2@1240030007 : TEMPORARY Record 39;
      TransferHeader@1240030014 : Record 5740;
      TransferLine2@1240030013 : Record 5741;
      TransferLineTmp@1240030012 : TEMPORARY Record 5741;
      TransferLineTmp2@1240030011 : TEMPORARY Record 5741;
      LineQty@1240030008 : Decimal;
    BEGIN
      TestInitialized;
      // "Qty. to Invoice (Base)" and "Qty. in Transit (Base)"
      // is MISUSED to keep the "Quantity Packed (Base)" in the
      // Temporary table

      CASE PackingControl."Source Type" OF
        DATABASE::"Sales Header":
          BEGIN
            SalesHeader.GET(PackingControl."Source Subtype",PackingControl."Source ID");
            SalesHeader.CALCFIELDS(
              "E-Ship Whse. Outst. Qty (Base)","E-Ship Whse. Ship. Qty (Base)",
              "E-Ship Invt. Outst. Qty (Base)");
            IF (SalesHeader."E-Ship Whse. Outst. Qty (Base)" <> 0) OR
               (SalesHeader."E-Ship Whse. Ship. Qty (Base)" <> 0) OR
               (SalesHeader."E-Ship Invt. Outst. Qty (Base)" <> 0)
            THEN
              ERROR(Text050);

            SalesLineTmp.RESET;
            SalesLineTmp.DELETEALL;
            SalesLineTmp2.RESET;
            SalesLineTmp2.DELETEALL;
            SalesLine2.RESET;
            SalesLine2.SETRANGE("Document Type",PackingControl."Source Subtype");
            IF PackingControl."Multi Document Package" THEN
              SalesLine2.SETFILTER("Document No.",PackingControl."Multi Document No.")
            ELSE
              SalesLine2.SETRANGE("Document No.",PackingControl."Source ID");
            SalesLine2.SETFILTER("Outstanding Quantity",'>%1',0);
            IF SalesLine2.FIND('-') THEN
              REPEAT
                IF SalesLine2.Pack AND NOT SalesLine2."Drop Shipment" AND
                   (NOT ShippingSetup."Location Packing" OR
                    (SalesLine2."Location Code" = PackingStation."Location Code"))
                THEN BEGIN
                  SalesLineTmp.COPY(SalesLine2);
                  SalesLineTmp."Qty. to Invoice (Base)" := 0;
                  SalesLineTmp.INSERT;
                END ELSE
                  IF SalesLine2."Drop Shipment" OR NOT SalesLine2."Shipping Charge" OR
                     (ShippingSetup."Location Packing" AND
                      (SalesLine2."Location Code" <> PackingStation."Location Code"))
                  THEN BEGIN
                    SalesLineTmp2.COPY(SalesLine2);
                    SalesLineTmp2.INSERT;
                  END;
              UNTIL SalesLine2.NEXT = 0;
            SalesLine2.RESET;

            PackageLine2.RESET;
            PackageLine2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
            PackageLine2.SETRANGE("Source Type",PackingControl."Source Type");
            PackageLine2.SETRANGE("Source Subtype",PackingControl."Source Subtype");
            IF PackingControl."Multi Document Package" THEN
              PackageLine2.SETFILTER("Source ID",PackingControl."Multi Document No.")
            ELSE
              PackageLine2.SETRANGE("Source ID",PackingControl."Source ID");
            PackageLine2.SETRANGE(Type,PackageLine2.Type::"Account (G/L)",PackageLine2.Type::Resource);
            IF ShippingSetup."Location Packing" THEN
              PackageLine2.SETRANGE("Location Code",PackingStation."Location Code");
            IF PackageLine2.FIND('-') THEN
              REPEAT
                SalesLineTmp.RESET;
                SalesLineTmp.SETCURRENTKEY(
                  "Document Type","Document No.",Type,"No.","Variant Code","Drop Shipment");
                SalesLineTmp.SETRANGE("Document Type",PackageLine2."Source Subtype");
                SalesLineTmp.SETRANGE("Document No.",PackageLine2."Source ID");
                SalesLineTmp.SETRANGE(Type,PackageLine2.Type);
                SalesLineTmp.SETRANGE("No.",PackageLine2."No.");
                SalesLineTmp.SETRANGE("Variant Code",PackageLine2."Variant Code");
                IF SalesLineTmp.FIND('-') THEN
                  REPEAT
                    IF SalesLineTmp."Quantity (Base)" > 0 THEN BEGIN
                      LineQty :=
                        SalesLineTmp."Outstanding Qty. (Base)" - SalesLineTmp."Qty. to Invoice (Base)";
                      IF LineQty >= PackageLine2."Quantity (Base)" THEN BEGIN
                        SalesLineTmp."Qty. to Invoice (Base)" :=
                          SalesLineTmp."Qty. to Invoice (Base)" + PackageLine2."Quantity (Base)";
                        PackageLine2."Quantity (Base)" := 0;
                      END ELSE BEGIN
                        PackageLine2."Quantity (Base)" := PackageLine2."Quantity (Base)" - LineQty;
                        SalesLineTmp."Qty. to Invoice (Base)" := SalesLineTmp."Outstanding Qty. (Base)";
                      END;
                    END ELSE
                      ERROR(
                        Text051,
                        SalesLineTmp.Type,SalesLineTmp."No.");

                    SalesLineTmp.MODIFY;
                  UNTIL (SalesLineTmp.NEXT = 0) OR (PackageLine2."Quantity (Base)" = 0);
                  IF PackageLine2."Quantity (Base)" <> 0 THEN
                    ERROR(
                      Text052,
                      PackageLine2.Type,PackageLine2."No.");
              UNTIL PackageLine2.NEXT = 0;

            SalesLineTmp.RESET;
            IF SalesLineTmp.FIND('-') THEN
              REPEAT
                IF SalesLineTmp."Qty. to Ship (Base)" <> SalesLineTmp."Qty. to Invoice (Base)" THEN BEGIN
                  IF SalesLineTmp."Qty. to Invoice (Base)" = 0 THEN
                    SalesLineTmp.VALIDATE(SalesLineTmp."Qty. to Ship",0)
                  ELSE
                    SalesLineTmp.VALIDATE(
                      SalesLineTmp."Qty. to Ship",SalesLineTmp."Qty. to Invoice (Base)" /
                      SalesLineTmp."Qty. per Unit of Measure");
                  SalesLine2.GET(
                    SalesLineTmp."Document Type",SalesLineTmp."Document No.",SalesLineTmp."Line No.");
                  SalesLine2.VALIDATE("Qty. to Ship",SalesLineTmp."Qty. to Ship");
                  SalesLine2.VALIDATE("Qty. to Invoice",SalesLineTmp."Qty. to Ship");
                  SalesLine2.MODIFY;
                END;
              UNTIL SalesLineTmp.NEXT = 0;

            SalesLineTmp2.RESET;
            IF SalesLineTmp2.FIND('-') THEN
              REPEAT
                SalesLine2.GET(
                  SalesLineTmp2."Document Type",SalesLineTmp2."Document No.",SalesLineTmp2."Line No.");
                SalesLine2.VALIDATE("Qty. to Ship",0);
                SalesLine2.VALIDATE("Qty. to Invoice",0);
                SalesLine2.MODIFY;
              UNTIL SalesLineTmp2.NEXT = 0;
          END;
        DATABASE::"Purchase Header":
          BEGIN
            PurchHeader.GET(PackingControl."Source Subtype",PackingControl."Source ID");
            PurchHeader.CALCFIELDS(
              "E-Ship Whse. Outst. Qty (Base)","E-Ship Whse. Ship. Qty (Base)",
              "E-Ship Invt. Outst. Qty (Base)");
            IF (PurchHeader."E-Ship Whse. Outst. Qty (Base)" <> 0) OR
               (PurchHeader."E-Ship Whse. Ship. Qty (Base)" <> 0) OR
               (PurchHeader."E-Ship Invt. Outst. Qty (Base)" <> 0)
            THEN
              ERROR(Text050);

            PurchLineTmp.RESET;
            PurchLineTmp.DELETEALL;
            PurchLineTmp2.RESET;
            PurchLineTmp2.DELETEALL;
            PurchLine2.RESET;
            PurchLine2.SETRANGE("Document Type",PackingControl."Source Subtype");
            IF PackingControl."Multi Document Package" THEN
              PurchLine2.SETFILTER("Document No.",PackingControl."Multi Document No.")
            ELSE
              PurchLine2.SETRANGE("Document No.",PackingControl."Source ID");
            PurchLine2.SETFILTER("Outstanding Quantity",'>%1',0);
            IF PurchLine2.FIND('-') THEN
              REPEAT
                IF NOT PurchLine2."Drop Shipment" AND
                   (NOT ShippingSetup."Location Packing" OR
                    (PurchLine2."Location Code" = PackingStation."Location Code"))
                THEN BEGIN
                  PurchLineTmp.COPY(PurchLine2);
                  PurchLineTmp."Qty. to Invoice (Base)" := 0;
                  PurchLineTmp.INSERT;
                END ELSE
                  IF PurchLine2."Drop Shipment" OR NOT PurchLine2."Shipping Charge" OR
                     (ShippingSetup."Location Packing" AND
                      (PurchLine2."Location Code" <> PackingStation."Location Code"))
                  THEN BEGIN
                    PurchLineTmp2.COPY(PurchLine2);
                    PurchLineTmp2.INSERT;
                  END;
              UNTIL PurchLine2.NEXT = 0;
            PurchLine2.RESET;

            PackageLine2.RESET;
            PackageLine2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
            PackageLine2.SETRANGE("Source Type",PackingControl."Source Type");
            PackageLine2.SETRANGE("Source Subtype",PackingControl."Source Subtype");
            IF PackingControl."Multi Document Package" THEN
              PackageLine2.SETFILTER("Source ID",PackingControl."Multi Document No.")
            ELSE
              PackageLine2.SETRANGE("Source ID",PackingControl."Source ID");
            PackageLine2.SETRANGE(Type,PackageLine2.Type::"Account (G/L)",PackageLine2.Type::Resource);
            IF ShippingSetup."Location Packing" THEN
             PackageLine2.SETRANGE("Location Code",PackingStation."Location Code");
            IF PackageLine2.FIND('-') THEN
              REPEAT
                PurchLineTmp.RESET;
                PurchLineTmp.SETCURRENTKEY(
                  "Document Type","Document No.",Type,"No.","Variant Code","Drop Shipment");
                PurchLineTmp.SETRANGE("Document Type",PackageLine2."Source Subtype");
                PurchLineTmp.SETRANGE("Document No.",PackageLine2."Source ID");
                PurchLineTmp.SETRANGE(Type,PackageLine2.Type);
                PurchLineTmp.SETRANGE("No.",PackageLine2."No.");
                PurchLineTmp.SETRANGE("Variant Code",PackageLine2."Variant Code");
                IF PurchLineTmp.FIND('-') THEN
                  REPEAT
                    IF PurchLineTmp."Quantity (Base)" > 0 THEN BEGIN
                      LineQty :=
                        PurchLineTmp."Outstanding Qty. (Base)" - PurchLineTmp."Qty. to Invoice (Base)";
                      IF LineQty >= PackageLine2."Quantity (Base)" THEN BEGIN
                        PurchLineTmp."Qty. to Invoice (Base)" :=
                          PurchLineTmp."Qty. to Invoice (Base)" + PackageLine2."Quantity (Base)";
                        PackageLine2."Quantity (Base)" := 0;
                      END ELSE BEGIN
                        PackageLine2."Quantity (Base)" := PackageLine2."Quantity (Base)" - LineQty;
                        PurchLineTmp."Qty. to Invoice (Base)" := PurchLineTmp."Outstanding Qty. (Base)";
                      END;
                    END ELSE
                      ERROR(
                        Text053,
                        PurchLineTmp.Type,PurchLineTmp."No.");

                    PurchLineTmp.MODIFY;
                  UNTIL (PurchLineTmp.NEXT = 0) OR (PackageLine2."Quantity (Base)" = 0);
                  IF PackageLine2."Quantity (Base)" <> 0 THEN
                    ERROR(
                      Text052,
                      PackageLine2.Type,PackageLine2."No.");
              UNTIL PackageLine2.NEXT = 0;

            PurchLineTmp.RESET;
            IF PurchLineTmp.FIND('-') THEN
              REPEAT
                IF PurchLineTmp."Document Type" = PurchLineTmp."Document Type"::"Return Order" THEN BEGIN
                  IF PurchLineTmp."Return Qty. to Ship (Base)" <> PurchLineTmp."Qty. to Invoice (Base)" THEN BEGIN
                    IF PurchLineTmp."Qty. to Invoice (Base)" = 0 THEN
                      PurchLineTmp.VALIDATE(PurchLineTmp."Return Qty. to Ship",0)
                    ELSE
                      PurchLineTmp.VALIDATE(
                        PurchLineTmp."Return Qty. to Ship",PurchLineTmp."Qty. to Invoice (Base)" /
                        PurchLineTmp."Qty. per Unit of Measure");
                    PurchLine2.GET(
                      PurchLineTmp."Document Type",PurchLineTmp."Document No.",PurchLineTmp."Line No.");
                    PurchLine2.VALIDATE("Return Qty. to Ship",PurchLineTmp."Return Qty. to Ship");
                    PurchLine2.VALIDATE("Qty. to Invoice",PurchLineTmp."Return Qty. to Ship");
                    PurchLine2.MODIFY;
                  END;
                END ELSE
                  ERROR(Text120);
              UNTIL PurchLineTmp.NEXT = 0;

            PurchLineTmp2.RESET;
            IF PurchLineTmp2.FIND('-') THEN
              REPEAT
                PurchLine2.GET(
                  PurchLineTmp2."Document Type",PurchLineTmp2."Document No.",PurchLineTmp2."Line No.");
                IF PurchLineTmp2."Document Type" = PurchLineTmp."Document Type"::"Return Order" THEN
                  PurchLine2.VALIDATE("Return Qty. to Ship",0)
                ELSE
                  ERROR(Text120);
                PurchLine2.VALIDATE("Qty. to Invoice",0);
                PurchLine2.MODIFY;
              UNTIL PurchLineTmp2.NEXT = 0;
          END;
        DATABASE::"Transfer Header":
          BEGIN
            TransferHeader.GET(PackingControl."Source ID");
            TransferHeader.CALCFIELDS(
              "E-Ship Whse. Outst. Qty (Base)","E-Ship Whse. Ship. Qty (Base)",
              "E-Ship Invt. Outst. Qty (Base)");
            IF (TransferHeader."E-Ship Whse. Outst. Qty (Base)" <> 0) OR
               (TransferHeader."E-Ship Whse. Ship. Qty (Base)" <> 0) OR
               (TransferHeader."E-Ship Invt. Outst. Qty (Base)" <> 0)
            THEN
              ERROR(Text050);

            TransferLineTmp.RESET;
            TransferLineTmp.DELETEALL;
            TransferLineTmp2.RESET;
            TransferLineTmp2.DELETEALL;
            TransferLine2.RESET;
            IF PackingControl."Multi Document Package" THEN
              TransferLine2.SETFILTER("Document No.",PackingControl."Multi Document No.")
            ELSE
              TransferLine2.SETRANGE("Document No.",PackingControl."Source ID");
            TransferLine2.SETFILTER("Outstanding Quantity",'>%1',0);
            TransferLine2.SETRANGE("Derived From Line No.",0);
            IF TransferLine2.FIND('-') THEN
              REPEAT
                IF NOT ShippingSetup."Location Packing" OR
                   (TransferLine2."Transfer-from Code" = PackingStation."Location Code")
                THEN BEGIN
                  TransferLineTmp.COPY(TransferLine2);
                  TransferLineTmp."Qty. in Transit (Base)" := 0;
                  TransferLineTmp.INSERT;
                END ELSE
                  IF ShippingSetup."Location Packing" AND
                     (TransferLine2."Transfer-from Code" <> PackingStation."Location Code")
                  THEN BEGIN
                    TransferLineTmp2.COPY(TransferLine2);
                    TransferLineTmp2.INSERT;
                  END;
              UNTIL TransferLine2.NEXT = 0;
            TransferLine2.RESET;

            PackageLine2.RESET;
            PackageLine2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
            PackageLine2.SETRANGE("Source Type",PackingControl."Source Type");
            PackageLine2.SETRANGE("Source Subtype",PackingControl."Source Subtype");
            IF PackingControl."Multi Document Package" THEN
              PackageLine2.SETFILTER("Source ID",PackingControl."Multi Document No.")
            ELSE
              PackageLine2.SETRANGE("Source ID",PackingControl."Source ID");
            PackageLine2.SETRANGE(Type,PackageLine2.Type::"Account (G/L)",PackageLine2.Type::Resource);
            IF ShippingSetup."Location Packing" THEN
             PackageLine2.SETRANGE("Location Code",PackingStation."Location Code");
            IF PackageLine2.FIND('-') THEN
              REPEAT
                TransferLineTmp.RESET;
                TransferLineTmp.SETCURRENTKEY("Item No.");
                TransferLineTmp.SETRANGE("Item No.",PackageLine2."No.");
                TransferLineTmp.SETRANGE("Variant Code",PackageLine2."Variant Code");
                IF TransferLineTmp.FIND('-') THEN
                  REPEAT
                    IF TransferLineTmp."Quantity (Base)" > 0 THEN BEGIN
                      LineQty :=
                        TransferLineTmp."Outstanding Qty. (Base)" - TransferLineTmp."Qty. in Transit (Base)";
                      IF LineQty >= PackageLine2."Quantity (Base)" THEN BEGIN
                        TransferLineTmp."Qty. in Transit (Base)" :=
                          TransferLineTmp."Qty. in Transit (Base)" + PackageLine2."Quantity (Base)";
                        PackageLine2."Quantity (Base)" := 0;
                      END ELSE BEGIN
                        PackageLine2."Quantity (Base)" := PackageLine2."Quantity (Base)" - LineQty;
                        TransferLineTmp."Qty. in Transit (Base)" := TransferLineTmp."Outstanding Qty. (Base)";
                      END;
                    END ELSE
                      ERROR(
                        Text054,
                        TransferLineTmp."Item No.");

                    TransferLineTmp.MODIFY;
                  UNTIL (TransferLineTmp.NEXT = 0) OR (PackageLine2."Quantity (Base)" = 0);
                  IF PackageLine2."Quantity (Base)" <> 0 THEN
                    ERROR(
                      Text052,
                      PackageLine2.Type,PackageLine2."No.");
              UNTIL PackageLine2.NEXT = 0;

            TransferLineTmp.RESET;
            IF TransferLineTmp.FIND('-') THEN
              REPEAT
                IF TransferLineTmp."Qty. to Ship (Base)" <> TransferLineTmp."Qty. in Transit (Base)" THEN BEGIN
                  IF TransferLineTmp."Qty. in Transit (Base)" = 0 THEN
                    TransferLineTmp.VALIDATE(TransferLineTmp."Qty. to Ship",0)
                  ELSE
                    TransferLineTmp.VALIDATE(
                      TransferLineTmp."Qty. to Ship",TransferLineTmp."Qty. in Transit (Base)" /
                      TransferLineTmp."Qty. per Unit of Measure");
                  TransferLine2.GET(TransferLineTmp."Document No.",TransferLineTmp."Line No.");
                  TransferLine2.VALIDATE("Qty. to Ship",TransferLineTmp."Qty. to Ship");
                  TransferLine2.MODIFY;
                END;
              UNTIL TransferLineTmp.NEXT = 0;

            TransferLineTmp2.RESET;
            IF TransferLineTmp2.FIND('-') THEN
              REPEAT
                TransferLine2.GET(TransferLineTmp2."Document No.",TransferLineTmp2."Line No.");
                TransferLine2.VALIDATE("Qty. to Ship",0);
                TransferLine2.MODIFY;
              UNTIL TransferLineTmp2.NEXT = 0;
          END;
        ELSE
          PackingControl.ErrorUnknownSourceType2;
      END;
    END;

    PROCEDURE RegisterPick@1240030001(SourceType@1240030006 : Integer;SourceSubtype@1240030001 : Integer;SourceID@1240030002 : Code[20]);
    VAR
      WhseActivityLine@1240030000 : Record 5767;
      WhseActivityLine2@1240030004 : Record 5767;
      WhsePostPick@1240030005 : Codeunit 7307;
      LastPickNo@1240030003 : Code[20];
    BEGIN
      TestInitialized;
      WhseActivityLine.RESET;
      WhseActivityLine.SETCURRENTKEY(
        "Source Type","Source Subtype","Source No.","Source Line No.","Source Subline No.");
      WhseActivityLine.SETRANGE("Activity Type",WhseActivityLine."Activity Type"::Pick);
      CASE SourceType OF
        DATABASE::"Sales Header":
          WhseActivityLine.SETRANGE("Source Type",DATABASE::"Sales Line");
        DATABASE::"Purchase Header":
          WhseActivityLine.SETRANGE("Source Type",DATABASE::"Purchase Line");
        DATABASE::"Transfer Header":
          WhseActivityLine.SETRANGE("Source Type",DATABASE::"Transfer Line");
      END;
      WhseActivityLine.SETRANGE("Source Subtype",SourceSubtype);
      WhseActivityLine.SETRANGE("Source No.",SourceID);
      IF ShippingSetup."Location Packing" THEN
        WhseActivityLine.SETRANGE("Location Code",PackingStation."Location Code");
      IF WhseActivityLine.FIND('-') THEN
        IF PackingStation."Auto Post Pick" THEN BEGIN
          LastPickNo := WhseActivityLine."No.";
          REPEAT
            IF PackingStation."Auto Fill Qty. to Handle" THEN BEGIN
              WhseActivityLine2.COPY(WhseActivityLine);
              WhseActivityLine2.AutofillQtyToHandle(WhseActivityLine2);
            END;

            WhseActivityLine.SETFILTER("Breakbulk No.",'<>0');
            // Very far from optimal key, but posting will only go through in line no.
            // order. Another key should be added containing the source reference
            IF WhseActivityLine.FIND('-') THEN
              WhseActivityLine.SETCURRENTKEY("Activity Type","No.","Line No.");
            WhseActivityLine.SETRANGE("Breakbulk No.");

            WhsePostPick.RUN(WhseActivityLine);
          UNTIL NOT WhseActivityLine.FIND('-') OR (WhseActivityLine."No." = LastPickNo);

          IF WhseActivityLine.FIND('-') THEN
            ERROR(Text121,WhseActivityLine."No.");
        END ELSE
          ERROR(
            Text043,
            WhseActivityLine."Activity Type",WhseActivityLine."No.");
    END;

    LOCAL PROCEDURE PostWhseShipment@1240030007(SourceType@1240030006 : Integer;SourceSubtype@1240030005 : Integer;SourceID@1240030004 : Code[20];Invoice@1240030002 : Boolean);
    VAR
      WhseShipmentHdr@1240020000 : Record 7320;
      WhseShipmentLine@1240030003 : Record 7321;
      Package@1240030001 : Record 14000701;
      WhsePostShipment@1240030007 : Codeunit 5763;
    BEGIN
      TestInitialized;
      WhseShipmentLine.RESET;
      WhseShipmentLine.SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.");
      CASE SourceType OF
        DATABASE::"Sales Header":
          BEGIN
            WhseShipmentLine.SETRANGE("Source Type",DATABASE::"Sales Line");
            WhseShipmentLine.SETRANGE("Source Document",WhseShipmentLine."Source Document"::"Sales Order")
          END;
        DATABASE::"Purchase Header":
          BEGIN
            WhseShipmentLine.SETRANGE("Source Type",DATABASE::"Purchase Line");
            WhseShipmentLine.SETRANGE(
              "Source Document",WhseShipmentLine."Source Document"::"Purchase Return Order");
          END;
        DATABASE::"Transfer Header":
          BEGIN
            WhseShipmentLine.SETRANGE("Source Type",DATABASE::"Transfer Line");
            WhseShipmentLine.SETRANGE(
              "Source Document",WhseShipmentLine."Source Document"::"Outbound Transfer");
          END;
      END;
      WhseShipmentLine.SETRANGE("Source Subtype",SourceSubtype);
      WhseShipmentLine.SETRANGE("Source No.",SourceID);
      IF ShippingSetup."Location Packing" THEN
        WhseShipmentLine.SETRANGE("Location Code",PackingStation."Location Code");
      IF WhseShipmentLine.FIND('-') THEN BEGIN
        WhseShipmentLine.SETFILTER("No.",'<>%1',WhseShipmentLine."No.");
        IF WhseShipmentLine.FIND('-') THEN
          ERROR(Text042);
      END;

      RegisterPick(SourceType,SourceSubtype,SourceID);

      WhseShipmentLine.SETRANGE("No.");
      IF NOT WhseShipmentLine.FIND('-') THEN
        ERROR(Text044,SourceSubtype,SourceID);

      IF PackingStation."Change Posting Date on Close" THEN BEGIN
        WhseShipmentHdr.GET(WhseShipmentLine."No.");
        IF WhseShipmentHdr."Posting Date" <> WORKDATE THEN BEGIN
          WhseShipmentHdr.VALIDATE("Posting Date",WORKDATE);
          WhseShipmentHdr.MODIFY(TRUE);
          WhseShipmentHdr.FIND;
        END;
      END;

      WhsePostShipment.SetPostingSettings(Invoice);
      WhsePostShipment.RUN(WhseShipmentLine);

      Package.RESET;
      Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Package.SETRANGE("Source Type",SourceType);
      Package.SETRANGE("Source Subtype",SourceSubtype);
      Package.SETRANGE("Source ID",SourceID);
      IF ShippingSetup."Location Packing" THEN
        Package.SETRANGE("Location Code",PackingStation."Location Code");
      IF Package.FIND('-') THEN
        ERROR(Text045);
    END;

    PROCEDURE PostInvtPick@1240032003(SourceType@1240030003 : Integer;SourceSubtype@1240030002 : Integer;SourceID@1240030001 : Code[20];Invoice@1240030000 : Boolean);
    VAR
      WhseActivityLine@1240030004 : Record 5767;
      Package@1240030006 : Record 14000701;
      WhseActivityPost@1240030005 : Codeunit 7324;
    BEGIN
      TestInitialized;
      WhseActivityLine.RESET;
      WhseActivityLine.SETCURRENTKEY(
        "Source Type","Source Subtype","Source No.","Source Line No.","Source Subline No.");
      WhseActivityLine.SETRANGE("Activity Type",WhseActivityLine."Activity Type"::"Invt. Pick");
      CASE SourceType OF
        DATABASE::"Sales Header":
          BEGIN
            WhseActivityLine.SETRANGE("Source Type",DATABASE::"Sales Line");
            WhseActivityLine.SETRANGE(
              "Source Document",WhseActivityLine."Source Document"::"Sales Order");
          END;
        DATABASE::"Purchase Header":
          BEGIN
            WhseActivityLine.SETRANGE("Source Type",DATABASE::"Purchase Line");
            WhseActivityLine.SETRANGE(
              "Source Document",WhseActivityLine."Source Document"::"Purchase Return Order");
          END;
        DATABASE::"Transfer Header":
          BEGIN
            WhseActivityLine.SETRANGE("Source Type",DATABASE::"Transfer Line");
            WhseActivityLine.SETRANGE(
              "Source Document",WhseActivityLine."Source Document"::"Outbound Transfer");
          END;
      END;
      WhseActivityLine.SETRANGE("Source Subtype",SourceSubtype);
      WhseActivityLine.SETRANGE("Source No.",SourceID);
      IF ShippingSetup."Location Packing" THEN
        WhseActivityLine.SETRANGE("Location Code",PackingStation."Location Code");
      IF WhseActivityLine.FIND('-') THEN BEGIN
        IF PackingStation."Auto Fill Qty. to Handle" THEN BEGIN
          WhseActivityLine.SETFILTER("Qty. to Handle",'<>0');
          IF NOT WhseActivityLine.FIND('-') THEN BEGIN
            WhseActivityLine.SETRANGE("Qty. to Handle");
            WhseActivityLine.FIND('-');
            REPEAT
              IF WhseActivityLine."Qty. to Handle" = 0 THEN BEGIN
                WhseActivityLine.VALIDATE(
                  "Qty. to Handle",WhseActivityLine."Qty. Outstanding");
                WhseActivityLine.MODIFY(TRUE);
              END;
            UNTIL WhseActivityLine.NEXT = 0;
          END;
          WhseActivityLine.SETRANGE("Qty. to Handle");
        END;

        WhseActivityLine.FIND('-');
        WhseActivityPost.SetInvoiceSourceDoc(Invoice);
        WhseActivityPost.RUN(WhseActivityLine);
      END;

      Package.RESET;
      Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Package.SETRANGE("Source Type",SourceType);
      Package.SETRANGE("Source Subtype",SourceSubtype);
      Package.SETRANGE("Source ID",SourceID);
      IF ShippingSetup."Location Packing" THEN
        Package.SETRANGE("Location Code",PackingStation."Location Code");
      IF Package.FIND('-') THEN
        ERROR(Text045);
    END;

    PROCEDURE ResetQtyToShip@26(VAR PackingControl@1240030000 : Record 14000717);
    VAR
      SalesLine@1240030001 : Record 37;
      PurchLine@1240030002 : Record 39;
      TransferLine@1240030005 : Record 5741;
      Location@1240030003 : Record 14;
      LocationTmp@1240030004 : TEMPORARY Record 14;
      RecordModified@1240030006 : Boolean;
    BEGIN
      TestInitialized;

      RecordModified := FALSE;

      CASE PackingControl."Source Type" OF
        DATABASE::"Sales Header":
          BEGIN
            IF PackingControl."Source Subtype" = SalesLine."Document Type"::Invoice THEN
              EXIT;

            SalesLine.RESET;
            SalesLine.SETRANGE("Document Type",PackingControl."Source Subtype");
            IF PackingControl."Multi Document Package" THEN
              SalesLine.SETFILTER("Document No.",PackingControl."Multi Document No.")
            ELSE
              SalesLine.SETRANGE("Document No.",PackingControl."Source ID");
            SalesLine.SETFILTER("Outstanding Quantity",'>%1',0);
            SalesLine.SETRANGE("Drop Shipment",FALSE);
            SalesLine.SETRANGE(Pack,TRUE);
            IF ShippingSetup."Location Packing" THEN
              SalesLine.SETRANGE("Location Code",PackingStation."Location Code");
            IF SalesLine.FIND('-') THEN
              REPEAT
                IF SalesLine.Type = SalesLine.Type::Item THEN BEGIN
                  IF NOT LocationTmp.GET(SalesLine."Location Code") THEN BEGIN
                    IF NOT Location.GET(SalesLine."Location Code") THEN BEGIN
                      CLEAR(Location);
                      Location.Code := SalesLine."Location Code";
                    END;
                    LocationTmp := Location;
                    LocationTmp.INSERT;
                  END;

                  IF LocationTmp."Require Pick" THEN BEGIN
                    IF SalesLine."Qty. to Ship" <> 0 THEN BEGIN
                      SalesLine.VALIDATE("Qty. to Ship",0);
                      SalesLine.MODIFY;
                      RecordModified := TRUE;
                    END;
                  END ELSE BEGIN
                    IF SalesLine."Qty. to Ship" <> SalesLine."Outstanding Quantity" THEN BEGIN
                      SalesLine.VALIDATE("Qty. to Ship",SalesLine."Outstanding Quantity");
                      SalesLine.MODIFY;
                      RecordModified := TRUE;
                    END;
                  END;
                END ELSE BEGIN
                  IF SalesLine."Qty. to Ship" <> SalesLine."Outstanding Quantity" THEN BEGIN
                    SalesLine.VALIDATE("Qty. to Ship",SalesLine."Outstanding Quantity");
                    SalesLine.MODIFY;
                    RecordModified := TRUE;
                  END;
                END;
              UNTIL SalesLine.NEXT = 0;
          END;
        DATABASE::"Purchase Header":
          BEGIN
            IF PackingControl."Source Subtype" = PurchLine."Document Type"::"Credit Memo" THEN
              EXIT;

            PurchLine.RESET;
            PurchLine.SETRANGE("Document Type",PackingControl."Source Subtype");
            IF PackingControl."Multi Document Package" THEN
              PurchLine.SETFILTER("Document No.",PackingControl."Multi Document No.")
            ELSE
              PurchLine.SETRANGE("Document No.",PackingControl."Source ID");
            PurchLine.SETFILTER("Outstanding Quantity",'>%1',0);
            PurchLine.SETRANGE("Drop Shipment",FALSE);
            IF ShippingSetup."Location Packing" THEN
              PurchLine.SETRANGE("Location Code",PackingStation."Location Code");
            IF PurchLine.FIND('-') THEN
              REPEAT
                IF PurchLine.Type = PurchLine.Type::Item THEN BEGIN
                  IF NOT LocationTmp.GET(PurchLine."Location Code") THEN BEGIN
                    IF NOT Location.GET(PurchLine."Location Code") THEN BEGIN
                      CLEAR(Location);
                      Location.Code := PurchLine."Location Code";
                    END;
                    LocationTmp := Location;
                    LocationTmp.INSERT;
                  END;

                  IF LocationTmp."Require Pick" THEN BEGIN
                    IF PurchLine."Document Type" = PurchLine."Document Type"::"Return Order" THEN BEGIN
                      IF PurchLine."Return Qty. to Ship" <> 0 THEN BEGIN
                        PurchLine.VALIDATE("Return Qty. to Ship",0);
                        PurchLine.MODIFY;
                        RecordModified := TRUE;
                      END;
                    END ELSE
                      ERROR(Text120);
                  END ELSE BEGIN
                    IF PurchLine."Document Type" = PurchLine."Document Type"::"Return Order" THEN BEGIN
                      IF PurchLine."Return Qty. to Ship" <> PurchLine."Outstanding Quantity" THEN BEGIN
                        PurchLine.VALIDATE("Return Qty. to Ship",PurchLine."Outstanding Quantity");
                        PurchLine.MODIFY;
                        RecordModified := TRUE;
                      END;
                    END ELSE
                      ERROR(Text120);
                  END;
                END ELSE BEGIN
                  IF PurchLine."Document Type" = PurchLine."Document Type"::"Return Order" THEN BEGIN
                    IF PurchLine."Return Qty. to Ship" <> PurchLine."Outstanding Quantity" THEN BEGIN
                      PurchLine.VALIDATE("Return Qty. to Ship",PurchLine."Outstanding Quantity");
                      PurchLine.MODIFY;
                      RecordModified := TRUE;
                    END;
                  END ELSE
                    ERROR(Text120);
                END;
              UNTIL PurchLine.NEXT = 0;
          END;
        DATABASE::"Transfer Header":
          BEGIN
            TransferLine.RESET;
            IF PackingControl."Multi Document Package" THEN
              TransferLine.SETFILTER("Document No.",PackingControl."Multi Document No.")
            ELSE
              TransferLine.SETRANGE("Document No.",PackingControl."Source ID");
            TransferLine.SETFILTER("Outstanding Quantity",'>%1',0);
            TransferLine.SETRANGE("Derived From Line No.",0);
            IF ShippingSetup."Location Packing" THEN
              TransferLine.SETRANGE("Transfer-from Code",PackingStation."Location Code");
            IF TransferLine.FIND('-') THEN
              REPEAT
                IF NOT LocationTmp.GET(TransferLine."Transfer-from Code") THEN BEGIN
                  IF NOT Location.GET(TransferLine."Transfer-from Code") THEN BEGIN
                    CLEAR(Location);
                    Location.Code := TransferLine."Transfer-from Code";
                  END;
                  LocationTmp := Location;
                  LocationTmp.INSERT;
                END;

                IF LocationTmp."Require Pick" THEN BEGIN
                  IF TransferLine."Qty. to Ship" <> 0 THEN BEGIN
                    TransferLine.VALIDATE("Qty. to Ship",0);
                    TransferLine.MODIFY;
                    RecordModified := TRUE;
                  END;
                END ELSE BEGIN
                  IF TransferLine."Qty. to Ship" <> TransferLine."Outstanding Quantity" THEN BEGIN
                    TransferLine.VALIDATE("Qty. to Ship",TransferLine."Outstanding Quantity");
                    TransferLine.MODIFY;
                    RecordModified := TRUE;
                  END;
                END;
              UNTIL TransferLine.NEXT = 0;
          END;
        ELSE
          PackingControl.ErrorUnknownSourceType2;
      END;

      IF RecordModified THEN
        COMMIT;
    END;

    PROCEDURE CreateShipComplete@17(VAR Package@1240030000 : Record 14000701;VAR PackingControl@1240030001 : Record 14000717) : Boolean;
    BEGIN
      TestInitialized;
      Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Package.SETRANGE("Source Type",PackingControl."Source Type");
      Package.SETRANGE("Source Subtype",PackingControl."Source Subtype");
      IF PackingControl."Multi Document Package" THEN
        Package.SETFILTER("Source ID",PackingControl."Multi Document No.")
      ELSE
        Package.SETRANGE("Source ID",PackingControl."Source ID");
      Package.SETRANGE(Closed,TRUE);
      IF ShippingSetup."Location Packing" THEN
        Package.SETRANGE("Location Code",PackingStation."Location Code");
      IF Package.FIND('-') THEN BEGIN
        PackingControl."Error Message" := Text055;
        EXIT(FALSE);
      END;

      EXIT(PackRemaining(Package,PackingControl));
    END;

    PROCEDURE PackRemaining@2(VAR Package@1240030000 : Record 14000701;VAR PackingControl@1240030001 : Record 14000717) : Boolean;
    VAR
      FastPackLineTmp@1000000005 : TEMPORARY Record 14000711;
      PackingRule@1000000006 : Record 14000715;
    BEGIN
      TestInitialized;
      PackingRule.GetPackingRule(
        PackingControl."Ship-to Type",PackingControl."Ship-to No.",PackingControl."Ship-to Code");
      UpdateFastPackLines(
        PackingControl,FastPackLineTmp,PackingRule,TRUE,FALSE,FALSE,0,'','');
      IF NOT FastPackLineTmp.FIND('-') THEN BEGIN
        PackingControl."Error Message" := Text056;
        EXIT(FALSE);
      END;

      IF NOT PackingControl."Package Open" THEN
        IF NOT CreatePackage(Package,PackingControl) THEN
          EXIT(FALSE);

      REPEAT
        FastPackLineTmp.VALIDATE(
          "Qty. to Pack",FastPackLineTmp."Rem. Qty. to Pack (Pack. UOM)");

        //<TM HOTFIX>
        FastPackLineTmp."Required Shipping Agent Code" := '';
        FastPackLineTmp."Required E-Ship Agent Service" := '';
        //</TM>
        PackingControl."Input Type" := FastPackLineTmp.Type;
        PackingControl."Input No." := FastPackLineTmp."No.";
        PackingControl."Input Serial Number" := '';
        PackingControl."Input Unit of Measure Code" :=
          FastPackLineTmp."Qty. to Pack Unit of Meas Code";
        PackingControl."Input Variant Code" := FastPackLineTmp."Variant Code";
        PackingControl."Pack Serial Number" := FastPackLineTmp."Pack Serial Number";
        PackingControl."Pack Serial Number Late" := FALSE;
        PackingControl."Input Lot Number" := '';
        PackingControl."Pack Lot Number" := FastPackLineTmp."Pack Lot Number";
        PackingControl."Pack Lot Number Late" := FALSE;
        PackingControl."Input Warranty Date" := 0D;
        PackingControl."Pack Warranty Date" := FastPackLineTmp."Pack Warranty Date";
        PackingControl."Pack Warranty Date Late" := FALSE;
        PackingControl."Input Expiration Date" := 0D;
        PackingControl."Pack Expiration Date" := FastPackLineTmp."Pack Expiration Date";
        PackingControl."Pack Expiration Date Late" := FALSE;
        PackingControl."Required Shipping Agent Code" :=
          FastPackLineTmp."Required Shipping Agent Code";
        PackingControl."Required E-Ship Agent Service" :=
          FastPackLineTmp."Required E-Ship Agent Service";
        PackingControl."Allow Other Ship. Agent/Serv." :=
          FastPackLineTmp."Allow Other Ship. Agent/Serv.";

        IF NOT CreatePackageLine(
                 Package,PackingControl,FastPackLineTmp."Unit of Measure Code",
                 FastPackLineTmp.Quantity,FastPackLineTmp."Qty. to Pack")
        THEN
          EXIT(FALSE);
      UNTIL FastPackLineTmp.NEXT = 0;

      COMMIT;

      Package.ClearTotalValueFields;
      Package.TotalNetWeight;

      EXIT(TRUE);
    END;

    PROCEDURE DeleteOpenPackage@19(VAR Package@1000000000 : Record 14000701;VAR PackingControl@1000000001 : Record 14000717);
    BEGIN
      TestInitialized;
      Package.DELETE(TRUE);
      PackingControl."Package Open" := FALSE;
      IF PackingControl."Last Package No." > 0 THEN
        PackingControl."Last Package No." := PackingControl."Last Package No." - 1;
      CLEAR(Package);
    END;

    PROCEDURE DeleteAllPackages@20(VAR PackingControl@1240030000 : Record 14000717);
    VAR
      Package2@1000000003 : Record 14000701;
      SalesHeader@1000000001 : Record 36;
      WhseSalesPostviaJobQueue@1000000000 : Codeunit 50008;
    BEGIN
      TestInitialized;
      Package2.RESET;
      Package2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Package2.SETRANGE("Source Type",PackingControl."Source Type");
      Package2.SETRANGE("Source Subtype",PackingControl."Source Subtype");
      IF PackingControl."Multi Document Package" THEN
        Package2.SETFILTER("Source ID",PackingControl."Multi Document No.")
      ELSE
        Package2.SETRANGE("Source ID",PackingControl."Source ID");
      IF ShippingSetup."Location Packing" THEN
        Package2.SETRANGE("Location Code",PackingStation."Location Code");
      IF Package2.FIND('+') THEN
        REPEAT
          IF Package2.Closed THEN
            Shipping.OpenPackage(Package2);

          // <TPZ162>
          IF (Package2."Source Type" = 36) AND
             SalesHeader.GET(Package2."Source Subtype",Package2."Source ID") AND
             (SalesHeader."Job Queue Status" = SalesHeader."Job Queue Status"::"Scheduled for Posting")
          THEN
            WhseSalesPostviaJobQueue.CancelQueueEntry(SalesHeader);
          // </TPZ162>
          Package2.DELETE(TRUE);
        UNTIL Package2.NEXT(-1) = 0;

      PackingControl."Package Open" := FALSE;
      PackingControl."Last Package No." := 0;
    END;

    PROCEDURE PrintSalesShipmentReport@15(ShipmentNo@1000000000 : Code[20]);
    VAR
      SalesShipmentHeader@1000000001 : Record 110;
      ReportSelection@1000000002 : Record 77;
    BEGIN
      TestInitialized;
      SalesShipmentHeader."No." := ShipmentNo;
      SalesShipmentHeader.SETRECFILTER;

      ReportSelection.RESET;
      ReportSelection.SETRANGE(Usage,ReportSelection.Usage::"S.Shipment");
      ReportSelection.FIND('-');
      REPEAT
        ReportSelection.TESTFIELD("Report ID");
        REPORT.RUN(ReportSelection."Report ID",FALSE,FALSE,SalesShipmentHeader);
      UNTIL ReportSelection.NEXT = 0;
    END;

    PROCEDURE PrintSalesInvoiceReport@32(InvoiceNo@1000000000 : Code[20]);
    VAR
      SalesInvoiceHeader@1000000001 : Record 112;
      ReportSelection@1000000002 : Record 77;
    BEGIN
      TestInitialized;
      SalesInvoiceHeader."No." := InvoiceNo;
      SalesInvoiceHeader.SETRECFILTER;

      ReportSelection.RESET;
      ReportSelection.SETRANGE(Usage,ReportSelection.Usage::"S.Invoice");
      ReportSelection.FIND('-');
      REPEAT
        ReportSelection.TESTFIELD("Report ID");
        REPORT.RUN(ReportSelection."Report ID",FALSE,FALSE,SalesInvoiceHeader);
      UNTIL ReportSelection.NEXT = 0;
    END;

    PROCEDURE PrintPurchShipmentReport@61(ShipmentNo@1240030000 : Code[20]);
    VAR
      ReturnShipmentHeader@1240030001 : Record 6650;
      ReportSelection@1240030002 : Record 77;
    BEGIN
      TestInitialized;
      ReturnShipmentHeader."No." := ShipmentNo;
      ReturnShipmentHeader.SETRECFILTER;

      ReportSelection.RESET;
      ReportSelection.SETRANGE(Usage,ReportSelection.Usage::"P.Ret.Shpt.");
      ReportSelection.FIND('-');
      REPEAT
        ReportSelection.TESTFIELD("Report ID");
        REPORT.RUN(ReportSelection."Report ID",FALSE,FALSE,ReturnShipmentHeader);
      UNTIL ReportSelection.NEXT = 0;
    END;

    PROCEDURE PrintPurchInvoiceReport@60(InvoiceNo@1240030000 : Code[20]);
    VAR
      PurchInvoiceHeader@1240030001 : Record 122;
      ReportSelection@1240030002 : Record 77;
    BEGIN
      TestInitialized;
      PurchInvoiceHeader."No." := InvoiceNo;
      PurchInvoiceHeader.SETRECFILTER;

      ReportSelection.RESET;
      ReportSelection.SETRANGE(Usage,ReportSelection.Usage::"P.Invoice");
      ReportSelection.FIND('-');
      REPEAT
        ReportSelection.TESTFIELD("Report ID");
        REPORT.RUN(ReportSelection."Report ID",FALSE,FALSE,PurchInvoiceHeader);
      UNTIL ReportSelection.NEXT = 0;
    END;

    PROCEDURE PrintTransferShipmentReport@1240030002(ShipmentNo@1240030000 : Code[20]);
    VAR
      TransferShipmentHeader@1240030001 : Record 5744;
      ReportSelection@1240030002 : Record 77;
    BEGIN
      TestInitialized;
      TransferShipmentHeader."No." := ShipmentNo;
      TransferShipmentHeader.SETRECFILTER;

      ReportSelection.RESET;
      ReportSelection.SETRANGE(Usage,ReportSelection.Usage::Inv2);
      ReportSelection.FIND('-');
      REPEAT
        ReportSelection.TESTFIELD("Report ID");
        REPORT.RUN(ReportSelection."Report ID",FALSE,FALSE,TransferShipmentHeader);
      UNTIL ReportSelection.NEXT = 0;
    END;

    LOCAL PROCEDURE SetCODAmount@28(VAR Package@1240030002 : Record 14000701;VAR PackingControl@1240030003 : Record 14000717) : Boolean;
    VAR
      Package2@1000000004 : Record 14000701;
      PackageLine@1240030000 : Record 14000702;
      SalesLine2@1000000005 : Record 37;
      PurchLine2@1240030004 : Record 39;
      ShippingAgent@1000000006 : Record 291;
      TotalOrderAmount@1000000011 : Decimal;
      TotalOrderRounding@1000000012 : Decimal;
      TotalOrderQuoteAmount@1000000013 : Decimal;
      RateQuoted@1000000014 : Boolean;
      Line2QtyToShip@1000000019 : Decimal;
      DetailsPacked@1240030001 : Boolean;
    BEGIN
      TestInitialized;

      // Total Amount for Order (minus shipping charges)
      IF PackingControl."Currency Factor" = 0 THEN
        PackingControl."Currency Factor" := 1;

      CASE PackingControl."Source Type" OF
        DATABASE::"Sales Header":
          BEGIN
            TotalOrderAmount := 0;
            TotalOrderQuoteAmount := 0;
            TotalOrderRounding := 0;
            SalesLine2.RESET;
            SalesLine2.SETRANGE("Document Type",PackingControl."Source Subtype");
            IF PackingControl."Multi Document Package" THEN
              SalesLine2.SETFILTER("Document No.",PackingControl."Multi Document No.")
            ELSE
              SalesLine2.SETRANGE("Document No.",PackingControl."Source ID");
            SalesLine2.SETRANGE("Rate Quoted",TRUE);
            RateQuoted := SalesLine2.FIND('-');
            SalesLine2.SETRANGE("Rate Quoted");
            SalesLine2.SETFILTER("Outstanding Quantity",'<>0');
            IF ShippingSetup."Location Packing" THEN
              SalesLine2.SETRANGE("Location Code",PackingStation."Location Code");
            IF SalesLine2.FIND('-') THEN
              REPEAT
                // Additional code required in Attain
                Line2QtyToShip := SalesLine2."Qty. to Ship";
                IF Line2QtyToShip = 0 THEN BEGIN
                  SalesLine2.CALCFIELDS(
                    "E-Ship Whse. Outstanding Qty.","E-Ship Whse. Shipment Qty.",
                    "E-Ship Invt. Outstanding Qty.");
                  Line2QtyToShip :=
                    SalesLine2."E-Ship Whse. Outstanding Qty." +
                    SalesLine2."E-Ship Whse. Shipment Qty." +
                    SalesLine2."E-Ship Invt. Outstanding Qty.";
                END;

                IF Line2QtyToShip <> 0 THEN BEGIN
                  IF NOT SalesLine2."Shipping Charge" OR SalesLine2."Rate Quoted" THEN BEGIN
                    TotalOrderRounding :=
                      TotalOrderRounding +
                      ROUND(SalesLine2."Amount Including VAT" / PackingControl."Currency Factor") *
                      (Line2QtyToShip / SalesLine2.Quantity);
                    SalesLine2."Amount Including VAT" := ROUND(TotalOrderRounding);
                    TotalOrderRounding := TotalOrderRounding - SalesLine2."Amount Including VAT";
                    TotalOrderAmount := TotalOrderAmount + SalesLine2."Amount Including VAT";
                    IF SalesLine2."Rate Quoted" THEN
                      TotalOrderQuoteAmount :=
                        TotalOrderQuoteAmount + SalesLine2."Amount Including VAT";
                  END;
                END;
              UNTIL SalesLine2.NEXT = 0;
          END;
        DATABASE::"Purchase Header":
          BEGIN
            TotalOrderAmount := 0;
            TotalOrderQuoteAmount := 0;
            TotalOrderRounding := 0;
            PurchLine2.RESET;
            PurchLine2.SETRANGE("Document Type",PackingControl."Source Subtype");
            IF PackingControl."Multi Document Package" THEN
              PurchLine2.SETFILTER("Document No.",PackingControl."Multi Document No.")
            ELSE
              PurchLine2.SETRANGE("Document No.",PackingControl."Source ID");
            RateQuoted := FALSE;
            PurchLine2.SETFILTER("Outstanding Quantity",'<>0');
            IF PurchLine2.FIND('-') THEN
              REPEAT
                // Additional code required in Attain
                IF PurchLine2."Document Type" = PurchLine2."Document Type"::"Return Order" THEN BEGIN
                  Line2QtyToShip := PurchLine2."Return Qty. to Ship";
                  IF Line2QtyToShip = 0 THEN BEGIN
                    PurchLine2.CALCFIELDS(
                      "E-Ship Whse. Outstanding Qty.","E-Ship Whse. Shipment Qty.",
                      "E-Ship Invt. Outstanding Qty.");
                    Line2QtyToShip :=
                      PurchLine2."E-Ship Whse. Outstanding Qty." +
                      PurchLine2."E-Ship Whse. Shipment Qty." +
                      PurchLine2."E-Ship Invt. Outstanding Qty.";
                  END;
                END ELSE
                  Line2QtyToShip := PurchLine2."Outstanding Quantity";

                IF Line2QtyToShip <> 0 THEN BEGIN
                  IF NOT PurchLine2."Shipping Charge" THEN BEGIN
                    TotalOrderRounding :=
                      TotalOrderRounding +
                      ROUND(PurchLine2."Amount Including VAT" / PackingControl."Currency Factor") *
                      (Line2QtyToShip / PurchLine2.Quantity);
                    PurchLine2."Amount Including VAT" := ROUND(TotalOrderRounding);
                    TotalOrderRounding := TotalOrderRounding - PurchLine2."Amount Including VAT";
                    TotalOrderAmount := TotalOrderAmount + PurchLine2."Amount Including VAT";
                  END;
                END;
              UNTIL PurchLine2.NEXT = 0;
          END;
        ELSE
          PackingControl.ErrorUnknownSourceType2;
      END;

      // Details Packed
      PackageLine.RESET;
      PackageLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID","No.","Variant Code");
      PackageLine.SETRANGE("Source Type",PackingControl."Source Type");
      PackageLine.SETRANGE("Source Subtype",PackingControl."Source Subtype");
      IF PackingControl."Multi Document Package" THEN
        PackageLine.SETFILTER("Source ID",PackingControl."Multi Document No.")
      ELSE
        PackageLine.SETRANGE("Source ID",PackingControl."Source ID");
      IF ShippingSetup."Location Packing" THEN
        Package.SETRANGE("Location Code",PackingStation."Location Code");
      DetailsPacked := PackageLine.FIND('-');
      IF NOT DetailsPacked THEN BEGIN
        Package2.RESET;
        Package2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
        Package2.SETRANGE("Source Type",PackingControl."Source Type");
        Package2.SETRANGE("Source Subtype",PackingControl."Source Subtype");
        IF PackingControl."Multi Document Package" THEN
          Package2.SETFILTER("Source ID",PackingControl."Multi Document No.")
        ELSE
          Package2.SETRANGE("Source ID",PackingControl."Source ID");
        IF ShippingSetup."Location Packing" THEN
          Package2.SETRANGE("Location Code",PackingStation."Location Code");
        Package2.SETFILTER("Total Packages",'<>%1',Package."Total Packages");
        IF Package2.FIND('-') THEN BEGIN
          PackingControl."Error Message" :=
            STRSUBSTNO(Text057,Package2."No.");
          EXIT(FALSE);
        END;
      END;

      // COD Amount and Shipping Charge for Previous Packages
      Package2.RESET;
      Package2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Package2.SETRANGE("Source Type",PackingControl."Source Type");
      Package2.SETRANGE("Source Subtype",PackingControl."Source Subtype");
      IF PackingControl."Multi Document Package" THEN
        Package2.SETFILTER("Source ID",PackingControl."Multi Document No.")
      ELSE
        Package2.SETRANGE("Source ID",PackingControl."Source ID");
      IF ShippingSetup."Location Packing" THEN
        Package2.SETRANGE("Location Code",PackingStation."Location Code");
      Package2.SETFILTER("No.",'<>%1',Package."No.");
      Package2.CALCSUMS("COD Amount","Shipping Charge","Additional COD Amount");

      IF (Package."Shipping Agent Code" <> '') OR ShippingSetup."Shipping Agent Required" THEN
        ShippingAgent.GET(Package."Shipping Agent Code")
      ELSE BEGIN
        CLEAR(ShippingAgent);
        ShippingAgent.INIT;
      END;

      CASE PackingStation.GetCODRule(ShippingAgent) OF
        1: // All on Last Package
          BEGIN
            IF (DetailsPacked AND
                PackedComplete(ShippingAgent,PackingControl)) OR
               (NOT DetailsPacked AND (Package."Package No." = Package."Total Packages"))
            THEN BEGIN
              Package.COD := TRUE;
              Package."Add Shipping Charge to COD Amt" :=
                Package."Add Shipping Charge to COD Amt" AND NOT RateQuoted AND
                NOT PackingControl."Free Freight";

              IF NOT Package."Add Shipping Charge to COD Amt" THEN
                Package."COD Amount" :=
                  TotalOrderAmount + Package."Additional COD Amount" -
                  Package2."COD Amount" + Package2."Additional COD Amount"
              ELSE
                Package."COD Amount" :=
                  TotalOrderAmount + Package."Additional COD Amount" -
                  Package2."COD Amount" + Package2."Additional COD Amount" + Package2."Shipping Charge";

              IF Package."COD Amount" < 0 THEN BEGIN
                PackingControl."Error Message" := Text058;
                EXIT(FALSE);
              END;
            END ELSE BEGIN
              IF Package."Additional COD Amount" = 0 THEN BEGIN
                Package.COD := FALSE;
                Package."COD Amount" := 0;
              END ELSE
                Package."COD Amount" := Package."Additional COD Amount";
            END;

            Package.MODIFY(TRUE);
            COMMIT;
          END;
        2: // Distribute to All packages"
          BEGIN
            IF NOT DetailsPacked THEN BEGIN
              PackingControl."Error Message" := Text059;
              EXIT(FALSE);
            END;

            Package."Add Shipping Charge to COD Amt" :=
              Package."Add Shipping Charge to COD Amt" AND NOT RateQuoted AND
              NOT PackingControl."Free Freight";

            IF PackedComplete(ShippingAgent,PackingControl)
            THEN BEGIN
              IF Package."Add Shipping Charge to COD Amt" THEN
                Package."COD Amount" :=
                  TotalOrderAmount + Package."Additional COD Amount" -
                  Package2."COD Amount" + Package2."Additional COD Amount" + Package2."Shipping Charge"
              ELSE
                Package."COD Amount" :=
                  TotalOrderAmount + Package."Additional COD Amount" -
                  Package2."COD Amount" + Package2."Additional COD Amount";

              IF Package."COD Amount" < 0 THEN BEGIN
                PackingControl."Error Message" := Text058;
                EXIT(FALSE);
              END;
            END ELSE BEGIN
              IF TotalOrderAmount <> 0 THEN BEGIN
                Package.ClearTotalValueFields;
                Package."COD Amount" :=
                  ROUND(
                    TotalOrderAmount *
                    (Package.TotalValuePrice / (TotalOrderAmount - TotalOrderQuoteAmount))) +
                  Package."Additional COD Amount";
              END ELSE
                Package."COD Amount" := Package."Additional COD Amount";
            END;

            Package.MODIFY(TRUE);
            COMMIT;
          END;
        3: // Equal on all packages
          BEGIN
            Package."Add Shipping Charge to COD Amt" :=
              Package."Add Shipping Charge to COD Amt" AND NOT RateQuoted AND
              NOT PackingControl."Free Freight";

            IF Package."Package No." = Package."Total Packages" THEN BEGIN
              IF Package."Add Shipping Charge to COD Amt" THEN
                Package."COD Amount" :=
                  TotalOrderAmount + Package."Additional COD Amount" -
                  Package2."COD Amount" + Package2."Additional COD Amount" + Package2."Shipping Charge"
              ELSE
                Package."COD Amount" :=
                  TotalOrderAmount + Package."Additional COD Amount" -
                  Package2."COD Amount" + Package2."Additional COD Amount";

              IF Package."COD Amount" < 0 THEN BEGIN
                PackingControl."Error Message" := Text058;
                EXIT(FALSE);
              END;
            END ELSE BEGIN
              IF TotalOrderAmount <> 0 THEN BEGIN
                Package.ClearTotalValueFields;
                Package."COD Amount" :=
                  ROUND(TotalOrderAmount / Package."Total Packages") +
                  Package."Additional COD Amount";
              END ELSE
                Package."COD Amount" := Package."Additional COD Amount";
            END;

            Package.MODIFY(TRUE);
            COMMIT;
          END;
        4: // FedEx COD Charge on Last Package
          BEGIN
            IF DetailsPacked
            THEN BEGIN
              Package.COD := TRUE;
              Package."Add Shipping Charge to COD Amt" :=
                Package."Add Shipping Charge to COD Amt" AND NOT RateQuoted AND
                NOT PackingControl."Free Freight";
              IF NOT Package."Add Shipping Charge to COD Amt" THEN
                Package."COD Amount" :=
                  TotalOrderAmount + Package."Additional COD Amount"
              ELSE
                Package."COD Amount" :=
                  TotalOrderAmount + Package."Additional COD Amount";
              IF Package."COD Amount" < 0 THEN BEGIN
                PackingControl."Error Message" := Text058;
                EXIT(FALSE);
              END;
            END ELSE BEGIN
              IF Package."Additional COD Amount" = 0 THEN BEGIN
                Package.COD := FALSE;
                Package."COD Amount" := 0;
              END ELSE
                Package."COD Amount" := Package."Additional COD Amount";
            END;

            Package.MODIFY(TRUE);
            COMMIT;
          END;
        10: // Custom
          BEGIN
            PackingControl."Error Message" := Text060;
            EXIT(FALSE);
          END;
      END;

      IF Package.COD THEN
        IF PackingStation.GetAlwaysConfirmCODAmount(ShippingAgent) THEN
          CODAmountOverride(Package);

      EXIT(TRUE);
    END;

    PROCEDURE CODAmountOverride@52(VAR Package@1000000000 : Record 14000701);
    VAR
      EShipInput@1240030001 : Record 14000728;
      EShipOverrideCODAmount@1240030000 : Page 14050141;
    BEGIN
      TestInitialized;
      Package.MODIFY;
      COMMIT;
      Package.CALCFIELDS("Value (Price)","Value (Cost)");

      CLEAR(EShipInput);
      EShipInput."Package No." := Package."No.";
      EShipInput."Source Type" := Package."Source Type";
      EShipInput."Source Subtype" := Package."Source Subtype";
      EShipInput."Source ID" := Package."Source ID";
      EShipInput."Multi Document No." := Package."Multi Document No.";
      EShipInput."Value (Price)" := Package."Value (Price)";
      EShipInput."Value (Cost)" := Package."Value (Cost)";
      EShipInput."Shipping Agent Code" := Package."Shipping Agent Code";
      EShipInput."World Wide Service" := Package."World Wide Service";
      EShipInput."Shipping Agent Service" := Package."Shipping Agent Service";
      EShipInput.COD := Package.COD;
      EShipInput."COD Amount" := Package."COD Amount";
      EShipInput."COD Cashiers Check" := Package."COD Cashiers Check";
      EShipInput."Add Shipping Charge to COD Amt" := Package."Add Shipping Charge to COD Amt";
      EShipInput."Additional COD Amount" := Package."Additional COD Amount";

      CLEAR(EShipOverrideCODAmount);
      EShipOverrideCODAmount.LOOKUPMODE(TRUE);
      EShipOverrideCODAmount.SetEShipInput(EShipInput);
      IF EShipOverrideCODAmount.RUNMODAL = ACTION::LookupOK THEN BEGIN
      EShipOverrideCODAmount.GetEShipInput(EShipInput);
      Package."COD Amount" := EShipInput."COD Amount";
      Package."COD Cashiers Check" := EShipInput."COD Cashiers Check";
      Package."Add Shipping Charge to COD Amt" := EShipInput."Add Shipping Charge to COD Amt";
      Package.VALIDATE("Additional COD Amount",EShipInput."Additional COD Amount");
      Package.MODIFY;
      COMMIT;
      END;
    END;

    PROCEDURE WeightOverride@6(VAR Package@1000000000 : Record 14000701);
    VAR
      EShipInput@1240030000 : Record 14000728;
      EShipOverrideWeight@1240030001 : Page 14050144;
    BEGIN
      TestInitialized;
      Package.MODIFY;
      COMMIT;
      Package.CALCFIELDS("Net Weight","Gross Weight","Dim. Weight","Unit of Measure Weight");

      CLEAR(EShipInput);
      EShipInput."Package No." := Package."No.";
      EShipInput."Source Type" := Package."Source Type";
      EShipInput."Source Subtype" := Package."Source Subtype";
      EShipInput."Source ID" := Package."Source ID";
      EShipInput."Multi Document No." := Package."Multi Document No.";
      EShipInput."Net Weight" := Package."Net Weight";
      EShipInput."Gross Weight"  := Package."Gross Weight";
      EShipInput."Dim. Weight" := Package."Dim. Weight";
      EShipInput."Unit of Measure Weight" := Package."Unit of Measure Weight";
      EShipInput."Shipping Agent Code" := Package."Shipping Agent Code";
      EShipInput."World Wide Service" := Package."World Wide Service";
      EShipInput."Shipping Agent Service" := Package."Shipping Agent Service";
      EShipInput."Override Weight" := Package."Override Weight";
      EShipInput."Use Dim Weight" := Package."Use Dim Weight";

      CLEAR(EShipOverrideWeight);
      EShipOverrideWeight.LOOKUPMODE(TRUE);
      EShipOverrideWeight.SetEShipInput(EShipInput);
      IF EShipOverrideWeight.RUNMODAL = ACTION::LookupOK THEN BEGIN
      EShipOverrideWeight.GetEShipInput(EShipInput);
      Package."Override Weight" := EShipInput."Override Weight";
      Package."Use Dim Weight" := EShipInput."Use Dim Weight";
      Package.MODIFY;
      COMMIT;
      END;
    END;

    PROCEDURE VolumeOverride@37(VAR Package@1000000000 : Record 14000701);
    VAR
      EShipInput@1240030001 : Record 14000728;
      EShipOverrideDimensions@1240030000 : Page 14050142;
    BEGIN
      TestInitialized;

      Package.MODIFY;
      COMMIT;
      Package.CALCFIELDS(Volume,Length,Width,Height,Cubage);

      CLEAR(EShipInput);
      EShipInput."Package No." := Package."No.";
      EShipInput."Source Type" := Package."Source Type";
      EShipInput."Source Subtype" := Package."Source Subtype";
      EShipInput."Source ID" := Package."Source ID";
      EShipInput."Multi Document No." := Package."Multi Document No.";
      EShipInput.Volume := Package.Volume;
      EShipInput.Length := Package.Length;
      EShipInput.Width := Package.Width;
      EShipInput.Height := Package.Height;
      EShipInput.Cubage := Package.Cubage;
      EShipInput."Shipping Agent Code" := Package."Shipping Agent Code";
      EShipInput."World Wide Service" := Package."World Wide Service";
      EShipInput."Shipping Agent Service" := Package."Shipping Agent Service";
      EShipInput."Override Volume" := Package."Override Volume";
      EShipInput."Override Dimensions" := Package."Override Dimensions";
      EShipInput."Override Length" := Package."Override Length";
      EShipInput."Override Width" := Package."Override Width";
      EShipInput."Override Height" := Package."Override Height";

      CLEAR(EShipOverrideDimensions);
      EShipOverrideDimensions.LOOKUPMODE(TRUE);
      EShipOverrideDimensions.SetEShipInput(EShipInput);
      IF EShipOverrideDimensions.RUNMODAL = ACTION::LookupOK THEN BEGIN
      EShipOverrideDimensions.GetEShipInput(EShipInput);
      Package."Override Volume" := EShipInput."Override Volume";
      Package."Override Dimensions" := EShipInput."Override Dimensions";
      Package."Override Length" := EShipInput."Override Length";
      Package."Override Width" := EShipInput."Override Width";
      Package."Override Height" := EShipInput."Override Height";
      Package.MODIFY;
      COMMIT;
      END;
    END;

    PROCEDURE ViewDocumentComments@46(PackingControl@1240030000 : Record 14000717;OnlyIfExist@1240030001 : Boolean);
    VAR
      SalesCommentLine@1240030002 : Record 44;
      PurchCommentLine@1240030003 : Record 43;
      InventoryCommentLine@1240030004 : Record 5748;
    BEGIN
      TestInitialized;
      CASE PackingControl."Source Type" OF
        DATABASE::"Sales Header":
          BEGIN
            SalesCommentLine.RESET;
            SalesCommentLine.SETRANGE("Document Type",PackingControl."Source Subtype");
            SalesCommentLine.SETRANGE("No.",PackingControl."Source ID");
            IF NOT OnlyIfExist OR SalesCommentLine.FIND('-') THEN
              PAGE.RUNMODAL(PAGE::"Sales Comment Sheet",SalesCommentLine);
          END;
        DATABASE::"Purchase Header":
          BEGIN
            PurchCommentLine.RESET;
            PurchCommentLine.SETRANGE("Document Type",PackingControl."Source Subtype");
            PurchCommentLine.SETRANGE("No.",PackingControl."Source ID");
            IF NOT OnlyIfExist OR PurchCommentLine.FIND('-') THEN
              PAGE.RUNMODAL(PAGE::"Purch. Comment Sheet",PurchCommentLine);
          END;
        DATABASE::"Transfer Header":
          BEGIN
            InventoryCommentLine.RESET;
            InventoryCommentLine.SETRANGE(
              "Document Type",InventoryCommentLine."Document Type"::"Transfer Order");
            InventoryCommentLine.SETRANGE("No.",PackingControl."Source ID");
            IF NOT OnlyIfExist OR InventoryCommentLine.FIND('-') THEN
              PAGE.RUNMODAL(PAGE::"Inventory Comment Sheet",InventoryCommentLine);
          END;
        ELSE
          PackingControl.ErrorUnknownSourceType2;
      END;
    END;

    PROCEDURE ShowPackageOptions@29(VAR Package@1000000000 : Record 14000701);
    BEGIN
      TestInitialized;
      Shipping.ShowPackageOptions(Package);
    END;

    PROCEDURE ShowOptionPageSalesOrder@21(PackingControl@1240030000 : Record 14000717);
    BEGIN
      TestInitialized;
      Shipping.ShowOptPageShipDocument(PackingControl);
    END;

    PROCEDURE ValueOverride@30(VAR Package@1000000000 : Record 14000701);
    VAR
      EShipInput@1240030000 : Record 14000728;
      EShipOverrideValue@1240030001 : Page 14050145;
    BEGIN
      TestInitialized;

      Package.MODIFY;
      COMMIT;
      Package.CALCFIELDS("Value (Price)","Value (Cost)");

      CLEAR(EShipInput);
      EShipInput."Package No." := Package."No.";
      EShipInput."Source Type" := Package."Source Type";
      EShipInput."Source Subtype" := Package."Source Subtype";
      EShipInput."Source ID" := Package."Source ID";
      EShipInput."Multi Document No." := Package."Multi Document No.";
      EShipInput."Value (Price)" := Package."Value (Price)";
      EShipInput."Value (Cost)" := Package."Value (Cost)";
      EShipInput."Shipping Agent Code" := Package."Shipping Agent Code";
      EShipInput."World Wide Service" := Package."World Wide Service";
      EShipInput."Shipping Agent Service" := Package."Shipping Agent Service";
      EShipInput."Override Value" := Package."Override Value";

      //TM BEG 070815
      EShipInput."Shipping Cost" := Package."Shipping Cost";
      EShipInput."Tracking No." := Package."External Tracking No.";
      //TM END 070815

      EShipInput."Number Of pallets" := Package."Number of pallet";//utkarsh

      CLEAR(EShipOverrideValue);
      EShipOverrideValue.LOOKUPMODE(TRUE);
      EShipOverrideValue.SetEShipInput(EShipInput);
      IF EShipOverrideValue.RUNMODAL = ACTION::LookupOK THEN BEGIN
      EShipOverrideValue.GetEShipInput(EShipInput);
      Package."Override Value" := EShipInput."Override Value";
        //TM BEG 070815
        Package."Shipping Charge" := EShipInput."Shipping Cost";
        Package."Shipping Cost" := EShipInput."Shipping Cost";
        Package."External Tracking No." := EShipInput."Tracking No.";
        //TM END 070815
        Package."Number of pallet" := EShipInput."Number Of pallets"; //utkarsh
      Package.MODIFY;
      COMMIT;
      END;
    END;

    PROCEDURE ChangeTotalPackageCount@35(VAR Package@1240030000 : Record 14000701;VAR PackingControl@1240030001 : Record 14000717) : Boolean;
    VAR
      Package2@1240030002 : Record 14000701;
      EShipInput@1240030003 : Record 14000728;
      EShipEnterNoOfPackages@1240030004 : Page 14050110;
    BEGIN
      TestInitialized;
      Package2.RESET;
      Package2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Package2.SETRANGE("Source Type",PackingControl."Source Type");
      Package2.SETRANGE("Source Subtype",PackingControl."Source Subtype");
      IF PackingControl."Multi Document Package" THEN
        Package2.SETFILTER("Source ID",PackingControl."Multi Document No.")
      ELSE
        Package2.SETRANGE("Source ID",PackingControl."Source ID");
      IF ShippingSetup."Location Packing" THEN
        Package2.SETRANGE("Location Code",PackingStation."Location Code");
      IF PackingControl."Package Open" THEN
        Package2.SETRANGE("No.",'<>%1',Package."No.");
      IF Package2.FIND('-') THEN BEGIN
        PackingControl."Error Message" := Text055;
        EXIT(FALSE);
      END;

      CLEAR(EShipInput);
      EShipInput."No. of Packages" := PackingControl."Total Package Count";
      CLEAR(EShipEnterNoOfPackages);
      EShipEnterNoOfPackages.LOOKUPMODE(TRUE);
      EShipEnterNoOfPackages.SetEShipInput(EShipInput);
      IF EShipEnterNoOfPackages.RUNMODAL = ACTION::LookupOK THEN BEGIN
      EShipEnterNoOfPackages.GetEShipInput(EShipInput);
        PackingControl."Total Package Count" := EShipInput."No. of Packages";

        IF PackingControl."Total Package Count" < 1 THEN BEGIN
        PackingControl."Error Message" := Text062;
        EXIT(FALSE);
      END;

      IF PackingControl."Package Open" THEN BEGIN
        Package."Total Packages" := PackingControl."Total Package Count";
        Package.MODIFY;
      END;
      END ELSE
        PackingControl."Total Package Count" := 0;

      EXIT(TRUE);
    END;

    PROCEDURE FixAddress@36(VAR Package@1000000000 : Record 14000701);
    VAR
      EShipInput@1240030000 : Record 14000728;
      EShipOverrideAddress@1240030001 : Page 14050143;
    BEGIN
      TestInitialized;

      Package.MODIFY;
      COMMIT;

      CLEAR(EShipInput);
      EShipInput."Package No." := Package."No.";
      EShipInput."Source Type" := Package."Source Type";
      EShipInput."Source Subtype" := Package."Source Subtype";
      EShipInput."Source ID" := Package."Source ID";
      EShipInput."Multi Document No." := Package."Multi Document No.";
      EShipInput."Shipping Agent Code" := Package."Shipping Agent Code";
      EShipInput."World Wide Service" := Package."World Wide Service";
      EShipInput."Shipping Agent Service" := Package."Shipping Agent Service";
      EShipInput."Ship-to Name" := Package."Ship-to Name";
      EShipInput."Ship-to Name 2" := Package."Ship-to Name 2";
      EShipInput."Ship-to Address" := Package."Ship-to Address";
      EShipInput."Ship-to Address 2" := Package."Ship-to Address 2";
      EShipInput."Ship-to City" := Package."Ship-to City";
      EShipInput."Ship-to Contact" := Package."Ship-to Contact";
      EShipInput."Ship-to ZIP Code" := Package."Ship-to ZIP Code";
      EShipInput."Ship-to State" := Package."Ship-to State";
      EShipInput."Ship-to Country Code" := Package."Ship-to Country Code";
      EShipInput."Ship-to Phone No." := Package."Ship-to Phone No.";
      EShipInput."Ship-to Fax No." := Package."Ship-to Fax No.";
      EShipInput."Residential Delivery" := Package."Residential Delivery";

      CLEAR(EShipOverrideAddress);
      EShipOverrideAddress.LOOKUPMODE(TRUE);
      EShipOverrideAddress.SetEShipInput(EShipInput);
      IF EShipOverrideAddress.RUNMODAL = ACTION::LookupOK THEN BEGIN
      EShipOverrideAddress.GetEShipInput(EShipInput);
      Package."Ship-to Name" := EShipInput."Ship-to Name";
      Package."Ship-to Name 2" := EShipInput."Ship-to Name 2";
      Package."Ship-to Address" := EShipInput."Ship-to Address";
      Package."Ship-to Address 2" := EShipInput."Ship-to Address 2";
      Package."Ship-to City" := EShipInput."Ship-to City";
      Package."Ship-to Contact" := EShipInput."Ship-to Contact";
      Package."Ship-to ZIP Code" := EShipInput."Ship-to ZIP Code";
      Package."Ship-to State" := EShipInput."Ship-to State";
      Package."Ship-to Country Code" := EShipInput."Ship-to Country Code";
      Package."Ship-to Phone No." := EShipInput."Ship-to Phone No.";
      Package."Ship-to Fax No." := EShipInput."Ship-to Fax No.";
      Package."Residential Delivery" := EShipInput."Residential Delivery";
      Package.MODIFY;
      COMMIT;
      END;
    END;

    PROCEDURE PrintAllLabelsAndDocs@38(ShippingAgent@1240030001 : Record 291;VAR PackingControl@1240030002 : Record 14000717;PrintAllLabels@1240030003 : Boolean;PrintPackingList@1240030004 : Boolean) : Boolean;
    VAR
      Package2@1240030006 : Record 14000701;
      Package3@1240030007 : Record 14000701;
      PackageTmp@1240030008 : TEMPORARY Record 14000701;
      ShippingAgentService@1240030009 : Record 14000708;
    BEGIN
      TestInitialized;
      Package2.RESET;
      Package2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Package2.SETRANGE("Source Type",PackingControl."Source Type");
      Package2.SETRANGE("Source Subtype",PackingControl."Source Subtype");
      IF PackingControl."Multi Document Package" THEN
        Package2.SETFILTER("Source ID",PackingControl."Multi Document No.")
      ELSE
        Package2.SETRANGE("Source ID",PackingControl."Source ID");
      Package2.SETRANGE(Closed,FALSE);
      IF ShippingSetup."Location Packing" THEN
        Package2.SETRANGE("Location Code",PackingStation."Location Code");
      IF Package2.FIND('-') THEN BEGIN
        PackingControl."Error Message" := Text063;
        EXIT(FALSE);
      END;

      PackageTmp.RESET;
      PackageTmp.DELETEALL;
      Package2.SETRANGE(Closed);
      IF Package2.FIND('-') THEN
        REPEAT
          IF PackingControl."Multi Document Package" THEN BEGIN
            Package3.GET(Package2."Original Package No.");
            PackageTmp := Package3;
            IF NOT PackageTmp.INSERT THEN
              ;
          END ELSE BEGIN
            PackageTmp := Package2;
            PackageTmp.INSERT;
          END;
        UNTIL Package2.NEXT = 0;

      IF PackageTmp.FIND('-') THEN
        REPEAT
          Package2.GET(PackageTmp."No.");
          Package2.TESTFIELD(Closed);
          Shipping.PrintShippingLabel(Package2);

          IF PrintAllLabels AND ShippingSetup."Enable Label Printing" THEN BEGIN
            IF Package2."Shipping Agent Code" <> '' THEN BEGIN
              IF NOT ShippingAgentService.GET(
                       Package2."Shipping Agent Code",Package2."Shipping Agent Service",
                       Package2."World Wide Service")
              THEN
                CLEAR(ShippingAgentService);
              LabelMgt.PrintShippingAgentLabel(Package2,ShippingAgent,ShippingAgentService);
            END;

            LabelMgt.ClosePackage(Package2,TRUE);
          END;

          IF PrintPackingList THEN
            Shipping.PrintPackagePackingList(Package2,FALSE);
        UNTIL PackageTmp.NEXT = 0;

      EXIT(TRUE);
    END;

    PROCEDURE PrintStdPackageLabel@43(VAR Package@1000000000 : Record 14000701);
    BEGIN
      TestInitialized;
      LabelMgt.PrintStdPackageLabel(Package);

      Package.GET(Package."No.");
    END;

    PROCEDURE PrintUCC128Label@40(VAR Package@1000000000 : Record 14000701;VAR PackingControl@1000000001 : Record 14000717) : Boolean;
    BEGIN
      TestInitialized;
      LabelMgt.PrintUCC128Label(Package);

      Package.GET(Package."No.");

      IF Package."UCC No." = '' THEN BEGIN
        PackingControl."Error Message" := Text064;
        EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE PrintRFIDLabel@1240030005(VAR Package@1000000000 : Record 14000701;VAR PackingControl@1000000001 : Record 14000717) : Boolean;
    BEGIN
      TestInitialized;
      LabelMgt.PrintRFIDLabel(Package);

      Package.GET(Package."No.");

      IF Package."RF-ID (Hex)" = '' THEN BEGIN
        PackingControl."Error Message" := Text124;
        EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE CreateStandardPack@7(VAR PackingControl@1240030002 : Record 14000717;PrintLabel@1240030003 : Boolean);
    VAR
      Package@1000000004 : Record 14000701;
      PackageLine@1000000005 : Record 14000702;
      SalesLine@1000000006 : Record 37;
      SalesLine2@1000000007 : Record 37;
      QtyPacked@1000000010 : Decimal;
      SalesLine2QtyToShipBase@1000000011 : Decimal;
      SalesLine2StdPackQtyToShip@1240030000 : Decimal;
      SalesLine2PackageQtyToShip@1240030001 : Decimal;
      i@1240030004 : Integer;
    BEGIN
      TestInitialized;
      IF PackingControl."Multi Document Package" THEN
        ERROR(Text083);

      PackingControl.TESTFIELD("Source Type",DATABASE::"Sales Header");
      PackingControl.TESTFIELD("Source ID");

      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type",PackingControl."Source Subtype");
      SalesLine.SETRANGE("Document No.",PackingControl."Source ID");
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      SalesLine.SETFILTER("Outstanding Quantity",'<>0');
      SalesLine.SETRANGE(Pack,TRUE);
      SalesLine.SETRANGE("Drop Shipment",FALSE);
      IF ShippingSetup."Location Packing" THEN
        SalesLine.SETRANGE("Location Code",PackingStation."Location Code");
      IF PackingControl."Standard Pack One item" THEN BEGIN
        SalesLine.SETRANGE(Type,PackingControl."Input Type");
        SalesLine.SETRANGE("No.",PackingControl."Input No.");
        SalesLine.SETRANGE("Variant Code",PackingControl."Input Variant Code");
      END;
      // Additional code required in Attain
      IF NOT SalesLine.FIND('-') THEN
        ERROR(Text084);

      SalesLine.FIND('-');
      REPEAT
        IF SalesLine."Std. Pack Unit of Measure Code" <> '' THEN BEGIN
          SalesLine2.RESET;
          SalesLine2.SETCURRENTKEY(
            "Document Type","Document No.",Type,"No.","Variant Code","Drop Shipment",Pack);
          SalesLine2.SETRANGE("Document Type",SalesLine."Document Type");
          SalesLine2.SETRANGE("Document No.",SalesLine."Document No.");
          SalesLine2.SETRANGE(Type,SalesLine.Type);
          SalesLine2.SETRANGE("No.",SalesLine."No.");
          SalesLine2.SETRANGE("Variant Code",SalesLine."Variant Code");
          SalesLine2.SETRANGE("Drop Shipment",FALSE);
          SalesLine2.SETRANGE(Pack,TRUE);
          IF ShippingSetup."Location Packing" THEN
            SalesLine2.SETRANGE("Location Code",PackingStation."Location Code");
          SalesLine2.CALCSUMS("Qty. to Ship (Base)");

          // Additional code required in Attain
          SalesLine2QtyToShipBase := SalesLine2."Qty. to Ship (Base)";
          SalesLine2QtyToShipBase :=
            SalesLine2QtyToShipBase +
            EShipValidation."SalesLine-CalcEShipWhseOutstQtyBase"(SalesLine2,
              ShippingSetup."Location Packing",PackingStation."Location Code");
          SalesLine2StdPackQtyToShip :=
            ROUND(SalesLine2QtyToShipBase / SalesLine."Qty. per Std. Pack",0.00001);
          SalesLine2PackageQtyToShip :=
            ROUND(
              SalesLine2QtyToShipBase /
              (SalesLine."Qty. per Std. Pack" * SalesLine."Std. Packs per Package"),0.00001);

          QtyPacked := 0;
          PackageLine.RESET;
          PackageLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID","No.","Variant Code");
          PackageLine.SETRANGE("Source Type",PackingControl."Source Type");
          PackageLine.SETRANGE("Source Subtype",PackingControl."Source Subtype");
          PackageLine.SETRANGE("Source ID",PackingControl."Source ID");
          PackageLine.SETRANGE("No.",SalesLine."No.");
          PackageLine.SETRANGE("Variant Code",SalesLine."Variant Code");
          IF ShippingSetup."Location Packing" THEN
            PackageLine.SETRANGE("Location Code",PackingStation."Location Code");
          PackageLine.CALCSUMS("Quantity (Base)");
          PackageLine."Quantity (Base)" := ROUND(PackageLine."Quantity (Base)",0.00001);
          QtyPacked := PackageLine."Quantity (Base)";

          IF QtyPacked < SalesLine2QtyToShipBase THEN BEGIN
            SalesLine.TESTFIELD("Std. Pack Unit of Measure Code");
            SalesLine.TESTFIELD("Std. Packs per Package");

            IF SalesLine2StdPackQtyToShip - ROUND(SalesLine2StdPackQtyToShip,1) <> 0 THEN
              IF ShippingSetup."Test Equal Std. Pack Quantity" THEN
                ERROR(Text085,SalesLine."No.")
              ELSE
                SalesLine2QtyToShipBase :=
                  ROUND(SalesLine2QtyToShipBase,SalesLine."Qty. per Std. Pack",'<');

            IF SalesLine2PackageQtyToShip - ROUND(SalesLine2PackageQtyToShip,1) <> 0 THEN
              IF ShippingSetup."Test Equal Package Quantity" THEN
                ERROR(Text086,SalesLine."No.")
              ELSE
                SalesLine2QtyToShipBase :=
                  ROUND(
                    SalesLine2QtyToShipBase,
                    SalesLine."Std. Packs per Package" * SalesLine."Qty. per Std. Pack",'<');

            WHILE QtyPacked < SalesLine2QtyToShipBase DO BEGIN
              QtyPacked :=
                QtyPacked + SalesLine."Qty. per Std. Pack" * SalesLine."Std. Packs per Package";
              IF QtyPacked > SalesLine2QtyToShipBase THEN
                ERROR(Text085,SalesLine."No.");

              CreatePackage(Package,PackingControl);

              CLEAR(PackageLine);
              PackageLine."Package No." := Package."No.";
              PackageLine."Line No." := 10000;
              PackageLine.VALIDATE(Type,SalesLine.Type);
              PackageLine.VALIDATE("No.",SalesLine."No.");
              PackageLine.VALIDATE("Variant Code",SalesLine."Variant Code");
              PackageLine.VALIDATE("Unit of Measure Code",SalesLine."Std. Pack Unit of Measure Code");
              IF PackageLine."Pack Serial Number" THEN BEGIN
                PackageLine.VALIDATE(Quantity,1);
                FOR i := 1 TO SalesLine."Std. Packs per Package" DO BEGIN
                  PackageLine."Line No." := 10000 * i;
                  PackageLine.INSERT(TRUE);
                END;
              END ELSE BEGIN
                PackageLine.VALIDATE(Quantity,SalesLine."Std. Packs per Package");
                PackageLine.INSERT(TRUE);
              END;

              IF Package.COD OR PackingControl."COD Payment" THEN
                IF NOT SetCODAmount(Package,PackingControl)
                THEN
                  ERROR(Text087);

              Package."No AES Required" := PackingControl."No AES Required";
              IF PackingControl."Export Document No." <> '' THEN
                Package."Export Document No." := PackingControl."Export Document No.";

              COMMIT;

              Shipping.ClosePackage(Package,PrintLabel);

              PackingControl."Package Open" := FALSE;
            END;
          END;
        END;
      UNTIL SalesLine.NEXT = 0;
    END;

    PROCEDURE ZeroScale@5(ScaleInterface@1000000000 : Record 14000746);
    BEGIN
      TestInitialized;
      ScalesComm.ZeroScale(ScaleInterface);
    END;

    PROCEDURE MissingOrderLines@10(VAR PackingControl@1240030000 : Record 14000717) : Boolean;
    VAR
      FastPackLineTmp@1240030001 : TEMPORARY Record 14000711;
      PackingRule@1240030002 : Record 14000715;
      ItemsNotPacked@1240030003 : Page 14000689;
    BEGIN
      TestInitialized;
      PackingRule.GetPackingRule(
        PackingControl."Ship-to Type",PackingControl."Ship-to No.",PackingControl."Ship-to Code");

      UpdateFastPackLines(
        PackingControl,
        FastPackLineTmp,PackingRule,TRUE,FALSE,FALSE,0,'','');

      CLEAR(ItemsNotPacked);
      IF PackingStation."Allow Item/Resource Lookup" THEN
        ItemsNotPacked.LOOKUPMODE(TRUE);
      ItemsNotPacked.LoadTempTable(FastPackLineTmp);
      IF ItemsNotPacked.RUNMODAL = ACTION::LookupOK THEN BEGIN
        ItemsNotPacked.GETRECORD(FastPackLineTmp);
        PackingControl."Input Type" := FastPackLineTmp.Type;
        PackingControl."Input No." := FastPackLineTmp."No.";
        PackingControl."Input Unit of Measure Code" := FastPackLineTmp."Unit of Measure Code";
        PackingControl."Input Variant Code" := FastPackLineTmp."Variant Code";

        EXIT(TRUE);
      END ELSE
        EXIT(FALSE);
    END;

    PROCEDURE UpdateFastPackLines@1(VAR PackingControl@1240030000 : Record 14000717;VAR FastPackLineTmp@1240030001 : Record 14000711;PackingRule@1240030002 : Record 14000715;UseLineUOM@1240030003 : Boolean;OnlyCalculateQtyToPack@1240030004 : Boolean;PerSourceID@1240030012 : Boolean;TypeFilter@1240030011 : Integer;NoFilter@1240030010 : Code[20];VariantCodeFilter@1240030009 : Code[10]);
    VAR
      PackageLine@1240030005 : Record 14000702;
      CustomerItemPackageUOM@1240030006 : Record 14000703;
      ItemUnitOfMeasure@1240030007 : Record 5404;
      Item@1240030008 : Record 27;
    BEGIN
      TestInitialized;
      CASE PackingControl."Source Type" OF
        DATABASE::"Sales Header":
          UpdateFastPackLinesSales(
            PackingControl,FastPackLineTmp,
            PackingRule,UseLineUOM,OnlyCalculateQtyToPack,PerSourceID,TypeFilter,NoFilter,VariantCodeFilter);
        DATABASE::"Purchase Header":
          UpdateFastPackLinesPurchase(
            PackingControl,FastPackLineTmp,
            PackingRule,UseLineUOM,OnlyCalculateQtyToPack,PerSourceID,TypeFilter,NoFilter,VariantCodeFilter);
        DATABASE::"Transfer Header":
          UpdateFastPackLinesTransfer(
            PackingControl,FastPackLineTmp,
            PackingRule,UseLineUOM,OnlyCalculateQtyToPack,PerSourceID,TypeFilter,NoFilter,VariantCodeFilter);
        ELSE
          PackingControl.ErrorUnknownSourceType2;
      END;

      IF OnlyCalculateQtyToPack THEN
        EXIT;

      IF FastPackLineTmp.FIND('-') THEN
        REPEAT
          PackageLine.RESET;
          PackageLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID","No.","Variant Code");
          PackageLine.SETRANGE("Source Type",PackingControl."Source Type");
          PackageLine.SETRANGE("Source Subtype",PackingControl."Source Subtype");
          IF FastPackLineTmp."From Source ID" <> '' THEN
            PackageLine.SETRANGE("Source ID",FastPackLineTmp."From Source ID")
          ELSE
            IF PackingControl."Multi Document Package" THEN
              PackageLine.SETFILTER("Source ID",PackingControl."Multi Document No.")
            ELSE
              PackageLine.SETRANGE("Source ID",PackingControl."Source ID");
          PackageLine.SETRANGE(Type,FastPackLineTmp.Type);
          PackageLine.SETRANGE("No.",FastPackLineTmp."No.");
          PackageLine.SETRANGE("Variant Code",FastPackLineTmp."Variant Code");
            IF ShippingSetup."Location Packing" THEN
              PackageLine.SETRANGE("Location Code",PackingStation."Location Code");
          PackageLine.CALCSUMS("Quantity (Base)");
          PackageLine."Quantity (Base)" := ROUND(PackageLine."Quantity (Base)",0.00001);

          IF PackingRule."Default Fast Pack to Std. UOM" AND NOT UseLineUOM THEN BEGIN
            IF FastPackLineTmp.Type = FastPackLineTmp.Type::Item THEN BEGIN
              IF CustomerItemPackageUOM.GET(PackingControl."Ship-to No.",FastPackLineTmp."No.")
              THEN BEGIN
                ItemUnitOfMeasure.GET(
                  CustomerItemPackageUOM."Item No.",
                  CustomerItemPackageUOM."Std. Pack Unit of Measure Code");
                FastPackLineTmp."Qty. to Pack Unit of Meas Code" := ItemUnitOfMeasure.Code;
                FastPackLineTmp."Qty. to Pack per Unit of Meas." :=
                  ItemUnitOfMeasure."Qty. per Unit of Measure";
                FastPackLineTmp."Std. Packs per Package" :=
                  CustomerItemPackageUOM."Std. Packs per Package";
              END ELSE BEGIN
                Item.GET(FastPackLineTmp."No.");
                  IF Item."Std. Pack Unit of Measure Code" <> '' THEN BEGIN
                  ItemUnitOfMeasure.GET(Item."No.",Item."Std. Pack Unit of Measure Code");
                  FastPackLineTmp."Qty. to Pack Unit of Meas Code" := ItemUnitOfMeasure.Code;
                  FastPackLineTmp."Qty. to Pack per Unit of Meas." :=
                    ItemUnitOfMeasure."Qty. per Unit of Measure";
                  FastPackLineTmp."Std. Packs per Package" := Item."Std. Packs per Package";
                END;
              END;
            END ELSE BEGIN
              FastPackLineTmp."Qty. to Pack per Unit of Meas." := 1;
              FastPackLineTmp."Std. Packs per Package" := 1;
            END;
          END;
          IF FastPackLineTmp."Qty. to Pack Unit of Meas Code" = '' THEN BEGIN
            FastPackLineTmp."Qty. to Pack Unit of Meas Code" :=
              FastPackLineTmp."Unit of Measure Code";
            FastPackLineTmp."Qty. to Pack per Unit of Meas." :=
              FastPackLineTmp."Qty. per Unit of Measure";
          END;

          FastPackLineTmp."Qty. Packed (Base)" := PackageLine."Quantity (Base)";
          FastPackLineTmp."Remaining Qty. to Pack (Base)" :=
            FastPackLineTmp."Qty. to Ship (Base)" - FastPackLineTmp."Qty. Packed (Base)";

          IF FastPackLineTmp.Type = FastPackLineTmp.Type::Item THEN BEGIN
            IF FastPackLineTmp."Qty. per Unit of Measure" = 0 THEN
              FastPackLineTmp."Qty. per Unit of Measure" := 1;
            IF FastPackLineTmp."Qty. to Pack per Unit of Meas." = 0 THEN
              FastPackLineTmp."Qty. to Pack per Unit of Meas." := 1;

            FastPackLineTmp."Qty. Packed" :=
              ROUND(
                FastPackLineTmp."Qty. Packed (Base)" /
                FastPackLineTmp."Qty. to Pack per Unit of Meas.",
                0.00001);
            FastPackLineTmp."Remaining Qty. to Pack" :=
              ROUND(
                FastPackLineTmp."Remaining Qty. to Pack (Base)" /
                FastPackLineTmp."Qty. per Unit of Measure",
                0.00001);
            FastPackLineTmp."Rem. Qty. to Pack (Pack. UOM)" :=
              ROUND(
                FastPackLineTmp."Remaining Qty. to Pack (Base)" /
                FastPackLineTmp."Qty. to Pack per Unit of Meas.",
                0.00001);
          END ELSE BEGIN
            FastPackLineTmp."Qty. Packed" := FastPackLineTmp."Qty. Packed (Base)";
            FastPackLineTmp."Remaining Qty. to Pack" :=
              FastPackLineTmp."Qty. to Ship" - FastPackLineTmp."Qty. Packed";
            FastPackLineTmp."Rem. Qty. to Pack (Pack. UOM)" :=
              FastPackLineTmp."Remaining Qty. to Pack (Base)";
          END;

          IF (FastPackLineTmp."Remaining Qty. to Pack (Base)" = 0) AND (NoFilter = '') THEN
            FastPackLineTmp.DELETE
          ELSE
            FastPackLineTmp.MODIFY;
        UNTIL FastPackLineTmp.NEXT = 0;
    END;

    PROCEDURE UpdateFastPackLinesSales@58(VAR PackingControl@1240030000 : Record 14000717;VAR FastPackLineTmp@1240030001 : Record 14000711;PackingRule@1240030002 : Record 14000715;UseLineUOM@1240030003 : Boolean;OnlyCalculateQtyToPack@1240030004 : Boolean;PerSourceID@1240030015 : Boolean;TypeFilter@1240030014 : Integer;NoFilter@1240030013 : Code[20];VariantCodeFilter@1240030012 : Code[10]);
    VAR
      Salesheader@1240030017 : Record 36;
      SalesLine@1240030005 : Record 37;
      Item@1240030006 : Record 27;
      Resource@1240030007 : Record 156;
      ItemUnitOfMeasure@1240030008 : Record 5404;
      EShipTrackingCode@1240030009 : Record 14000721;
      SalesLineQtyToShip@1240030010 : Decimal;
      SalesLineQtyToShipBase@1240030011 : Decimal;
      SourceID@1240030016 : Code[20];
    BEGIN
      TestInitialized;
      FastPackLineTmp.RESET;
      FastPackLineTmp.DELETEALL;

      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type",PackingControl."Source Subtype");
      IF PackingControl."Multi Document Package" THEN
        SalesLine.SETFILTER("Document No.",PackingControl."Multi Document No.")
      ELSE
        SalesLine.SETRANGE("Document No.",PackingControl."Source ID");
      SalesLine.SETRANGE("Drop Shipment",FALSE);
      SalesLine.SETRANGE(Pack,TRUE);
      SalesLine.SETFILTER("Outstanding Quantity",'<>0');
      IF ShippingSetup."Location Packing" THEN
        SalesLine.SETRANGE("Location Code",PackingStation."Location Code");
      IF NoFilter <> '' THEN BEGIN
        SalesLine.SETRANGE(Type,TypeFilter);
        SalesLine.SETRANGE("No.",NoFilter);
        SalesLine.SETRANGE("Variant Code",VariantCodeFilter);
      END;
      IF SalesLine.FIND('-') THEN
        REPEAT
          // Additional code required in Attain
          SalesLineQtyToShip := SalesLine."Qty. to Ship";
          SalesLineQtyToShipBase := SalesLine."Qty. to Ship (Base)";
          SalesLine.CALCFIELDS("E-Ship Invt. Outstanding Qty.","E-Ship Invt. Outst. Qty (Base)");
          IF (SalesLineQtyToShipBase = 0) OR (SalesLine."E-Ship Invt. Outst. Qty (Base)" <> 0)
          THEN BEGIN
            SalesLine.CALCFIELDS("E-Ship Whse. Outstanding Qty.","E-Ship Whse. Outst. Qty (Base)");
            SalesLine.CALCFIELDS("E-Ship Whse. Shipment Qty.","E-Ship Whse. Ship. Qty (Base)");
            SalesLineQtyToShip :=
              SalesLine."E-Ship Whse. Outstanding Qty." +
              SalesLine."E-Ship Whse. Shipment Qty." +
              SalesLine."E-Ship Invt. Outstanding Qty.";
            SalesLineQtyToShipBase :=
              SalesLine."E-Ship Whse. Outst. Qty (Base)" +
              SalesLine."E-Ship Whse. Ship. Qty (Base)" +
              SalesLine."E-Ship Invt. Outst. Qty (Base)";
          END;

          IF SalesLineQtyToShipBase <> 0 THEN BEGIN
            IF PerSourceID THEN
              SourceID := SalesLine."Document No."
            ELSE
              SourceID := '';

            IF FastPackLineTmp.GET(SalesLine.Type,SalesLine."No.",SalesLine."Variant Code",SourceID)
            THEN BEGIN
              IF (FastPackLineTmp."Required Shipping Agent Code" <>
                  SalesLine."Required Shipping Agent Code") OR
                 (FastPackLineTmp."Required E-Ship Agent Service" <>
                  SalesLine."Required E-Ship Agent Service") OR
                 (FastPackLineTmp."Allow Other Ship. Agent/Serv." <>
                  SalesLine."Allow Other Ship. Agent/Serv.")
              THEN
                ERROR(Text088);
            END ELSE
              FastPackLineTmp.INIT;

            FastPackLineTmp.Type := SalesLine.Type;
            FastPackLineTmp."No." := SalesLine."No.";
            FastPackLineTmp."Variant Code" := SalesLine."Variant Code";
            FastPackLineTmp."From Source ID" := SourceID;
            FastPackLineTmp.Description := SalesLine.Description;
            FastPackLineTmp."Source Type" := PackingControl."Source Type";
            FastPackLineTmp."Source Subtype" := PackingControl."Source Subtype";
            FastPackLineTmp."Source ID" := PackingControl."Source ID";
            FastPackLineTmp."Required Shipping Agent Code" :=
              SalesLine."Required Shipping Agent Code";
            FastPackLineTmp."Required E-Ship Agent Service" :=
              SalesLine."Required E-Ship Agent Service";
            FastPackLineTmp."Allow Other Ship. Agent/Serv." :=
              SalesLine."Allow Other Ship. Agent/Serv.";
            CASE FastPackLineTmp.Type OF
              FastPackLineTmp.Type::Item:
                BEGIN
                  Item.GET(SalesLine."No.");
                  EShipTrackingCode.GetEShipTrackingCodeItem(Item);
                  FastPackLineTmp."Pack Serial Number" := EShipTrackingCode."Pack Serial Number";
                  FastPackLineTmp."Pack Lot Number" := EShipTrackingCode."Pack Lot Number";
                  FastPackLineTmp."Pack Warranty Date" := EShipTrackingCode."Pack Warranty Date";
                  FastPackLineTmp."Pack Expiration Date" := EShipTrackingCode."Pack Expiration Date";
                  FastPackLineTmp."Net Weight" := Item."Net Weight";
                  FastPackLineTmp."Gross Weight" := Item."Gross Weight";
                  FastPackLineTmp."Dimmed Weight" := Item."Dimmed Weight";
                  FastPackLineTmp."Unit Volume" := Item."Unit Volume";
                  FastPackLineTmp."Units per Parcel" := Item."Units per Parcel";

                  IF (FastPackLineTmp."Unit of Measure Code" <> SalesLine."Unit of Measure Code") AND
                     (FastPackLineTmp."Unit of Measure Code" <> '')
                  THEN BEGIN
                    ItemUnitOfMeasure.RESET;
                    ItemUnitOfMeasure.SETRANGE("Item No.",SalesLine."No.");
                    ItemUnitOfMeasure.SETRANGE("Qty. per Unit of Measure",1);
                    IF NOT ItemUnitOfMeasure.FIND('-') THEN
                      ERROR(Text089,SalesLine."No.");
                    FastPackLineTmp."Unit of Measure Code" := ItemUnitOfMeasure.Code;
                    FastPackLineTmp."Qty. per Unit of Measure" := 1;
                    FastPackLineTmp.Quantity :=
                      FastPackLineTmp."Quantity (Base)" + SalesLine."Quantity (Base)";
                    FastPackLineTmp."Qty. to Ship" :=
                      FastPackLineTmp."Qty. to Ship (Base)" + SalesLineQtyToShipBase;
                    FastPackLineTmp."Outstanding Quantity" :=
                      FastPackLineTmp."Outstanding Qty. (Base)" +
                      SalesLine."Outstanding Qty. (Base)";
                  END ELSE BEGIN
                    FastPackLineTmp."Unit of Measure Code" := SalesLine."Unit of Measure Code";
                    FastPackLineTmp."Qty. per Unit of Measure" :=
                      SalesLine."Qty. per Unit of Measure";
                    FastPackLineTmp.Quantity :=
                      FastPackLineTmp.Quantity + SalesLine.Quantity;
                    FastPackLineTmp."Qty. to Ship" :=
                      FastPackLineTmp."Qty. to Ship" + SalesLineQtyToShip;
                    FastPackLineTmp."Outstanding Quantity" :=
                      FastPackLineTmp."Outstanding Quantity" + SalesLine."Outstanding Quantity";
                  END;
                END;
              FastPackLineTmp.Type::Resource:
                BEGIN
                  Resource.GET(SalesLine."No.");
                  EShipTrackingCode.GetEShipTrackingCodeResource(Resource);
                  FastPackLineTmp."Pack Serial Number" := EShipTrackingCode."Pack Serial Number";
                  FastPackLineTmp."Pack Lot Number" := EShipTrackingCode."Pack Lot Number";
                  FastPackLineTmp."Pack Warranty Date" := EShipTrackingCode."Pack Warranty Date";
                  FastPackLineTmp."Pack Expiration Date" := EShipTrackingCode."Pack Expiration Date";
                  FastPackLineTmp."Net Weight" := Resource."Net Weight";
                  FastPackLineTmp."Gross Weight" := Resource."Gross Weight";
                  FastPackLineTmp."Dimmed Weight" := Resource."Dimmed Weight";
                  FastPackLineTmp."Unit Volume" := Resource."Unit Volume";

                  FastPackLineTmp.Quantity :=
                    FastPackLineTmp.Quantity + SalesLine.Quantity;
                  FastPackLineTmp."Qty. to Ship" :=
                    FastPackLineTmp."Qty. to Ship" + SalesLineQtyToShip;
                  FastPackLineTmp."Outstanding Quantity" :=
                    FastPackLineTmp."Outstanding Quantity" + SalesLine."Outstanding Quantity";
                END;
              ELSE
                BEGIN
                  FastPackLineTmp.Quantity :=
                    FastPackLineTmp.Quantity + SalesLine.Quantity;
                  FastPackLineTmp."Qty. to Ship" :=
                    FastPackLineTmp."Qty. to Ship" + SalesLineQtyToShip;
                  FastPackLineTmp."Outstanding Quantity" :=
                    FastPackLineTmp."Outstanding Quantity" + SalesLine."Outstanding Quantity";
                END;
            END;

            FastPackLineTmp."Quantity (Base)" :=
              FastPackLineTmp."Quantity (Base)" + SalesLine."Quantity (Base)";
            FastPackLineTmp."Qty. to Ship (Base)" :=
              FastPackLineTmp."Qty. to Ship (Base)" + SalesLineQtyToShipBase;
            FastPackLineTmp."Outstanding Qty. (Base)" :=
              FastPackLineTmp."Outstanding Qty. (Base)" + SalesLine."Outstanding Qty. (Base)";

            IF SalesLine."Currency Code" <> '' THEN BEGIN
              IF (SalesLine."Document Type" <> Salesheader."Document Type") OR
                 (SalesLine."Document No." <> Salesheader."No.")
              THEN BEGIN
                Salesheader.GET(SalesLine."Document Type",SalesLine."Document No.");
                IF Salesheader."Currency Factor" = 0 THEN
                  Salesheader."Currency Factor" := 1;
              END;
            END ELSE
              Salesheader."Currency Factor" := 1;

            FastPackLineTmp."Value (Cost)" :=
              FastPackLineTmp."Value (Cost)" +
              SalesLine."Outstanding Quantity" * SalesLine."Unit Cost (LCY)";
            FastPackLineTmp."Value (Price)" :=
              FastPackLineTmp."Value (Price)" +
              ROUND(
                (SalesLine."Outstanding Quantity" / SalesLine.Quantity) *
                (SalesLine."Amount Including VAT" / Salesheader."Currency Factor"),0.01);

            IF NOT FastPackLineTmp.INSERT THEN
              FastPackLineTmp.MODIFY;
          END;
        UNTIL SalesLine.NEXT = 0;
    END;

    PROCEDURE UpdateFastPackLinesPurchase@59(VAR PackingControl@1240030000 : Record 14000717;VAR FastPackLineTmp@1240030001 : Record 14000711;PackingRule@1240030002 : Record 14000715;UseLineUOM@1240030003 : Boolean;OnlyCalculateQtyToPack@1240030004 : Boolean;PerSourceID@1240030014 : Boolean;TypeFilter@1240030013 : Integer;NoFilter@1240030012 : Code[20];VariantCodeFilter@1240030011 : Code[10]);
    VAR
      PurchHeader@1240030016 : Record 38;
      PurchLine@1240030005 : Record 39;
      Item@1240030006 : Record 27;
      ItemUnitOfMeasure@1240030007 : Record 5404;
      EShipTrackingCode@1240030008 : Record 14000721;
      PurchLineQtyToShip@1240030009 : Decimal;
      PurchLineQtyToShipBase@1240030010 : Decimal;
      SourceID@1240030015 : Code[20];
    BEGIN
      TestInitialized;
      FastPackLineTmp.RESET;
      FastPackLineTmp.DELETEALL;

      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type",PackingControl."Source Subtype");
      IF PackingControl."Multi Document Package" THEN
        PurchLine.SETFILTER("Document No.",PackingControl."Multi Document No.")
      ELSE
        PurchLine.SETRANGE("Document No.",PackingControl."Source ID");
      PurchLine.SETRANGE("Drop Shipment",FALSE);
      PurchLine.SETFILTER("Outstanding Quantity",'<>0');
      IF ShippingSetup."Location Packing" THEN
        PurchLine.SETRANGE("Location Code",PackingStation."Location Code");
      IF NoFilter <> '' THEN BEGIN
        PurchLine.SETRANGE(Type,TypeFilter);
        PurchLine.SETRANGE("No.",NoFilter);
        PurchLine.SETRANGE("Variant Code",VariantCodeFilter);
      END ELSE
        PurchLine.SETRANGE(Type,PurchLine.Type::Item);
      IF PurchLine.FIND('-') THEN
        REPEAT
          // Additional code required in Attain
          IF PurchLine."Document Type" = PurchLine."Document Type"::"Return Order" THEN BEGIN
            PurchLineQtyToShip := PurchLine."Return Qty. to Ship";
            PurchLineQtyToShipBase := PurchLine."Return Qty. to Ship (Base)";
            PurchLine.CALCFIELDS("E-Ship Invt. Outstanding Qty.","E-Ship Invt. Outst. Qty (Base)");
            IF (PurchLineQtyToShipBase = 0) OR (PurchLine."E-Ship Invt. Outst. Qty (Base)" <> 0)
            THEN BEGIN
              PurchLine.CALCFIELDS("E-Ship Whse. Outstanding Qty.","E-Ship Whse. Outst. Qty (Base)");
              PurchLine.CALCFIELDS("E-Ship Whse. Shipment Qty.","E-Ship Whse. Ship. Qty (Base)");
              PurchLineQtyToShip :=
                PurchLine."E-Ship Whse. Outstanding Qty." +
                PurchLine."E-Ship Whse. Shipment Qty." +
                PurchLine."E-Ship Invt. Outstanding Qty.";
              PurchLineQtyToShipBase :=
                PurchLine."E-Ship Whse. Outst. Qty (Base)" +
                PurchLine."E-Ship Whse. Ship. Qty (Base)" +
                PurchLine."E-Ship Invt. Outst. Qty (Base)";
            END;
          END ELSE BEGIN
            PurchLineQtyToShip := PurchLine."Outstanding Quantity";
            PurchLineQtyToShipBase := PurchLine."Outstanding Qty. (Base)";
          END;

          IF PurchLineQtyToShipBase <> 0 THEN BEGIN
            IF PerSourceID THEN
              SourceID := PurchLine."Document No."
            ELSE
              SourceID := '';

            IF NOT FastPackLineTmp.GET(PurchLine.Type,PurchLine."No.",PurchLine."Variant Code",SourceID)
            THEN
              FastPackLineTmp.INIT;

            FastPackLineTmp.Type := PurchLine.Type;
            FastPackLineTmp."No." := PurchLine."No.";
            FastPackLineTmp."Variant Code" := PurchLine."Variant Code";
            FastPackLineTmp."From Source ID" := SourceID;
            FastPackLineTmp.Description := PurchLine.Description;
            FastPackLineTmp."Source Type" := PackingControl."Source Type";
            FastPackLineTmp."Source Subtype" := PackingControl."Source Subtype";
            FastPackLineTmp."Source ID" := PackingControl."Source ID";
            CASE FastPackLineTmp.Type OF
              FastPackLineTmp.Type::Item:
                BEGIN
                  Item.GET(PurchLine."No.");
                  EShipTrackingCode.GetEShipTrackingCodeItem(Item);
                  FastPackLineTmp."Pack Serial Number" := EShipTrackingCode."Pack Serial Number";
                  FastPackLineTmp."Pack Lot Number" := EShipTrackingCode."Pack Lot Number";
                  FastPackLineTmp."Pack Warranty Date" := EShipTrackingCode."Pack Warranty Date";
                  FastPackLineTmp."Pack Expiration Date" := EShipTrackingCode."Pack Expiration Date";
                  FastPackLineTmp."Net Weight" := Item."Net Weight";
                  FastPackLineTmp."Gross Weight" := Item."Gross Weight";
                  FastPackLineTmp."Dimmed Weight" := Item."Dimmed Weight";
                  FastPackLineTmp."Unit Volume" := Item."Unit Volume";
                  FastPackLineTmp."Units per Parcel" := Item."Units per Parcel";

                  IF (FastPackLineTmp."Unit of Measure Code" <> PurchLine."Unit of Measure Code") AND
                     (FastPackLineTmp."Unit of Measure Code" <> '')
                  THEN BEGIN
                    ItemUnitOfMeasure.RESET;
                    ItemUnitOfMeasure.SETRANGE("Item No.",PurchLine."No.");
                    ItemUnitOfMeasure.SETRANGE("Qty. per Unit of Measure",1);
                    IF NOT ItemUnitOfMeasure.FIND('-') THEN
                      ERROR(Text089,PurchLine."No.");
                    FastPackLineTmp."Unit of Measure Code" := ItemUnitOfMeasure.Code;
                    FastPackLineTmp."Qty. per Unit of Measure" := 1;
                    FastPackLineTmp.Quantity :=
                      FastPackLineTmp."Quantity (Base)" + PurchLine."Quantity (Base)";
                    FastPackLineTmp."Qty. to Ship" :=
                      FastPackLineTmp."Qty. to Ship (Base)" + PurchLineQtyToShipBase;
                    FastPackLineTmp."Outstanding Quantity" :=
                      FastPackLineTmp."Outstanding Qty. (Base)" +
                      PurchLine."Outstanding Qty. (Base)";
                  END ELSE BEGIN
                    FastPackLineTmp."Unit of Measure Code" := PurchLine."Unit of Measure Code";
                    FastPackLineTmp."Qty. per Unit of Measure" :=
                      PurchLine."Qty. per Unit of Measure";
                    FastPackLineTmp.Quantity :=
                      FastPackLineTmp.Quantity + PurchLine.Quantity;
                    FastPackLineTmp."Qty. to Ship" :=
                      FastPackLineTmp."Qty. to Ship" + PurchLineQtyToShip;
                    FastPackLineTmp."Outstanding Quantity" :=
                      FastPackLineTmp."Outstanding Quantity" + PurchLine."Outstanding Quantity";
                  END;
                END;
              ELSE
                BEGIN
                  FastPackLineTmp.Quantity :=
                    FastPackLineTmp.Quantity + PurchLine.Quantity;
                  FastPackLineTmp."Qty. to Ship" :=
                    FastPackLineTmp."Qty. to Ship" + PurchLineQtyToShip;
                  FastPackLineTmp."Outstanding Quantity" :=
                    FastPackLineTmp."Outstanding Quantity" + PurchLine."Outstanding Quantity";
                END;
            END;

            FastPackLineTmp."Quantity (Base)" :=
              FastPackLineTmp."Quantity (Base)" + PurchLine."Quantity (Base)";
            FastPackLineTmp."Qty. to Ship (Base)" :=
              FastPackLineTmp."Qty. to Ship (Base)" + PurchLineQtyToShipBase;
            FastPackLineTmp."Outstanding Qty. (Base)" :=
              FastPackLineTmp."Outstanding Qty. (Base)" + PurchLine."Outstanding Qty. (Base)";

            IF PurchLine."Currency Code" <> '' THEN BEGIN
              IF (PurchLine."Document Type" <> PurchHeader."Document Type") OR
                 (PurchLine."Document No." <> PurchHeader."No.")
              THEN BEGIN
                PurchHeader.GET(PurchLine."Document Type",PurchLine."Document No.");
                IF PurchHeader."Currency Factor" = 0 THEN
                  PurchHeader."Currency Factor" := 1;
              END;
            END ELSE
              PurchHeader."Currency Factor" := 1;

            FastPackLineTmp."Value (Cost)" :=
              FastPackLineTmp."Value (Cost)" +
              PurchLine."Outstanding Quantity" * PurchLine."Unit Cost (LCY)";
            FastPackLineTmp."Value (Price)" :=
              FastPackLineTmp."Value (Price)" +
              ROUND(
                (PurchLine."Outstanding Quantity" / PurchLine.Quantity) *
                (PurchLine."Amount Including VAT" / PurchHeader."Currency Factor"),0.01);

            IF NOT FastPackLineTmp.INSERT THEN
              FastPackLineTmp.MODIFY;
          END;
        UNTIL PurchLine.NEXT = 0;
    END;

    PROCEDURE UpdateFastPackLinesTransfer@1240030004(VAR PackingControl@1240030000 : Record 14000717;VAR FastPackLineTmp@1240030001 : Record 14000711;PackingRule@1240030002 : Record 14000715;UseLineUOM@1240030003 : Boolean;OnlyCalculateQtyToPack@1240030004 : Boolean;PerSourceID@1240030014 : Boolean;TypeFilter@1240030013 : Integer;NoFilter@1240030012 : Code[20];VariantCodeFilter@1240030011 : Code[10]);
    VAR
      TransferLine@1240030005 : Record 5741;
      Item@1240030006 : Record 27;
      ItemUnitOfMeasure@1240030007 : Record 5404;
      EShipTrackingCode@1240030008 : Record 14000721;
      TransferLineQtyToShip@1240030009 : Decimal;
      TransferLineQtyToShipBase@1240030010 : Decimal;
      SourceID@1240030015 : Code[20];
    BEGIN
      TestInitialized;
      FastPackLineTmp.RESET;
      FastPackLineTmp.DELETEALL;

      TransferLine.RESET;
      IF PackingControl."Multi Document Package" THEN
        TransferLine.SETFILTER("Document No.",PackingControl."Multi Document No.")
      ELSE
        TransferLine.SETRANGE("Document No.",PackingControl."Source ID");
      TransferLine.SETFILTER("Outstanding Quantity",'<>0');
      IF ShippingSetup."Location Packing" THEN
        TransferLine.SETRANGE("Transfer-from Code",PackingStation."Location Code");
      IF NoFilter <> '' THEN BEGIN
        TransferLine.SETRANGE("Item No.",NoFilter);
        TransferLine.SETRANGE("Variant Code",VariantCodeFilter);
      END;
      TransferLine.SETRANGE("Derived From Line No.",0);
      IF TransferLine.FIND('-') THEN
        REPEAT
          // Additional code required in Attain
          TransferLineQtyToShip := TransferLine."Qty. to Ship";
          TransferLineQtyToShipBase := TransferLine."Qty. to Ship (Base)";
          TransferLine.CALCFIELDS("E-Ship Invt. Outstanding Qty.","E-Ship Invt. Outst. Qty (Base)");
          IF (TransferLineQtyToShipBase = 0) OR (TransferLine."E-Ship Invt. Outst. Qty (Base)" <> 0)
          THEN BEGIN
            TransferLine.CALCFIELDS("E-Ship Whse. Outstanding Qty.","E-Ship Whse. Outst. Qty (Base)");
            TransferLine.CALCFIELDS("E-Ship Whse. Shipment Qty.","E-Ship Whse. Ship. Qty (Base)");
            TransferLineQtyToShip :=
              TransferLine."E-Ship Whse. Outstanding Qty." +
              TransferLine."E-Ship Whse. Shipment Qty." +
              TransferLine."E-Ship Invt. Outstanding Qty.";
            TransferLineQtyToShipBase :=
              TransferLine."E-Ship Whse. Outst. Qty (Base)" +
              TransferLine."E-Ship Whse. Ship. Qty (Base)" +
              TransferLine."E-Ship Invt. Outst. Qty (Base)";
          END;

          IF TransferLineQtyToShipBase <> 0 THEN BEGIN
            IF PerSourceID THEN
              SourceID := TransferLine."Document No."
            ELSE
              SourceID := '';

            IF NOT FastPackLineTmp.GET(2,TransferLine."Item No.",TransferLine."Variant Code",SourceID)
            THEN
              FastPackLineTmp.INIT;

            FastPackLineTmp.Type := 2;
            FastPackLineTmp."No." := TransferLine."Item No.";
            FastPackLineTmp."Variant Code" := TransferLine."Variant Code";
            FastPackLineTmp."From Source ID" := SourceID;
            FastPackLineTmp.Description := TransferLine.Description;
            FastPackLineTmp."Source Type" := PackingControl."Source Type";
            FastPackLineTmp."Source Subtype" := PackingControl."Source Subtype";
            FastPackLineTmp."Source ID" := PackingControl."Source ID";
            CASE FastPackLineTmp.Type OF
              FastPackLineTmp.Type::Item:
                BEGIN
                  Item.GET(TransferLine."Item No.");
                  EShipTrackingCode.GetEShipTrackingCodeItem(Item);
                  FastPackLineTmp."Pack Serial Number" := EShipTrackingCode."Pack Serial Number";
                  FastPackLineTmp."Pack Lot Number" := EShipTrackingCode."Pack Lot Number";
                  FastPackLineTmp."Pack Warranty Date" := EShipTrackingCode."Pack Warranty Date";
                  FastPackLineTmp."Pack Expiration Date" := EShipTrackingCode."Pack Expiration Date";
                  FastPackLineTmp."Net Weight" := Item."Net Weight";
                  FastPackLineTmp."Gross Weight" := Item."Gross Weight";
                  FastPackLineTmp."Dimmed Weight" := Item."Dimmed Weight";
                  FastPackLineTmp."Unit Volume" := Item."Unit Volume";
                  FastPackLineTmp."Units per Parcel" := Item."Units per Parcel";

                  IF (FastPackLineTmp."Unit of Measure Code" <> TransferLine."Unit of Measure Code") AND
                     (FastPackLineTmp."Unit of Measure Code" <> '')
                  THEN BEGIN
                    ItemUnitOfMeasure.RESET;
                    ItemUnitOfMeasure.SETRANGE("Item No.",TransferLine."Item No.");
                    ItemUnitOfMeasure.SETRANGE("Qty. per Unit of Measure",1);
                    IF NOT ItemUnitOfMeasure.FIND('-') THEN
                      ERROR(Text089,TransferLine."Item No.");
                    FastPackLineTmp."Unit of Measure Code" := ItemUnitOfMeasure.Code;
                    FastPackLineTmp."Qty. per Unit of Measure" := 1;
                    FastPackLineTmp.Quantity :=
                      FastPackLineTmp."Quantity (Base)" + TransferLine."Quantity (Base)";
                    FastPackLineTmp."Qty. to Ship" :=
                      FastPackLineTmp."Qty. to Ship (Base)" + TransferLineQtyToShipBase;
                    FastPackLineTmp."Outstanding Quantity" :=
                      FastPackLineTmp."Outstanding Qty. (Base)" +
                      TransferLine."Outstanding Qty. (Base)";
                  END ELSE BEGIN
                    FastPackLineTmp."Unit of Measure Code" := TransferLine."Unit of Measure Code";
                    FastPackLineTmp."Qty. per Unit of Measure" :=
                      TransferLine."Qty. per Unit of Measure";
                    FastPackLineTmp.Quantity :=
                      FastPackLineTmp.Quantity + TransferLine.Quantity;
                    FastPackLineTmp."Qty. to Ship" :=
                      FastPackLineTmp."Qty. to Ship" + TransferLineQtyToShip;
                    FastPackLineTmp."Outstanding Quantity" :=
                      FastPackLineTmp."Outstanding Quantity" + TransferLine."Outstanding Quantity";
                  END;

                  FastPackLineTmp."Value (Cost)" :=
                    FastPackLineTmp."Value (Cost)" +
                    TransferLine."Outstanding Qty. (Base)" * Item."Unit Cost";
                  FastPackLineTmp."Value (Price)" :=
                    FastPackLineTmp."Value (Price)" +
                    TransferLine."Outstanding Qty. (Base)" * Item."Unit Price";
                END;
              ELSE
                BEGIN
                  FastPackLineTmp.Quantity :=
                    FastPackLineTmp.Quantity + TransferLine.Quantity;
                  FastPackLineTmp."Qty. to Ship" :=
                    FastPackLineTmp."Qty. to Ship" + TransferLineQtyToShip;
                  FastPackLineTmp."Outstanding Quantity" :=
                    FastPackLineTmp."Outstanding Quantity" + TransferLine."Outstanding Quantity";
                END;
            END;

            FastPackLineTmp."Quantity (Base)" :=
              FastPackLineTmp."Quantity (Base)" + TransferLine."Quantity (Base)";
            FastPackLineTmp."Qty. to Ship (Base)" :=
              FastPackLineTmp."Qty. to Ship (Base)" + TransferLineQtyToShipBase;
            FastPackLineTmp."Outstanding Qty. (Base)" :=
              FastPackLineTmp."Outstanding Qty. (Base)" + TransferLine."Outstanding Qty. (Base)";

            IF NOT FastPackLineTmp.INSERT THEN
              FastPackLineTmp.MODIFY;
          END;
        UNTIL TransferLine.NEXT = 0;
    END;

    PROCEDURE UpdatePackingStatisticsValues@1240030013(CarrierPackingStation@1240030008 : Record 14000729;VAR PackageCount@1240030007 : ARRAY [20,3,2] OF Integer;VAR PackageValue@1240030006 : ARRAY [20,3,2] OF Decimal;VAR PackageWeight@1240030005 : ARRAY [20,3,2] OF Decimal;VAR PackageVolume@1240030004 : ARRAY [20,3,2] OF Decimal;VAR DisplayValue@1240030010 : ARRAY [20,6] OF Text[100];DateFilter@1240030009 : Text[250]);
    VAR
      Package@1240030003 : Record 14000701;
      PostedPackage@1240030002 : Record 14000704;
      ShippingAgent@1240030001 : Record 291;
      ShippingAgentTmp@1240030000 : Record 291;
      i@1240030011 : Integer;
    BEGIN
      TestInitialized;

      CLEAR(PackageCount);
      CLEAR(PackageWeight);
      CLEAR(PackageValue);
      CLEAR(PackageVolume);
      CLEAR(DisplayValue);

      Package.RESET;
      IF DateFilter <> '' THEN
        Package.SETFILTER("Packing Date",DateFilter);
      IF Package.FIND('-') THEN
        REPEAT
          IF NOT ShippingAgentTmp.GET(PostedPackage."Shipping Agent Code") THEN BEGIN
            IF NOT ShippingAgent.GET(PostedPackage."Shipping Agent Code") THEN
              CLEAR(ShippingAgent);

            ShippingAgentTmp := ShippingAgent;
            ShippingAgentTmp.INSERT;
          END ELSE
            ShippingAgent := ShippingAgentTmp;

          IF Package."Closed by Packing Station Code" = PackingStation.Code THEN BEGIN
            PackageCount[1,1,1] := PackageCount[1,1,1] + 1;
            PackageValue[1,1,1] := PackageValue[1,1,1] + Package."Calculation Value";
            PackageWeight[1,1,1] := PackageWeight[1,1,1] + Package."Calculation Weight";
            PackageVolume[1,1,1] := PackageVolume[1,1,1] + Package."Calculation Volume";

            PackageCount[ShippingAgent."Shipper Type" + 2,1,1] :=
              PackageCount[ShippingAgent."Shipper Type" + 2,1,1] + 1;
            PackageValue[ShippingAgent."Shipper Type" + 2,1,1] :=
              PackageValue[ShippingAgent."Shipper Type" + 2,1,1] + Package."Calculation Value";
            PackageWeight[ShippingAgent."Shipper Type" + 2,1,1] :=
              PackageWeight[ShippingAgent."Shipper Type" + 2,1,1] + Package."Calculation Weight";
            PackageVolume[ShippingAgent."Shipper Type" + 2,1,1] :=
              PackageVolume[ShippingAgent."Shipper Type" + 2,1,1] + Package."Calculation Volume";
          END;

          IF ((ShippingAgent."Shipper Type" = ShippingAgent."Shipper Type"::UPS) AND
              (Package."Shipping Agent Account No." =
               CarrierPackingStation."UPS Shipping Agent Account No.")) OR
             ((ShippingAgent."Shipper Type" = ShippingAgent."Shipper Type"::FEDEX) AND
              (Package."Shipping Agent Account No." =
               CarrierPackingStation."FedEx Shipping Agent Acc. No.")) OR
             ((ShippingAgent."Shipper Type" = ShippingAgent."Shipper Type"::LTL) AND
              (Package."Shipping Agent Account No." =
               ShippingAgent."LTL Shipping Agent Account No.")) OR
             ((ShippingAgent."Shipper Type" = ShippingAgent."Shipper Type"::Generic) AND
              (Package."Shipping Agent Account No." =
               CarrierPackingStation."Generic Shipping Agent Acc. No")) OR
             ((ShippingAgent."Shipper Type" = ShippingAgent."Shipper Type"::"4") AND
              (Package."Shipping Agent Account No." =
               CarrierPackingStation."USPS Shipping Agent Acc. No")) OR
             ((ShippingAgent."Shipper Type" = ShippingAgent."Shipper Type"::"5") AND
              (Package."Shipping Agent Account No." =
               CarrierPackingStation."Airborne Shipping Agent Acc No")) OR
             ((ShippingAgent."Shipper Type" = ShippingAgent."Shipper Type"::"6") AND
              (Package."Shipping Agent Account No." =
               CarrierPackingStation."DHL Shipping Agent Acc. No")) OR
             ((ShippingAgent."Shipper Type" = ShippingAgent."Shipper Type"::USPostal) AND
              (Package."Shipping Agent Account No." =
               CarrierPackingStation."USPostal Shipping Agent Acc No"))
          THEN BEGIN
            PackageCount[1,2,1] := PackageCount[1,2,1] + 1;
            PackageValue[1,2,1] := PackageValue[1,2,1] + Package."Calculation Value";
            PackageWeight[1,2,1] := PackageWeight[1,2,1] + Package."Calculation Weight";
            PackageVolume[1,2,1] := PackageVolume[1,2,1] + Package."Calculation Volume";

            PackageCount[ShippingAgent."Shipper Type" + 2,2,1] :=
              PackageCount[ShippingAgent."Shipper Type" + 2,2,1] + 1;
            PackageValue[ShippingAgent."Shipper Type" + 2,2,1] :=
              PackageValue[ShippingAgent."Shipper Type" + 2,2,1] + Package."Calculation Value";
            PackageWeight[ShippingAgent."Shipper Type" + 2,2,1] :=
              PackageWeight[ShippingAgent."Shipper Type" + 2,2,1] + Package."Calculation Weight";
            PackageVolume[ShippingAgent."Shipper Type" + 2,2,1] :=
              PackageVolume[ShippingAgent."Shipper Type" + 2,2,1] + Package."Calculation Volume";
          END;

          PackageCount[1,3,1] := PackageCount[1,3,1] + 1;
          PackageValue[1,3,1] := PackageValue[1,3,1] + Package."Calculation Value";
          PackageWeight[1,3,1] := PackageWeight[1,3,1] + Package."Calculation Weight";
          PackageVolume[1,3,1] := PackageVolume[1,3,1] + Package."Calculation Volume";

          PackageCount[ShippingAgent."Shipper Type" + 2,3,1] :=
            PackageCount[ShippingAgent."Shipper Type" + 2,3,1] + 1;
          PackageValue[ShippingAgent."Shipper Type" + 2,3,1] :=
            PackageValue[ShippingAgent."Shipper Type" + 2,3,1] + Package."Calculation Value";
          PackageWeight[ShippingAgent."Shipper Type" + 2,3,1] :=
            PackageWeight[ShippingAgent."Shipper Type" + 2,3,1] + Package."Calculation Weight";
          PackageVolume[ShippingAgent."Shipper Type" + 2,3,1] :=
            PackageVolume[ShippingAgent."Shipper Type" + 2,3,1] + Package."Calculation Volume";
        UNTIL Package.NEXT = 0;

      PostedPackage.RESET;
      IF DateFilter <> '' THEN
        PostedPackage.SETFILTER("Packing Date",DateFilter);
      IF PostedPackage.FIND('-') THEN
        REPEAT
          IF NOT ShippingAgentTmp.GET(PostedPackage."Shipping Agent Code") THEN BEGIN
            IF NOT ShippingAgent.GET(PostedPackage."Shipping Agent Code") THEN
              CLEAR(ShippingAgent);

            ShippingAgentTmp := ShippingAgent;
            ShippingAgentTmp.INSERT;
          END ELSE
            ShippingAgent := ShippingAgentTmp;

          IF PostedPackage."Closed by Packing Station Code" = PackingStation.Code THEN BEGIN
            PackageCount[1,1,2] := PackageCount[1,1,2] + 1;
            PackageValue[1,1,2] := PackageValue[1,1,2] + PostedPackage."Calculation Value";
            PackageWeight[1,1,2] := PackageWeight[1,1,2] + PostedPackage."Calculation Weight";
            PackageVolume[1,1,2] := PackageVolume[1,1,2] + PostedPackage."Calculation Volume";

            PackageCount[ShippingAgent."Shipper Type" + 2,1,2] :=
              PackageCount[ShippingAgent."Shipper Type" + 2,1,2] + 1;
            PackageValue[ShippingAgent."Shipper Type" + 2,1,2] :=
              PackageValue[ShippingAgent."Shipper Type" + 2,1,2] + PostedPackage."Calculation Value";
            PackageWeight[ShippingAgent."Shipper Type" + 2,1,2] :=
              PackageWeight[ShippingAgent."Shipper Type" + 2,1,2] + PostedPackage."Calculation Weight";
            PackageVolume[ShippingAgent."Shipper Type" + 2,1,2] :=
              PackageVolume[ShippingAgent."Shipper Type" + 2,1,2] + PostedPackage."Calculation Volume";
          END;

          IF ((ShippingAgent."Shipper Type" = ShippingAgent."Shipper Type"::UPS) AND
              (PostedPackage."Shipping Agent Account No." =
               CarrierPackingStation."UPS Shipping Agent Account No.")) OR
             ((ShippingAgent."Shipper Type" = ShippingAgent."Shipper Type"::FEDEX) AND
              (PostedPackage."Shipping Agent Account No." =
               CarrierPackingStation."FedEx Shipping Agent Acc. No.")) OR
             ((ShippingAgent."Shipper Type" = ShippingAgent."Shipper Type"::LTL) AND
              (PostedPackage."Shipping Agent Account No." =
               ShippingAgent."LTL Shipping Agent Account No.")) OR
             ((ShippingAgent."Shipper Type" = ShippingAgent."Shipper Type"::Generic) AND
              (PostedPackage."Shipping Agent Account No." =
               CarrierPackingStation."Generic Shipping Agent Acc. No")) OR
             ((ShippingAgent."Shipper Type" = ShippingAgent."Shipper Type"::"4") AND
              (PostedPackage."Shipping Agent Account No." =
               CarrierPackingStation."USPS Shipping Agent Acc. No")) OR
             ((ShippingAgent."Shipper Type" = ShippingAgent."Shipper Type"::"5") AND
              (PostedPackage."Shipping Agent Account No." =
               CarrierPackingStation."Airborne Shipping Agent Acc No")) OR
             ((ShippingAgent."Shipper Type" = ShippingAgent."Shipper Type"::"6") AND
              (PostedPackage."Shipping Agent Account No." =
               CarrierPackingStation."DHL Shipping Agent Acc. No")) OR
             ((ShippingAgent."Shipper Type" = ShippingAgent."Shipper Type"::USPostal) AND
              (PostedPackage."Shipping Agent Account No." =
               CarrierPackingStation."USPostal Shipping Agent Acc No"))
          THEN BEGIN
            PackageCount[1,2,2] := PackageCount[1,2,2] + 1;
            PackageValue[1,2,2] := PackageValue[1,2,2] + PostedPackage."Calculation Value";
            PackageWeight[1,2,2] := PackageWeight[1,2,2] + PostedPackage."Calculation Weight";
            PackageVolume[1,2,2] := PackageVolume[1,2,2] + PostedPackage."Calculation Volume";

            PackageCount[ShippingAgent."Shipper Type" + 2,2,2] :=
              PackageCount[ShippingAgent."Shipper Type" + 2,2,2] + 1;
            PackageValue[ShippingAgent."Shipper Type" + 2,2,2] :=
              PackageValue[ShippingAgent."Shipper Type" + 2,2,2] + PostedPackage."Calculation Value";
            PackageWeight[ShippingAgent."Shipper Type" + 2,2,2] :=
              PackageWeight[ShippingAgent."Shipper Type" + 2,2,2] + PostedPackage."Calculation Weight";
            PackageVolume[ShippingAgent."Shipper Type" + 2,2,2] :=
              PackageVolume[ShippingAgent."Shipper Type" + 2,2,2] + PostedPackage."Calculation Volume";
          END;

          PackageCount[1,3,2] := PackageCount[1,3,2] + 1;
          PackageValue[1,3,2] := PackageValue[1,3,2] + PostedPackage."Calculation Value";
          PackageWeight[1,3,2] := PackageWeight[1,3,2] + PostedPackage."Calculation Weight";
          PackageVolume[1,3,2] := PackageVolume[1,3,2] + PostedPackage."Calculation Volume";

          PackageCount[ShippingAgent."Shipper Type" + 2,3,2] :=
            PackageCount[ShippingAgent."Shipper Type" + 2,3,2] + 1;
          PackageValue[ShippingAgent."Shipper Type" + 2,3,2] :=
            PackageValue[ShippingAgent."Shipper Type" + 2,3,2] + PostedPackage."Calculation Value";
          PackageWeight[ShippingAgent."Shipper Type" + 2,3,2] :=
            PackageWeight[ShippingAgent."Shipper Type" + 2,3,2] + PostedPackage."Calculation Weight";
          PackageVolume[ShippingAgent."Shipper Type" + 2,3,2] :=
            PackageVolume[ShippingAgent."Shipper Type" + 2,3,2] + PostedPackage."Calculation Volume";
        UNTIL PostedPackage.NEXT = 0;

      FOR i := 1 TO ARRAYLEN(DisplayValue,1) DO BEGIN
        DisplayValue[i,1] :=
          STRSUBSTNO(
            '%1 / %2',
            PackageCount[i,1,1] + PackageCount[i,1,2],PackageCount[i,3,1] + PackageCount[i,3,2]);

        DisplayValue[i,2] :=
          STRSUBSTNO(
            '%1 / %2',
            FORMAT(PackageValue[i,1,1] + PackageValue[i,1,2],0,'<Integer thousand><decimals,3>'),
            FORMAT(PackageValue[i,3,1] + PackageValue[i,3,2],0,'<Integer thousand><decimals,3>'));

        DisplayValue[i,3] :=
          STRSUBSTNO(
            '%1 / %2',
            PackageWeight[i,1,1] + PackageWeight[i,1,2],PackageWeight[i,3,1] + PackageWeight[i,3,2]);

        DisplayValue[i,4] :=
          STRSUBSTNO(
            '%1 / %2',
            PackageCount[i,2,1] + PackageCount[i,2,2],PackageCount[i,3,1] + PackageCount[i,3,2]);

        DisplayValue[i,5] :=
          STRSUBSTNO(
            '%1 / %2',
            FORMAT(PackageValue[i,2,1] + PackageValue[i,2,2],0,'<Integer thousand><decimals,3>'),
            FORMAT(PackageValue[i,3,1] + PackageValue[i,3,2],0,'<Integer thousand><decimals,3>'));

        DisplayValue[i,6] :=
          STRSUBSTNO(
            '%1 / %2',
            PackageWeight[i,2,1] + PackageWeight[i,2,2],PackageWeight[i,3,1] + PackageWeight[i,3,2]);
      END;
    END;

    PROCEDURE CreateMiscPackage@56();
    VAR
      Package@1000000000 : Record 14000701;
    BEGIN
      TestInitialized;
      PAGE.RUNMODAL(PAGE::"Miscellaneous Package");
    END;

    PROCEDURE CreateManifest@13();
    VAR
      ShippingAgent@1240030001 : Record 291;
      ShipperTypeMgt@1240030000 : Codeunit 14000711;
    BEGIN
      TestInitialized;
      IF NOT (PAGE.RUNMODAL(0,ShippingAgent) = ACTION::LookupOK) THEN
        EXIT;

      ShipperTypeMgt.Cod14000702CreateManifest(PackingStation,ShippingAgent);
    END;

    PROCEDURE MultiDocPacking@14(SalesSetup@1240030000 : Record 311;VAR PackingControl@1240030001 : Record 14000717;UseLookup@1240030002 : Boolean) : Boolean;
    VAR
      SalesHeader@1240030003 : Record 36;
      PurchHeader@1240030004 : Record 38;
      TransferHeader@1240030010 : Record 5740;
      PackingControl2@1240030005 : Record 14000717;
      Package@1240030006 : Record 14000701;
      EShipInput@1240030012 : Record 14000728;
      EShipEnterDocumentNo@1240030013 : Page 14050112;
      NewOrderNo@1240030009 : Code[20];
    BEGIN
      TestInitialized;
      Package.RESET;
      Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Package.SETRANGE("Source Type",PackingControl."Source Type");
      Package.SETRANGE("Source Subtype",PackingControl."Source Subtype");
      IF PackingControl."Multi Document Package" THEN
        Package.SETFILTER("Source ID",PackingControl."Multi Document No.")
      ELSE
        Package.SETRANGE("Source ID",PackingControl."Source ID");
      Package.SETRANGE(Closed,FALSE);
      IF ShippingSetup."Location Packing" THEN
        Package.SETRANGE("Location Code",PackingStation."Location Code");
      IF Package.FIND('-') THEN BEGIN
          PackingControl."Error Message" := Text090;
          EXIT(FALSE);
        END;

      IF NOT UseLookup THEN BEGIN
        CLEAR(EShipInput);
        EShipInput."Source Type" := PackingControl."Source Type";
        EShipInput."Source Subtype" := PackingControl."Source Subtype";
        EShipInput."Source ID" := PackingControl."Source ID";
        EShipInput."Multi Document No." := PackingControl."Posted Source ID";

        CLEAR(EShipEnterDocumentNo);
        EShipEnterDocumentNo.LOOKUPMODE(TRUE);
        EShipEnterDocumentNo.SetEShipInput(EShipInput);
        IF EShipEnterDocumentNo.RUNMODAL = ACTION::LookupOK THEN BEGIN
        EShipEnterDocumentNo.GetEShipInput(EShipInput);
        NewOrderNo := EShipInput."Document No.";
        IF (NewOrderNo = '') OR (COPYSTR(NewOrderNo,1,2) = '//') THEN BEGIN
          PackingControl."Error Message" := Text092;
          EXIT(FALSE);
        END;
        END ELSE BEGIN
          PackingControl."Error Message" := Text092;
          EXIT(FALSE);
        END;
      END;

      CASE PackingControl."Source Type" OF
        DATABASE::"Sales Header":
          BEGIN
            IF UseLookup THEN BEGIN
              SalesHeader.RESET;
              SalesHeader.SETRANGE("Document Type",PackingControl."Source Subtype");
              IF PackingControl."Multi Document Package" THEN
                SalesHeader.SETFILTER("No.",PackingControl.ReverseMultiDocNoFilter)
              ELSE
                SalesHeader.SETFILTER("No.",'<>%1',PackingControl."Source ID");
              SalesHeader.SETRANGE("Sell-to Customer No.",PackingControl."Ship-to No.");
              SalesHeader.SETRANGE("Ship-to Code",PackingControl."Ship-to Code");
              SalesHeader.SETRANGE("Ship-to Name",PackingControl."Ship-to Name");
              SalesHeader.SETRANGE("Ship-to Address",PackingControl."Ship-to Address");
              SalesHeader.SETRANGE("Ship-to Address 2",PackingControl."Ship-to Address 2");
              SalesHeader.SETRANGE("Ship-to City",PackingControl."Ship-to City");
              SalesHeader.SETRANGE("Ship-to Contact",PackingControl."Ship-to Contact");
              SalesHeader.SETRANGE("Ship-to Post Code",PackingControl."Ship-to ZIP Code");
              SalesHeader.SETRANGE("Ship-to County",PackingControl."Ship-to State");
              SalesHeader.SETRANGE("Ship-to Country/Region Code",PackingControl."Ship-to Country Code");
              SalesHeader.SETRANGE("Shipping Agent Code",PackingControl."Shipping Agent Code");
              SalesHeader.SETRANGE("E-Ship Agent Service",PackingControl."E-Ship Agent Service");
              SalesHeader.SETRANGE("Residential Delivery",PackingControl."Residential Delivery");
              SalesHeader.SETRANGE("COD Payment",PackingControl."COD Payment");
              SalesHeader.SETRANGE("World Wide Service",PackingControl."World Wide Service");
              SalesHeader.SETRANGE("Blind Shipment",PackingControl."Blind Shipment");
              SalesHeader.SETRANGE("Double Blind Shipment",PackingControl."Double Blind Shipment");
              SalesHeader.SETRANGE(
                "Double Blind Ship-from Cust No",PackingControl."Double Blind Ship-from Cust No");
              SalesHeader.SETRANGE("COD Cashiers Check",PackingControl."COD Cashiers Check");
              SalesHeader.SETRANGE("Ship-for Code",PackingControl."Ship-for Code");
              SalesHeader.SETRANGE("Third Party Ship. Account No.",PackingControl."Third Party Ship. Account No.");
              IF NOT SalesHeader.FIND('-') THEN BEGIN
                PackingControl."Error Message" := Text093;
                EXIT(FALSE);
              END;

              IF NOT (PAGE.RUNMODAL(0,SalesHeader) = ACTION::LookupOK) THEN BEGIN
                PackingControl."Error Message" := Text092;
                EXIT(FALSE);
              END ELSE
                NewOrderNo := SalesHeader."No.";
            END;

            IF NOT SalesHeader.GET(PackingControl."Source Subtype",NewOrderNo) THEN BEGIN
              PackingControl."Error Message" :=
                STRSUBSTNO(
                  Text094,
                  PackingControl.FormatSource(
                    PackingControl."Source Type",PackingControl."Source Subtype",
                    NewOrderNo));
              EXIT(FALSE);
            END;

            IF SalesSetup."Ext. Doc. No. Mandatory" THEN
              IF SalesHeader."External Document No." = '' THEN BEGIN
                PackingControl."Error Message" := Text095;
                EXIT;
            END;

            IF NOT (SalesHeader.Status = SalesHeader.Status::Released) THEN BEGIN
              PackingControl."Error Message" := Text096;
              EXIT;
            END;

            PackingControl2.TransferFromSalesHeader(SalesHeader);
          END;
        DATABASE::"Purchase Header":
          BEGIN
            IF UseLookup THEN BEGIN
              PurchHeader.RESET;
              PurchHeader.SETRANGE("Document Type",PackingControl."Source Subtype");
              IF PackingControl."Multi Document Package" THEN
                PurchHeader.SETFILTER("No.",PackingControl.ReverseMultiDocNoFilter)
              ELSE
                PurchHeader.SETFILTER("No.",'<>%1',PackingControl."Source ID");
              PurchHeader.SETRANGE("Buy-from Vendor No.",PackingControl."Ship-to No.");
              PurchHeader.SETRANGE("Order Address Code",PackingControl."Ship-to Code");
              PurchHeader.SETRANGE("Buy-from Vendor Name",PackingControl."Ship-to Name");
              PurchHeader.SETRANGE("Buy-from Address",PackingControl."Ship-to Address");
              PurchHeader.SETRANGE("Buy-from Address 2",PackingControl."Ship-to Address 2");
              PurchHeader.SETRANGE("Buy-from City",PackingControl."Ship-to City");
              PurchHeader.SETRANGE("Buy-from Contact",PackingControl."Ship-to Contact");
              PurchHeader.SETRANGE("Buy-from Post Code",PackingControl."Ship-to ZIP Code");
              PurchHeader.SETRANGE("Buy-from County",PackingControl."Ship-to State");
              PurchHeader.SETRANGE("Buy-from Country/Region Code",PackingControl."Ship-to Country Code");
              PurchHeader.SETRANGE("E-Ship Agent Code",PackingControl."Shipping Agent Code");
              PurchHeader.SETRANGE("E-Ship Agent Service",PackingControl."E-Ship Agent Service");
              PurchHeader.SETRANGE("Residential Delivery",PackingControl."Residential Delivery");
              PurchHeader.SETRANGE("COD Payment",PackingControl."COD Payment");
              PurchHeader.SETRANGE("World Wide Service",PackingControl."World Wide Service");
              PurchHeader.SETRANGE("COD Cashiers Check",PackingControl."COD Cashiers Check");
              IF NOT PurchHeader.FIND('-') THEN BEGIN
                PackingControl."Error Message" := Text093;
                EXIT(FALSE);
              END;

              IF NOT (PAGE.RUNMODAL(0,PurchHeader) = ACTION::LookupOK) THEN BEGIN
                PackingControl."Error Message" := Text092;
                EXIT(FALSE);
              END ELSE
                NewOrderNo := PurchHeader."No.";
            END;

            IF NOT PurchHeader.GET(PackingControl."Source Subtype",NewOrderNo) THEN BEGIN
              PackingControl."Error Message" :=
                STRSUBSTNO(
                  Text094,
                  PackingControl.FormatSource(
                    PackingControl."Source Type",PackingControl."Source Subtype",
                    NewOrderNo));
              EXIT(FALSE);
            END;

            IF NOT (PurchHeader.Status = PurchHeader.Status::Released) THEN BEGIN
              PackingControl."Error Message" := Text096;
              EXIT;
            END;

            PackingControl2.TransferFromPurchHeader(PurchHeader);
          END;
        DATABASE::"Transfer Header":
          BEGIN
            IF UseLookup THEN BEGIN
              TransferHeader.RESET;
              IF PackingControl."Multi Document Package" THEN
                TransferHeader.SETFILTER("No.",PackingControl.ReverseMultiDocNoFilter)
              ELSE
                TransferHeader.SETFILTER("No.",'<>%1',PackingControl."Source ID");
              TransferHeader.SETRANGE("Transfer-to Code",PackingControl."Ship-to No.");
              TransferHeader.SETRANGE("Transfer-to Name",PackingControl."Ship-to Name");
              TransferHeader.SETRANGE("Transfer-to Address",PackingControl."Ship-to Address");
              TransferHeader.SETRANGE("Transfer-to Address 2",PackingControl."Ship-to Address 2");
              TransferHeader.SETRANGE("Transfer-to City",PackingControl."Ship-to City");
              TransferHeader.SETRANGE("Transfer-to Contact",PackingControl."Ship-to Contact");
              TransferHeader.SETRANGE("Transfer-to Post Code",PackingControl."Ship-to ZIP Code");
              TransferHeader.SETRANGE("Transfer-to County",PackingControl."Ship-to State");
              TransferHeader.SETRANGE("Trsf.-to Country/Region Code",PackingControl."Ship-to Country Code");
              TransferHeader.SETRANGE("Shipping Agent Code",PackingControl."Shipping Agent Code");
              TransferHeader.SETRANGE("E-Ship Agent Service",PackingControl."E-Ship Agent Service");
              TransferHeader.SETRANGE("Residential Delivery",PackingControl."Residential Delivery");
              TransferHeader.SETRANGE("World Wide Service",PackingControl."World Wide Service");
              IF NOT TransferHeader.FIND('-') THEN BEGIN
                PackingControl."Error Message" := Text093;
                EXIT(FALSE);
              END;

              IF NOT (PAGE.RUNMODAL(0,TransferHeader) = ACTION::LookupOK) THEN BEGIN
                PackingControl."Error Message" := Text092;
                EXIT(FALSE);
              END ELSE
                NewOrderNo := TransferHeader."No.";
            END;

            IF NOT TransferHeader.GET(NewOrderNo) THEN BEGIN
              PackingControl."Error Message" :=
                STRSUBSTNO(
                  Text094,
                  PackingControl.FormatSource(
                    PackingControl."Source Type",PackingControl."Source Subtype",
                    NewOrderNo));
              EXIT(FALSE);
            END;

            IF NOT (TransferHeader.Status = TransferHeader.Status::Released) THEN BEGIN
              PackingControl."Error Message" := Text096;
              EXIT;
            END;

            PackingControl2.TransferFromTransferHeader(TransferHeader);
          END;
        ELSE
          PackingControl.ErrorUnknownSourceType2;
      END;

      IF NOT PackingControl2.TestReleased2(FALSE) THEN BEGIN
        PackingControl."Error Message" :=
          STRSUBSTNO(Text097,PackingControl2.FormatSource2);
        EXIT(FALSE);
      END;

      IF NOT ShippingSetup."Disable Export Documentation" THEN
        ExportDocMgt.CheckExportDocMultiDoc(
          PackingControl,PackingControl2."Source ID",ShippingSetup,PackingStation);

      Package.RESET;
      Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Package.SETRANGE("Source Type",PackingControl2."Source Type");
      Package.SETRANGE("Source Subtype",PackingControl2."Source Subtype");
      Package.SETFILTER("Source ID",PackingControl2."Source ID");
      Package.SETRANGE(Closed,FALSE);
      IF ShippingSetup."Location Packing" THEN
        Package.SETRANGE("Location Code",PackingStation."Location Code");
      IF Package.FIND('-') THEN BEGIN
        PackingControl."Error Message" :=
          STRSUBSTNO(Text098,PackingControl2.FormatSource2);
        EXIT(FALSE);
      END;

      IF (PackingControl."Multi Document No." = PackingControl2."Source ID") OR
         (STRPOS(PackingControl."Multi Document No.",'|' + PackingControl2."Source ID") <> 0) OR
         (STRPOS(PackingControl."Multi Document No.",PackingControl2."Source ID" + '|') <> 0)
      THEN BEGIN
        PackingControl."Error Message" := STRSUBSTNO(Text099);
        EXIT(FALSE);
      END;

      IF PackingControl2."Ship-to No." <> PackingControl."Ship-to No." THEN BEGIN
        PackingControl."Error Message" :=
          STRSUBSTNO(
            Text100,PackingControl2.FIELDNAME("Ship-to No."),
            PackingControl."Ship-to No.");
        EXIT(FALSE);
      END;
      IF PackingControl2."Ship-to Code" <> PackingControl."Ship-to Code" THEN BEGIN
        PackingControl."Error Message" :=
          STRSUBSTNO(
            Text100,PackingControl2.FIELDNAME("Ship-to Code"),PackingControl."Ship-to Code");
        EXIT(FALSE);
      END;
      IF PackingControl2."Ship-to Name" <> PackingControl."Ship-to Name" THEN BEGIN
        PackingControl."Error Message" :=
          STRSUBSTNO(
            Text100,PackingControl2.FIELDNAME("Ship-to Name"),PackingControl."Ship-to Name");
        EXIT(FALSE);
      END;
      IF PackingControl2."Ship-to Address" <> PackingControl."Ship-to Address" THEN BEGIN
        PackingControl."Error Message" :=
          STRSUBSTNO(
            Text100,PackingControl2.FIELDNAME("Ship-to Address"),
            PackingControl."Ship-to Address");
        EXIT(FALSE);
      END;
      IF PackingControl2."Ship-to Address 2" <> PackingControl."Ship-to Address 2" THEN BEGIN
        PackingControl."Error Message" :=
          STRSUBSTNO(
            Text100,PackingControl2.FIELDNAME("Ship-to Address 2"),
            PackingControl."Ship-to Address 2");
        EXIT(FALSE);
      END;
      IF PackingControl2."Ship-to City" <> PackingControl."Ship-to City" THEN BEGIN
        PackingControl."Error Message" :=
          STRSUBSTNO(
            Text100,PackingControl2.FIELDNAME("Ship-to City"),PackingControl."Ship-to City");
        EXIT(FALSE);
      END;
      IF PackingControl2."Ship-to Contact" <> PackingControl."Ship-to Contact" THEN BEGIN
        PackingControl."Error Message" :=
          STRSUBSTNO(
            Text100,PackingControl2.FIELDNAME("Ship-to Contact"),
            PackingControl."Ship-to Contact");
        EXIT(FALSE);
      END;
      IF PackingControl2."Ship-to ZIP Code" <> PackingControl."Ship-to ZIP Code" THEN BEGIN
        PackingControl."Error Message" :=
          STRSUBSTNO(
            Text100,PackingControl2.FIELDNAME("Ship-to ZIP Code"),
            PackingControl."Ship-to ZIP Code");
        EXIT(FALSE);
      END;
      IF PackingControl2."Ship-to State" <> PackingControl."Ship-to State" THEN BEGIN
        PackingControl."Error Message" :=
          STRSUBSTNO(
            Text100,PackingControl2.FIELDNAME("Ship-to State"),PackingControl."Ship-to State");
        EXIT(FALSE);
      END;
      IF PackingControl2."Ship-to Country Code" <> PackingControl."Ship-to Country Code" THEN BEGIN
        PackingControl."Error Message" :=
          STRSUBSTNO(
            Text100,PackingControl2.FIELDNAME("Ship-to Country Code"),
            PackingControl."Ship-to Country Code");
        EXIT(FALSE);
      END;
      IF PackingControl2."Shipping Agent Code" <> PackingControl."Shipping Agent Code" THEN BEGIN
        PackingControl."Error Message" :=
          STRSUBSTNO(
            Text100,PackingControl2.FIELDNAME("Shipping Agent Code"),
            PackingControl."Shipping Agent Code");
        EXIT(FALSE);
      END;
      IF PackingControl2."E-Ship Agent Service" <> PackingControl."E-Ship Agent Service" THEN BEGIN
        PackingControl."Error Message" :=
          STRSUBSTNO(
            Text100,PackingControl2.FIELDNAME("E-Ship Agent Service"),
            PackingControl."E-Ship Agent Service");
        EXIT(FALSE);
      END;
      IF PackingControl2."Residential Delivery" <> PackingControl."Residential Delivery" THEN BEGIN
        PackingControl."Error Message" :=
          STRSUBSTNO(
            Text100,PackingControl2.FIELDNAME("Residential Delivery"),
            PackingControl."Residential Delivery");
        EXIT(FALSE);
      END;
      IF PackingControl2."COD Payment" <> PackingControl."COD Payment" THEN BEGIN
        PackingControl."Error Message" :=
          STRSUBSTNO(
            Text100,PackingControl2.FIELDNAME("COD Payment"),PackingControl."COD Payment");
        EXIT(FALSE);
      END;
      IF PackingControl2."World Wide Service" <> PackingControl."World Wide Service" THEN BEGIN
        PackingControl."Error Message" :=
          STRSUBSTNO(
            Text100,PackingControl2.FIELDNAME("World Wide Service"),
            PackingControl."World Wide Service");
        EXIT(FALSE);
      END;
      IF PackingControl2."Blind Shipment" <> PackingControl."Blind Shipment" THEN BEGIN
        PackingControl."Error Message" :=
          STRSUBSTNO(
            Text100,PackingControl2.FIELDNAME("Blind Shipment"),PackingControl."Blind Shipment");
        EXIT(FALSE);
      END;
      IF PackingControl2."Double Blind Shipment" <> PackingControl."Double Blind Shipment" THEN BEGIN
        PackingControl."Error Message" :=
          STRSUBSTNO(
            Text100,PackingControl2.FIELDNAME("Double Blind Shipment"),
            PackingControl."Double Blind Shipment");
        EXIT(FALSE);
      END;
      IF PackingControl2."Double Blind Ship-from Cust No" <>
         PackingControl."Double Blind Ship-from Cust No"
      THEN BEGIN
        PackingControl."Error Message" :=
          STRSUBSTNO(
            Text100,PackingControl2.FIELDNAME("Double Blind Ship-from Cust No"),
            PackingControl."Double Blind Ship-from Cust No");
        EXIT(FALSE);
      END;
      IF PackingControl2."COD Cashiers Check" <> PackingControl."COD Cashiers Check" THEN BEGIN
        PackingControl."Error Message" :=
          STRSUBSTNO(
            Text100,PackingControl2.FIELDNAME("COD Cashiers Check"),
            PackingControl."COD Cashiers Check");
        EXIT(FALSE);
      END;
      IF PackingControl2."Ship-for Code" <> PackingControl."Ship-for Code" THEN BEGIN
        PackingControl."Error Message" :=
          STRSUBSTNO(
            Text100,PackingControl2.FIELDNAME("Ship-for Code"),PackingControl."Ship-for Code");
        EXIT(FALSE);
      END;
      IF PackingControl2."Bill of Lading No." <> PackingControl."Bill of Lading No." THEN BEGIN
        PackingControl."Error Message" :=
          STRSUBSTNO(
            Text100,PackingControl2.FIELDNAME("Bill of Lading No."),
            PackingControl."Bill of Lading No.");
        EXIT(FALSE);
      END;

      IF PackingStation."Reset Order Qty. When Opened" THEN
        ResetQtyToShip(PackingControl2);

      IF PackingStation."Show Order Comments if Exists" THEN
        ViewDocumentComments(PackingControl2,TRUE);

      IF PackingStation."Show Warehouse Stat. on Open" THEN
        ViewWarehouseStatistics(PackingControl2);

      Shipping.CombineMultiDocument(
        PackingControl."Source Type",PackingControl."Source Subtype",
        PackingControl."Source ID",PackingControl2."Source ID",
        PackingControl."Multi Document No.",PackingControl."Multi Document Package");

      EXIT(TRUE);
    END;

    PROCEDURE SetStandardSetupOptionPage@18(VAR Package@1000000000 : Record 14000701;StandardOptionNo@1000000001 : Code[20]);
    BEGIN
      TestInitialized;
      Package.SetStandardSetupOptionPage(StandardOptionNo);
    END;

    PROCEDURE PrintStandardSetupOptionReport@57(CurrentPackingControl@1240030000 : Record 14000717;VAR CurrentPackage@1240030001 : Record 14000701;VAR PackingControl@1240030002 : Record 14000717;StandardOptionSetup@1240030003 : Record 14000716) : Boolean;
    VAR
      SalesHeader@1240030004 : Record 36;
      PurchHeader@1240030006 : Record 38;
      TransferHeader@1240030007 : Record 5740;
      Package@1240030005 : Record 14000701;
    BEGIN
      TestInitialized;
      IF StandardOptionSetup."Print Report ID" = 0 THEN
        EXIT;

      CASE StandardOptionSetup."Filter Report on" OF
        StandardOptionSetup."Filter Report on"::Package:
          BEGIN
            IF CurrentPackage."No." = '' THEN BEGIN
              PackingControl."Error Message" := Text101;
              EXIT(FALSE);
            END;

            Package.RESET;
            Package := CurrentPackage;
            Package.SETRECFILTER;
            REPORT.RUNMODAL(
              StandardOptionSetup."Print Report ID",StandardOptionSetup."Show Request Form",
              StandardOptionSetup."System Printer",Package);
          END;
        StandardOptionSetup."Filter Report on"::Document:
          BEGIN
            IF CurrentPackingControl."Source ID" = '' THEN BEGIN
              PackingControl."Error Message" := Text102;
              EXIT(FALSE);
            END;

            CASE PackingControl."Source Type" OF
              DATABASE::"Sales Header":
                BEGIN
                  SalesHeader.RESET;
                  SalesHeader.SETRANGE("Document Type",CurrentPackingControl."Source Subtype");
                  IF PackingControl."Multi Document Package" THEN
                    SalesHeader.SETFILTER("No.",PackingControl."Multi Document No.")
                  ELSE
                    SalesHeader.SETRANGE("No.",CurrentPackingControl."Source ID");
                  REPORT.RUNMODAL(
                    StandardOptionSetup."Print Report ID",StandardOptionSetup."Show Request Form",
                    StandardOptionSetup."System Printer",SalesHeader);
                END;
              DATABASE::"Purchase Header":
                BEGIN
                  PurchHeader.RESET;
                  PurchHeader.SETRANGE("Document Type",CurrentPackingControl."Source Subtype");
                  IF PackingControl."Multi Document Package" THEN
                    PurchHeader.SETFILTER("No.",PackingControl."Multi Document No.")
                  ELSE
                    PurchHeader.SETRANGE("No.",CurrentPackingControl."Source ID");
                  REPORT.RUNMODAL(
                    StandardOptionSetup."Print Report ID",StandardOptionSetup."Show Request Form",
                    StandardOptionSetup."System Printer",PurchHeader);
                END;
              DATABASE::"Transfer Header":
                BEGIN
                  TransferHeader.RESET;
                  IF PackingControl."Multi Document Package" THEN
                    TransferHeader.SETFILTER("No.",PackingControl."Multi Document No.")
                  ELSE
                    TransferHeader.SETRANGE("No.",CurrentPackingControl."Source ID");
                  REPORT.RUNMODAL(
                    StandardOptionSetup."Print Report ID",StandardOptionSetup."Show Request Form",
                    StandardOptionSetup."System Printer",TransferHeader);
                END;
              ELSE
                PackingControl.ErrorUnknownSourceType2;
            END;
          END;
        ELSE
          REPORT.RUNMODAL(
            StandardOptionSetup."Print Report ID",StandardOptionSetup."Show Request Form",
            StandardOptionSetup."System Printer");
      END;

      EXIT(TRUE);
    END;

    PROCEDURE ChangeShippingAgent@22(BillOfLading@1240030000 : Record 14000822;VAR PackingControl@1240030001 : Record 14000717;PrintLabel@1240030002 : Boolean);
    VAR
      Package2@1000000006 : Record 14000701;
      Package3@1000000007 : Record 14000701;
      PackageTmp@1000000008 : TEMPORARY Record 14000701;
      BillOfLadingLine@1240030003 : Record 14000823;
    BEGIN
      TestInitialized;
      WITH PackingControl DO BEGIN
        TESTFIELD("Shipping Agent Code");
        TESTFIELD("E-Ship Agent Service");

        IF PackingControl.Prepack THEN BEGIN
          ShippingSetup.TESTFIELD("Prepack Shipping Agent Code");
          ShippingSetup.TESTFIELD("Prepack Shipping Agent Service");
        END;

        CLEAR(BillOfLadingLine);
        BillOfLadingLine.SETCURRENTKEY(Type,"No.",Closed,"Location Code");
        BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
        BillOfLadingLine.SETRANGE("No.",PackingControl."Source ID");
        BillOfLadingLine.SETRANGE(Closed,FALSE);
        IF ShippingSetup."Location Packing" THEN
          BillOfLadingLine.SETRANGE("Location Code",PackingStation."Location Code");
        BillOfLadingLine.SETRANGE("Source Type",PackingControl."Source Type");
        BillOfLadingLine.SETRANGE("Source Subtype",PackingControl."Source Subtype");
        BillOfLadingLine.SETRANGE("Source ID",PackingControl."Source ID");
        IF NOT BillOfLadingLine.FIND('-') THEN
          ;

        PackageTmp.DELETEALL;

        Package2.RESET;
        Package2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
        Package2.SETRANGE("Source Type",PackingControl."Source Type");
        Package2.SETRANGE("Source Subtype",PackingControl."Source Subtype");
        IF PackingControl."Multi Document Package" THEN
          Package2.SETFILTER("Source ID",PackingControl."Multi Document No.")
        ELSE
          Package2.SETRANGE("Source ID","Source ID");
        Package2.SETRANGE("Exist in Other Package",FALSE);
        IF Package2.FIND('+') THEN
          REPEAT
            IF (PackingControl.Prepack AND
                ((Package2."Shipping Agent Code" <> ShippingSetup."Prepack Shipping Agent Code") OR
                 (Package2."Shipping Agent Service" <> ShippingSetup."Prepack Shipping Agent Service"))) OR
               (NOT PackingControl.Prepack AND
                ((BillOfLadingLine."Bill of Lading No." = '') OR
                 NOT ShippingSetup."Use Shipping Agent from BOL") AND
                ((Package2."Shipping Agent Code" <> "Shipping Agent Code") OR
                 (Package2."Shipping Agent Service" <> "E-Ship Agent Service"))) OR
               (NOT PackingControl.Prepack AND
                (BillOfLadingLine."Bill of Lading No." <> '') AND
                ShippingSetup."Use Shipping Agent from BOL" AND
                ((Package2."Shipping Agent Code" <> BillOfLading."Shipping Agent Code") OR
                 (Package2."Shipping Agent Service" <> BillOfLading."Shipping Agent Service")))
            THEN BEGIN
              Package2.TESTFIELD(Closed);

              IF Package2."Original Package No." <> '' THEN
                Package3.GET(Package2."Original Package No.")
              ELSE
                Package3 := Package2;
              PackageTmp := Package3;
              PackageTmp.INSERT;

              Shipping.OpenPackage(Package2);
            END;
          UNTIL Package2.NEXT(-1) = 0;

        IF PackageTmp.FIND('-') THEN
          REPEAT
            Package2.GET(PackageTmp."No.");
            IF PackingControl.Prepack THEN BEGIN
              Package2.VALIDATE("Shipping Agent Code",ShippingSetup."Prepack Shipping Agent Code");
              Package2.VALIDATE("Shipping Agent Service",ShippingSetup."Prepack Shipping Agent Service");
            END ELSE BEGIN
              IF (BillOfLadingLine."Bill of Lading No." <> '') AND
                 ShippingSetup."Use Shipping Agent from BOL"
              THEN BEGIN
                Package2.VALIDATE("Shipping Agent Code",BillOfLading."Shipping Agent Code");
                Package2.VALIDATE("Shipping Agent Service",BillOfLading."Shipping Agent Service");
              END ELSE BEGIN
                Package2.VALIDATE("Shipping Agent Code","Shipping Agent Code");
                Package2.VALIDATE("Shipping Agent Service","E-Ship Agent Service");
              END;
            END;

            Package2."No AES Required" := PackingControl."No AES Required";
            IF PackingControl."Export Document No." <> '' THEN
              Package2."Export Document No." := PackingControl."Export Document No.";

            Package2.MODIFY(TRUE);

            Shipping.ClosePackage(Package2,PrintLabel);
          UNTIL PackageTmp.NEXT = 0;
      END;
    END;

    PROCEDURE CreateBillOfLading@25(VAR PackingControl@1240030000 : Record 14000717) : Boolean;
    VAR
      SalesHeader@1240030001 : Record 36;
      PurchHeader@1240030002 : Record 38;
      TransferHeader@1240030010 : Record 5740;
      BillOfLading@1240030003 : Record 14000822;
      PackingRule@1240030004 : Record 14000715;
      BillOfLadingLine@1240030005 : Record 14000823;
      BillOfLadingLine2@1240030006 : Record 14000823;
      BillOfLadingWorksheetMgt@1240030008 : Codeunit 14000822;
      CreateNewBillOfLading@1240030009 : Boolean;
    BEGIN
      TestInitialized;
      CLEAR(BillOfLadingLine);
      BillOfLadingLine.SETCURRENTKEY(Type,"No.",Closed,"Location Code");
      BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
      BillOfLadingLine.SETRANGE("No.",PackingControl."Source ID");
      BillOfLadingLine.SETRANGE(Closed,FALSE);
      IF ShippingSetup."Location Packing" THEN
        BillOfLadingLine.SETRANGE("Location Code",PackingStation."Location Code");
      BillOfLadingLine.SETRANGE("Source Type",PackingControl."Source Type");
      BillOfLadingLine.SETRANGE("Source Subtype",PackingControl."Source Subtype");
      BillOfLadingLine.SETRANGE("Source ID",PackingControl."Source ID");
      IF NOT BillOfLadingLine.FIND('-') THEN
        ;

      IF BillOfLadingLine."Bill of Lading No." = '' THEN BEGIN
        PackingRule.GetPackingRule(
          PackingControl."Ship-to Type",PackingControl."Ship-to No.",PackingControl."Ship-to Code");

        CreateNewBillOfLading := TRUE;
        IF PackingRule."Add to Open Bill of Lading" THEN BEGIN
          BillOfLading.RESET;
          BillOfLading.SETCURRENTKEY(Released);
          BillOfLading.SETRANGE(Released,FALSE);
          BillOfLading.SETRANGE("Ship-to Type",PackingControl."Ship-to Type");
          BillOfLading.SETRANGE("Ship-to No.",PackingControl."Ship-to No.");
          BillOfLading.SETRANGE("Ship-to Code",PackingControl."Ship-to Code");
          IF ShippingSetup."Location Packing" THEN
            BillOfLading.SETRANGE("Location Code",PackingStation."Location Code");
          IF BillOfLading.FIND('-') THEN BEGIN
            CASE PackingControl."Source Type" OF
              DATABASE::"Sales Header":
                BEGIN
                  IF PackingControl."Multi Document Package" THEN BEGIN
                    SalesHeader.RESET;
                    SalesHeader.SETRANGE("Document Type",PackingControl."Source Subtype");
                    SalesHeader.SETFILTER("No.",PackingControl."Multi Document No.");
                    SalesHeader.FIND('-');
                    REPEAT
                      CLEAR(BillOfLadingLine2);
                      BillOfLadingLine2.SETCURRENTKEY(Type,"No.",Closed,"Location Code");
                      BillOfLadingLine2.SETRANGE(Type,BillOfLadingLine2.Type::Order);
                      BillOfLadingLine2.SETRANGE("No.",SalesHeader."No.");
                      BillOfLadingLine2.SETRANGE(Closed,FALSE);
                      IF ShippingSetup."Location Packing" THEN
                        BillOfLadingLine2.SETRANGE("Location Code",PackingStation."Location Code");
                      BillOfLadingLine2.SETRANGE("Source Type",PackingControl."Source Type");
                      BillOfLadingLine2.SETRANGE("Source Subtype",SalesHeader."Document Type");
                      BillOfLadingLine2.SETRANGE("Source ID",SalesHeader."No.");
                      IF NOT BillOfLadingLine2.FIND('-') THEN
                        ;
                      IF BillOfLadingLine2."Bill of Lading No." <> '' THEN
                        IF BillOfLadingLine."Bill of Lading No." <> BillOfLadingLine2."Bill of Lading No." THEN
                          ERROR(
                            Text103,
                            BillOfLadingLine."Bill of Lading No.",
                            SalesHeader."Document Type",SalesHeader."No.");
                      BillOfLadingWorksheetMgt.AddSalesHeader(
                        BillOfLading,SalesHeader,PackingStation,ShippingSetup,TRUE);
                    UNTIL SalesHeader.NEXT = 0;
                  END ELSE BEGIN
                    SalesHeader.GET(PackingControl."Source Subtype",PackingControl."Source ID");
                    BillOfLadingWorksheetMgt.AddSalesHeader(
                      BillOfLading,SalesHeader,PackingStation,ShippingSetup,TRUE);
                  END;
                  SalesHeader.GET(PackingControl."Source Subtype",PackingControl."Source ID");
                  BillOfLadingLine2.SETCURRENTKEY(Type,"No.",Closed,"Location Code");
                  BillOfLadingLine2.SETRANGE(Type,BillOfLadingLine2.Type::Order);
                  BillOfLadingLine2.SETRANGE("No.",SalesHeader."No.");
                  BillOfLadingLine2.SETRANGE(Closed,FALSE);
                  IF ShippingSetup."Location Packing" THEN
                    BillOfLadingLine2.SETRANGE("Location Code",PackingStation."Location Code");
                  BillOfLadingLine2.SETRANGE("Source Type",PackingControl."Source Type");
                  BillOfLadingLine2.SETRANGE("Source Subtype",SalesHeader."Document Type");
                  BillOfLadingLine2.SETRANGE("Source ID",SalesHeader."No.");
                  BillOfLadingLine2.FIND('-');
                  PackingControl."Bill of Lading No." := BillOfLadingLine2."Bill of Lading No.";

                  COMMIT;
                END;
              DATABASE::"Purchase Header":
                BEGIN
                  IF PackingControl."Multi Document Package" THEN BEGIN
                    PurchHeader.RESET;
                    PurchHeader.SETRANGE("Document Type",PackingControl."Source Subtype");
                    PurchHeader.SETFILTER("No.",PackingControl."Multi Document No.");
                    PurchHeader.FIND('-');
                    REPEAT
                      CLEAR(BillOfLadingLine2);
                      BillOfLadingLine2.SETCURRENTKEY(Type,"No.",Closed,"Location Code");
                      BillOfLadingLine2.SETRANGE(Type,BillOfLadingLine2.Type::Order);
                      BillOfLadingLine2.SETRANGE("No.",PurchHeader."No.");
                      BillOfLadingLine2.SETRANGE(Closed,FALSE);
                      IF ShippingSetup."Location Packing" THEN
                        BillOfLadingLine2.SETRANGE("Location Code",PackingStation."Location Code");
                      BillOfLadingLine2.SETRANGE("Source Type",PackingControl."Source Type");
                      BillOfLadingLine2.SETRANGE("Source Subtype",PurchHeader."Document Type");
                      BillOfLadingLine2.SETRANGE("Source ID",PurchHeader."No.");
                      IF NOT BillOfLadingLine2.FIND('-') THEN
                        ;
                      IF BillOfLadingLine2."Bill of Lading No." <> '' THEN
                        IF BillOfLadingLine."Bill of Lading No." <> BillOfLadingLine2."Bill of Lading No." THEN
                          ERROR(
                            Text103,
                            BillOfLadingLine."Bill of Lading No.",
                            PurchHeader."Document Type",PurchHeader."No.");
                      BillOfLadingWorksheetMgt.AddPurchHeader(
                        BillOfLading,PurchHeader,PackingStation,ShippingSetup,TRUE);
                    UNTIL PurchHeader.NEXT = 0;
                  END ELSE BEGIN
                    PurchHeader.GET(PackingControl."Source Subtype",PackingControl."Source ID");
                    BillOfLadingWorksheetMgt.AddPurchHeader(
                      BillOfLading,PurchHeader,PackingStation,ShippingSetup,TRUE);
                  END;
                  PurchHeader.GET(PackingControl."Source Subtype",PackingControl."Source ID");
                  BillOfLadingLine2.SETCURRENTKEY(Type,"No.",Closed,"Location Code");
                  BillOfLadingLine2.SETRANGE(Type,BillOfLadingLine2.Type::Order);
                  BillOfLadingLine2.SETRANGE("No.",PurchHeader."No.");
                  BillOfLadingLine2.SETRANGE(Closed,FALSE);
                  IF ShippingSetup."Location Packing" THEN
                    BillOfLadingLine2.SETRANGE("Location Code",PackingStation."Location Code");
                  BillOfLadingLine2.SETRANGE("Source Type",PackingControl."Source Type");
                  BillOfLadingLine2.SETRANGE("Source Subtype",PurchHeader."Document Type");
                  BillOfLadingLine2.SETRANGE("Source ID",PurchHeader."No.");
                  BillOfLadingLine2.FIND('-');
                  PackingControl."Bill of Lading No." := BillOfLadingLine2."Bill of Lading No.";

                  COMMIT;
                END;
              DATABASE::"Transfer Header":
                BEGIN
                  IF PackingControl."Multi Document Package" THEN BEGIN
                    TransferHeader.RESET;
                    TransferHeader.SETFILTER("No.",PackingControl."Multi Document No.");
                    TransferHeader.FIND('-');
                    REPEAT
                      CLEAR(BillOfLadingLine2);
                      BillOfLadingLine2.SETCURRENTKEY(Type,"No.",Closed,"Location Code");
                      BillOfLadingLine2.SETRANGE(Type,BillOfLadingLine2.Type::Order);
                      BillOfLadingLine2.SETRANGE("No.",TransferHeader."No.");
                      BillOfLadingLine2.SETRANGE(Closed,FALSE);
                      IF ShippingSetup."Location Packing" THEN
                        BillOfLadingLine2.SETRANGE("Location Code",PackingStation."Location Code");
                      BillOfLadingLine2.SETRANGE("Source Type",PackingControl."Source Type");
                      BillOfLadingLine2.SETRANGE("Source Subtype",0);
                      BillOfLadingLine2.SETRANGE("Source ID",TransferHeader."No.");
                      IF NOT BillOfLadingLine2.FIND('-') THEN
                        ;
                      IF BillOfLadingLine2."Bill of Lading No." <> '' THEN
                        IF BillOfLadingLine."Bill of Lading No." <> BillOfLadingLine2."Bill of Lading No." THEN
                          ERROR(
                            Text104,
                            BillOfLadingLine."Bill of Lading No.",TransferHeader."No.");
                      BillOfLadingWorksheetMgt.AddTransferHeader(
                        BillOfLading,TransferHeader,PackingStation,ShippingSetup,TRUE);
                    UNTIL TransferHeader.NEXT = 0;
                  END ELSE BEGIN
                    TransferHeader.GET(PackingControl."Source ID");
                    BillOfLadingWorksheetMgt.AddTransferHeader(
                      BillOfLading,TransferHeader,PackingStation,ShippingSetup,TRUE);
                  END;
                  TransferHeader.GET(PackingControl."Source ID");
                  BillOfLadingLine2.SETCURRENTKEY(Type,"No.",Closed,"Location Code");
                  BillOfLadingLine2.SETRANGE(Type,BillOfLadingLine2.Type::Order);
                  BillOfLadingLine2.SETRANGE("No.",TransferHeader."No.");
                  BillOfLadingLine2.SETRANGE(Closed,FALSE);
                  IF ShippingSetup."Location Packing" THEN
                    BillOfLadingLine2.SETRANGE("Location Code",PackingStation."Location Code");
                  BillOfLadingLine2.SETRANGE("Source Type",PackingControl."Source Type");
                  BillOfLadingLine2.SETRANGE("Source Subtype",0);
                  BillOfLadingLine2.SETRANGE("Source ID",TransferHeader."No.");
                  BillOfLadingLine2.FIND('-');
                  PackingControl."Bill of Lading No." := BillOfLadingLine2."Bill of Lading No.";

                  COMMIT;
                END;
              ELSE
                PackingControl.ErrorUnknownSourceType2;
            END;

            CreateNewBillOfLading := FALSE;
          END;
        END;

        IF CreateNewBillOfLading THEN
          CASE PackingControl."Source Type" OF
            DATABASE::"Sales Header":
              BEGIN
                SalesHeader.GET(PackingControl."Source Subtype",PackingControl."Source ID");
                BillOfLadingWorksheetMgt.NewBillOfLadingSalesHeader(
                  BillOfLading,SalesHeader,PackingStation,ShippingSetup,
                  TRUE,TRUE,PackingControl."Multi Document Package",PackingControl."Multi Document No.");
              END;
            DATABASE::"Purchase Header":
              BEGIN
                PurchHeader.GET(PackingControl."Source Subtype",PackingControl."Source ID");
                BillOfLadingWorksheetMgt.NewBillOfLadingPurchHeader(
                  BillOfLading,PurchHeader,PackingStation,ShippingSetup,
                  TRUE,TRUE,PackingControl."Multi Document Package",PackingControl."Multi Document No.");
              END;
            DATABASE::"Transfer Header":
              BEGIN
                TransferHeader.GET(PackingControl."Source ID");
                BillOfLadingWorksheetMgt.NewBillOfLadingTransferHeader(
                  BillOfLading,TransferHeader,PackingStation,ShippingSetup,
                  TRUE,TRUE,PackingControl."Multi Document Package",PackingControl."Multi Document No.");
              END;
            ELSE
              PackingControl.ErrorUnknownSourceType2;
          END;
      END;

      IF NOT PackingStation."Do not Show BOL on Create" THEN
        ViewBillOfLading(PackingControl);

      EXIT(TRUE);
    END;

    PROCEDURE ViewBillOfLading@63(VAR PackingControl@1240030000 : Record 14000717) : Boolean;
    VAR
      BillOfLading@1240030001 : Record 14000822;
      BillOfLadingLine@1240030002 : Record 14000823;
      BillOfLadingScanning@1240030003 : Page 14000837;
    BEGIN
      TestInitialized;
      CLEAR(BillOfLadingLine);
      BillOfLadingLine.SETCURRENTKEY(Type,"No.",Closed,"Location Code");
      BillOfLadingLine.SETRANGE(Type,BillOfLadingLine.Type::Order);
      BillOfLadingLine.SETRANGE("No.",PackingControl."Source ID");
      BillOfLadingLine.SETRANGE(Closed,FALSE);
      IF ShippingSetup."Location Packing" THEN
        BillOfLadingLine.SETRANGE("Location Code",PackingStation."Location Code");
      BillOfLadingLine.SETRANGE("Source Type",PackingControl."Source Type");
      BillOfLadingLine.SETRANGE("Source Subtype",PackingControl."Source Subtype");
      BillOfLadingLine.SETRANGE("Source ID",PackingControl."Source ID");
      IF NOT BillOfLadingLine.FIND('-') THEN
        ;

      IF BillOfLadingLine."Bill of Lading No." <> '' THEN BEGIN
        CASE PackingStation."Open Bill of Lading Form" OF
          PackingStation."Open Bill of Lading Form"::"Bill of Lading":
            BEGIN
              BillOfLading.GET(BillOfLadingLine."Bill of Lading No.");
              BillOfLading.SETRECFILTER;
              PAGE.RUNMODAL(PAGE::"Bill of Lading",BillOfLading);
            END;
          PackingStation."Open Bill of Lading Form"::"Bill of Lading":
            BEGIN
              BillOfLading.GET(PackingControl."Bill of Lading No.");
              BillOfLading.SETRECFILTER;
              PAGE.RUNMODAL(PAGE::"Bill of Lading Worksheet",BillOfLading);
            END;
          PackingStation."Open Bill of Lading Form"::"Bill of Lading":
            BEGIN
              CLEAR(BillOfLadingScanning);
              BillOfLadingScanning.OpenWithBillOfLading(BillOfLading."No.",TRUE);
              BillOfLadingScanning.RUNMODAL;
            END;
        END;
      END ELSE BEGIN
        PackingControl."Error Message" := Text105;
        EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE GetPackageNo@31(InputPackageNo@1240030001 : Text[250]) PackageNo@1240030000 : Code[20];
    VAR
      Package@1240030002 : Record 14000701;
    BEGIN
      TestInitialized;
      PackageNo := '';

      Package.RESET;
      Package.SETCURRENTKEY("External Tracking No.");
      Package.SETRANGE("External Tracking No.",InputPackageNo);
      IF NOT Package.FIND('-') THEN BEGIN
        Package.RESET;
        Package.SETCURRENTKEY("UCC No.");
        Package.SETRANGE("UCC No.",InputPackageNo);
        IF NOT Package.FIND('-') THEN BEGIN
          Package.RESET;
          Package.SETRANGE("No.",InputPackageNo);
          IF NOT Package.FIND('-') THEN BEGIN
            IF STRLEN(InputPackageNo) < 8 THEN BEGIN
              EXIT;
            END ELSE BEGIN
              Package.RESET;
              Package.SETCURRENTKEY("External Tracking No.");
              Package.SETRANGE("External Tracking No.",COPYSTR(InputPackageNo,8)); // FedEx
              IF NOT Package.FIND('-') THEN
                EXIT;
            END;
          END;
        END;
      END;

      PackageNo := Package."No.";
    END;

    PROCEDURE GetPostedPackageNo@1240030000(InputPackageNo@1240030001 : Text[250]) PackageNo@1240030000 : Code[20];
    VAR
      PostedPackage@1240030002 : Record 14000704;
    BEGIN
      TestInitialized;
      PackageNo := '';

      PostedPackage.RESET;
      PostedPackage.SETCURRENTKEY("External Tracking No.");
      PostedPackage.SETRANGE("External Tracking No.",InputPackageNo);
      IF NOT PostedPackage.FIND('-') THEN BEGIN
        PostedPackage.RESET;
        PostedPackage.SETCURRENTKEY("UCC No.");
        PostedPackage.SETRANGE("UCC No.",InputPackageNo);
        IF NOT PostedPackage.FIND('-') THEN BEGIN
          PostedPackage.RESET;
          PostedPackage.SETRANGE("No.",InputPackageNo);
          IF NOT PostedPackage.FIND('-') THEN BEGIN
            IF STRLEN(InputPackageNo) < 8 THEN BEGIN
              EXIT;
            END ELSE BEGIN
              PostedPackage.RESET;
              PostedPackage.SETCURRENTKEY("External Tracking No.");
              PostedPackage.SETRANGE("External Tracking No.",COPYSTR(InputPackageNo,8)); // FedEx
              IF NOT PostedPackage.FIND('-') THEN
                EXIT;
            END;
          END;
        END;
      END;

      PackageNo := PostedPackage."No.";
    END;

    PROCEDURE UpdateShippingAgent@81(PackingControl@1240030000 : Record 14000717;BillOfLading@1240030001 : Record 14000822;VAR ShippingAgent@1240030002 : Record 291);
    BEGIN
      TestInitialized;
      IF (PackingControl."Bill of Lading No." <> '') AND ShippingSetup."Use Shipping Agent from BOL"
      THEN BEGIN
        IF BillOfLading."No." <> PackingControl."Bill of Lading No." THEN
          BillOfLading.GET(PackingControl."Bill of Lading No.");

        IF BillOfLading."Shipping Agent Code" <> ShippingAgent.Code THEN
          IF BillOfLading."Shipping Agent Code" <> '' THEN
            ShippingAgent.GET(BillOfLading."Shipping Agent Code")
          ELSE
            CLEAR(ShippingAgent);
      END ELSE
        IF PackingControl."Shipping Agent Code" <> ShippingAgent.Code THEN
          IF PackingControl."Shipping Agent Code" <> '' THEN
            ShippingAgent.GET(PackingControl."Shipping Agent Code")
          ELSE
            CLEAR(ShippingAgent);
    END;

    PROCEDURE ShowShippingAgentClosedPackage@85(BillOfLading@1240030000 : Record 14000822;VAR Package@1240030001 : Record 14000701;VAR PackingControl@1240030002 : Record 14000717);
    BEGIN
      TestInitialized;
      IF PackingControl.Prepack THEN BEGIN
        ShippingSetup.TESTFIELD("Prepack Shipping Agent Code");
        ShippingSetup.TESTFIELD("Prepack Shipping Agent Service");
        Package."Shipping Agent Code" := ShippingSetup."Prepack Shipping Agent Code";
        Package."Shipping Agent Service" := ShippingSetup."Prepack Shipping Agent Service";
      END ELSE BEGIN
        IF (PackingControl."Bill of Lading No." <> '') AND ShippingSetup."Use Shipping Agent from BOL"
        THEN BEGIN
          Package."Shipping Agent Code" := BillOfLading."Shipping Agent Code";
          Package."Shipping Agent Service" := BillOfLading."Shipping Agent Service";
        END ELSE BEGIN
          Package."Shipping Agent Code" := PackingControl."Shipping Agent Code";
          Package."Shipping Agent Service" := PackingControl."E-Ship Agent Service";
        END;
      END;
    END;

    PROCEDURE ViewWarehouseActivityLines@34(VAR PackingControl@1240030000 : Record 14000717;InventoryPick@1240030001 : Boolean;ShowList@1240030003 : Boolean) : Boolean;
    VAR
      WarehouseActivityLine@1240030002 : Record 5767;
    BEGIN
      TestInitialized;
      WarehouseActivityLine.RESET;
      WarehouseActivityLine.SETCURRENTKEY(
        "Source Type","Source Subtype","Source No.","Source Line No.","Source Subline No.");
      CASE PackingControl."Source Type" OF
        DATABASE::"Sales Header":
          WarehouseActivityLine.SETRANGE("Source Type",DATABASE::"Sales Line");
        DATABASE::"Purchase Header":
          WarehouseActivityLine.SETRANGE("Source Type",DATABASE::"Purchase Line");
        DATABASE::"Transfer Header":
          WarehouseActivityLine.SETRANGE("Source Type",DATABASE::"Transfer Line");
        ELSE
          PackingControl.ErrorUnknownSourceType2;
      END;
      WarehouseActivityLine.SETRANGE("Source Subtype",PackingControl."Source Subtype");
      IF PackingControl."Multi Document Package" THEN
        WarehouseActivityLine.SETFILTER("Source No.",PackingControl."Multi Document No.")
      ELSE
        WarehouseActivityLine.SETRANGE("Source No.",PackingControl."Source ID");
      IF InventoryPick THEN
        WarehouseActivityLine.SETRANGE("Activity Type",WarehouseActivityLine."Activity Type"::"Invt. Pick")
      ELSE
        WarehouseActivityLine.SETRANGE("Activity Type",WarehouseActivityLine."Activity Type"::Pick);
      IF NOT WarehouseActivityLine.FIND('-') THEN BEGIN
        PackingControl."Error Message" := Text106;
        EXIT(FALSE);
      END;

      IF ShowList THEN
        PAGE.RUNMODAL(0,WarehouseActivityLine);
      EXIT(TRUE);
    END;

    PROCEDURE ViewWarehouseShipmentLines@41(VAR PackingControl@1240030000 : Record 14000717;ShowList@1240030002 : Boolean) : Boolean;
    VAR
      WarehouseShipmentLine@1240030001 : Record 7321;
    BEGIN
      TestInitialized;
      WarehouseShipmentLine.RESET;
      WarehouseShipmentLine.SETCURRENTKEY("Source Type","Source Subtype","Source No.");
      CASE PackingControl."Source Type" OF
        DATABASE::"Sales Header":
          WarehouseShipmentLine.SETRANGE("Source Type",DATABASE::"Sales Line");
        DATABASE::"Purchase Header":
          WarehouseShipmentLine.SETRANGE("Source Type",DATABASE::"Purchase Line");
        DATABASE::"Transfer Header":
          WarehouseShipmentLine.SETRANGE("Source Type",DATABASE::"Transfer Line");
        ELSE
          PackingControl.ErrorUnknownSourceType2;
      END;
      WarehouseShipmentLine.SETRANGE("Source Subtype",PackingControl."Source Subtype");
      IF PackingControl."Multi Document Package" THEN
        WarehouseShipmentLine.SETFILTER("Source No.",PackingControl."Multi Document No.")
      ELSE
        WarehouseShipmentLine.SETRANGE("Source No.",PackingControl."Source ID");
      IF NOT WarehouseShipmentLine.FIND('-') THEN BEGIN
        PackingControl."Error Message" := Text107;
        EXIT(FALSE);
      END;

      IF ShowList THEN
        PAGE.RUNMODAL(0,WarehouseShipmentLine);
      EXIT(TRUE);
    END;

    PROCEDURE ViewWarehouseStatistics@1240030011(VAR PackingControl@1240030000 : Record 14000717) : Boolean;
    VAR
      EShipWarehouseStatistics@1240030001 : Page 14000661;
    BEGIN
      CLEAR(EShipWarehouseStatistics);
      EShipWarehouseStatistics.SetPackingControl(PackingControl,PackingStation,ShippingSetup);
      EShipWarehouseStatistics.RUNMODAL;
      EXIT(TRUE);
    END;

    PROCEDURE OpenFastPack@44(VAR PackingControl@1240030000 : Record 14000717) : Boolean;
    VAR
      FastPackSalesLine@1240030001 : Record 14000711;
    BEGIN
      TestInitialized;
      IF PackingControl."Package Open" THEN BEGIN
        PackingControl."Error Message" := Text108;
        EXIT(FALSE);
      END;

      FastPackSalesLine.RESET;
      FastPackSalesLine.SETRANGE("Source Type",PackingControl."Source Type");
      FastPackSalesLine.SETRANGE("Source Subtype",PackingControl."Source Subtype");
      FastPackSalesLine.SETRANGE("Source ID",PackingControl."Source ID");
      PAGE.RUNMODAL(PAGE::"Fast Pack Order",FastPackSalesLine);

      EXIT(TRUE);
    END;

    PROCEDURE CombineWarehouseShipments@47(FinalWhseShipmentHeader@1240030001 : Record 7320;AddWhseShipmentHeader@1240030000 : Record 7320);
    VAR
      WhseShipmentLine@1240030009 : Record 7321;
      WhseShipmentLine2@1240030008 : Record 7321;
      WhseCommentLine@1240030007 : Record 5770;
      WhseCommentLine2@1240030006 : Record 5770;
      WhseActivityLine@1240030005 : Record 5767;
      WhseActivityLine2@1240030004 : Record 5767;
      RegistredWhseActivityLine@1240030003 : Record 5773;
      RegistredWhseActivityLine2@1240030002 : Record 5773;
      WhsePickRequest@1240030010 : Record 7325;
      WhseItemTrackingLine@1240030011 : Record 6550;
      WhseItemTrackingLine2@1240030012 : Record 6550;
    BEGIN
      TestInitialized;

      WITH FinalWhseShipmentHeader DO BEGIN
        TESTFIELD("No.");
        AddWhseShipmentHeader.TESTFIELD("No.");

        IF AddWhseShipmentHeader."No." = "No." THEN
          ERROR(Text109);

        WhseShipmentLine.RESET;
        WhseShipmentLine.SETRANGE("No.",AddWhseShipmentHeader."No.");
        IF WhseShipmentLine.FIND('-') THEN BEGIN
          WhseShipmentLine2.RESET;
          WhseShipmentLine2.SETRANGE("No.","No.");
          IF NOT WhseShipmentLine2.FIND('+') THEN BEGIN
            CLEAR(WhseShipmentLine2);
            WhseShipmentLine2."No." := "No.";
          END;

          REPEAT
            WhseShipmentLine2."Line No." := WhseShipmentLine2."Line No." + 10000;
            WhseShipmentLine2.TRANSFERFIELDS(WhseShipmentLine,FALSE);
            WhseShipmentLine2.INSERT;
            WhseShipmentLine.DELETE;

            WhseItemTrackingLine.RESET;
            WhseItemTrackingLine.SETCURRENTKEY("Source ID","Source Type","Source Subtype");
            WhseItemTrackingLine.SETRANGE("Source Type",DATABASE::"Warehouse Shipment Line");
            WhseItemTrackingLine.SETRANGE("Source Subtype",0);
            WhseItemTrackingLine.SETRANGE("Source ID",WhseShipmentLine."No.");
            WhseItemTrackingLine.SETRANGE("Source Ref. No.",WhseShipmentLine."Line No.");
            IF WhseItemTrackingLine.FIND('-') THEN
              REPEAT
                WhseItemTrackingLine2 := WhseItemTrackingLine;
                WhseItemTrackingLine2."Source ID" := WhseShipmentLine2."No.";
                WhseItemTrackingLine2."Source Ref. No." := WhseShipmentLine2."Line No.";
                WhseItemTrackingLine2.MODIFY;
              UNTIL WhseItemTrackingLine.NEXT = 0;

            WhseActivityLine.RESET;
            WhseActivityLine.SETCURRENTKEY(
              "Activity Type","No.","Whse. Document Type","Whse. Document No.","Whse. Document Line No.");
            WhseActivityLine.SETRANGE(
              "Whse. Document Type",WhseActivityLine."Whse. Document Type"::Shipment);
            WhseActivityLine.SETRANGE("Whse. Document No.",WhseShipmentLine."No.");
            WhseActivityLine.SETRANGE("Whse. Document Line No.",WhseShipmentLine."Line No.");
            IF WhseActivityLine.FIND('-') THEN
              REPEAT
                WhseActivityLine2 := WhseActivityLine;
                WhseActivityLine2."Whse. Document No." := WhseShipmentLine2."No.";
                WhseActivityLine2."Whse. Document Line No." := WhseShipmentLine2."Line No.";
                WhseActivityLine2.MODIFY;
              UNTIL WhseActivityLine.NEXT = 0;

            RegistredWhseActivityLine.RESET;
            RegistredWhseActivityLine.SETCURRENTKEY(
              "Whse. Document Type","Whse. Document No.","Whse. Document Line No.");
            RegistredWhseActivityLine.SETRANGE(
              "Whse. Document Type",RegistredWhseActivityLine."Whse. Document Type"::Shipment);
            RegistredWhseActivityLine.SETRANGE("Whse. Document No.",WhseShipmentLine."No.");
            RegistredWhseActivityLine.SETRANGE("Whse. Document Line No.",WhseShipmentLine."Line No.");
            IF RegistredWhseActivityLine.FIND('-') THEN
              REPEAT
                RegistredWhseActivityLine2 := RegistredWhseActivityLine;
                RegistredWhseActivityLine2."Whse. Document No." := WhseShipmentLine2."No.";
                RegistredWhseActivityLine2."Whse. Document Line No." := WhseShipmentLine2."Line No.";
                RegistredWhseActivityLine2.MODIFY;
              UNTIL RegistredWhseActivityLine.NEXT = 0;
          UNTIL WhseShipmentLine.NEXT = 0;
        END;

        WhseCommentLine.RESET;
        WhseCommentLine.SETRANGE("Table Name",WhseCommentLine."Table Name"::"Whse. Shipment");
        WhseCommentLine.SETRANGE(Type,0);
        WhseCommentLine.SETRANGE("No.",AddWhseShipmentHeader."No.");
        IF WhseCommentLine.FIND('-') THEN BEGIN
          WhseCommentLine2.RESET;
          WhseCommentLine2.SETRANGE("Table Name",WhseCommentLine2."Table Name"::"Whse. Shipment");
          WhseCommentLine2.SETRANGE(Type,0);
          WhseCommentLine2.SETRANGE("No.","No.");
          IF NOT WhseCommentLine2.FIND('-') THEN BEGIN
            CLEAR(WhseCommentLine2);
            WhseCommentLine2."No." := "No.";
          END;

          REPEAT
            WhseCommentLine2."Line No." := WhseCommentLine2."Line No." + 10000;
            WhseCommentLine2.TRANSFERFIELDS(WhseCommentLine,FALSE);
            WhseCommentLine2.INSERT;
            WhseCommentLine.DELETE;
          UNTIL WhseCommentLine.NEXT = 0;
        END;

        AddWhseShipmentHeader.DELETE;

        WhsePickRequest.RESET;
        WhsePickRequest.SETRANGE("Document Type",WhsePickRequest."Document Type"::Shipment);
        //WhsePickRequest.SETRANGE("Production Subtype",WhsePickRequest."Production Subtype"::" ");
        WhsePickRequest.SETRANGE("Document No.",AddWhseShipmentHeader."No.");
        WhsePickRequest.SETRANGE("Location Code",AddWhseShipmentHeader."Location Code");
        WhsePickRequest.DELETEALL;
      END;
    END;

    PROCEDURE RenumberAllPackages@49(BillOfLading@1240030000 : Record 14000822;ShippingAgent@1240030001 : Record 291;VAR PackingControl@1240030002 : Record 14000717;PrintLabel@1240030003 : Boolean;FedexMasterLabel@1240030004 : Boolean) : Boolean;
    VAR
      Package2@1240030005 : Record 14000701;
      Package3@1240030006 : Record 14000701;
      PackageTmp@1240030007 : TEMPORARY Record 14000701;
      FedexOptionPage@1240030010 : Record 14000781;
      TotalPackages@1240030008 : Integer;
      LastPackageNo@1240030009 : Integer;
      TotalValuePrice@1240030012 : Decimal;
      TotalValueCost@1240030013 : Decimal;
      TotalWeight@1240030014 : Decimal;
      TotalDryIceWeight@1240030011 : Integer;
      TotalDryIcePackages@1240020000 : Integer;
    BEGIN
      TestInitialized;
      IF NOT PackingStation."Renumber not Requiring Prepack" THEN BEGIN
        ShippingSetup.TESTFIELD("Prepack Shipping Agent Code");
        ShippingSetup.TESTFIELD("Prepack Shipping Agent Service");
      END;

      IF FedexMasterLabel THEN BEGIN
        IF (ShippingSetup."FedEx API Version" = ShippingSetup."FedEx API Version"::"6.80.003") OR
           (ShippingSetup."FedEx API Version" = ShippingSetup."FedEx API Version"::"Web Services")
        THEN BEGIN
          ShippingAgent.GET(PackingControl."Shipping Agent Code");
          IF ShippingAgent."Shipper Type" <> ShippingAgent."Shipper Type"::FEDEX THEN BEGIN
            PackingControl."Error Message" := Text110;
            EXIT(FALSE);
          END ELSE
            IF NOT PackingControl."World Wide Service" THEN BEGIN
              PackingControl."Error Message" := Text111;
              EXIT(FALSE);
            END;
        END ELSE
          ERROR(Text001);
      END;

      IF PackingControl.Prepack AND NOT PackingStation."Renumber not Requiring Prepack" THEN BEGIN
        PackingControl."Error Message" := Text112;
        EXIT(FALSE);
      END;

      Package2.RESET;
      Package2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Package2.SETRANGE("Source Type",PackingControl."Source Type");
      Package2.SETRANGE("Source Subtype",PackingControl."Source Subtype");
      IF PackingControl."Multi Document Package" THEN
        Package2.SETFILTER("Source ID",PackingControl."Multi Document No.")
      ELSE
        Package2.SETRANGE("Source ID",PackingControl."Source ID");
      Package2.SETRANGE(Closed,FALSE);
      IF ShippingSetup."Location Packing" THEN
        Package2.SETRANGE("Location Code",PackingStation."Location Code");
      IF Package2.FIND('-') THEN BEGIN
        PackingControl."Error Message" := Text063;
        EXIT(FALSE);
      END;

      PackageTmp.RESET;
      PackageTmp.DELETEALL;
      Package2.SETRANGE(Closed);
      IF ShippingSetup."Location Packing" THEN
        Package2.SETRANGE("Location Code",PackingStation."Location Code");
      IF Package2.FIND('-') THEN
        REPEAT
          IF PackingControl."Multi Document Package" THEN BEGIN
            Package3.GET(Package2."Original Package No.");
            PackageTmp := Package3;
            IF NOT PackageTmp.INSERT THEN
              ;
          END ELSE BEGIN
            PackageTmp := Package2;
            PackageTmp.INSERT;
          END;
        UNTIL Package2.NEXT = 0;

      TotalPackages := 0;
      TotalValuePrice := 0;
      TotalValueCost := 0;
      TotalWeight := 0;
      TotalDryIceWeight := 0;
      TotalDryIcePackages := 0;
      PackageTmp.RESET;
      IF PackageTmp.FIND('+') THEN
        REPEAT
          TotalPackages := TotalPackages + 1;
          IF FedexMasterLabel THEN BEGIN
            FedexOptionPage.SETRANGE(Type,FedexOptionPage.Type::Package);
            FedexOptionPage.SETFILTER("Source ID",PackageTmp."No.");
            FedexOptionPage.SETRANGE("Source Type",0);
            FedexOptionPage.SETRANGE("Source Subtype",0);
            IF FedexOptionPage.FIND('-') THEN
              TotalDryIceWeight := TotalDryIceWeight + FedexOptionPage."Dry Ice Weight";
            IF FedexOptionPage."Dry Ice Weight" <> 0 THEN
              TotalDryIcePackages := TotalDryIcePackages + 1;
          END;

          Package2.GET(PackageTmp."No.");
          Package2.CALCFIELDS("Exist in Other Package");
          IF Package2."Exist in Other Package" THEN BEGIN
            PackingControl."Error Message" :=
              STRSUBSTNO(Text113,Package2."No.");
            EXIT(FALSE);
          END;

          IF Package2."Multi Document Package" THEN BEGIN
            Package3.RESET;
            Package3.SETCURRENTKEY("Original Package No.");
            Package3.SETRANGE("Original Package No.",Package2."No.");
            Package3.FIND('-');
            REPEAT
              IF FedexMasterLabel THEN BEGIN
                Package3.CALCFIELDS("Value (Price)","Value (Cost)");
                TotalValuePrice := TotalValuePrice + Package3."Value (Price)";
                TotalValueCost := TotalValueCost + Package3."Value (Cost)";
                TotalWeight := TotalWeight + Package3."Calculation Weight (LBS)";
                FedexOptionPage.SETRANGE(Type,FedexOptionPage.Type::Package);
                FedexOptionPage.SETFILTER("Source ID",Package3."No.");
                FedexOptionPage.SETRANGE("Source Type",0);
                FedexOptionPage.SETRANGE("Source Subtype",0);
                IF FedexOptionPage.FIND('-') THEN
                  TotalDryIceWeight := TotalDryIceWeight + FedexOptionPage."Dry Ice Weight";
                IF FedexOptionPage."Dry Ice Weight" <> 0 THEN
                  TotalDryIcePackages := TotalDryIcePackages + 1;
              END;
            UNTIL Package3.NEXT = 0;
          END ELSE BEGIN
            Package3 := Package2;
            IF FedexMasterLabel THEN BEGIN
              Package3.CALCFIELDS("Value (Price)","Value (Cost)");
              TotalValuePrice := TotalValuePrice + Package3."Value (Price)";
              TotalValueCost := TotalValueCost + Package3."Value (Cost)";
              TotalWeight := TotalWeight + Package3."Calculation Weight (LBS)";
            END;
          END;
          Shipping.OpenPackage(Package3);
        UNTIL PackageTmp.NEXT(-1) = 0;

      IF FedexMasterLabel THEN
        UpdateOptionPage(PackingControl,PackageTmp,TotalValuePrice,TotalValueCost,
          TotalWeight,TotalDryIceWeight);

      LastPackageNo := 0;
      PackageTmp.RESET;
      IF PackageTmp.FIND('-') THEN
        REPEAT
          Package2.GET(PackageTmp."No.");
          Package2.TESTFIELD(Closed,FALSE);

          IF (PackingControl."Bill of Lading No." <> '') AND ShippingSetup."Use Shipping Agent from BOL"
          THEN BEGIN
            IF (Package2."Shipping Agent Code" <> BillOfLading."Shipping Agent Code") OR
               (Package2."Shipping Agent Service" <> BillOfLading."Shipping Agent Service")
            THEN BEGIN
              Package2.VALIDATE("Shipping Agent Code",BillOfLading."Shipping Agent Code");
              Package2.VALIDATE("Shipping Agent Service",BillOfLading."Shipping Agent Service");
            END;
          END ELSE
            IF (Package2."Shipping Agent Code" <> PackingControl."Shipping Agent Code") OR
               (Package2."Shipping Agent Service" <> PackingControl."E-Ship Agent Service")
            THEN BEGIN
              Package2.VALIDATE("Shipping Agent Code",PackingControl."Shipping Agent Code");
              Package2.VALIDATE("Shipping Agent Service",PackingControl."E-Ship Agent Service");
            END;
          LastPackageNo := LastPackageNo + 1;
          Package2."Package No." := LastPackageNo;
          Package2."Total Packages" := TotalPackages;

          Package2."No AES Required" := PackingControl."No AES Required";
          IF PackingControl."Export Document No." <> '' THEN
            Package2."Export Document No." := PackingControl."Export Document No.";

          Package2.MODIFY(TRUE);

          Shipping.ClosePackage(Package2,PrintLabel);
        UNTIL PackageTmp.NEXT = 0;
      EXIT(TRUE);
    END;

    PROCEDURE ScanSerialLot@48(VAR PackingControl@1240030000 : Record 14000717;ScanAllLines@1240030001 : Boolean;HideNothingToScanError@1240030002 : Boolean) : Boolean;
    VAR
      Package@1240030013 : Record 14000701;
      Package2@1240030003 : Record 14000701;
      PackageLine@1240030004 : Record 14000702;
      PackageLine2@1240030005 : Record 14000702;
      PackageLineTmp@1240030006 : TEMPORARY Record 14000702;
      EnterSerialAndLotNo@1240030007 : Page 14000674;
      NewSerialNo@1240030011 : Code[20];
      NewLotNo@1240030010 : Code[20];
      NewWarrantyDate@1240030009 : Date;
      NewExpirationDate@1240030008 : Date;
      RecordUpdated@1240030012 : Boolean;
    BEGIN
      TestInitialized;
      PackageLineTmp.RESET;
      PackageLineTmp.DELETEALL;

      PackageLine.RESET;
      PackageLine.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      PackageLine.SETRANGE("Source Type",PackingControl."Source Type");
      PackageLine.SETRANGE("Source Subtype",PackingControl."Source Subtype");
      IF PackingControl."Multi Document Package" THEN
        PackageLine.SETFILTER("Source ID",PackingControl."Multi Document No.")
      ELSE
        PackageLine.SETRANGE("Source ID",PackingControl."Source ID");
      IF ShippingSetup."Location Packing" THEN
        PackageLine.SETRANGE("Location Code",PackingStation."Location Code");
      IF PackageLine.FIND('-') THEN
        REPEAT
          IF PackingControl."Multi Document Package" THEN BEGIN
            Package2.GET(PackageLine."Package No.");
            IF Package2."Multi Document Package Split" THEN
              PackageLine2 := PackageLine
            ELSE
              PackageLine2.GET(Package2."Original Package No.",PackageLine."Line No.");
          END ELSE
            PackageLine2 := PackageLine;

          IF ((PackageLine2."Pack Serial Number" AND (PackageLine2."Serial No." = '')) OR
              (PackageLine2."Pack Lot Number" AND (PackageLine2."Lot No." = '')) OR
              (PackageLine2."Pack Warranty Date" AND (PackageLine2."Warranty Date" = 0D)) OR
              (PackageLine2."Pack Expiration Date" AND (PackageLine2."Expiration Date" = 0D))) OR
             (ScanAllLines AND
              (PackageLine2."Pack Serial Number" OR PackageLine2."Pack Lot Number" OR
               PackageLine2."Pack Warranty Date" OR PackageLine2."Pack Expiration Date"))
          THEN BEGIN
            PackageLineTmp := PackageLine2;
            IF NOT PackageLineTmp.INSERT THEN
              ;
          END;
        UNTIL PackageLine.NEXT = 0;

      PackageLineTmp.RESET;
      IF NOT PackageLineTmp.FIND('-') THEN BEGIN
        IF HideNothingToScanError THEN
          EXIT(TRUE);

        PackingControl."Error Message" := Text114;
        EXIT(FALSE);
      END;

      REPEAT
        PackageLine.GET(PackageLineTmp."Package No.",PackageLineTmp."Line No.");
        PackageLine.FILTERGROUP(2);
        PackageLine.RESET;
        PackageLine.SETRECFILTER;
        PackageLine.FILTERGROUP(0);

        CLEAR(EnterSerialAndLotNo);
        EnterSerialAndLotNo.SETRECORD(PackageLine);
        EnterSerialAndLotNo.SETTABLEVIEW(PackageLine);
        EnterSerialAndLotNo.LOOKUPMODE(TRUE);
        IF EnterSerialAndLotNo.RUNMODAL = ACTION::LookupOK THEN BEGIN
          EnterSerialAndLotNo.GetValues(
            NewSerialNo,NewLotNo,NewWarrantyDate,NewExpirationDate);
          PackageLine.FIND;
          RecordUpdated := FALSE;

          IF NewSerialNo <> PackageLine."Serial No." THEN BEGIN
            PackageLine.VALIDATE("Serial No.",NewSerialNo);
            RecordUpdated := TRUE;
          END;

          IF NewLotNo <> PackageLine."Lot No." THEN BEGIN
            PackageLine.VALIDATE("Lot No.",NewLotNo);
            RecordUpdated := TRUE;
          END;

          IF NewWarrantyDate <> PackageLine."Warranty Date" THEN BEGIN
            PackageLine.VALIDATE("Warranty Date",NewWarrantyDate);
            RecordUpdated := TRUE;
          END;

          IF NewExpirationDate <> PackageLine."Expiration Date" THEN BEGIN
            PackageLine.VALIDATE("Expiration Date",NewExpirationDate);
            RecordUpdated := TRUE;
          END;

          IF RecordUpdated THEN BEGIN
            PackageLine.MODIFY;

            Package.GET(PackageLine."Package No.");
            IF Package."Multi Document Package" THEN BEGIN
              Package2.RESET;
              Package2.SETCURRENTKEY("Original Package No.");
              Package2.SETRANGE("Original Package No.",Package."No.");
              IF Package2.FIND('-') THEN
                REPEAT
                  PackageLine2.GET(Package2."No.",PackageLine."Line No.");
                  PackageLine2."Serial No." := PackageLine."Serial No.";
                  PackageLine2."Lot No." := PackageLine."Lot No.";
                  PackageLine2."Warranty Date" := PackageLine."Warranty Date";
                  PackageLine2."Expiration Date" := PackageLine."Expiration Date";
                  PackageLine2.MODIFY;
                UNTIL Package2.NEXT = 0;
            END;

            COMMIT;
          END;
        END ELSE BEGIN
          PackingControl."Error Message" := Text126;
          EXIT(FALSE);
        END;
      UNTIL PackageLineTmp.NEXT = 0;

      EXIT(TRUE);
    END;

    PROCEDURE PackageStatus@50(VAR PackingControl@1240030000 : Record 14000717);
    VAR
      PackingRule@1240030002 : Record 14000715;
      PackingStatusReport@1240030003 : Report 14000716;
    BEGIN
      TestInitialized;
      PackingRule.GetPackingRule(
        PackingControl."Ship-to Type",PackingControl."Ship-to No.",PackingControl."Ship-to Code");

      CLEAR(PackingStatusReport);
      PackingStatusReport.InitializeRequest(
        PackingStation,ShippingSetup,PackingControl,PackingRule);
      PackingStatusReport.RUNMODAL;
    END;

    PROCEDURE UpdateOptionPage@51(PackingControl@1240030000 : Record 14000717;VAR CurrentPackage@1240030007 : Record 14000701;TotalValuePrice@1240030001 : Decimal;TotalValueCost@1240030002 : Decimal;TotalWeight@1240030003 : Decimal;TotalDryIceWeight@1240030008 : Integer);
    VAR
      FedexOptionPage@1240030004 : Record 14000781;
      Package@1240030005 : Record 14000701;
      ShippingAgentAccount@1240030006 : Record 14000788;
      CurrentPackage2@1240020000 : Record 14000701;
    BEGIN
      TestInitialized;
      CurrentPackage2.RESET;
      CurrentPackage2.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      CurrentPackage2.SETRANGE("Source Type",PackingControl."Source Type");
      CurrentPackage2.SETRANGE("Source Subtype",PackingControl."Source Subtype");
      IF PackingControl."Multi Document Package" THEN
        CurrentPackage2.SETFILTER("Source ID",PackingControl."Multi Document No.")
      ELSE
        CurrentPackage2.SETRANGE("Source ID",PackingControl."Source ID");
      CurrentPackage2.SETRANGE(Closed,FALSE);
      IF CurrentPackage2.FIND('+') THEN BEGIN
        FedexOptionPage.SETRANGE(Type,FedexOptionPage.Type::Package);
        FedexOptionPage.SETFILTER("Source ID",CurrentPackage2."No.");
        FedexOptionPage.SETRANGE("Source Type",0);
        FedexOptionPage.SETRANGE("Source Subtype",0);
        IF FedexOptionPage.FIND('-') THEN BEGIN
          FedexOptionPage."Total Shipment Weight" := TotalWeight;
          FedexOptionPage.MODIFY;
        END;
      END;
      IF CurrentPackage.FIND('-') THEN BEGIN
        FedexOptionPage.SETRANGE(Type,FedexOptionPage.Type::Package);
        FedexOptionPage.SETFILTER("Source ID",CurrentPackage."No.");
        FedexOptionPage.SETRANGE("Source Type",0);
        FedexOptionPage.SETRANGE("Source Subtype",0);
        IF FedexOptionPage.FIND('-') THEN BEGIN
          ShippingAgentAccount.GET(CurrentPackage."Shipping Agent Account No.");
          CASE ShippingAgentAccount."Export Declare Value As" OF
            ShippingAgentAccount."Export Declare Value As"::Price:
              FedexOptionPage."Export Declared Value" := TotalValuePrice;
            ShippingAgentAccount."Export Declare Value As"::Cost:
              FedexOptionPage."Export Declared Value" := TotalValueCost;
          END;
          FedexOptionPage."Total Shipment Weight" := ROUND(TotalWeight,1,'>');
          FedexOptionPage."Dry Ice Weight" := TotalDryIceWeight;
          FedexOptionPage.MODIFY;
        END;
      END;
    END;

    PROCEDURE ExportAllLabels@54(BillOfLading@1240030000 : Record 14000822;VAR PackingControl@1240030001 : Record 14000717;ShippingLabels@1240030002 : Boolean;ItemResourceLabels@1240030003 : Boolean) : Boolean;
    VAR
      Package@1240030006 : Record 14000701;
      Package2@1240030007 : Record 14000701;
      PackageTmp@1240030008 : TEMPORARY Record 14000701;
      LabelFile@1240030009 : Record 14000710;
      EShipInput@1240030004 : Record 14000728;
      EShipEnterFilename@1240030005 : Page 14050113;
      InputFile@1240030010 : File;
      OutputFile@1240030011 : File;
      FileName@1240030012 : Text[250];
      ReadChar@1240030013 : Char;
      i@1240030014 : Integer;
      LabelFileName@1240030015 : Text[250];
    BEGIN
      TestInitialized;
      PackingStation.TESTFIELD("Label Buffer File");
      LabelFileName := PackingStation.CalcLabelFileName(PackingStation."Label Buffer File");

      i := STRPOS(LabelFileName,'\');
      IF i > 0 THEN
        WHILE STRPOS(COPYSTR(LabelFileName,i + 1),'\') > 0 DO
          i := i + STRPOS(COPYSTR(LabelFileName,i + 1),'\');

      IF BillOfLading."No." <> '' THEN
        FileName := BillOfLading."No."
      ELSE
        FileName := PackingControl."Source ID";

      CASE TRUE OF
        ShippingLabels AND ItemResourceLabels:
          FileName := FileName + 'All.txt';
        ShippingLabels:
          FileName := FileName + 'Ship.txt';
        ItemResourceLabels:
          FileName := FileName + 'Item.txt';
        ELSE BEGIN
          PackingControl."Error Message" := Text115;
          EXIT(FALSE);
        END;
      END;

      IF i > 0 THEN
        FileName := COPYSTR(LabelFileName,1,i) + FileName;

      CLEAR(EShipInput);
      EShipInput.Filename := FileName;
      CLEAR(EShipEnterFilename);
      EShipEnterFilename.LOOKUPMODE(TRUE);
      EShipEnterFilename.SetEShipInput(EShipInput);
      IF EShipEnterFilename.RUNMODAL = ACTION::LookupOK THEN BEGIN
      EShipEnterFilename.GetEShipInput(EShipInput);
      FileName := EShipInput.Filename;
      END ELSE
        EXIT(TRUE);

      PackageTmp.RESET;
      PackageTmp.DELETEALL;
      Package.RESET;
      Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Package.SETRANGE("Source Type",PackingControl."Source Type");
      Package.SETRANGE("Source Subtype",PackingControl."Source Subtype");
      IF PackingControl."Multi Document Package" THEN
        Package.SETFILTER("Source ID",PackingControl."Multi Document No.")
      ELSE
        Package.SETRANGE("Source ID",PackingControl."Source ID");
      IF Package.FIND('-') THEN
        REPEAT
          IF Package."Original Package No." <> '' THEN
            Package2.GET(Package."Original Package No.")
          ELSE
            Package2 := Package;
          PackageTmp := Package2;
          IF NOT PackageTmp.INSERT THEN
            ;
        UNTIL Package.NEXT = 0;

      OutputFile.WRITEMODE(TRUE);
      OutputFile.TEXTMODE(FALSE);
      IF NOT OutputFile.CREATE(FileName) THEN BEGIN
        PackingControl."Error Message" := Text117;
        EXIT(FALSE);
      END;

      Window.OPEN(Text118);

      PackageTmp.RESET;
      IF PackageTmp.FIND('-') THEN
        REPEAT
          LabelFile.RESET;
          LabelFile.SETRANGE(Type,LabelFile.Type::Package);
          LabelFile.SETRANGE("No.",PackageTmp."No.");
          LabelFile.SETFILTER("Printer Port",'<>%1','');
          LabelFile.SETFILTER("File Name",'<>%1','');
          CASE TRUE OF
            ShippingLabels AND ItemResourceLabels:
              ;
            ShippingLabels:
              LabelFile.SETFILTER(
                "File Type",'<>%1&<>%2',LabelFile."File Type"::Item,LabelFile."File Type"::Resource);
            ItemResourceLabels:
              LabelFile.SETFILTER(
                "File Type",'%1|%2',LabelFile."File Type"::Item,LabelFile."File Type"::Resource);
          END;
          IF LabelFile.FIND('-') THEN
            REPEAT
              LabelFile.CALCFIELDS("File (Binary)");
              IF LabelFile."File (Binary)".HASVALUE THEN BEGIN
                LabelFile.ExportFileBinary(LabelFileName,FALSE);
                InputFile.WRITEMODE(FALSE);
                InputFile.TEXTMODE(FALSE);
                InputFile.OPEN(LabelFileName);
                WHILE InputFile.POS < InputFile.LEN DO BEGIN
                  InputFile.READ(ReadChar);
                  OutputFile.WRITE(ReadChar);
                END;
                ReadChar := 13;
                OutputFile.WRITE(ReadChar);
                ReadChar := 10;
                OutputFile.WRITE(ReadChar);
                InputFile.CLOSE;
              END;
            UNTIL LabelFile.NEXT = 0;
        UNTIL PackageTmp.NEXT = 0;

      Window.CLOSE;

      OutputFile.CLOSE;

      EXIT(TRUE);
    END;

    PROCEDURE PrintItemResourceLabel@55(Package@1240030000 : Record 14000701;VAR PackingControl@1240030001 : Record 14000717);
    VAR
      PackingRule@1240030003 : Record 14000715;
      FastPackLineTmp@1240030002 : TEMPORARY Record 14000711;
      Item@1240030005 : Record 27;
      Resource@1240030006 : Record 156;
      PrintItemResourceLabels@1240030007 : Page 14000673;
      ItemLabel@1240030008 : Report 14000841;
      ResourceLabel@1240030009 : Report 14000845;
    BEGIN
      TestInitialized;
      PackingRule.GetPackingRule(
        PackingControl."Ship-to Type",PackingControl."Ship-to No.",PackingControl."Ship-to Code");

      UpdateFastPackLines(
        PackingControl,FastPackLineTmp,PackingRule,TRUE,TRUE,FALSE,0,'','');

      CLEAR(PrintItemResourceLabels);
      PrintItemResourceLabels.LOOKUPMODE(TRUE);
      PrintItemResourceLabels.LoadTempTable(FastPackLineTmp);
      IF NOT (PrintItemResourceLabels.RUNMODAL = ACTION::LookupOK) THEN
        EXIT;

      PrintItemResourceLabels.GetTempTable(FastPackLineTmp);
      FastPackLineTmp.SETFILTER("No. of Labels",'>0');
      IF FastPackLineTmp.FIND('-') THEN
        REPEAT
          CASE FastPackLineTmp.Type OF
            FastPackLineTmp.Type::Item:
              BEGIN
                PackingRule.TESTFIELD("Item Label Code");

                Item.RESET;
                Item.SETRANGE("No.",FastPackLineTmp."No.");
                CLEAR(ItemLabel);
                ItemLabel.USEREQUESTPAGE(FALSE);
                ItemLabel.SETTABLEVIEW(Item);
                ItemLabel.InitializeRequest(
                  PackingRule."Item Label Code",FastPackLineTmp."No. of Labels",
                  TRUE,PackingControl."Source ID",Package."No.",TRUE);
                ItemLabel.RUNMODAL;
              END;
            FastPackLineTmp.Type::Resource:
              BEGIN
                PackingRule.TESTFIELD("Resource Label Code");

                Resource.RESET;
                Resource.SETRANGE("No.",FastPackLineTmp."No.");
                CLEAR(ResourceLabel);
                ResourceLabel.USEREQUESTPAGE(FALSE);
                ResourceLabel.SETTABLEVIEW(Resource);
                ResourceLabel.InitializeRequest(
                  PackingRule."Resource Label Code",FastPackLineTmp."No. of Labels",
                  TRUE,PackingControl."Source ID",Package."No.",TRUE);
                ResourceLabel.RUNMODAL;
              END;
          END;
        UNTIL FastPackLineTmp.NEXT = 0;
    END;

    PROCEDURE PrintBillOfLadingLabel@1240030003(BillOfLading@1240030000 : Record 14000822;VAR PackingControl@1240030001 : Record 14000717) : Boolean;
    VAR
      PackingRule@1240030003 : Record 14000715;
    BEGIN
      TestInitialized;

      IF BillOfLading."No." = '' THEN BEGIN
        PackingControl."Error Message" := Text122;
        EXIT(FALSE);
      END;

      PackingRule.GetPackingRule(
        BillOfLading."Ship-to Type",BillOfLading."Ship-to No.",BillOfLading."Ship-to Code");

      IF PackingRule."Bill of Lading Label Code" = '' THEN BEGIN
        PackingControl."Error Message" := Text123;
        EXIT(FALSE);
      END;

      BillOfLading.PrintLabel;
      EXIT(TRUE);
    END;

    PROCEDURE Initialize@62(NewPackingStation@1240030000 : Record 14000709;NewShippingSetup@1240030001 : Record 14000707);
    BEGIN
      PackingStation := NewPackingStation;
      ShippingSetup := NewShippingSetup;
      Initialized := TRUE;
    END;

    LOCAL PROCEDURE TestInitialized@64();
    BEGIN
      IF NOT Initialized THEN
        ERROR(Text119);
    END;

    PROCEDURE CreateSelectExportDoc@1240031005(VAR PackingControl@1240030000 : Record 14000717;CurrentPackageNo@1240030001 : Code[20];Create@1240030009 : Boolean;FromPacking@1240030012 : Boolean) : Boolean;
    BEGIN
      TestInitialized;
      IF NOT ShippingSetup."Disable Export Documentation" THEN
        EXIT(
          ExportDocMgt.CreateSelectExportDoc(
            PackingControl,CurrentPackageNo,Create,FromPacking,ShippingSetup,PackingStation));
    END;

    PROCEDURE ViewExportDoc@1240031003(VAR PackingControl@1240030000 : Record 14000717);
    BEGIN
      TestInitialized;
      ShippingSetup.TESTFIELD("Disable Export Documentation",FALSE);
      ExportDocMgt.ViewExportDoc(PackingControl."Export Document No.");
    END;

    PROCEDURE PackagesExist@1240030006(PackingControl@1240030000 : Record 14000717) : Boolean;
    VAR
      Package@1240030001 : Record 14000701;
    BEGIN
      TestInitialized;

      Package.RESET;
      Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
      Package.SETRANGE("Source Type",PackingControl."Source Type");
      Package.SETRANGE("Source Subtype",PackingControl."Source Subtype");
      Package.SETRANGE("Source ID",PackingControl."Source ID");
      Package.SETRANGE("Multi Document Package",FALSE);

      IF ShippingSetup."Location Packing" THEN
        Package.SETRANGE("Location Code",PackingStation."Location Code");

      IF Package.FIND('-') THEN
        EXIT(TRUE);

      Package.RESET;
      Package.SETRANGE("Source Type",PackingControl."Source Type");
      Package.SETRANGE("Source Subtype",PackingControl."Source Subtype");
      Package.SETFILTER("Multi Document No.",'*' + PackingControl."Source ID" + '*');
      Package.SETRANGE("Multi Document Package",TRUE);

      IF ShippingSetup."Location Packing" THEN
        Package.SETRANGE("Location Code",PackingStation."Location Code");

      IF Package.FIND('-') THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE ExportDoc@1240030008(VAR PackingControl@1240030000 : Record 14000717;Create@1240030001 : Boolean) : Boolean;
    VAR
      Package@1240030002 : Record 14000701;
    BEGIN
      TestInitialized;
      ShippingSetup.TESTFIELD("Disable Export Documentation",FALSE);

      IF NOT PackingControl.Prepack AND
         (PackingControl."Export Document No." = '')
      THEN BEGIN
        Package.SETCURRENTKEY("Source Type","Source Subtype","Source ID");
        Package.SETRANGE("Source Type",PackingControl."Source Type");
        Package.SETRANGE("Source Subtype",PackingControl."Source Subtype");
        IF PackingControl."Multi Document Package" THEN
          Package.SETFILTER("Source ID",PackingControl."Multi Document No.")
        ELSE
          Package.SETRANGE("Source ID",PackingControl."Source ID");
        IF ShippingSetup."Location Packing" THEN
          Package.SETRANGE("Location Code",PackingStation."Location Code");
        Package.SETRANGE(Closed,TRUE);
        IF Package.FIND('-') THEN BEGIN
          PackingControl."Error Message" :=
            STRSUBSTNO(Text125,PackingControl.FIELDNAME(Prepack),Package.FIELDNAME(Closed));
          EXIT(FALSE);
        END;
      END;

      IF CreateSelectExportDoc(PackingControl,'',TRUE,FALSE) THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE UpdateExportDocDetail@1240030012(VAR PackingControl@1240030000 : Record 14000717) : Boolean;
    VAR
      ExportSourceLine@1240030001 : Record 14000983;
    BEGIN
      TestInitialized;
      ShippingSetup.TESTFIELD("Disable Export Documentation",FALSE);
      PackingControl.TESTFIELD("Export Document No.");
      ExportSourceLine.ReCreateAllSrceLinesFromPkgs(
        PackingControl."Export Document No.",ShippingSetup,FALSE);
    END;

    PROCEDURE RegisterWarehousePick@1240030009(VAR PackingControl@1240030001 : Record 14000717) : Boolean;
    VAR
      TempSourceID@1240030000 : Text[250];
    BEGIN
      IF PackingControl."Multi Document Package" THEN BEGIN
        TempSourceID := PackingControl."Multi Document No.";
        WHILE STRPOS(TempSourceID,'|') > 0 DO BEGIN
          RegisterPick(
            PackingControl."Source Type",PackingControl."Source Subtype",
            COPYSTR(TempSourceID,1,STRPOS(TempSourceID,'|') - 1));
          TempSourceID := COPYSTR(TempSourceID,STRPOS(TempSourceID,'|') + 1);
        END;
        RegisterPick(PackingControl."Source Type",PackingControl."Source Subtype",TempSourceID);
      END ELSE
        RegisterPick(
          PackingControl."Source Type",PackingControl."Source Subtype",PackingControl."Source ID");

      EXIT(TRUE);
    END;

    PROCEDURE RateShopOrder@1240030010(VAR PackingControl@1240030000 : Record 14000717);
    VAR
      SalesHeader@1240030001 : Record 36;
      PurchHeader@1240030002 : Record 38;
      TransferHeader@1240030003 : Record 5740;
    BEGIN
      PackingControl.TESTFIELD("Multi Document Package",FALSE);

      CASE PackingControl."Source Type" OF
        DATABASE::"Sales Header":
          BEGIN
            SalesHeader.GET(PackingControl."Source Subtype",PackingControl."Source ID");
            Shipping.RateShopSalesHeader(SalesHeader);
          END;
        DATABASE::"Purchase Header":
          BEGIN
            PurchHeader.GET(PackingControl."Source Subtype",PackingControl."Source ID");
            Shipping.RateShopPurchHeader(PurchHeader);
          END;
        DATABASE::"Transfer Header":
          BEGIN
            TransferHeader.GET(PackingControl."Source ID");

            Shipping.RateShopTransferHeader(TransferHeader);
          END;
        ELSE
          PackingControl.ErrorUnknownSourceType2;
      END;
    END;

    PROCEDURE ViewWarehousePickLines@1000000000(VAR PackingControl@1000000000 : Record 14000717) : Boolean;
    VAR
      WarehouseActivityLine@1000000004 : Record 5767;
      LastWarehouseActivityLine@1000000003 : Record 5767;
      WhseActivHeader@1000000001 : Record 5766;
      WhseDocCount@1000000002 : Integer;
    BEGIN
      //TM BEG 061115 - UPG
      IF PackingControl."Multi Document Package" = FALSE THEN BEGIN
        WhseActivHeader.RESET;
        WhseActivHeader.SETCURRENTKEY("Source Document","Source No.","Location Code");
        WhseActivHeader.SETRANGE(Type, WhseActivHeader.Type::Pick);
        WhseActivHeader.SETRANGE("Location Code", PackingStation."Location Code");
        WhseActivHeader.SETRANGE("Source Type", PackingControl."Source Type"+1);
        WhseActivHeader.SETRANGE("Source No.", PackingControl."Source ID");
        WhseDocCount := WhseActivHeader.COUNT;
        IF WhseDocCount <= 0 THEN BEGIN
          PackingControl."Error Message" := Text50000;
          EXIT(FALSE);
        END;

        IF WhseDocCount = 1 THEN
          PAGE.RUNMODAL(PAGE::"Warehouse Pick",WhseActivHeader)
        ELSE
          PAGE.RUNMODAL(PAGE::"Warehouse Picks",WhseActivHeader);
        EXIT(TRUE);
      END ELSE BEGIN
        WhseActivHeader.RESET;
        WhseActivHeader.SETCURRENTKEY("Source Document","Source No.","Location Code");
        WhseActivHeader.SETRANGE(Type, WhseActivHeader.Type::Pick);
        WhseActivHeader.SETRANGE("Location Code", PackingStation."Location Code");
        WhseActivHeader.SETRANGE("Source Type", PackingControl."Source Type"+1);
        WhseActivHeader.SETFILTER("Source No.", PackingControl."Multi Document No.");
        WhseDocCount := WhseActivHeader.COUNT;
        IF WhseDocCount = 1 THEN BEGIN
          PAGE.RUNMODAL(PAGE::"Warehouse Pick",WhseActivHeader);
          EXIT(TRUE);
        END;
      END;

      WarehouseActivityLine.RESET;
      WarehouseActivityLine.SETCURRENTKEY(
        "Activity Type","No.","Location Code","Source Document","Source No.","Action Type","Zone Code");
        //"Source Type","Source Subtype","Source No.","Source Line No.","Source Subline No.");
      WarehouseActivityLine.SETRANGE("Source Type", PackingControl."Source Type"+1);
      WarehouseActivityLine.SETRANGE("Source Subtype",PackingControl."Source Subtype");
      WarehouseActivityLine.SETRANGE("Location Code", PackingStation."Location Code");
      IF PackingControl."Multi Document No." <> '' THEN
        WarehouseActivityLine.SETFILTER("Source No.",PackingControl."Multi Document No.")
      ELSE
        WarehouseActivityLine.SETRANGE("Source No.",PackingControl."Source ID");
      WarehouseActivityLine.SETRANGE("Activity Type",WarehouseActivityLine."Activity Type"::Pick);
      IF NOT WarehouseActivityLine.FIND('-') THEN BEGIN
        PackingControl."Error Message" := Text50001;
        EXIT(FALSE);
      END;


      PAGE.RUNMODAL(0,WarehouseActivityLine);
      EXIT(TRUE);

      //TM END 061115
    END;

    PROCEDURE CheckPickExist@1000000001(SourceType@1240030006 : Integer;SourceSubtype@1240030001 : Integer;SourceID@1240030002 : Code[20]);
    VAR
      WhseActivityLine@1240030000 : Record 5767;
      WhseActivityLine2@1240030004 : Record 5767;
      WhsePostPick@1240030005 : Codeunit 7307;
      LastPickNo@1240030003 : Code[20];
    BEGIN
      //<TPZ1036>
      TestInitialized;

      WhseActivityLine.RESET;
      WhseActivityLine.SETCURRENTKEY(
        "Source Type","Source Subtype","Source No.","Source Line No.","Source Subline No.");
      WhseActivityLine.SETRANGE("Activity Type",WhseActivityLine."Activity Type"::Pick);
      CASE SourceType OF
        DATABASE::"Sales Header":
          WhseActivityLine.SETRANGE("Source Type",DATABASE::"Sales Line");
        DATABASE::"Purchase Header":
          WhseActivityLine.SETRANGE("Source Type",DATABASE::"Purchase Line");
        DATABASE::"Transfer Header":
          WhseActivityLine.SETRANGE("Source Type",DATABASE::"Transfer Line");
      END;
      WhseActivityLine.SETRANGE("Source Subtype",SourceSubtype);
      WhseActivityLine.SETRANGE("Source No.",SourceID);
      IF ShippingSetup."Location Packing" THEN
        WhseActivityLine.SETRANGE("Location Code",PackingStation."Location Code");
      IF WhseActivityLine.FIND('-') THEN
      //  IF CONFIRM(Text50005, FALSE, WhseActivityLine."No.") = FALSE THEN //</TPZ1787> Removed BY EB
          ERROR(Text50004,WhseActivityLine."No.");
      //</TPZ1036>
    END;

    PROCEDURE VolumeAndWeightOverride@1000000002(VAR Package@1000000000 : Record 14000701;ScaleInterface@1000000001 : Record 14000746);
    VAR
      EShipInput@1240030001 : Record 14000728;
      EShipOverrideCubiScan@1240030000 : Page 50023;
    BEGIN
      //<TPZ1296>
      //EB 5/26/16 Added for Cubiscan connection

      TestInitialized;

      Package.MODIFY;
      COMMIT;
      Package.CALCFIELDS(Volume,Length,Width,Height,Cubage);

      CLEAR(EShipInput);
      EShipInput."Package No." := Package."No.";
      EShipInput."Source Type" := Package."Source Type";
      EShipInput."Source Subtype" := Package."Source Subtype";
      EShipInput."Source ID" := Package."Source ID";
      EShipInput."Multi Document No." := Package."Multi Document No.";
      EShipInput.Volume := Package.Volume;
      EShipInput.Length := Package.Length;
      EShipInput.Width := Package.Width;
      EShipInput.Height := Package.Height;
      EShipInput.Cubage := Package.Cubage;
      EShipInput."Shipping Agent Code" := Package."Shipping Agent Code";
      EShipInput."World Wide Service" := Package."World Wide Service";
      EShipInput."Shipping Agent Service" := Package."Shipping Agent Service";
      EShipInput."Override Volume" := Package."Override Volume";
      EShipInput."Override Dimensions" := Package."Override Dimensions";
      EShipInput."Override Length" := Package."Override Length";
      EShipInput."Override Width" := Package."Override Width";
      EShipInput."Override Height" := Package."Override Height";
      IF Package."Scale Weight"<>0 THEN //EB GET Weight From Scale
          EShipInput."Override Weight" :=Package."Scale Weight"
          ELSE
          EShipInput."Override Weight" := Package."Override Weight";
      EShipInput."Shipping Cost" := Package."Shipping Cost";
      EShipInput."Override Dimensions":=TRUE;

      CLEAR(EShipOverrideCubiScan);
      EShipOverrideCubiScan.LOOKUPMODE(TRUE);
      EShipOverrideCubiScan.SetEShipInput(EShipInput);
      IF EShipOverrideCubiScan.RUNMODAL = ACTION::LookupOK THEN BEGIN
        EShipOverrideCubiScan.GetEShipInput(EShipInput);
        Package."Override Volume" := EShipInput."Override Volume";
        Package."Override Dimensions" := EShipInput."Override Dimensions";
        Package."Override Length" := EShipInput."Override Length";
        Package."Override Width" := EShipInput."Override Width";
        Package."Override Height" := EShipInput."Override Height";
        Package."Override Weight" := EShipInput."Override Weight";
        Package."Shipping Cost" := EShipInput."Shipping Cost";
        Package.MODIFY;
        COMMIT;
      END;
    END;

    BEGIN
    {
      TOP040 KT ABCSI Sales Order Split by Location 03032015
        - Added code in CreatePackageLine function to populate custom fields in Package Line table
      TM BEG 071415 <TPZ842> only enter dimension for ups and FedEx

      2015-07-20 TPZ162 TAKHMETO
        CloseOrder and DeleteAllPackages function has been modified
      2015-09-25 TPZ1063 TMEI
        When //CPP, do not allow user to //CPP if pick ticket is not registered.
      2016-03-14 TPZ1435 TMEI
        Shortcut Dimension 5 Code mandatory for Misc. package
      2016-06-05  TPZ1296 EBAGIM
        Cubiscan Connection To Navision Function VolumeAndWeightOverride was added
      2017-07-20 TPZ1787 TMEI
        Give option to allow packer to pack order with open picks
    }
    END.
  }
}

