OBJECT Codeunit 14002358 E.D.I. ASN Send
{
  OBJECT-PROPERTIES
  {
    Date=11/05/21;
    Time=[ 9:35:50 AM];
    Modified=Yes;
    Version List=SE0.61,TPZ3191,TPZ3202;
  }
  PROPERTIES
  {
    TableNo=14000822;
    Permissions=TableData 14000822=rimd;
    OnRun=VAR
            NAVDocument@1240020000 : Code[10];
          BEGIN
            CASE TRUE OF
              (Rec."EDI ASN" = TRUE) AND (Rec."EDI BSN" = FALSE):
                NAVDocument := 'E_SLSASN';
              (Rec."EDI ASN" = TRUE) AND (Rec."EDI BSN" = TRUE):
                NAVDocument := 'E_SLSBSN';
            END;
            IF NOT ExportASN(Rec,NAVDocument,TRUE) THEN
              ERROR(Text017,Rec."No.");
          END;

  }
  CODE
  {
    VAR
      BillOfLading@1240030000 : Record 14000822;
      BillOfLadingLine@1240030001 : Record 14000823;
      BillOfLadingSummaryLine@1240030002 : Record 14000825;
      BillOfLadingSummaryLine2@1240030104 : Record 14000825;
      EDISetup@1240030003 : Record 14002367;
      EDITemplate@1240030004 : Record 14002350;
      EDITradePartner@1240030005 : Record 14002360;
      EDICustCrossRef@1240030006 : Record 14002362;
      EDIDocument@1240030007 : Record 14002353;
      EDISegment@1240030008 : Record 14002354;
      EDISegment2@1240030009 : Record 14002354;
      EDIElement@1240030011 : Record 14002355;
      EDIRecDocHdr@1240030012 : Record 14002358;
      EDIRecDocFields@1240030013 : Record 14002359;
      EDISendDocHdr@1240030014 : Record 14002369;
      SelltoCustomer@1240030017 : Record 18;
      BilltoCustomer@1240030018 : Record 18;
      CompanyInformation@1240030019 : Record 79;
      ShiptoAddress@1240030020 : Record 222;
      PaymentTerms@1240030022 : Record 3;
      PostedPackage@1240030023 : Record 14000704;
      PostedPackageLine@1240030024 : Record 14000705;
      SalesInvoiceHeader@1240030025 : Record 112;
      SalesInvoiceLine@1240030026 : Record 113;
      SalesHeader@1240030027 : Record 36;
      SalesLine@1240030028 : Record 37;
      SalesShipmentHeader@1240030029 : Record 110;
      SalesShipmentLine@1240030030 : Record 111;
      ShipmentMethod@1240030031 : Record 10;
      ShippingAgent@1240030032 : Record 291;
      Item@1240030033 : Record 27;
      ItemUnitOfMeasure@1240030034 : Record 5404;
      PostedPackage2@1240030111 : Record 14000704;
      EShipAgentService@1240030119 : Record 14000708;
      ItemCrossReference@1240030048 : Record 5717;
      SalesCommentLine@1240020001 : Record 44;
      PackageSummaryLine@1240020002 : Record 14000964;
      EDITradePtnrItem@1240020003 : Record 14002364;
      RoutingRequestHdr@1240020016 : Record 14002402;
      Location@1240020017 : Record 14;
      EDIReceiveDocHdrInfo@1240020022 : Record 14002371;
      EDIReceiveDocLineInfo@1240020018 : Record 14002372;
      EDIRecDocField@1240020033 : Record 14002359;
      SalesCommentLineDetail@1240020011 : Record 44;
      ShipforAddress@1240020036 : Record 222;
      ShiptoCountry@1240020040 : Record 9;
      BilltoCountry@1240020039 : Record 9;
      SelltoCountry@1240020038 : Record 9;
      ShipfromCountry@1240020037 : Record 9;
      EDIFormat@1240030036 : Codeunit 14002351;
      EDISend@1240030038 : Codeunit 14002356;
      EDIPackageMapIntegration@1240030102 : Codeunit 14002378;
      EDIGetReverseCrossRef@1240020004 : Codeunit 14000373;
      CreateEDIAlert@1240020010 : Codeunit 14000375;
      EDILoadDBFields@1240020027 : Codeunit 14002392;
      EDILoadEDIOutFields@1240020028 : Codeunit 14000381;
      i@1240030039 : Integer;
      BooleanVariable@1240030042 : Boolean;
      DateVariable@1240030043 : Date;
      DocumentNo@1240030044 : Code[10];
      IntegerVariable@1240030045 : Integer;
      DecimalVariable@1240030046 : Decimal;
      OutErrorArray@1240030047 : ARRAY [100] OF Boolean;
      OutFldArray@1240030049 : ARRAY [100] OF Text[250];
      OutLenArray@1240030050 : ARRAY [100] OF Integer;
      ProcessingLines@1240030051 : Boolean;
      LineNumber@1240030056 : Integer;
      NetShipWeight@1240030058 : Decimal;
      GrossShipWeight@1240030059 : Decimal;
      PalletWeight@1240030060 : Decimal;
      NetDays@1240030061 : Integer;
      DiscDays@1240030062 : Integer;
      DiscAmt@1240030063 : Decimal;
      DiscountedAmt@1240030064 : Decimal;
      DiscPercent@1240030065 : Decimal;
      TotalUnits@1240030066 : Decimal;
      TotalBaseUnits@1240030067 : Decimal;
      TotalSegments@1240030068 : Integer;
      RecordCount@1240030069 : Integer;
      TradePtnrFound@1240030089 : Boolean;
      OK@1240030090 : Boolean;
      BOLItemQty@1240030091 : Decimal;
      BOLItemQtyBase@1240030092 : Decimal;
      POItemQty@1240030093 : Decimal;
      POItemQtyBase@1240030094 : Decimal;
      TotalBOLTares@1240030095 : Decimal;
      TotalPOTares@1240030096 : Decimal;
      TotalBOLPackages@1240030097 : Decimal;
      TotalPOPackages@1240030098 : Decimal;
      BypassSegment@1240030099 : Boolean;
      NewSegment@1240030100 : Boolean;
      EDIElementArray@1240030101 : ARRAY [100] OF Record 14002355;
      Text001@1001 : TextConst 'ENU=Customer %1 is not set up as an EDI Trading Partner.';
      Text002@1002 : TextConst 'ENU=EDI Document map not found for %1 %2';
      Text003@1003 : TextConst 'ENU=EDI Document %1 for Trading Partner %2 has a mapping error.';
      Text004@1004 : TextConst 'ENU=Unable to find EDI segment definition for Trading Partner %1.';
      Text005@1005 : TextConst 'ENU=Sales Shipment Line not found for Package %1 Item %2.';
      Text006@1006 : TextConst 'ENU=BOL ASN Summary not found for Bill of Lading %1.';
      Text007@1007 : TextConst 'ENU=Unable to find HL END segment.';
      Text008@1008 : TextConst 'ENU=HL SHIP BEGIN not found for Trading Partner %1 document %2.';
      Text009@1009 : TextConst 'ENU=HL PO BEGIN not found for Trading Partner %1 document %2.';
      Text010@1010 : TextConst 'ENU=HL TARE BEGIN not found for Trading Partner %1 document %2.';
      Text011@1011 : TextConst 'ENU=HL PACK BEGIN not found for Trading Partner %1 document %2.';
      Text012@1012 : TextConst 'ENU=HL ITEM BEGIN not found for Trading Partner %1 document %2.';
      Text013@1013 : TextConst 'ENU=Unable to find EDI Element for the following: %1 - %2 - %3 - %4';
      TotalLINSegments@1240030103 : Decimal;
      x@1240030105 : Integer;
      y@1240030109 : Integer;
      StdPackQtyArray@1240030106 : ARRAY [500] OF Decimal;
      PackageQtyArray@1240030107 : ARRAY [500] OF Decimal;
      Finished@1240030108 : Boolean;
      PackageUnderItem@1240030110 : Decimal;
      TotalPO1Segments@1240020013 : Decimal;
      InternalDocNo@1240030120 : Code[10];
      InvoiceFound@1240030121 : Boolean;
      InvGrossAmt@1240030124 : Decimal;
      TotalInvDiscount@1240030125 : Decimal;
      InvoiceTaxPercent@1240030126 : Decimal;
      InvoiceTax@1240030127 : Decimal;
      PmtNetDays@1240030135 : Integer;
      PmtDiscDays@1240030134 : Integer;
      PmtDiscAmt@1240030133 : Decimal;
      PmtDiscountedAmt@1240030132 : Decimal;
      PmtDiscPercent@1240030131 : Decimal;
      Text014@1240030010 : TextConst 'ENU=Associated Sales Invoice No. should be present on Sales Shipment Hdr. prior to creating the BSN.\';
      Text015@1240030015 : TextConst 'ENU=Sales Shipment(s) on BOL %1 do not have a Shipment Invoice No. \Continue with creation of BSN?';
      Text016@1240030021 : TextConst 'ENU=BSN not created.';
      LoopFinished@1240030040 : Boolean;
      RepeatCount@1240030041 : Integer;
      LoopCnt@1240020000 : Integer;
      RecordNo@1240020014 : Integer;
      ReverseCrossReference@1240020009 : Boolean;
      ReverseCrossRefArray@1240020008 : ARRAY [100] OF Text[40];
      ReverseCrossRefValue@1240020007 : Text[40];
      BypassSegment2@1240020006 : Boolean;
      OutError2@1240020005 : Boolean;
      Text017@1240020015 : TextConst 'ENU=Shipping Notice not created for Bill of Lading %1.';
      CPSCount@1240020021 : Integer;
      DockCode@1240020020 : Code[30];
      PrevDockCode@1240020019 : Code[30];
      GenericCounter@1240020023 : Integer;
      TimeVariable@1240020024 : Time;
      DateTimeVariable@1240020025 : DateTime;
      RecRef@1240020026 : RecordRef;
      TotalNoOfPackages@1240020029 : Integer;
      OverrideASNMap@1240020030 : Boolean;
      SalesShipmentLineNo@1240020031 : Integer;
      Text018@1240020032 : TextConst 'ENU=EDI Document override ASN map not found for %1 %2';
      SLNFound@1240020034 : Boolean;
      SLNGroup@1240020035 : Integer;
      SLNSegmentID@1240020111 : Code[15];
      XMLDoc@1240020012 : Boolean;
      LicensePlateHeader@1000000000 : Record 23044505;
      LicensePlateLine@1000000001 : Record 23044506;
      IWXLicensePlateHeader@1000000002 : Record 23044505;
      LPBOLSummaryLine@1000000004 : Record 50065;
      LPBOLSummaryLine2@1000000003 : Record 50065;

    PROCEDURE ExportASN@18(VAR CurrentBillOfLading@1240030001 : Record 14000822;NAVDocument@1240030002 : Code[10];Batch@1240030004 : Boolean) ErrCode@1240030000 : Boolean;
    VAR
      EDIXMLManagement@1240020000 : Codeunit 14099302;
    BEGIN
      BillOfLading.COPY(CurrentBillOfLading);

      BillOfLading.CALCFIELDS("Posted Weight");

      // Check Customer Number on Trading Partner Setup
      EDITradePartner.SETCURRENTKEY("Customer No.");
      EDITradePartner.SETRANGE("Customer No.",BillOfLading."Ship-to No.");
      IF EDITradePartner.FIND('-') THEN BEGIN
        TradePtnrFound := TRUE;
        EDICustCrossRef.INIT;
        EDICustCrossRef.RESET;
        EDICustCrossRef.SETRANGE("Trade Partner No.",EDITradePartner."No.");
        EDICustCrossRef.SETRANGE("Navision Ship To Code",BillOfLading."Ship-to Code");
        OK := EDICustCrossRef.FIND('-');
      END;

      // Check Customer Number in EDI Customer Cross Reference table
      IF NOT TradePtnrFound THEN BEGIN
        EDICustCrossRef.INIT;
        EDICustCrossRef.SETCURRENTKEY("Navision Sell To Code");
        EDICustCrossRef.SETRANGE("Navision Sell To Code",BillOfLading."Ship-to No.");
        EDICustCrossRef.SETRANGE("Navision Ship To Code",BillOfLading."Ship-to Code");
        IF EDICustCrossRef.FIND('-') THEN BEGIN
          EDITradePartner.GET(EDICustCrossRef."Trade Partner No.");
          TradePtnrFound := TRUE;
        END;
      END;
      IF NOT TradePtnrFound THEN
        ERROR(Text001,BillOfLading."Ship-to No.");

      // Get Shipment Associated Tables
      CompanyInformation.GET;
      SelltoCustomer.GET(BillOfLading."Ship-to No.");
      ShippingAgent.GET(BillOfLading."Shipping Agent Code");
      EShipAgentService.GET(
        BillOfLading."Shipping Agent Code",BillOfLading."Shipping Agent Service",
        BillOfLading."World Wide Service");
      ShiptoAddress.INIT;
        IF BillOfLading."Ship-to Code" <> '' THEN
          ShiptoAddress.GET(BillOfLading."Ship-to No.",BillOfLading."Ship-to Code");
      IF RoutingRequestHdr.READPERMISSION THEN BEGIN
        RoutingRequestHdr.RESET;
        RoutingRequestHdr.SETCURRENTKEY("Bill of Lading No.");
        RoutingRequestHdr.SETRANGE("Bill of Lading No.",'<>%1','');
       RoutingRequestHdr.SETRANGE("Bill of Lading No.",BillOfLading."No.");
        IF NOT RoutingRequestHdr.FIND('-') THEN
          CLEAR(RoutingRequestHdr);
      END;
      IF BillOfLading."Location Code" <> '' THEN
        IF NOT Location.GET(BillOfLading."Location Code") THEN
          CLEAR(Location);
      IF BillOfLading."Ship-to Country Code" <> '' THEN
        IF NOT ShiptoCountry.GET(BillOfLading."Ship-to Country Code") THEN
          CLEAR(ShiptoCountry);
      IF BillOfLading."Ship-from Country Code" <> '' THEN
        IF NOT ShipfromCountry.GET(BillOfLading."Ship-from Country Code") THEN
          CLEAR(ShipfromCountry);

      DocumentNo := NAVDocument;

      EDIDocument.SETRANGE("Trade Partner No.",EDITradePartner."No.");
      EDIDocument.SETFILTER(Status,'%1|%2',EDIDocument.Status::Test,EDIDocument.Status::Production);
      EDIDocument.SETRANGE(EDIDocument."Navision Document",DocumentNo);
      EDIDocument.SETRANGE("Override Map",TRUE);
      IF EDIDocument.FIND('-') THEN BEGIN
        IF EDIDocument."Override ASN Type" <> EDIDocument."Override ASN Type"::" " THEN
          GetASNMap;
      END;
      EDIDocument.SETRANGE("Trade Partner No.",EDITradePartner."No.");
      EDIDocument.SETFILTER(Status,'%1|%2',EDIDocument.Status::Test,EDIDocument.Status::Production);
      EDIDocument.SETRANGE(EDIDocument."Navision Document",DocumentNo);
      IF OverrideASNMap THEN
        EDIDocument.SETRANGE("Override Map",TRUE)
      ELSE
        EDIDocument.SETRANGE("Override Map",FALSE);
      IF NOT EDIDocument.FIND('-') THEN BEGIN
        IF OverrideASNMap THEN
          ERROR(Text018,EDITradePartner."No.",DocumentNo)
        ELSE
          ERROR(Text002,EDITradePartner."No.",DocumentNo);
      END;
      XMLDoc := EDIDocument."XML Document";

      IF DocumentNo = 'E_SLSBSN' THEN
        ShipmentInvoiceRequired(Batch);

      EDITemplate.GET(EDIDocument."EDI Template Code");

      IF EDIDocument."Packaged Map" THEN BEGIN
        IF EDIPackageMapIntegration.EDIASNSend(BillOfLading) THEN
        // IF EDIASNSendPM.ExportASN(BillOfLading) THEN
          EXIT(TRUE)
        ELSE
          EXIT(FALSE);
      END;

      EDIDocument.CALCFIELDS("Element Mapping Error","Conditional Mapping Error");
      IF EDIDocument."Element Mapping Error" OR EDIDocument."Conditional Mapping Error" THEN
        ERROR(
          Text003,
          EDIDocument."Navision Document",EDIDocument."Trade Partner No.");

      LineNumber := 0;
      NetShipWeight := 0;
      GrossShipWeight := 0;
      PalletWeight := 0;
      TotalUnits := 0;
      TotalBaseUnits := 0;
      TotalSegments := 0;
      CPSCount := 0;
      DockCode := '';
      PrevDockCode := '';

      IF BillOfLading."EDI Internal Doc. No." = '' THEN BEGIN
        EDISetup.LOCKTABLE;
        EDISetup.GET;
        EDISetup."Last Internal Doc. No." := INCSTR(EDISetup."Last Internal Doc. No.");
        BillOfLading."EDI Internal Doc. No." := EDISetup."Last Internal Doc. No.";
        EDISetup.MODIFY;
      END;

      EDISendDocHdr."Internal Doc No." := BillOfLading."EDI Internal Doc. No.";
      EDISendDocHdr."Navision Document" := DocumentNo;
      EDISendDocHdr."Document No." := BillOfLading."No.";
      EDISend.CreateSendHdr(EDITradePartner,EDIDocument,EDISendDocHdr);

      CreateASNSegments;

      IF EDISetup."Send Document Error" THEN BEGIN
        EDISendDocHdr.CALCFIELDS("Data Error");
        IF EDISendDocHdr."Data Error" THEN BEGIN
          CLEAR(CreateEDIAlert);
          CreateEDIAlert.CreateAlertSendDocError(EDISendDocHdr."No.",1,FALSE);
        END;
      END;

      CASE NAVDocument OF
        'E_SLSASN':
          BEGIN
            BillOfLading.VALIDATE("EDI ASN Generated",TRUE);
            BillOfLading."EDI ASN Gen. Date" := WORKDATE;
            BillOfLading.MODIFY;
          END;
        'E_SLSBSN':
          BEGIN
            BillOfLading.VALIDATE("EDI BSN Generated",TRUE);
            BillOfLading."EDI BSN Gen. Date" := WORKDATE;
            BillOfLading.MODIFY;
          END;
      END;

      IF XMLDoc THEN
        EDIXMLManagement.ResponseIDSubstitution(EDISendDocHdr);

      EXIT(TRUE);
    END;

    PROCEDURE CreateASNSegments@24();
    VAR
      PostedPackageLine2@1240020000 : Record 14000705;
      SingleItem@1240020001 : Boolean;
      MultipleItems@1240020002 : Boolean;
      BillOfladingInfoLine@1000000005 : Record 14000827;
      SalesShipmentHeaderLocal@1000000004 : Record 110;
      PostedPackageLocal@1000000003 : Record 14000704;
      BillofLadingSummaryLineLocal@1000000002 : Record 14000825;
      BOLMgt@1000000001 : Codeunit 14000821;
      BOLSummaryFlag@1000000000 : Boolean;
      LicensePlateLine2@1000000006 : Record 23044506;
    BEGIN
      EDISegment.SETRANGE("Trade Partner No.",EDIDocument."Trade Partner No.");
      EDISegment.SETRANGE("Navision Document",EDIDocument."Navision Document");
      EDISegment.SETRANGE("EDI Document No.",EDIDocument."EDI Document No.");
      EDISegment.SETRANGE(Version,EDIDocument.Version);
      IF NOT EDISegment.FIND('-') THEN
        ERROR(Text004,
              EDIDocument."Trade Partner No.");

      //<TPZ2409>
      BillOfladingInfoLine.RESET;
      BillOfladingInfoLine.SETRANGE("Bill of Lading No.",BillOfLading."No.");
      BillOfladingInfoLine.SETRANGE("Source Type",36);
      BillOfladingInfoLine.SETFILTER("Source ID",'<>%1','');
      IF BillOfladingInfoLine.FINDSET THEN BEGIN
        REPEAT
          IF BillOfladingInfoLine."EDI ASN" THEN BEGIN
            SalesShipmentHeaderLocal.SETCURRENTKEY("Order No.");
            SalesShipmentHeaderLocal.SETRANGE("Order No.",BillOfladingInfoLine."Source ID");
            IF SalesShipmentHeaderLocal.FINDSET THEN BEGIN
              REPEAT
                IF SalesShipmentHeaderLocal."Bill of Lading No." = '' THEN BEGIN
                   SalesShipmentHeaderLocal."Bill of Lading No." := BillOfLading."No.";
                   SalesShipmentHeaderLocal.MODIFY;
                END;
              UNTIL SalesShipmentHeaderLocal.NEXT = 0;
            END;

            IF BillOfLading."Summary Released" = TRUE THEN BEGIN
             BOLSummaryFlag := TRUE;
             BillOfLading."Summary Released":=FALSE;
             BillOfLading.MODIFY;
            END;

            BOLMgt.UpdateASNSummaryLines1(BillOfLading);

            IF BOLSummaryFlag THEN BEGIN
             BillOfLading."Summary Released":=TRUE;
             BillOfLading.MODIFY;
            END;
            CLEAR(BOLSummaryFlag);
          END;
        UNTIL BillOfladingInfoLine.NEXT=0;
      END;
      //</TPZ2409>

      // Create Header Segments and Elements
      SalesShipmentHeader.SETCURRENTKEY(SalesShipmentHeader."Bill of Lading No.");
      SalesShipmentHeader.SETRANGE("Bill of Lading No.",BillOfLading."No.");
      IF SalesShipmentHeader.FIND('-') THEN BEGIN
        SalesShipmentHeader.RESET;

        PostedPackage.RESET;
        PostedPackage.SETCURRENTKEY(
          "Source Type","Source Subtype","Posted Source ID","Bill of Lading No.");
        PostedPackage.SETRANGE("Source Type",36);
        PostedPackage.SETRANGE("Posted Source ID",SalesShipmentHeader."No.");
        //PostedPackage.FIND('-'); //code commented TPZ3191
        IF PostedPackage.FIND('-') THEN; //TPZ3191
      END ELSE BEGIN
        PostedPackage.RESET;
        PostedPackage.SETCURRENTKEY("Bill of Lading No.");
        PostedPackage.SETRANGE("Bill of Lading No.",BillOfLading."No.");
        PostedPackage.FIND('-');
        SalesShipmentHeader.GET(PostedPackage."Posted Source ID");
      END;

      SalesCommentLine.RESET;
      SalesCommentLine.SETRANGE("Document Type",SalesCommentLine."Document Type"::Shipment);
      SalesCommentLine.SETRANGE("No.",SalesShipmentHeader."No.");
      IF NOT SalesCommentLine.FIND('-') THEN
        SalesCommentLine.INIT;

      EDIReceiveDocHdrInfo.RESET;
      EDIReceiveDocHdrInfo.SETCURRENTKEY("Document No.");
      EDIReceiveDocHdrInfo.SETRANGE("Document No.",SalesShipmentHeader."Order No.");
      EDIReceiveDocHdrInfo.SETRANGE("Internal Doc. No.",SalesShipmentHeader."EDI Internal Doc. No.");
      IF NOT EDIReceiveDocHdrInfo.FIND('-') THEN
        CLEAR(EDIReceiveDocHdrInfo);

      ProcessingLines := FALSE;
      REPEAT
        IF (EDISegment."Segment Type" <> EDISegment."Segment Type"::Command) THEN BEGIN
          TotalSegments := TotalSegments + 1;
          CreateASNElements(EDISegment);
          IF (EDISegment."Repeat Segment") AND (NOT LoopFinished) THEN BEGIN
            GetNextRecord;
            EDISegment.NEXT(-1);
          END;
        END;
      UNTIL (EDISegment.NEXT = 0) OR
        (EDISegment."Segment Type" = EDISegment."Segment Type"::Command);

      // Create Detail Segments and Elements
      BillOfLadingSummaryLine.RESET;
      BillOfLadingSummaryLine.SETRANGE("Bill of Lading No.",BillOfLading."No.");
      BillOfLadingSummaryLine.SETRANGE("Bill of Lading Type",BillOfLadingSummaryLine."Bill of Lading Type"::"ASN (EDI)");
      IF BillOfLadingSummaryLine.FIND('-') THEN BEGIN
        REPEAT
          IF BillOfLadingSummaryLine."Posted Source ID" <> '' THEN
            SalesShipmentHeader.GET(BillOfLadingSummaryLine."Posted Source ID");
          EDISegment2.RESET;
          EDISegment2.SETRANGE("Trade Partner No.",EDIDocument."Trade Partner No.");
          EDISegment2.SETRANGE("Navision Document",EDIDocument."Navision Document");
          EDISegment2.SETRANGE("EDI Document No.",EDIDocument."EDI Document No.");
          EDISegment2.SETRANGE(Version,EDIDocument.Version);
          EDISegment2.SETRANGE("Segment Type",EDISegment2."Segment Type"::Command);
          CASE BillOfLadingSummaryLine.Type OF
            BillOfLadingSummaryLine.Type::"Bill of Lading":
              BEGIN
                ProcessingLines := FALSE;
                PostedPackage.RESET;
                PostedPackage.SETCURRENTKEY(
                  "Source Type","Source Subtype","Posted Source ID","Bill of Lading No.");
                PostedPackage.SETRANGE("Source Type",36);
                PostedPackage.SETRANGE("Source Subtype",1);
                PostedPackage.SETRANGE("Posted Source ID",SalesShipmentHeader."No.");
                //PostedPackage.FIND('-'); //code commented TPZ3191
                IF PostedPackage.FIND('-') THEN; //<TPZ3191>
                LicensePlateHeader.RESET;
                LicensePlateHeader.SETRANGE("Package Tracking Number",SalesShipmentHeader."Package Tracking No.");
                IF LicensePlateHeader.FIND('-') THEN;
                //</TPZ3191>
                CLEAR(ShipforAddress);
                IF SalesShipmentHeader."Ship-for Code" <> '' THEN
                  ShipforAddress.GET(
                    SalesShipmentHeader."Sell-to Customer No.",SalesShipmentHeader."Ship-for Code");
                IF SalesShipmentHeader."Sell-to Country/Region Code" <> '' THEN
                  IF NOT SelltoCountry.GET(SalesShipmentHeader."Sell-to Country/Region Code") THEN
                    CLEAR(SelltoCountry);
                IF SalesShipmentHeader."Bill-to Country/Region Code" <> '' THEN
                  IF NOT BilltoCountry.GET(SalesShipmentHeader."Bill-to Country/Region Code") THEN
                    CLEAR(BilltoCountry);
                IF BillOfLading."Ship-to Country Code" <> '' THEN
                  IF NOT ShiptoCountry.GET(BillOfLading."Ship-to Country Code") THEN
                    CLEAR(ShiptoCountry);
                IF BillOfLading."Ship-from Country Code" <> '' THEN
                  IF NOT ShipfromCountry.GET(BillOfLading."Ship-from Country Code") THEN
                    CLEAR(ShipfromCountry);
                //TotalBOLPackages := PostedPackage.COUNT; //code commented TPZ3191
                TotalBOLPackages := PostedPackage.COUNT + LicensePlateHeader.COUNT;
                TotalNoOfPackages := BillOfLadingSummaryLine."No. of Packages with Items";
                ExportBillOfLading;
                TotalBOLPackages := 0;
              END;
            BillOfLadingSummaryLine.Type::"Purchase Order":
              BEGIN
                InvoiceFound := FALSE;
                CLEAR(SalesShipmentHeader);
                IF NOT SalesShipmentHeader.GET(BillOfLadingSummaryLine."Posted Source ID") THEN
                  ;
                CLEAR(SalesInvoiceHeader);
                IF BillOfLadingSummaryLine."Custom Value 1" <> '' THEN BEGIN
                  IF SalesInvoiceHeader.GET(BillOfLadingSummaryLine."Custom Value 1") THEN ;
                END ELSE
                  IF SalesShipmentHeader."Shipment Invoice No." <> '' THEN
                    IF SalesInvoiceHeader.GET(SalesShipmentHeader."Shipment Invoice No.") THEN BEGIN
                      InvoiceFound := TRUE;
                      InvGrossAmt := 0;
                      TotalInvDiscount := 0;
                      InvoiceTaxPercent := 0;
                      SalesInvoiceHeader.CALCFIELDS("Amount Including VAT",Amount);
                      InvoiceTax := SalesInvoiceHeader."Amount Including VAT" - SalesInvoiceHeader.Amount;
                      IF SalesInvoiceHeader.Amount > 0 THEN
                        InvoiceTaxPercent := (InvoiceTax / SalesInvoiceHeader.Amount) * 100;
                      PaymentTerms.INIT;
                      IF SalesInvoiceHeader."Payment Terms Code" <> '' THEN BEGIN
                        PaymentTerms.GET(SalesInvoiceHeader."Payment Terms Code");
                        PmtDiscPercent := PaymentTerms."Discount %";
                        PmtDiscAmt := ROUND(
                          (SalesInvoiceHeader."Amount Including VAT" * PaymentTerms."Discount %") / 100);
                        PmtDiscountedAmt := SalesInvoiceHeader."Amount Including VAT" - PmtDiscAmt;
                        PmtDiscDays := (CALCDATE(PaymentTerms."Discount Date Calculation",TODAY) - TODAY);
                        PmtNetDays := (CALCDATE(PaymentTerms."Due Date Calculation",TODAY) - TODAY);
                      END ELSE BEGIN
                        PmtNetDays := 0;
                        PmtDiscDays := 0;
                        PmtDiscAmt := 0;
                        PmtDiscPercent := 0;
                      END;
                    END ELSE
                      SalesInvoiceHeader.INIT;
                PostedPackage.RESET;
                PostedPackage.SETCURRENTKEY(
                  "Source Type","Source Subtype","Posted Source ID","Bill of Lading No.");
                PostedPackage.SETRANGE("Source Type",36);
                PostedPackage.SETRANGE("Source Subtype",1);
                PostedPackage.SETRANGE("Posted Source ID",SalesShipmentHeader."No.");
                IF PostedPackage.FIND('-') THEN;
                //<TPZ3202>
                LicensePlateHeader.RESET;
                LicensePlateHeader.SETRANGE("Package Tracking Number",SalesShipmentHeader."Package Tracking No.");
                IF LicensePlateHeader.FIND('-') THEN;
                //</TPZ3202>
                TotalPOPackages := PostedPackage.COUNT + LicensePlateHeader.COUNT;
                ShiptoAddress.INIT;
                IF SalesShipmentHeader."Ship-to Code" <> '' THEN
                  ShiptoAddress.GET(
                    SalesShipmentHeader."Sell-to Customer No.",SalesShipmentHeader."Ship-to Code");
                EDIReceiveDocHdrInfo.RESET;
                EDIReceiveDocHdrInfo.SETCURRENTKEY("Document No.");
                EDIReceiveDocHdrInfo.SETRANGE("Document No.",SalesShipmentHeader."Order No.");
                EDIReceiveDocHdrInfo.SETRANGE("Internal Doc. No.",SalesShipmentHeader."EDI Internal Doc. No.");
                IF NOT EDIReceiveDocHdrInfo.FIND('-') THEN
                  CLEAR(EDIReceiveDocHdrInfo);
                CLEAR(ShipforAddress);
                IF SalesShipmentHeader."Ship-for Code" <> '' THEN
                  ShipforAddress.GET(
                    SalesShipmentHeader."Sell-to Customer No.",SalesShipmentHeader."Ship-for Code");
                IF SalesShipmentHeader."Sell-to Country/Region Code" <> '' THEN
                  IF NOT SelltoCountry.GET(SalesShipmentHeader."Sell-to Country/Region Code") THEN
                    CLEAR(SelltoCountry);
                IF SalesShipmentHeader."Bill-to Country/Region Code" <> '' THEN
                  IF NOT BilltoCountry.GET(SalesShipmentHeader."Bill-to Country/Region Code") THEN
                    CLEAR(BilltoCountry);
                TotalPOTares := 0;
                TotalPOPackages := 0;
                POItemQty := 0;
                POItemQtyBase := 0;
                ProcessingLines := FALSE;
                ExportPurchaseOrder;
                TotalPOPackages := 0;
              END;
            BillOfLadingSummaryLine.Type::Tare:
              BEGIN
                TotalBOLTares := TotalBOLTares + 1;
                TotalPOTares := TotalPOTares + 1;
                ProcessingLines := FALSE;
                PostedPackage.GET(BillOfLadingSummaryLine."Package No.");
                ExportTare;
              END;
            BillOfLadingSummaryLine.Type::Package,BillOfLadingSummaryLine.Type::"Package (Item)":
              BEGIN
                TotalBOLPackages := TotalBOLPackages + 1;
                TotalPOPackages := TotalPOPackages + 1;
                ProcessingLines := FALSE;
                SingleItem := FALSE;
                MultipleItems := FALSE;
                //PostedPackage.GET(BillOfLadingSummaryLine."Package No."); //TPZ3202 code commented
                IF PostedPackage.GET(BillOfLadingSummaryLine."Package No.") THEN BEGIN //TPZ3202
                PackageSummaryLine.RESET;
                PackageSummaryLine.SETRANGE("Package No.",BillOfLadingSummaryLine."Package No.");
                IF NOT PackageSummaryLine.FIND('-') THEN
                  CLEAR(PackageSummaryLine);
                PostedPackageLine.RESET;
                PostedPackageLine.SETRANGE("Package No.",PostedPackage."No.");
                PostedPackageLine.SETRANGE(Type,PostedPackageLine.Type::Item);
                IF PostedPackageLine.FIND('-') THEN BEGIN
                  IF PostedPackageLine.COUNT = 1 THEN
                    SingleItem := TRUE
                  ELSE BEGIN
                    PostedPackageLine.RESET;
                    PostedPackageLine.SETRANGE("Package No.",PostedPackage."No.");
                    PostedPackageLine.SETRANGE(Type,PostedPackageLine.Type::Item);
                    IF PostedPackageLine.FIND('-') THEN BEGIN
                      CLEAR(PostedPackageLine2);
                      PostedPackageLine2 := PostedPackageLine;
                      REPEAT
                        IF (PostedPackageLine2."No." <> PostedPackageLine."No.") OR
                           (PostedPackageLine2."Variant Code" <> PostedPackageLine."Variant Code")
                        THEN BEGIN
                          MultipleItems := TRUE;
                          SingleItem := FALSE;
                        END;
                      UNTIL (PostedPackageLine.NEXT = 0) OR (MultipleItems);
                      IF MultipleItems THEN
                        SingleItem := FALSE
                      ELSE
                        SingleItem := TRUE;
                    END;
                  END;
                END ELSE
                  CLEAR(PostedPackageLine);
                //<TPZ3202>
                END ELSE BEGIN
                  IF LicensePlateHeader.GET(BillOfLadingSummaryLine."Package No.") THEN BEGIN //TPZ3202
                    LicensePlateLine.RESET;
                    LicensePlateLine.SETRANGE("License Plate No.",LicensePlateHeader."No.");
                    LicensePlateLine.SETRANGE(Type,LicensePlateLine.Type::Item);
                    IF LicensePlateLine.FIND('-') THEN BEGIN
                      IF LicensePlateLine.COUNT = 1 THEN
                        SingleItem := TRUE
                      ELSE BEGIN
                        LicensePlateLine.RESET;
                        LicensePlateLine.SETRANGE("License Plate No.",LicensePlateHeader."No.");
                        LicensePlateLine.SETRANGE(Type,LicensePlateLine.Type::Item);
                        IF LicensePlateLine.FIND('-') THEN BEGIN
                          CLEAR(LicensePlateLine2);
                          LicensePlateLine2 := LicensePlateLine;
                          REPEAT
                            IF (LicensePlateLine2."No." <> LicensePlateLine."No.") OR
                               (LicensePlateLine2."Variant Code" <> LicensePlateLine."Variant Code")
                            THEN BEGIN
                              MultipleItems := TRUE;
                              SingleItem := FALSE;
                            END;
                          UNTIL (LicensePlateLine.NEXT = 0) OR (MultipleItems);
                          IF MultipleItems THEN
                            SingleItem := FALSE
                          ELSE
                            SingleItem := TRUE;
                        END;
                      END;
                    END ELSE
                      CLEAR(LicensePlateLine);
                  END;
                END;
                //</TPZ3202>
                IF SingleItem THEN BEGIN
                  SalesShipmentLine.RESET;
                  SalesShipmentLine.SETRANGE("Document No.",PostedPackage."Posted Source ID");
                  SalesShipmentLine.SETRANGE(Type,SalesShipmentLine.Type::Item);
                  SalesShipmentLine.SETRANGE("No.",PostedPackageLine."No.");
                  SalesShipmentLine.SETRANGE("Variant Code",PostedPackageLine."Variant Code");
                  IF NOT SalesShipmentLine.FIND('-') THEN
                    //<TPZ3202>
                    BEGIN
                      SalesShipmentLine.RESET;
                      SalesShipmentLine.SETRANGE("Document No.",SalesShipmentHeader."No.");
                      SalesShipmentLine.SETRANGE(Type,SalesShipmentLine.Type::Item);
                      SalesShipmentLine.SETRANGE("No.",LicensePlateLine."No.");
                      SalesShipmentLine.SETRANGE("Variant Code",LicensePlateLine."Variant Code");
                      IF NOT SalesShipmentLine.FIND('-') THEN
                    CLEAR(SalesShipmentLine);
                    END;
                    //</TPZ3202>
                  IF NOT Item.GET(PostedPackageLine."No.") THEN
                    IF NOT Item.GET(LicensePlateLine."No.") THEN //TPZ3202
                    CLEAR(Item);
                  IF NOT ItemUnitOfMeasure.GET(PostedPackageLine."No.",PostedPackageLine."Unit of Measure Code") THEN
                    IF NOT ItemUnitOfMeasure.GET(LicensePlateLine."No.",LicensePlateLine."Unit of Measure Code") THEN //TPZ3202
                    ItemUnitOfMeasure.INIT;
                  ItemCrossReference.RESET;
                  ItemCrossReference.SETCURRENTKEY("Cross-Reference Type","Cross-Reference Type No.");
                  ItemCrossReference.SETFILTER(
                    "Cross-Reference Type",'<>%1',ItemCrossReference."Cross-Reference Type"::Vendor);
                  ItemCrossReference.SETRANGE(
                    "Cross-Reference Type No.",SalesShipmentHeader."Sell-to Customer No.");
                  ItemCrossReference.SETRANGE("Item No.",SalesShipmentLine."No.");
                  ItemCrossReference.SETRANGE("Variant Code",SalesShipmentLine."Variant Code");
                  IF NOT ItemCrossReference.FIND('-') THEN BEGIN
                    ItemCrossReference.SETRANGE("Cross-Reference Type No.",'');
                    IF NOT ItemCrossReference.FIND('-') THEN
                      CLEAR(ItemCrossReference);
                  END;
                END;
                ExportPackage;
              END;
            BillOfLadingSummaryLine.Type::Item:
              BEGIN
                BOLItemQty := BOLItemQty + BillOfLadingSummaryLine."Package Line Quantity";
                BOLItemQtyBase := BOLItemQtyBase + BillOfLadingSummaryLine."Package Line Quantity (Base)";
                POItemQty := POItemQty + BillOfLadingSummaryLine."Package Line Quantity";
                POItemQtyBase := POItemQtyBase + BillOfLadingSummaryLine."Package Line Quantity (Base)";
                ProcessingLines := TRUE;
                Item.GET(BillOfLadingSummaryLine."No.");
                IF BillOfLadingSummaryLine."Zero ASN Line" THEN
                  CLEAR(PostedPackageLine)
                ELSE
                 IF NOT PostedPackageLine.GET(
                    BillOfLadingSummaryLine."Package No.",BillOfLadingSummaryLine."Package Line Line No.") THEN
                   //<TPZ3202>
                    IF LicensePlateLine.GET(
                      BillOfLadingSummaryLine."Package No.",BillOfLadingSummaryLine."Package Line Line No.") THEN;
                   //</TPZ3202>
                SalesShipmentLine.RESET;
                SalesShipmentLine.SETRANGE("Document No.",BillOfLadingSummaryLine."Posted Source ID");
                SalesShipmentLine.SETRANGE(Type,SalesShipmentLine.Type::Item);
                SalesShipmentLine.SETRANGE("No.",BillOfLadingSummaryLine."No.");
                //<TPZ3202>
                IF PostedPackageLine."Variant Code" = '' THEN
                  SalesShipmentLine.SETRANGE("Variant Code",LicensePlateLine."Variant Code")
                ELSE
                //</TPZ3202>
                SalesShipmentLine.SETRANGE("Variant Code",PostedPackageLine."Variant Code");
                IF BillOfLadingSummaryLine."Custom Value 1" <> '' THEN BEGIN
                  EVALUATE(SalesShipmentLineNo,BillOfLadingSummaryLine."Custom Value 1");
                  SalesShipmentLine.SETRANGE("Line No.",SalesShipmentLineNo);
                END;
                IF NOT SalesShipmentLine.FIND('-') THEN
                  ERROR(
                    Text005,
                    BillOfLadingSummaryLine."Package No.",BillOfLadingSummaryLine."No.");
                IF NOT ItemUnitOfMeasure.GET(SalesShipmentLine."No.",SalesShipmentLine."Unit of Measure Code") THEN
                  ItemUnitOfMeasure.INIT;
                SalesShipmentHeader.GET(SalesShipmentLine."Document No.");
                IF SalesShipmentLine."Blanket Order No." <> '' THEN
                  EDILoadEDIOutFields.CumulativeTotal;
                IF InvoiceFound THEN
                  SalesInvoiceLine.GET(SalesInvoiceHeader."No.",SalesShipmentLine."Line No.")
                ELSE
                 CLEAR(SalesInvoiceLine);
                ItemCrossReference.RESET;
                ItemCrossReference.SETCURRENTKEY("Cross-Reference Type","Cross-Reference Type No.");
                ItemCrossReference.SETFILTER(
                  "Cross-Reference Type",'<>%1',ItemCrossReference."Cross-Reference Type"::Vendor);
                ItemCrossReference.SETRANGE(
                  "Cross-Reference Type No.",SalesShipmentHeader."Sell-to Customer No.");
                ItemCrossReference.SETRANGE("Item No.",SalesShipmentLine."No.");
                ItemCrossReference.SETRANGE("Variant Code",SalesShipmentLine."Variant Code");
                IF NOT ItemCrossReference.FIND('-') THEN BEGIN
                  ItemCrossReference.SETRANGE("Cross-Reference Type No.",'');
                  IF NOT ItemCrossReference.FIND('-') THEN
                    CLEAR(ItemCrossReference);
                END;
                IF NOT PackageSummaryLine.GET(
                  BillOfLadingSummaryLine."Package No.",
                  BillOfLadingSummaryLine."Package Line Line No.")
                THEN
                  CLEAR(PackageSummaryLine);
                EDITradePtnrItem.RESET;
                EDITradePtnrItem.SETRANGE("Trade Partner No.",EDITradePartner."No.");
                EDITradePtnrItem.SETRANGE("Navision Item No.",SalesShipmentLine."No.");
                EDITradePtnrItem.SETRANGE("Navision Variant Code",SalesShipmentLine."Variant Code");
                IF NOT EDITradePtnrItem.FIND('-') THEN
                  EDITradePtnrItem.SETRANGE("Navision Variant Code");
                IF NOT EDITradePtnrItem.FIND('-') THEN
                  CLEAR(EDITradePtnrItem);
                EDIReceiveDocLineInfo.RESET;
                EDIReceiveDocLineInfo.SETCURRENTKEY("Document No.","Line No.");
                EDIReceiveDocLineInfo.SETRANGE("Document No.",SalesShipmentHeader."Order No.");
                EDIReceiveDocLineInfo.SETRANGE("Internal Doc. No.",SalesShipmentHeader."EDI Internal Doc. No.");
                EDIReceiveDocLineInfo.SETRANGE("Line No.",SalesShipmentLine."Line No.");
                IF NOT EDIReceiveDocLineInfo.FIND('+') THEN
                  CLEAR(EDIReceiveDocLineInfo);
                SalesCommentLineDetail.RESET;
                SalesCommentLineDetail.SETRANGE(
                  "Document Type",SalesCommentLine."Document Type"::Shipment);
                SalesCommentLineDetail.SETRANGE("No.",SalesShipmentHeader."No.");
                SalesCommentLineDetail.SETRANGE("Document Line No.",SalesShipmentLine."Line No.");
                IF NOT SalesCommentLineDetail.FIND('-') THEN
                   CLEAR(SalesCommentLineDetail);
                UpdateLineTotals;
                ExportItem;
              END;
            BillOfLadingSummaryLine.Type::"Item (ASN)":
              BEGIN
                BOLItemQty := BOLItemQty + BillOfLadingSummaryLine."Package Line Quantity";
                BOLItemQtyBase := BOLItemQtyBase + BillOfLadingSummaryLine."Package Line Quantity (Base)";
                ProcessingLines := TRUE;
                Item.GET(BillOfLadingSummaryLine."No.");
                PostedPackageLine.INIT;
                SalesShipmentLine.RESET;
                SalesShipmentLine.SETRANGE("Document No.",BillOfLadingSummaryLine."Posted Source ID");
                SalesShipmentLine.SETRANGE(Type,SalesShipmentLine.Type::Item);
                SalesShipmentLine.SETRANGE("No.",BillOfLadingSummaryLine."No.");
                IF BillOfLadingSummaryLine."Custom Value 1" <> '' THEN BEGIN
                  EVALUATE(SalesShipmentLineNo,BillOfLadingSummaryLine."Custom Value 1");
                  SalesShipmentLine.SETRANGE("Line No.",SalesShipmentLineNo);
                END;
                IF NOT SalesShipmentLine.FIND('-') THEN
                  ERROR(
                    Text005,
                    BillOfLadingSummaryLine."Package No.",BillOfLadingSummaryLine."No.");
                SalesShipmentHeader.GET(SalesShipmentLine."Document No.");
                IF SalesShipmentLine."Blanket Order No." <> '' THEN
                  EDILoadEDIOutFields.CumulativeTotal;
                IF InvoiceFound THEN
                  SalesInvoiceLine.GET(SalesInvoiceHeader."No.",SalesShipmentLine."Line No.")
                ELSE
                 CLEAR(SalesInvoiceLine);
                ItemCrossReference.RESET;
                ItemCrossReference.SETCURRENTKEY("Cross-Reference Type","Cross-Reference Type No.");
                ItemCrossReference.SETFILTER(
                  "Cross-Reference Type",'<>%1',ItemCrossReference."Cross-Reference Type"::Vendor);
                ItemCrossReference.SETRANGE(
                  "Cross-Reference Type No.",SalesShipmentHeader."Sell-to Customer No.");
                ItemCrossReference.SETRANGE("Item No.",SalesShipmentLine."No.");
                ItemCrossReference.SETRANGE("Variant Code",SalesShipmentLine."Variant Code");
                IF NOT ItemCrossReference.FIND('-') THEN BEGIN
                  ItemCrossReference.SETRANGE("Cross-Reference Type No.",'');
                  IF NOT ItemCrossReference.FIND('-') THEN
                    CLEAR(ItemCrossReference);
                END;
                EDITradePtnrItem.RESET;
                EDITradePtnrItem.SETRANGE("Trade Partner No.",EDITradePartner."No.");
                EDITradePtnrItem.SETRANGE("Navision Item No.",SalesShipmentLine."No.");
                EDITradePtnrItem.SETRANGE("Navision Variant Code",SalesShipmentLine."Variant Code");
                IF NOT EDITradePtnrItem.FIND('-') THEN
                  EDITradePtnrItem.SETRANGE("Navision Variant Code");
                IF NOT EDITradePtnrItem.FIND('-') THEN
                  CLEAR(EDITradePtnrItem);
                CLEAR(PackageSummaryLine);
                EDIReceiveDocLineInfo.RESET;
                EDIReceiveDocLineInfo.SETCURRENTKEY("Document No.","Line No.");
                EDIReceiveDocLineInfo.SETRANGE("Document No.",SalesShipmentHeader."Order No.");
                EDIReceiveDocLineInfo.SETRANGE("Internal Doc. No.",SalesShipmentHeader."EDI Internal Doc. No.");
                EDIReceiveDocLineInfo.SETRANGE("Line No.",SalesShipmentLine."Line No.");
                IF NOT EDIReceiveDocLineInfo.FIND('+') THEN
                  CLEAR(EDIReceiveDocLineInfo);
                SalesCommentLineDetail.RESET;
                SalesCommentLineDetail.SETRANGE(
                  "Document Type",SalesCommentLine."Document Type"::Shipment);
                SalesCommentLineDetail.SETRANGE("No.",SalesShipmentHeader."No.");
                SalesCommentLineDetail.SETRANGE("Document Line No.",SalesShipmentLine."Line No.");
                IF NOT SalesCommentLineDetail.FIND('-') THEN
                   CLEAR(SalesCommentLineDetail);
                UpdateLineTotals;
                ExportItem;
              END;
          END;
        UNTIL (BillOfLadingSummaryLine.NEXT = 0);
      END ELSE
        ERROR(Text006,BillOfLading."No.");

      // Create Trailer Segments and Elements
      ProcessingLines := FALSE;
      EDISegment2.RESET;
      EDISegment2.SETRANGE("Trade Partner No.",EDIDocument."Trade Partner No.");
      EDISegment2.SETRANGE("Navision Document",EDIDocument."Navision Document");
      EDISegment2.SETRANGE("EDI Document No.",EDIDocument."EDI Document No.");
      EDISegment2.SETRANGE(Version,EDIDocument.Version);
      EDISegment2.SETRANGE("Segment Type",EDISegment2."Segment Type"::Command);
      IF XMLDoc THEN
        EDISegment2.SETRANGE("Node Name",'HL END')
      ELSE
        EDISegment2.SETRANGE(Segment,'HL END');
      IF NOT EDISegment2.FIND('-') THEN
        ERROR(Text007);
      EDISegment2.SETRANGE("Segment Type");
      IF XMLDoc THEN
        EDISegment2.SETRANGE("Node Name")
      ELSE
      EDISegment2.SETRANGE(Segment);
      REPEAT
        IF (EDISegment2."Segment Type" <> EDISegment2."Segment Type"::Command) THEN BEGIN
          TotalSegments := TotalSegments + 1;
          CreateASNElements(EDISegment2);
          IF (EDISegment2."Repeat Segment") AND (NOT LoopFinished) THEN BEGIN
            GetNextRecord;
            EDISegment2.NEXT(-1);
          END;
        END;
      UNTIL EDISegment2.NEXT = 0;
    END;

    PROCEDURE ExportBillOfLading@5();
    BEGIN
      IF XMLDoc THEN
        EDISegment2.SETRANGE("Node Name",'HL SHIP BEGIN')
      ELSE
        EDISegment2.SETRANGE(Segment,'HL SHIP BEGIN');
      IF NOT EDISegment2.FIND('-') THEN
        ERROR(
          Text008,
          EDIDocument."Trade Partner No.",EDIDocument."Navision Document");
      EDISegment2.SETRANGE(EDISegment2."Segment Type");
      IF XMLDoc THEN
        EDISegment2.SETRANGE("Node Name")
      ELSE
      EDISegment2.SETRANGE(Segment);
      REPEAT
      // read associated records
        IF (EDISegment2."Segment Type" <> EDISegment2."Segment Type"::Command) THEN BEGIN
          TotalSegments := TotalSegments + 1;
          CreateASNElements(EDISegment2);
          IF (EDISegment2."Repeat Segment") AND (NOT LoopFinished) THEN BEGIN
            GetNextRecord;
            EDISegment2.NEXT(-1);
          END;
        END;
      UNTIL (EDISegment2.NEXT = 0) OR
        (EDISegment2."Segment Type" = EDISegment2."Segment Type"::Command);
    END;

    PROCEDURE ExportPurchaseOrder@15();
    BEGIN
      IF XMLDoc THEN
        EDISegment2.SETRANGE("Node Name",'HL PO BEGIN')
      ELSE
        EDISegment2.SETRANGE(Segment,'HL PO BEGIN');
      IF NOT EDISegment2.FIND('-') THEN
        ERROR(
          Text009,
          EDIDocument."Trade Partner No.",EDIDocument."Navision Document");
      EDISegment2.SETRANGE(EDISegment2."Segment Type");
      IF XMLDoc THEN
      EDISegment2.SETRANGE("Node Name")
      ELSE
      EDISegment2.SETRANGE(Segment);
      REPEAT
      // read associated records
        IF (EDISegment2."Segment Type" <> EDISegment2."Segment Type"::Command) THEN BEGIN
          TotalSegments := TotalSegments + 1;
          CreateASNElements(EDISegment2);
          IF (EDISegment2."Repeat Segment") AND (NOT LoopFinished) THEN BEGIN
            GetNextRecord;
            EDISegment2.NEXT(-1);
          END;
        END;
      UNTIL (EDISegment2.NEXT = 0) OR
        (EDISegment2."Segment Type" = EDISegment2."Segment Type"::Command);
    END;

    PROCEDURE ExportTare@19();
    BEGIN
      IF XMLDoc THEN
      EDISegment2.SETRANGE("Node Name",'HL TARE BEGIN')
      ELSE
        EDISegment2.SETRANGE(Segment,'HL TARE BEGIN');
      IF NOT EDISegment2.FIND('-') THEN
        ERROR(
          Text010,
          EDIDocument."Trade Partner No.",EDIDocument."Navision Document");
      EDISegment2.SETRANGE(EDISegment2."Segment Type");
      IF XMLDoc THEN
        EDISegment2.SETRANGE("Node Name")
      ELSE
      EDISegment2.SETRANGE(Segment);
      REPEAT
      // read associated records
        IF (EDISegment2."Segment Type" <> EDISegment2."Segment Type"::Command) THEN BEGIN
          TotalSegments := TotalSegments + 1;
          CreateASNElements(EDISegment2);
          IF (EDISegment2."Repeat Segment") AND (NOT LoopFinished) THEN BEGIN
            GetNextRecord;
            EDISegment2.NEXT(-1);
          END;
        END;
      UNTIL (EDISegment2.NEXT = 0) OR
        (EDISegment2."Segment Type" = EDISegment2."Segment Type"::Command);
    END;

    PROCEDURE ExportPackage@21();
    BEGIN
      IF XMLDoc THEN
        EDISegment2.SETRANGE("Node Name",'HL PACK BEGIN')
      ELSE
        EDISegment2.SETRANGE(Segment,'HL PACK BEGIN');
      IF NOT EDISegment2.FIND('-') THEN
        ERROR(
          Text011,
          EDIDocument."Trade Partner No.",EDIDocument."Navision Document");
      PackageUnderItem := PackageUnderItem + 1;
      EDISegment2.SETRANGE(EDISegment2."Segment Type");
      IF XMLDoc THEN
        EDISegment2.SETRANGE("Node Name")
      ELSE
      EDISegment2.SETRANGE(Segment);
      REPEAT
      // read associated records
        IF (EDISegment2."Segment Type" <> EDISegment2."Segment Type"::Command) THEN BEGIN
          TotalSegments := TotalSegments + 1;
          CreateASNElements(EDISegment2);
          IF (EDISegment2."Repeat Segment") AND (NOT LoopFinished) THEN BEGIN
            GetNextRecord;
            EDISegment2.NEXT(-1);
          END;
        END;
      UNTIL (EDISegment2.NEXT = 0) OR
        (EDISegment2."Segment Type" = EDISegment2."Segment Type"::Command);
    END;

    PROCEDURE ExportItem@25();
    BEGIN
      IF XMLDoc THEN
        EDISegment2.SETRANGE("Node Name",'HL ITEM BEGIN')
      ELSE
        EDISegment2.SETRANGE(Segment,'HL ITEM BEGIN');
      IF NOT EDISegment2.FIND('-') THEN
        ERROR(
          Text012,
          EDIDocument."Trade Partner No.",EDIDocument."Navision Document");
      EDISegment2.SETRANGE(EDISegment2."Segment Type");
      IF XMLDoc THEN
        EDISegment2.SETRANGE("Node Name")
      ELSE
      EDISegment2.SETRANGE(Segment);
      REPEAT
      // read associated records
        IF EDISegment2.Segment = 'HL ITEM BEGIN' THEN BEGIN
          BillOfLadingSummaryLine2.RESET;
          BillOfLadingSummaryLine2.SETRANGE("Bill of Lading No.",BillOfLading."No.");
          BillOfLadingSummaryLine2.SETRANGE("Bill of Lading Type",BillOfLadingSummaryLine2."Bill of Lading Type"::"ASN (EDI)");
          BillOfLadingSummaryLine2.SETRANGE(Type,BillOfLadingSummaryLine2.Type::"Package (Item)");
          BillOfLadingSummaryLine2.SETRANGE("Advanced Parent Line No.",BillOfLadingSummaryLine."Advanced Line No.");
          IF BillOfLadingSummaryLine2.FIND('-') THEN BEGIN
            CLEAR(StdPackQtyArray);
            CLEAR(PackageQtyArray);
            x := 0;
            REPEAT
              x := x + 1;
              StdPackQtyArray[x] := BillOfLadingSummaryLine2."Package Line Quantity";
              IF x = 1 THEN
                PackageQtyArray[x] := 1;
            UNTIL BillOfLadingSummaryLine2.NEXT = 0;
          END;
          x := 1;
          y := 1;
          Finished := FALSE;
          REPEAT
            IF StdPackQtyArray[x + 1] = 0 THEN
              Finished := TRUE
            ELSE BEGIN
              IF StdPackQtyArray[x] = StdPackQtyArray[x + 1] THEN
                PackageQtyArray[y] := PackageQtyArray[y] + 1
              ELSE BEGIN
                y := x + 1;
                PackageQtyArray[y] := PackageQtyArray[y] + 1;
              END;
              x := x + 1;
            END;
          UNTIL Finished;
          PackageUnderItem := 0;

          SLNGroup := 0;
          GetSLNSegment;
          IF SLNFound THEN BEGIN
            EDIRecDocField.RESET;
            EDIRecDocField.SETCURRENTKEY("Internal Doc. No.","Segment Group");
            EDIRecDocField.SETRANGE("Internal Doc. No.",SalesShipmentHeader."EDI Internal Doc. No.");
            EDIRecDocField.SETRANGE("Segment Group",SalesShipmentLine."EDI Segment Group");
            EDIRecDocField.SETRANGE("SLN Document Line No.",SalesShipmentLine."Line No.");
            EDIRecDocField.SETRANGE("New Segment",TRUE);
            EDIRecDocField.SETRANGE(Segment,'SLN');
            IF NOT EDIRecDocField.FIND('-') THEN BEGIN
              IF EDIRecDocHdr.GET(SalesShipmentHeader."EDI Internal Doc. No.") THEN BEGIN
                EDIRecDocField.SETRANGE(Segment);
                EDIRecDocField.SETRANGE(Segment,EDIRecDocHdr."Subline Segment");
                IF EDIRecDocField.FIND('-') THEN
                  SLNGroup := EDIRecDocField."SLN Group"
                ELSE
                  CLEAR(EDIRecDocField);
              END ELSE
                CLEAR(EDIRecDocField);
            END ELSE
              SLNGroup := EDIRecDocField."SLN Group";
          END;
        END ELSE
          IF (EDISegment2."Segment Type" <> EDISegment2."Segment Type"::Command) THEN BEGIN
            TotalSegments := TotalSegments + 1;
            CreateASNElements(EDISegment2);
            IF (EDISegment2."Repeat Segment") AND (NOT LoopFinished) THEN BEGIN
              GetNextRecord;
              EDISegment2.NEXT(-1);
            END;
          END;
      UNTIL (EDISegment2.NEXT = 0) OR
        (EDISegment2."Segment Type" = EDISegment2."Segment Type"::Command);
    END;

    PROCEDURE CreateASNElements@14(CurrentEDISegment@1240030000 : Record 14002354);
    VAR
      NodeOnly@1240020000 : Boolean;
      CreateNode@1240020001 : Boolean;
    BEGIN
      LoopFinished := TRUE;
      BypassSegment := FALSE;
      NodeOnly := FALSE;
      CreateNode := TRUE;
      EDIElement.SETRANGE("Trade Partner No.",CurrentEDISegment."Trade Partner No.");
      EDIElement.SETRANGE("Navision Document",CurrentEDISegment."Navision Document");
      EDIElement.SETRANGE("EDI Document No.",CurrentEDISegment."EDI Document No.");
      EDIElement.SETRANGE(Version,CurrentEDISegment.Version);
      EDIElement.SETRANGE(Segment,CurrentEDISegment.Segment);
      EDIElement.SETRANGE(Type,EDIElement.Type::Export);
      IF NOT EDIElement.FIND('-') THEN BEGIN
        IF XMLDoc THEN BEGIN
          EDISegment.CALCFIELDS("Has Attributes","Node Text");
          IF EDISegment."Node Text" OR EDISegment."Has Attributes" THEN
            ERROR(
              Text013,
               CurrentEDISegment."Trade Partner No.",CurrentEDISegment."Navision Document",
               CurrentEDISegment.Version,CurrentEDISegment."Node Name")
          ELSE
            NodeOnly := TRUE;
        END ELSE
          ERROR(
            Text013,
              CurrentEDISegment."Trade Partner No.",CurrentEDISegment."EDI Document No.",
              CurrentEDISegment.Version,CurrentEDISegment.Segment);
      END ELSE
        IF XMLDoc AND EDIElement."Node Text" THEN
          CreateNode := FALSE;
      IF (XMLDoc = FALSE) OR (XMLDoc AND NodeOnly = FALSE) THEN BEGIN
        CLEAR(OutFldArray);
        CLEAR(OutLenArray);
        CLEAR(EDIElementArray);
        CLEAR(OutErrorArray);
        i := 1;
        LoopCnt := 1;
        REPEAT
          ReverseCrossRefArray[i] := '';
          ReverseCrossReference := EDIElement."Reverse Cross Reference";
          IF ((EDIElement."Fixed Value" <> '') AND (XMLDoc = FALSE)) OR
             ((EDIElement."XML Fixed Value" <> '') AND (XMLDoc))
          THEN BEGIN
            IF XMLDoc THEN
              OutFldArray[i] := EDIElement."XML Fixed Value"
            ELSE
              OutFldArray[i] := EDIElement."Fixed Value";
          END ELSE
            CASE EDIElement.Origin OF
              EDIElement.Origin::Navision:
                BEGIN
                  LoadDBFields;
                  IF ReverseCrossReference THEN BEGIN
                    CLEAR(EDIGetReverseCrossRef);
                    ReverseCrossRefArray[i] :=
                      EDIGetReverseCrossRef.GetReverseCrossRef(
                        EDIElement,EDISendDocHdr,OutFldArray[i]);
                      EDIGetReverseCrossRef.FormatOutput(
                        EDISendDocHdr,EDIElement,OutError2,ReverseCrossRefArray,BypassSegment2,i);
                  END;
                END;
              EDIElement.Origin::"EDI In":
                LoadEDIInFields;
              EDIElement.Origin::"EDI Out":
                BEGIN
                  LoadEDIOutFields;
                END;
            END;
          OutLenArray[i] := EDIElement.Length;
          EDIFormat.FormatOutput(
            EDITemplate,EDIElement,OutFldArray,OutErrorArray,i,BypassSegment,
            BooleanVariable,DateVariable,DecimalVariable,IntegerVariable,TimeVariable,
            DateTimeVariable);
            IF ReverseCrossReference THEN
               OutErrorArray[i] := OutError2;
            EDIElementArray[i].COPY(EDIElement);
          i := i + 1;

          IF EDIElement.Origin = EDIElement.Origin::"EDI Out" THEN BEGIN
            CASE TRUE OF
              BypassSegment:
                CASE EDIElement."Field Name" OF
                  'GenericCounter':
                    BEGIN
                     IF GenericCounter > 0 THEN
                       GenericCounter := GenericCounter - 1;
                   END;
                END;
            END;
          END;
        UNTIL EDIElement.NEXT = 0;
      END;

      IF (LoopCnt = 1) AND (CurrentEDISegment."Repeat Segment") THEN BEGIN
        RepeatSegment(CurrentEDISegment);
        LoopCnt := LoopCnt + 1;
      END;

      NewSegment := TRUE;
      i := 1;
      IF (NOT BypassSegment) THEN BEGIN
        IF XMLDoc AND CreateNode THEN BEGIN
          EDISend.CreateSendLine(
            EDISendDocHdr,EDIElementArray[i],OutFldArray[i],OutLenArray[i],OutErrorArray[i],
            NewSegment,ReverseCrossRefValue,EDIDocument,TRUE,CurrentEDISegment);
          NewSegment := FALSE;
        END;
        IF (XMLDoc = FALSE) OR (XMLDoc AND NodeOnly = FALSE) THEN
          REPEAT
           ReverseCrossRefValue := ReverseCrossRefArray[i];
           IF (NOT BypassSegment) THEN
             EDISend.CreateSendLine(
               EDISendDocHdr,EDIElementArray[i],OutFldArray[i],OutLenArray[i],OutErrorArray[i],
               NewSegment,ReverseCrossRefValue,EDIDocument,FALSE,CurrentEDISegment);
          NewSegment := FALSE;
          i := i + 1;
        UNTIL OutLenArray[i] = 0;
      END;

      CASE TRUE OF
        CurrentEDISegment.Segment = 'LIN':
          TotalLINSegments := TotalLINSegments + 1;
        CurrentEDISegment.Segment = 'PO1':
          TotalPO1Segments := TotalPO1Segments + 1;
        BypassSegment = TRUE:
          TotalSegments := TotalSegments - 1;
      END;
    END;

    PROCEDURE LoadEDIInFields@20();
    VAR
      EDIInFound@1240020000 : Boolean;
    BEGIN
      BooleanVariable := FALSE;
      DateVariable := 0D;
      IntegerVariable := 0;
      DecimalVariable := 0;
      TimeVariable := 0T;
      DateTimeVariable := 0DT;

      InternalDocNo := SalesShipmentHeader."EDI Internal Doc. No.";
      IF (SalesShipmentLine."EDI Line Type" = SalesShipmentLine."EDI Line Type"::Change) AND
         (SalesShipmentLine."EDI Line Status" = SalesShipmentLine."EDI Line Status"::New)
      THEN
        GetAssocInternalDocNo(SalesShipmentHeader);

      EDIRecDocFields.RESET;
      EDIRecDocFields.SETCURRENTKEY("Internal Doc. No.","Field Name");
      EDIRecDocFields.SETRANGE("Internal Doc. No.",InternalDocNo);
      EDIRecDocFields.SETRANGE("Field Name",EDIElement."Field Name");
      IF ProcessingLines THEN
        EDIRecDocFields.SETRANGE("Segment Group",SalesShipmentLine."EDI Segment Group")
      ELSE
        EDIRecDocFields.SETRANGE("Segment Group",0);
      IF EDIRecDocFields.FIND('-') THEN BEGIN
        EDIInFound := TRUE;
        IF SLNFound AND ProcessingLines THEN BEGIN
          IF EDIRecDocFields.COUNT > 1 THEN
             EDIRecDocFields.SETRANGE("SLN Group",SLNGroup);
             IF EDIRecDocFields.FIND('-') THEN
               EDIInFound := TRUE
             ELSE
               EDIInFound := FALSE;
        END;
        IF EDIInFound THEN BEGIN
          CASE EDIElement."Data Type" OF
            EDIElement."Data Type"::Text:
              OutFldArray[i] := EDIRecDocFields."Field Text Value";
            EDIElement."Data Type"::"Dec Implied":
              DecimalVariable := EDIRecDocFields."Field Dec. Value";
            EDIElement."Data Type"::"Dec Explicit":
              DecimalVariable := EDIRecDocFields."Field Dec. Value";
            EDIElement."Data Type"::Integer:
              IntegerVariable := EDIRecDocFields."Field Integer Value";
            EDIElement."Data Type"::"Date YYMMDD":
              DateVariable := EDIRecDocFields."Field Date Value";
            EDIElement."Data Type"::"Date YYYYMMDD":
              DateVariable := EDIRecDocFields."Field Date Value";
          END;
        END;
      END;
    END;

    PROCEDURE LoadEDIOutFields@16();
    BEGIN
      BooleanVariable := FALSE;
      DateVariable := 0D;
      IntegerVariable := 0;
      DecimalVariable := 0;
      TimeVariable := 0T;
      DateTimeVariable := 0DT;

      IF EDIElement.Origin = EDIElement.Origin::"EDI Out" THEN BEGIN
        CASE EDIElement."Field Name" OF
          ELSE BEGIN
            LoadEDIOutVariable;
            LoadEDIOutRecordRef;
            EDILoadEDIOutFields.ASNSendEDIOut(
              EDIElement,OutFldArray,DecimalVariable,IntegerVariable,DateVariable,
              BooleanVariable,TimeVariable,DateTimeVariable,i,GenericCounter);
          END;
        END;
      END;
    END;

    PROCEDURE UpdateLineTotals@28();
    BEGIN
      LineNumber := LineNumber + 1;

      TotalUnits := TotalUnits + BillOfLadingSummaryLine."Package Line Quantity";
      TotalBaseUnits := TotalBaseUnits + BillOfLadingSummaryLine."Package Line Quantity (Base)";
    END;

    PROCEDURE LoadDBFields@23();
    BEGIN
      CASE EDIElement."NAV Table No." OF
        3:
          BEGIN
            RecRef.OPEN(3);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(PaymentTerms);
          END;
        10:
          BEGIN
            RecRef.OPEN(10);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(ShipmentMethod);
          END;
        14:
          BEGIN
            RecRef.OPEN(14);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(Location);
          END;
        27:
          BEGIN
            RecRef.OPEN(27);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(Item);
          END;
        36:
          BEGIN
            RecRef.OPEN(36);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(SalesHeader);
          END;
        37:
          BEGIN
            RecRef.OPEN(37);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(SalesLine);
          END;
        44:
          BEGIN
            RecRef.OPEN(44);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(SalesCommentLine);
          END;
        79:
          BEGIN
            RecRef.OPEN(79);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(CompanyInformation);
          END;
        110:
          BEGIN
            RecRef.OPEN(110);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(SalesShipmentHeader);
          END;
        111:
          BEGIN
            RecRef.OPEN(111);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(SalesShipmentLine);
          END;
        112:
          BEGIN
            RecRef.OPEN(112);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(SalesInvoiceHeader);
          END;
        113:
          BEGIN
            RecRef.OPEN(113);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(SalesInvoiceLine);
          END;
        222:
          BEGIN
            RecRef.OPEN(222);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(ShiptoAddress);
          END;
        291:
          BEGIN
            RecRef.OPEN(291);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(ShippingAgent);
          END;
        5404:
          BEGIN
            RecRef.OPEN(5404);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(ItemUnitOfMeasure);
          END;
        5717:
          BEGIN
            RecRef.OPEN(5717);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(ItemCrossReference);
          END;
        10018:
          BEGIN
            RecRef.OPEN(18);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(SelltoCustomer);
          END;
        10019:
          BEGIN
            RecRef.OPEN(18);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(BilltoCustomer);
          END;
        10044:
          BEGIN
            RecRef.OPEN(44);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(SalesCommentLineDetail);
          END;
        10222:
          BEGIN
            RecRef.OPEN(222);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(ShipforAddress);
          END;
         19009:
          BEGIN
            RecRef.OPEN(9);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(SelltoCountry);
          END;
        19010:
          BEGIN
            RecRef.OPEN(9);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(BilltoCountry);
          END;
        19011:
          BEGIN
            RecRef.OPEN(9);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(ShiptoCountry);
          END;
        19012:
          BEGIN
            RecRef.OPEN(9);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(ShipfromCountry);
          END;
        14000964:
          BEGIN
            RecRef.OPEN(14000964);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(PackageSummaryLine);
          END;
        14002350:
          BEGIN
            RecRef.OPEN(14002350);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDITemplate);
          END;
        14002353:
          BEGIN
            RecRef.OPEN(14002353);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDIDocument);
          END;
        14002354:
          BEGIN
            RecRef.OPEN(14002354);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDISegment);
          END;
        14002358:
          BEGIN
            RecRef.OPEN(14002358);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDIRecDocHdr);
          END;
        14002359:
          BEGIN
            RecRef.OPEN(14002359);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDIRecDocFields);
          END;
        14002360:
          BEGIN
            RecRef.OPEN(14002360);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDITradePartner);
          END;
        14002362:
          BEGIN
            RecRef.OPEN(14002362);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDICustCrossRef);
          END;
        14002364:
          BEGIN
            RecRef.OPEN(14002364);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDITradePtnrItem);
          END;
        14000704:
          BEGIN
            RecRef.OPEN(14000704);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(PostedPackage);
          END;
        14000705:
          BEGIN
            RecRef.OPEN(14000705);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(PostedPackageLine);
           END;
        14000708:
          BEGIN
            RecRef.OPEN(14000708);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EShipAgentService);
          END;
        14000822:
          BEGIN
            RecRef.OPEN(14000822);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(BillOfLading);
          END;
        14000823:
          BEGIN
            RecRef.OPEN(14000823);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(BillOfLadingLine);
          END;
        14000825:
          BEGIN
            RecRef.OPEN(14000825);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(BillOfLadingSummaryLine);
          END;
        //>>VAH
          50065:
          BEGIN
            RecRef.OPEN(50065);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(LPBOLSummaryLine);
          END;
          23044505:
          BEGIN
            RecRef.OPEN(23044505);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(IWXLicensePlateHeader);
          END;
        //<<VAH
          14002369:
          BEGIN
            RecRef.OPEN(14002369);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDISendDocHdr);
          END;
        14002371:
          BEGIN
            RecRef.OPEN(14002371);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDIReceiveDocHdrInfo);
          END;
        14002372:
          BEGIN
            RecRef.OPEN(14002372);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(EDIReceiveDocLineInfo);
          END;
        14002402:
          BEGIN
            RecRef.OPEN(14002402);
            IF RecRef.FIND('-') THEN
              RecRef.GETTABLE(RoutingRequestHdr);
          END;
        ELSE
          EXIT;
      END;
      EDILoadDBFields.LoadDBFields(
        EDIElement,OutFldArray,DecimalVariable,IntegerVariable,DateVariable,
        BooleanVariable,TimeVariable,DateTimeVariable,i,RecRef);
      RecRef.CLOSE;
    END;

    PROCEDURE GetAssocInternalDocNo@1240030005(SalesShipmentHdr@1240030001 : Record 110);
    VAR
      EDIChangedDocument@1240030000 : Record 14002373;
      CurrEDIRecDocField@1240030002 : Record 14002359;
      Found@1240030003 : Boolean;
      RecordCount@1240030004 : Integer;
    BEGIN
      Found := FALSE;

      EDIChangedDocument.RESET;
      EDIChangedDocument.SETRANGE("Assoc. Internal Doc. No.",SalesShipmentHdr."EDI Internal Doc. No.");
      IF EDIChangedDocument.FIND('-') THEN BEGIN
        RecordCount := EDIChangedDocument.COUNT;
        IF RecordCount = 1 THEN
          InternalDocNo := EDIChangedDocument."Internal Doc. No."
        ELSE
          REPEAT
            CurrEDIRecDocField.RESET;
            CurrEDIRecDocField.SETCURRENTKEY("Internal Doc. No.","Segment Group");
            CurrEDIRecDocField.SETRANGE("Internal Doc. No.",EDIChangedDocument."Internal Doc. No.");
            CurrEDIRecDocField.SETRANGE("Segment Group",SalesShipmentLine."EDI Segment Group");
            CurrEDIRecDocField.SETRANGE("New Item",TRUE);
            IF CurrEDIRecDocField.FIND('-') THEN
              CASE CurrEDIRecDocField."Nav Field No." OF
               SalesShipmentLine.FIELDNO("EDI Item Cross Ref."):
                  BEGIN
                    IF SalesShipmentLine."EDI Item Cross Ref." =
                      CurrEDIRecDocField."Field Text Value" THEN BEGIN
                        InternalDocNo := CurrEDIRecDocField."Internal Doc. No.";
                        Found := TRUE;
                      END;
                  END;
                SalesShipmentLine.FIELDNO("Cross-Reference No."):
                  BEGIN
                    IF SalesShipmentLine."Cross-Reference No." =
                      CurrEDIRecDocField."Field Text Value" THEN BEGIN
                        InternalDocNo := CurrEDIRecDocField."Internal Doc. No.";
                        Found := TRUE;
                     END;
                  END;
                SalesShipmentLine.FIELDNO("No."):
                  BEGIN
                    IF SalesShipmentLine."No." =
                      CurrEDIRecDocField."Field Text Value" THEN BEGIN
                        InternalDocNo := CurrEDIRecDocField."Internal Doc. No.";
                        Found := TRUE;
                      END;
                  END;
              END;
          UNTIL (EDIChangedDocument.NEXT = 0) OR (Found = TRUE);
      END;
    END;

    PROCEDURE RoundValue@1240030009(DecimalValue@1240030004 : Decimal) RoundedValue : Decimal;
    VAR
      RoundingPrecision@1240030003 : Decimal;
      DecimalPlaces@1240030001 : Integer;
      Decimals@1240030000 : Integer;
      RoundingPrecisionString@1240030002 : Text[20];
    BEGIN
      IF EDIElement."NAV Data Type" = EDIElement."NAV Data Type"::Decimal THEN BEGIN
        Decimals := EDIElement.Decimals;
        DecimalPlaces := 0;
        IF Decimals > 0 THEN BEGIN
          RoundingPrecisionString  := '0.1';
          IF Decimals = 1 THEN
            DecimalPlaces := 1
          ELSE
            DecimalPlaces := Decimals - 1;
          WHILE DecimalPlaces > 0 DO BEGIN
            RoundingPrecisionString := INSSTR(RoundingPrecisionString,'0',3);
            DecimalPlaces := DecimalPlaces - 1;
          END;
        END ELSE
          RoundingPrecisionString := '1';
        EVALUATE(RoundingPrecision,RoundingPrecisionString);
        RoundedValue := ROUND(DecimalValue,RoundingPrecision);
      END;
    END;

    PROCEDURE ShipmentInvoiceRequired@1240030010(Batch@1240030003 : Boolean);
    VAR
      BillofLadingLine@1240030000 : Record 14000823;
      SlsShipmentHdr@1240030001 : Record 110;
      ShipmentInvoiceNoFound@1240030002 : Boolean;
    BEGIN
      ShipmentInvoiceNoFound := TRUE;

      BillofLadingLine.RESET;
      BillofLadingLine.SETRANGE("Bill of Lading No.",BillOfLading."No.");
      BillofLadingLine.SETRANGE(Type,BillofLadingLine.Type::"Sales Shipment (Posted)");
      IF BillofLadingLine.FIND('-') THEN
        REPEAT
          SlsShipmentHdr.GET(BillofLadingLine."No.");
          IF SlsShipmentHdr."Shipment Invoice No." = '' THEN
            ShipmentInvoiceNoFound := FALSE;
        UNTIL (BillofLadingLine.NEXT = 0) OR (ShipmentInvoiceNoFound = FALSE);

      IF NOT ShipmentInvoiceNoFound THEN
        IF Batch THEN
          ERROR(Text014)
        ELSE BEGIN
          IF GUIALLOWED THEN BEGIN
            IF NOT CONFIRM(
              Text014 +
              STRSUBSTNO(Text015,BillOfLading."No."))
           THEN
             ERROR(Text016);
          END ELSE
            ERROR(Text016);
        END;
    END;

    PROCEDURE RepeatSegment@1240030006(CurrentEDISegment@1240030000 : Record 14002354) : Boolean;
    VAR
      PostedPackage2@1240020000 : Record 14000704;
      SalesCommentLine2@1240020001 : Record 44;
      SalesCommentLineDetail2@1240020002 : Record 44;
      LastRecord@1240030002 : Boolean;
    BEGIN
      LoopFinished := TRUE;
      LastRecord := FALSE;
      RecordNo := 0;

      CASE EDIElement.Origin OF
        EDIElement.Origin::"EDI Out":
          BEGIN
          END;
        EDIElement.Origin::Navision:
          CASE EDIElement."NAV Table No." OF
            DATABASE::"Posted Package":
              BEGIN
                RecordNo := 1;
                PostedPackage2.COPY(PostedPackage);
                IF CurrentEDISegment.Maximum <> 0 THEN BEGIN
                  RepeatCount := RepeatCount + 1;
                  IF (PostedPackage2.NEXT = 0) OR (RepeatCount = CurrentEDISegment.Maximum) THEN
                    LastRecord := TRUE
                  ELSE
                    LoopFinished := FALSE;
                END ELSE BEGIN
                  IF PostedPackage2.NEXT = 0 THEN
                    LastRecord := TRUE
                  ELSE
                    LoopFinished := FALSE;
                END;
              END;
            DATABASE::"Sales Comment Line":
              BEGIN
                RecordNo := 2;
                SalesCommentLine2.COPY(SalesCommentLine);
                IF EDISegment.Maximum <> 0 THEN BEGIN
                  RepeatCount := RepeatCount + 1;
                  IF (SalesCommentLine2.NEXT = 0) OR (RepeatCount = EDISegment.Maximum) THEN
                    LastRecord := TRUE
                  ELSE
                    LoopFinished := FALSE;
                END ELSE BEGIN
                  IF SalesCommentLine2.NEXT = 0 THEN
                    LastRecord := TRUE
                  ELSE
                    LoopFinished := FALSE;
                END;
              END;
            10044:
              BEGIN
                RecordNo := 100;
                SalesCommentLineDetail2.COPY(SalesCommentLineDetail);
                IF EDISegment.Maximum <> 0 THEN BEGIN
                  IF NOT BypassSegment THEN
                    RepeatCount := RepeatCount + 1;
                  IF (SalesCommentLineDetail2.NEXT = 0) OR (RepeatCount = EDISegment.Maximum) THEN
                    LastRecord := TRUE
                  ELSE
                    LoopFinished := FALSE;
                END ELSE BEGIN
                  IF SalesCommentLineDetail2.NEXT = 0 THEN
                    LastRecord := TRUE
                  ELSE
                    LoopFinished := FALSE;
                END;
              END;
          END;
      END;

      IF LastRecord THEN BEGIN
        LoopFinished := TRUE;
        RecordNo := 0;
        RepeatCount := 0;
      END;
    END;

    PROCEDURE GetNextRecord@1240020000();
    BEGIN
      CASE RecordNo OF
        1:
          PostedPackage.NEXT;
        2:
          SalesCommentLine.NEXT;
        100:
          SalesCommentLineDetail.NEXT;

        // Add additional tables here

      END;
    END;

    PROCEDURE GetASNMap@1240020001();
    BEGIN
      BillOfLadingSummaryLine.RESET;
      BillOfLadingSummaryLine.SETRANGE("Bill of Lading No.",BillOfLading."No.");
      BillOfLadingSummaryLine.SETRANGE(
        "Bill of Lading Type",BillOfLadingSummaryLine."Bill of Lading Type"::"ASN (EDI)");
      BillOfLadingSummaryLine.SETRANGE("Override ASN Summary",TRUE);
      IF BillOfLadingSummaryLine.FIND('-') THEN
        OverrideASNMap := TRUE
      ELSE
        OverrideASNMap := FALSE;
    END;

    PROCEDURE LoadEDIOutRecordRef@1240020006();
    BEGIN
      RecRef.OPEN(3);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(PaymentTerms);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(10);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(ShipmentMethod);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(Location);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(18);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(SelltoCustomer);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'Sell-to Customer');
        RecRef.GETTABLE(BilltoCustomer);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'Bill-to Customer');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(27);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(Item);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(36);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(SalesHeader);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(37);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(SalesLine);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(44);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(SalesCommentLine);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(79);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(CompanyInformation);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(110);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(SalesShipmentHeader);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(111);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(SalesShipmentLine);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(112);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(SalesInvoiceHeader);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(113);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(SalesInvoiceLine);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(222);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(ShiptoAddress);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(291);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(ShippingAgent);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(5404);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(ItemUnitOfMeasure);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(5717);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(ItemCrossReference);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14000704);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(PostedPackage);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14000705);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(PostedPackageLine);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14000708);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(EShipAgentService);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14000822);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(BillOfLading);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14000823);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(BillOfLadingLine);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14000825);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(BillOfLadingSummaryLine);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14000964);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(PackageSummaryLine);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;


      RecRef.OPEN(14002350);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(EDITemplate);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14002353);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(EDIDocument);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14002354);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(EDISegment);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14002358);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(EDIRecDocHdr);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14002359);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(EDISendDocHdr);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14002359);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(EDIRecDocFields);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14002360);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(EDITradePartner);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14002362);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(EDICustCrossRef);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14002364);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(EDITradePtnrItem);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14002371);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(EDIReceiveDocHdrInfo);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14002372);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(EDIReceiveDocLineInfo);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;

      RecRef.OPEN(14002402);
      IF RecRef.FIND('-') THEN BEGIN
        RecRef.GETTABLE(RoutingRequestHdr);
        EDILoadEDIOutFields.SetRecordVariable(RecRef,'');
      END;
      RecRef.CLOSE;
    END;

    PROCEDURE LoadEDIOutVariable@1240020005();
    BEGIN
      EDILoadEDIOutFields.SetASNSendVariable(
        POItemQty,BOLItemQty,POItemQtyBase,BOLItemQtyBase,TotalBOLTares,TotalPOTares,
        TotalBOLPackages,TotalPOPackages,TotalLINSegments,PackageUnderItem,StdPackQtyArray,
        PackageQtyArray,TotalSegments,TotalNoOfPackages);
    END;

    PROCEDURE GetSLNSegment@1240020004();
    VAR
      EDISegment@1240020000 : Record 14002354;
      Finished@1240020002 : Boolean;
      ProcessingSubLine@1240020001 : Boolean;
    BEGIN
      SLNFound := FALSE;

      IF EDIRecDocHdr.GET(SalesShipmentHeader."EDI Internal Doc. No.") THEN BEGIN
        SLNFound := EDIRecDocHdr."Subline Item Detail Used";
        SLNSegmentID := EDIRecDocHdr."Subline Segment";
      END;
      IF SLNFound = FALSE THEN BEGIN
        EDIRecDocFields.RESET;
        EDIRecDocFields.SETCURRENTKEY("Internal Doc. No.","Field Name");
        EDIRecDocFields.SETRANGE("Internal Doc. No.",SalesShipmentHeader."EDI Internal Doc. No.");
        EDIRecDocFields.SETFILTER(Segment,'%1','SLN');
        IF EDIRecDocFields.FIND('-') THEN
        REPEAT
          IF EDIRecDocFields.Trigger = TRUE THEN BEGIN
            SLNFound := TRUE;
            SLNSegmentID := 'SLN';
          END;
        UNTIL (EDIRecDocFields.NEXT = 0) OR (SLNFound = TRUE);
        IF SLNFound = FALSE THEN BEGIN
          IF EDIRecDocHdr.GET(SalesShipmentHeader."EDI Internal Doc. No.") THEN BEGIN
            Finished := FALSE;
            EDISegment.SETRANGE("Trade Partner No.",EDIDocument."Trade Partner No.");
            EDISegment.SETRANGE("Navision Document",EDIDocument."Navision Document");
            EDISegment.SETRANGE("EDI Document No.",EDIDocument."EDI Document No.");
            EDISegment.SETRANGE(Version,EDIDocument.Version);
            EDISegment.SETRANGE(Type,EDIDocument.Type);
            IF EDISegment.FIND('-') THEN BEGIN
              REPEAT
                CASE EDISegment."Segment Type" OF
                  EDISegment."Segment Type"::Command:
                    BEGIN
                      IF EDISegment.Segment = 'SUB LINE BEGIN' THEN
                        ProcessingSubLine := TRUE;
                      IF EDISegment.Segment = 'SUB LINE END' THEN
                        Finished := TRUE;
                    END;
                  EDISegment."Segment Type"::Segment:
                    BEGIN
                      IF ProcessingSubLine THEN BEGIN
                        EDIRecDocFields.RESET;
                        EDIRecDocFields.SETCURRENTKEY("Internal Doc. No.","Field Name");
                        EDIRecDocFields.SETRANGE("Internal Doc. No.",EDIRecDocHdr."Internal Doc. No.");
                        EDIRecDocFields.SETRANGE(Segment,EDISegment.Segment);
                        IF EDIRecDocFields.FIND('-') THEN
                          REPEAT
                            IF EDIRecDocFields.Trigger = TRUE THEN BEGIN
                              SLNFound := TRUE;
                              SLNSegmentID := EDISegment.Segment;
                            END;
                          UNTIL (EDIRecDocFields.NEXT = 0) OR (SLNFound = TRUE);
                      END;
                    END;
                END;
              UNTIL (EDISegment.NEXT= 0) OR (Finished);
            END;
          END;
        END;
      END;
      IF SLNFound THEN BEGIN
        EDIRecDocFields.RESET;
        EDIRecDocFields.SETCURRENTKEY("Internal Doc. No.","Field Name");
        EDIRecDocFields.SETRANGE("Internal Doc. No.",SalesShipmentHeader."EDI Internal Doc. No.");
        EDIRecDocFields.SETFILTER(Segment,'%1',SLNSegmentID);
        EDIRecDocFields.SETRANGE("SLN Group",0);
        IF EDIRecDocFields.FIND('-') THEN
          SLNFound := FALSE;
      END;
    END;

    LOCAL PROCEDURE "//Auto BOL"@1000000001();
    BEGIN
    END;

    PROCEDURE ExportASNLP@1000000000(VAR CurrLicensePlateHeader@1240030001 : Record 23044505;NAVDocument@1240030002 : Code[10];Batch@1240030004 : Boolean) ErrCode@1240030000 : Boolean;
    VAR
      EDIXMLManagement@1240020000 : Codeunit 14099302;
    BEGIN
      IWXLicensePlateHeader.COPY(CurrLicensePlateHeader);

      //BillOfLading.CALCFIELDS("Posted Weight");// temp vah

      // Check Customer Number on Trading Partner Setup
      EDITradePartner.SETCURRENTKEY("Customer No.");
      EDITradePartner.SETRANGE("Customer No.",IWXLicensePlateHeader."Ship-to No.");
      IF EDITradePartner.FIND('-') THEN BEGIN
        TradePtnrFound := TRUE;
        EDICustCrossRef.INIT;
        EDICustCrossRef.RESET;
        EDICustCrossRef.SETRANGE("Trade Partner No.",EDITradePartner."No.");
        EDICustCrossRef.SETRANGE("Navision Ship To Code",IWXLicensePlateHeader."Ship-to code");
        OK := EDICustCrossRef.FIND('-');
      END;

      // Check Customer Number in EDI Customer Cross Reference table
      IF NOT TradePtnrFound THEN BEGIN
        EDICustCrossRef.INIT;
        EDICustCrossRef.SETCURRENTKEY("Navision Sell To Code");
        EDICustCrossRef.SETRANGE("Navision Sell To Code",IWXLicensePlateHeader."Ship-to No.");
        EDICustCrossRef.SETRANGE("Navision Ship To Code",IWXLicensePlateHeader."Ship-to code");
        IF EDICustCrossRef.FIND('-') THEN BEGIN
          EDITradePartner.GET(EDICustCrossRef."Trade Partner No.");
          TradePtnrFound := TRUE;
        END;
      END;
      IF NOT TradePtnrFound THEN
        ERROR(Text001,IWXLicensePlateHeader."Ship-to No.");

      // Get Shipment Associated Tables
      CompanyInformation.GET;
      SelltoCustomer.GET(IWXLicensePlateHeader."Ship-to No.");
      ShippingAgent.GET(IWXLicensePlateHeader."Shipping Agent Code");
      EShipAgentService.GET(
        IWXLicensePlateHeader."Shipping Agent Code",IWXLicensePlateHeader."Shipping Agent Service",FALSE);// VAH
      ShiptoAddress.INIT;
        IF IWXLicensePlateHeader."Ship-to code" <> '' THEN
          ShiptoAddress.GET(IWXLicensePlateHeader."Ship-to No.",IWXLicensePlateHeader."Ship-to code");
      IF RoutingRequestHdr.READPERMISSION THEN BEGIN
        RoutingRequestHdr.RESET;
        RoutingRequestHdr.SETCURRENTKEY("Bill of Lading No.");
        RoutingRequestHdr.SETRANGE("Bill of Lading No.",'<>%1','');
       RoutingRequestHdr.SETRANGE("Bill of Lading No.",IWXLicensePlateHeader."BOL No.");
        IF NOT RoutingRequestHdr.FIND('-') THEN
          CLEAR(RoutingRequestHdr);
      END;
      IF IWXLicensePlateHeader."Location Code" <> '' THEN
        IF NOT Location.GET(IWXLicensePlateHeader."Location Code") THEN
          CLEAR(Location);
      IF IWXLicensePlateHeader."Ship-to Country Code" <> '' THEN
        IF NOT ShiptoCountry.GET(IWXLicensePlateHeader."Ship-to Country Code") THEN
          CLEAR(ShiptoCountry);
      IF IWXLicensePlateHeader."Ship-from Country Code" <> '' THEN
        IF NOT ShipfromCountry.GET(IWXLicensePlateHeader."Ship-from Country Code") THEN
          CLEAR(ShipfromCountry);

      NAVDocument := 'E_SLSASN';//VAH
      DocumentNo := NAVDocument;

      EDIDocument.SETRANGE("Trade Partner No.",EDITradePartner."No.");
      EDIDocument.SETFILTER(Status,'%1|%2',EDIDocument.Status::Test,EDIDocument.Status::Production);
      EDIDocument.SETRANGE(EDIDocument."Navision Document",DocumentNo);
      EDIDocument.SETRANGE("Override Map",TRUE);
      IF EDIDocument.FIND('-') THEN BEGIN
        IF EDIDocument."Override ASN Type" <> EDIDocument."Override ASN Type"::" " THEN
          GetASNMap;
      END;
      EDIDocument.SETRANGE("Trade Partner No.",EDITradePartner."No.");
      EDIDocument.SETFILTER(Status,'%1|%2',EDIDocument.Status::Test,EDIDocument.Status::Production);
      EDIDocument.SETRANGE(EDIDocument."Navision Document",DocumentNo);
      IF OverrideASNMap THEN
        EDIDocument.SETRANGE("Override Map",TRUE)
      ELSE
        EDIDocument.SETRANGE("Override Map",FALSE);
      IF NOT EDIDocument.FIND('-') THEN BEGIN
        IF OverrideASNMap THEN
          ERROR(Text018,EDITradePartner."No.",DocumentNo)
        ELSE
          ERROR(Text002,EDITradePartner."No.",DocumentNo);
      END;
      XMLDoc := EDIDocument."XML Document";

      IF DocumentNo = 'E_SLSBSN' THEN
        ShipmentInvoiceRequired(Batch);

      EDITemplate.GET(EDIDocument."EDI Template Code");

      IF EDIDocument."Packaged Map" THEN BEGIN
        IF EDIPackageMapIntegration.EDIASNSend(BillOfLading) THEN
        // IF EDIASNSendPM.ExportASN(BillOfLading) THEN
          EXIT(TRUE)
        ELSE
          EXIT(FALSE);
      END;

      EDIDocument.CALCFIELDS("Element Mapping Error","Conditional Mapping Error");
      IF EDIDocument."Element Mapping Error" OR EDIDocument."Conditional Mapping Error" THEN
        ERROR(
          Text003,
          EDIDocument."Navision Document",EDIDocument."Trade Partner No.");

      LineNumber := 0;
      NetShipWeight := 0;
      GrossShipWeight := 0;
      PalletWeight := 0;
      TotalUnits := 0;
      TotalBaseUnits := 0;
      TotalSegments := 0;
      CPSCount := 0;
      DockCode := '';
      PrevDockCode := '';


      IF IWXLicensePlateHeader."EDI Internal Doc. No." = '' THEN BEGIN
        EDISetup.LOCKTABLE;
        EDISetup.GET;
        EDISetup."Last Internal Doc. No." := INCSTR(EDISetup."Last Internal Doc. No.");
        IWXLicensePlateHeader."EDI Internal Doc. No." := EDISetup."Last Internal Doc. No.";
        EDISetup.MODIFY;
      END;

      EDISendDocHdr."Internal Doc No." := IWXLicensePlateHeader."EDI Internal Doc. No.";
      EDISendDocHdr."Navision Document" := DocumentNo;
      EDISendDocHdr."Document No." := IWXLicensePlateHeader."BOL No.";
      EDISend.CreateSendHdr(EDITradePartner,EDIDocument,EDISendDocHdr);

      CreateASNSegmentsLP;//VAH

      IF EDISetup."Send Document Error" THEN BEGIN
        EDISendDocHdr.CALCFIELDS("Data Error");
        IF EDISendDocHdr."Data Error" THEN BEGIN
          CLEAR(CreateEDIAlert);
          CreateEDIAlert.CreateAlertSendDocError(EDISendDocHdr."No.",1,FALSE);
        END;
      END;

      CASE NAVDocument OF
        'E_SLSASN':
          BEGIN
            IWXLicensePlateHeader.VALIDATE("EDI ASN Generated",TRUE);
            IWXLicensePlateHeader."EDI ASN Gen. Date" := WORKDATE;
            IWXLicensePlateHeader.MODIFY;
          END;
        {
        'E_SLSBSN':
          BEGIN
            BillOfLading.VALIDATE("EDI BSN Generated",TRUE);
            BillOfLading."EDI BSN Gen. Date" := WORKDATE;
            BillOfLading.MODIFY;
          END;
          } //temp vah
      END;

      IF XMLDoc THEN
        EDIXMLManagement.ResponseIDSubstitution(EDISendDocHdr);

      EXIT(TRUE);
    END;

    PROCEDURE CreateASNSegmentsLP@1000000002();
    VAR
      PostedPackageLine2@1240020000 : Record 14000705;
      SingleItem@1240020001 : Boolean;
      MultipleItems@1240020002 : Boolean;
      BillOfladingInfoLine@1000000005 : Record 14000827;
      SalesShipmentHeaderLocal@1000000004 : Record 110;
      PostedPackageLocal@1000000003 : Record 14000704;
      BillofLadingSummaryLineLocal@1000000002 : Record 14000825;
      BOLMgt@1000000001 : Codeunit 14000821;
      BOLSummaryFlag@1000000000 : Boolean;
      LicensePlateLine2@1000000006 : Record 23044506;
    BEGIN
      EDISegment.SETRANGE("Trade Partner No.",EDIDocument."Trade Partner No.");
      EDISegment.SETRANGE("Navision Document",EDIDocument."Navision Document");
      EDISegment.SETRANGE("EDI Document No.",EDIDocument."EDI Document No.");
      EDISegment.SETRANGE(Version,EDIDocument.Version);
      IF NOT EDISegment.FIND('-') THEN
        ERROR(Text004,
              EDIDocument."Trade Partner No.");

      //<TPZ2409>
      {
      BillOfladingInfoLine.RESET;
      BillOfladingInfoLine.SETRANGE("Bill of Lading No.",IWXLicensePlateHeader."BOL No.");
      BillOfladingInfoLine.SETRANGE("Source Type",36);
      BillOfladingInfoLine.SETFILTER("Source ID",'<>%1','');
      IF BillOfladingInfoLine.FINDSET THEN BEGIN
        REPEAT
          IF BillOfladingInfoLine."EDI ASN" THEN BEGIN
            SalesShipmentHeaderLocal.SETCURRENTKEY("Order No.");
            SalesShipmentHeaderLocal.SETRANGE("Order No.",BillOfladingInfoLine."Source ID");
            IF SalesShipmentHeaderLocal.FINDSET THEN BEGIN
              REPEAT
                IF SalesShipmentHeaderLocal."Bill of Lading No." = '' THEN BEGIN
                   SalesShipmentHeaderLocal."Bill of Lading No." := IWXLicensePlateHeader."BOL No.";
                   SalesShipmentHeaderLocal.MODIFY;
                END;
              UNTIL SalesShipmentHeaderLocal.NEXT = 0;
            END;



            //BOLMgt.UpdateASNSummaryLines1(BillOfLading);


            CLEAR(BOLSummaryFlag);
          END;
        UNTIL BillOfladingInfoLine.NEXT=0;
      END;
      }
      //</TPZ2409>

      // Create Header Segments and Elements
      {
      SalesShipmentHeader.SETCURRENTKEY(SalesShipmentHeader."Bill of Lading No.");
      SalesShipmentHeader.SETRANGE("Bill of Lading No.",IWXLicensePlateHeader."BOL No.");
      IF SalesShipmentHeader.FIND('-') THEN BEGIN
        SalesShipmentHeader.RESET;

        PostedPackage.RESET;
        PostedPackage.SETCURRENTKEY(
          "Source Type","Source Subtype","Posted Source ID","Bill of Lading No.");
        PostedPackage.SETRANGE("Source Type",36);
        PostedPackage.SETRANGE("Posted Source ID",SalesShipmentHeader."No.");
        //PostedPackage.FIND('-'); //code commented TPZ3191
        IF PostedPackage.FIND('-') THEN; //TPZ3191
      END ELSE BEGIN
        PostedPackage.RESET;
        PostedPackage.SETCURRENTKEY("Bill of Lading No.");
        PostedPackage.SETRANGE("Bill of Lading No.",IWXLicensePlateHeader."BOL No.");
        PostedPackage.FIND('-');
        SalesShipmentHeader.GET(PostedPackage."Posted Source ID");
      END;
      } //vah
      SalesCommentLine.RESET;
      SalesCommentLine.SETRANGE("Document Type",SalesCommentLine."Document Type"::Shipment);
      SalesCommentLine.SETRANGE("No.",SalesShipmentHeader."No.");
      IF NOT SalesCommentLine.FIND('-') THEN
        SalesCommentLine.INIT;

      EDIReceiveDocHdrInfo.RESET;
      EDIReceiveDocHdrInfo.SETCURRENTKEY("Document No.");
      EDIReceiveDocHdrInfo.SETRANGE("Document No.",SalesShipmentHeader."Order No.");
      EDIReceiveDocHdrInfo.SETRANGE("Internal Doc. No.",SalesShipmentHeader."EDI Internal Doc. No.");
      IF NOT EDIReceiveDocHdrInfo.FIND('-') THEN
        CLEAR(EDIReceiveDocHdrInfo);

      ProcessingLines := FALSE;
      REPEAT
        IF (EDISegment."Segment Type" <> EDISegment."Segment Type"::Command) THEN BEGIN
          TotalSegments := TotalSegments + 1;
          CreateASNElements(EDISegment);
          IF (EDISegment."Repeat Segment") AND (NOT LoopFinished) THEN BEGIN
            GetNextRecord;
            EDISegment.NEXT(-1);
          END;
        END;
      UNTIL (EDISegment.NEXT = 0) OR
        (EDISegment."Segment Type" = EDISegment."Segment Type"::Command);

      // Create Detail Segments and Elements
      LPBOLSummaryLine.RESET;
      LPBOLSummaryLine.SETRANGE("Bill of Lading No.",IWXLicensePlateHeader."BOL No.");
      LPBOLSummaryLine.SETRANGE("Bill of Lading Type",LPBOLSummaryLine."Bill of Lading Type"::"ASN (EDI)");
      IF LPBOLSummaryLine.FIND('-') THEN BEGIN
        REPEAT
          IF LPBOLSummaryLine."Posted Source ID" <> '' THEN
            SalesShipmentHeader.GET(LPBOLSummaryLine."Posted Source ID");
          EDISegment2.RESET;
          EDISegment2.SETRANGE("Trade Partner No.",EDIDocument."Trade Partner No.");
          EDISegment2.SETRANGE("Navision Document",EDIDocument."Navision Document");
          EDISegment2.SETRANGE("EDI Document No.",EDIDocument."EDI Document No.");
          EDISegment2.SETRANGE(Version,EDIDocument.Version);
          EDISegment2.SETRANGE("Segment Type",EDISegment2."Segment Type"::Command);
          CASE LPBOLSummaryLine.Type OF
            LPBOLSummaryLine.Type::"Bill of Lading":
              BEGIN
                ProcessingLines := FALSE;
                PostedPackage.RESET;
                PostedPackage.SETCURRENTKEY(
                  "Source Type","Source Subtype","Posted Source ID","Bill of Lading No.");
                PostedPackage.SETRANGE("Source Type",36);
                PostedPackage.SETRANGE("Source Subtype",1);
                PostedPackage.SETRANGE("Posted Source ID",SalesShipmentHeader."No.");
                //PostedPackage.FIND('-'); //code commented TPZ3191
                IF PostedPackage.FIND('-') THEN; //<TPZ3191>
                LicensePlateHeader.RESET;
                LicensePlateHeader.SETRANGE("Package Tracking Number",SalesShipmentHeader."Package Tracking No.");
                IF LicensePlateHeader.FIND('-') THEN;
                //</TPZ3191>
                CLEAR(ShipforAddress);
                IF SalesShipmentHeader."Ship-for Code" <> '' THEN
                  ShipforAddress.GET(
                    SalesShipmentHeader."Sell-to Customer No.",SalesShipmentHeader."Ship-for Code");
                IF SalesShipmentHeader."Sell-to Country/Region Code" <> '' THEN
                  IF NOT SelltoCountry.GET(SalesShipmentHeader."Sell-to Country/Region Code") THEN
                    CLEAR(SelltoCountry);
                IF SalesShipmentHeader."Bill-to Country/Region Code" <> '' THEN
                  IF NOT BilltoCountry.GET(SalesShipmentHeader."Bill-to Country/Region Code") THEN
                    CLEAR(BilltoCountry);
                IF IWXLicensePlateHeader."Ship-to Country Code" <> '' THEN
                  IF NOT ShiptoCountry.GET(IWXLicensePlateHeader."Ship-to Country Code") THEN
                    CLEAR(ShiptoCountry);
                IF IWXLicensePlateHeader."Ship-from Country Code" <> '' THEN
                  IF NOT ShipfromCountry.GET(IWXLicensePlateHeader."Ship-from Country Code") THEN
                    CLEAR(ShipfromCountry);
                //TotalBOLPackages := PostedPackage.COUNT; //code commented TPZ3191
                TotalBOLPackages := PostedPackage.COUNT + LicensePlateHeader.COUNT;
                TotalNoOfPackages := LPBOLSummaryLine."No. of Packages with Items";
                ExportBillOfLading;
                TotalBOLPackages := 0;
              END;
            LPBOLSummaryLine.Type::"Purchase Order":
              BEGIN
                InvoiceFound := FALSE;
                CLEAR(SalesShipmentHeader);
                IF NOT SalesShipmentHeader.GET(LPBOLSummaryLine."Posted Source ID") THEN
                  ;
                CLEAR(SalesInvoiceHeader);
                IF LPBOLSummaryLine."Custom Value 1" <> '' THEN BEGIN
                  IF SalesInvoiceHeader.GET(LPBOLSummaryLine."Custom Value 1") THEN ;
                END ELSE
                  IF SalesShipmentHeader."Shipment Invoice No." <> '' THEN
                    IF SalesInvoiceHeader.GET(SalesShipmentHeader."Shipment Invoice No.") THEN BEGIN
                      InvoiceFound := TRUE;
                      InvGrossAmt := 0;
                      TotalInvDiscount := 0;
                      InvoiceTaxPercent := 0;
                      SalesInvoiceHeader.CALCFIELDS("Amount Including VAT",Amount);
                      InvoiceTax := SalesInvoiceHeader."Amount Including VAT" - SalesInvoiceHeader.Amount;
                      IF SalesInvoiceHeader.Amount > 0 THEN
                        InvoiceTaxPercent := (InvoiceTax / SalesInvoiceHeader.Amount) * 100;
                      PaymentTerms.INIT;
                      IF SalesInvoiceHeader."Payment Terms Code" <> '' THEN BEGIN
                        PaymentTerms.GET(SalesInvoiceHeader."Payment Terms Code");
                        PmtDiscPercent := PaymentTerms."Discount %";
                        PmtDiscAmt := ROUND(
                          (SalesInvoiceHeader."Amount Including VAT" * PaymentTerms."Discount %") / 100);
                        PmtDiscountedAmt := SalesInvoiceHeader."Amount Including VAT" - PmtDiscAmt;
                        PmtDiscDays := (CALCDATE(PaymentTerms."Discount Date Calculation",TODAY) - TODAY);
                        PmtNetDays := (CALCDATE(PaymentTerms."Due Date Calculation",TODAY) - TODAY);
                      END ELSE BEGIN
                        PmtNetDays := 0;
                        PmtDiscDays := 0;
                        PmtDiscAmt := 0;
                        PmtDiscPercent := 0;
                      END;
                    END ELSE
                      SalesInvoiceHeader.INIT;
                PostedPackage.RESET;
                PostedPackage.SETCURRENTKEY(
                  "Source Type","Source Subtype","Posted Source ID","Bill of Lading No.");
                PostedPackage.SETRANGE("Source Type",36);
                PostedPackage.SETRANGE("Source Subtype",1);
                PostedPackage.SETRANGE("Posted Source ID",SalesShipmentHeader."No.");
                IF PostedPackage.FIND('-') THEN;
                //<TPZ3202>
                LicensePlateHeader.RESET;
                LicensePlateHeader.SETRANGE("Package Tracking Number",SalesShipmentHeader."Package Tracking No.");
                IF LicensePlateHeader.FIND('-') THEN;
                //</TPZ3202>
                TotalPOPackages := PostedPackage.COUNT + LicensePlateHeader.COUNT;
                ShiptoAddress.INIT;
                IF SalesShipmentHeader."Ship-to Code" <> '' THEN
                  ShiptoAddress.GET(
                    SalesShipmentHeader."Sell-to Customer No.",SalesShipmentHeader."Ship-to Code");
                EDIReceiveDocHdrInfo.RESET;
                EDIReceiveDocHdrInfo.SETCURRENTKEY("Document No.");
                EDIReceiveDocHdrInfo.SETRANGE("Document No.",SalesShipmentHeader."Order No.");
                EDIReceiveDocHdrInfo.SETRANGE("Internal Doc. No.",SalesShipmentHeader."EDI Internal Doc. No.");
                IF NOT EDIReceiveDocHdrInfo.FIND('-') THEN
                  CLEAR(EDIReceiveDocHdrInfo);
                CLEAR(ShipforAddress);
                IF SalesShipmentHeader."Ship-for Code" <> '' THEN
                  ShipforAddress.GET(
                    SalesShipmentHeader."Sell-to Customer No.",SalesShipmentHeader."Ship-for Code");
                IF SalesShipmentHeader."Sell-to Country/Region Code" <> '' THEN
                  IF NOT SelltoCountry.GET(SalesShipmentHeader."Sell-to Country/Region Code") THEN
                    CLEAR(SelltoCountry);
                IF SalesShipmentHeader."Bill-to Country/Region Code" <> '' THEN
                  IF NOT BilltoCountry.GET(SalesShipmentHeader."Bill-to Country/Region Code") THEN
                    CLEAR(BilltoCountry);
                TotalPOTares := 0;
                TotalPOPackages := 0;
                POItemQty := 0;
                POItemQtyBase := 0;
                ProcessingLines := FALSE;
                ExportPurchaseOrder;
                TotalPOPackages := 0;
              END;
            LPBOLSummaryLine.Type::Tare:
              BEGIN
                TotalBOLTares := TotalBOLTares + 1;
                TotalPOTares := TotalPOTares + 1;
                ProcessingLines := FALSE;
                PostedPackage.GET(LPBOLSummaryLine."Package No.");
                ExportTare;
              END;
            LPBOLSummaryLine.Type::Package,LPBOLSummaryLine.Type::"Package (Item)":
              BEGIN
                TotalBOLPackages := TotalBOLPackages + 1;
                TotalPOPackages := TotalPOPackages + 1;
                ProcessingLines := FALSE;
                SingleItem := FALSE;
                MultipleItems := FALSE;
                //PostedPackage.GET(LPBOLSummaryLine."Package No."); //TPZ3202 code commented
                IF PostedPackage.GET(LPBOLSummaryLine."Package No.") THEN BEGIN //TPZ3202
                PackageSummaryLine.RESET;
                PackageSummaryLine.SETRANGE("Package No.",LPBOLSummaryLine."Package No.");
                IF NOT PackageSummaryLine.FIND('-') THEN
                  CLEAR(PackageSummaryLine);
                PostedPackageLine.RESET;
                PostedPackageLine.SETRANGE("Package No.",PostedPackage."No.");
                PostedPackageLine.SETRANGE(Type,PostedPackageLine.Type::Item);
                IF PostedPackageLine.FIND('-') THEN BEGIN
                  IF PostedPackageLine.COUNT = 1 THEN
                    SingleItem := TRUE
                  ELSE BEGIN
                    PostedPackageLine.RESET;
                    PostedPackageLine.SETRANGE("Package No.",PostedPackage."No.");
                    PostedPackageLine.SETRANGE(Type,PostedPackageLine.Type::Item);
                    IF PostedPackageLine.FIND('-') THEN BEGIN
                      CLEAR(PostedPackageLine2);
                      PostedPackageLine2 := PostedPackageLine;
                      REPEAT
                        IF (PostedPackageLine2."No." <> PostedPackageLine."No.") OR
                           (PostedPackageLine2."Variant Code" <> PostedPackageLine."Variant Code")
                        THEN BEGIN
                          MultipleItems := TRUE;
                          SingleItem := FALSE;
                        END;
                      UNTIL (PostedPackageLine.NEXT = 0) OR (MultipleItems);
                      IF MultipleItems THEN
                        SingleItem := FALSE
                      ELSE
                        SingleItem := TRUE;
                    END;
                  END;
                END ELSE
                  CLEAR(PostedPackageLine);
                //<TPZ3202>
                END ELSE BEGIN
                  IF LicensePlateHeader.GET(LPBOLSummaryLine."Package No.") THEN BEGIN //TPZ3202
                    LicensePlateLine.RESET;
                    LicensePlateLine.SETRANGE("License Plate No.",LicensePlateHeader."No.");
                    LicensePlateLine.SETRANGE(Type,LicensePlateLine.Type::Item);
                    IF LicensePlateLine.FIND('-') THEN BEGIN
                      IF LicensePlateLine.COUNT = 1 THEN
                        SingleItem := TRUE
                      ELSE BEGIN
                        LicensePlateLine.RESET;
                        LicensePlateLine.SETRANGE("License Plate No.",LicensePlateHeader."No.");
                        LicensePlateLine.SETRANGE(Type,LicensePlateLine.Type::Item);
                        IF LicensePlateLine.FIND('-') THEN BEGIN
                          CLEAR(LicensePlateLine2);
                          LicensePlateLine2 := LicensePlateLine;
                          REPEAT
                            IF (LicensePlateLine2."No." <> LicensePlateLine."No.") OR
                               (LicensePlateLine2."Variant Code" <> LicensePlateLine."Variant Code")
                            THEN BEGIN
                              MultipleItems := TRUE;
                              SingleItem := FALSE;
                            END;
                          UNTIL (LicensePlateLine.NEXT = 0) OR (MultipleItems);
                          IF MultipleItems THEN
                            SingleItem := FALSE
                          ELSE
                            SingleItem := TRUE;
                        END;
                      END;
                    END ELSE
                      CLEAR(LicensePlateLine);
                  END;
                END;
                //</TPZ3202>
                IF SingleItem THEN BEGIN
                  SalesShipmentLine.RESET;
                  SalesShipmentLine.SETRANGE("Document No.",PostedPackage."Posted Source ID");
                  SalesShipmentLine.SETRANGE(Type,SalesShipmentLine.Type::Item);
                  SalesShipmentLine.SETRANGE("No.",PostedPackageLine."No.");
                  SalesShipmentLine.SETRANGE("Variant Code",PostedPackageLine."Variant Code");
                  IF NOT SalesShipmentLine.FIND('-') THEN
                    //<TPZ3202>
                    BEGIN
                      SalesShipmentLine.RESET;
                      SalesShipmentLine.SETRANGE("Document No.",SalesShipmentHeader."No.");
                      SalesShipmentLine.SETRANGE(Type,SalesShipmentLine.Type::Item);
                      SalesShipmentLine.SETRANGE("No.",LicensePlateLine."No.");
                      SalesShipmentLine.SETRANGE("Variant Code",LicensePlateLine."Variant Code");
                      IF NOT SalesShipmentLine.FIND('-') THEN
                    CLEAR(SalesShipmentLine);
                    END;
                    //</TPZ3202>
                  IF NOT Item.GET(PostedPackageLine."No.") THEN
                    IF NOT Item.GET(LicensePlateLine."No.") THEN //TPZ3202
                    CLEAR(Item);
                  IF NOT ItemUnitOfMeasure.GET(PostedPackageLine."No.",PostedPackageLine."Unit of Measure Code") THEN
                    IF NOT ItemUnitOfMeasure.GET(LicensePlateLine."No.",LicensePlateLine."Unit of Measure Code") THEN //TPZ3202
                    ItemUnitOfMeasure.INIT;
                  ItemCrossReference.RESET;
                  ItemCrossReference.SETCURRENTKEY("Cross-Reference Type","Cross-Reference Type No.");
                  ItemCrossReference.SETFILTER(
                    "Cross-Reference Type",'<>%1',ItemCrossReference."Cross-Reference Type"::Vendor);
                  ItemCrossReference.SETRANGE(
                    "Cross-Reference Type No.",SalesShipmentHeader."Sell-to Customer No.");
                  ItemCrossReference.SETRANGE("Item No.",SalesShipmentLine."No.");
                  ItemCrossReference.SETRANGE("Variant Code",SalesShipmentLine."Variant Code");
                  IF NOT ItemCrossReference.FIND('-') THEN BEGIN
                    ItemCrossReference.SETRANGE("Cross-Reference Type No.",'');
                    IF NOT ItemCrossReference.FIND('-') THEN
                      CLEAR(ItemCrossReference);
                  END;
                END;
                ExportPackage;
              END;
            LPBOLSummaryLine.Type::Item:
              BEGIN
                BOLItemQty := BOLItemQty + LPBOLSummaryLine."Package Line Quantity";
                BOLItemQtyBase := BOLItemQtyBase + LPBOLSummaryLine."Package Line Quantity (Base)";
                POItemQty := POItemQty + LPBOLSummaryLine."Package Line Quantity";
                POItemQtyBase := POItemQtyBase + LPBOLSummaryLine."Package Line Quantity (Base)";
                ProcessingLines := TRUE;
                Item.GET(LPBOLSummaryLine."No.");
                IF LPBOLSummaryLine."Zero ASN Line" THEN
                  CLEAR(PostedPackageLine)
                ELSE
                 IF NOT PostedPackageLine.GET(
                    LPBOLSummaryLine."Package No.",LPBOLSummaryLine."Package Line Line No.") THEN
                   //<TPZ3202>
                    IF LicensePlateLine.GET(
                      LPBOLSummaryLine."Package No.",LPBOLSummaryLine."Package Line Line No.") THEN;
                   //</TPZ3202>
                SalesShipmentLine.RESET;
                SalesShipmentLine.SETRANGE("Document No.",LPBOLSummaryLine."Posted Source ID");
                SalesShipmentLine.SETRANGE(Type,SalesShipmentLine.Type::Item);
                SalesShipmentLine.SETRANGE("No.",LPBOLSummaryLine."No.");
                //<TPZ3202>
                IF PostedPackageLine."Variant Code" = '' THEN
                  SalesShipmentLine.SETRANGE("Variant Code",LicensePlateLine."Variant Code")
                ELSE
                //</TPZ3202>
                SalesShipmentLine.SETRANGE("Variant Code",PostedPackageLine."Variant Code");
                IF LPBOLSummaryLine."Custom Value 1" <> '' THEN BEGIN
                  EVALUATE(SalesShipmentLineNo,LPBOLSummaryLine."Custom Value 1");
                  SalesShipmentLine.SETRANGE("Line No.",SalesShipmentLineNo);
                END;
                IF NOT SalesShipmentLine.FIND('-') THEN
                  ERROR(
                    Text005,
                    LPBOLSummaryLine."Package No.",LPBOLSummaryLine."No.");
                IF NOT ItemUnitOfMeasure.GET(SalesShipmentLine."No.",SalesShipmentLine."Unit of Measure Code") THEN
                  ItemUnitOfMeasure.INIT;
                SalesShipmentHeader.GET(SalesShipmentLine."Document No.");
                IF SalesShipmentLine."Blanket Order No." <> '' THEN
                  EDILoadEDIOutFields.CumulativeTotal;
                IF InvoiceFound THEN
                  SalesInvoiceLine.GET(SalesInvoiceHeader."No.",SalesShipmentLine."Line No.")
                ELSE
                 CLEAR(SalesInvoiceLine);
                ItemCrossReference.RESET;
                ItemCrossReference.SETCURRENTKEY("Cross-Reference Type","Cross-Reference Type No.");
                ItemCrossReference.SETFILTER(
                  "Cross-Reference Type",'<>%1',ItemCrossReference."Cross-Reference Type"::Vendor);
                ItemCrossReference.SETRANGE(
                  "Cross-Reference Type No.",SalesShipmentHeader."Sell-to Customer No.");
                ItemCrossReference.SETRANGE("Item No.",SalesShipmentLine."No.");
                ItemCrossReference.SETRANGE("Variant Code",SalesShipmentLine."Variant Code");
                IF NOT ItemCrossReference.FIND('-') THEN BEGIN
                  ItemCrossReference.SETRANGE("Cross-Reference Type No.",'');
                  IF NOT ItemCrossReference.FIND('-') THEN
                    CLEAR(ItemCrossReference);
                END;
                IF NOT PackageSummaryLine.GET(
                  LPBOLSummaryLine."Package No.",
                  LPBOLSummaryLine."Package Line Line No.")
                THEN
                  CLEAR(PackageSummaryLine);
                EDITradePtnrItem.RESET;
                EDITradePtnrItem.SETRANGE("Trade Partner No.",EDITradePartner."No.");
                EDITradePtnrItem.SETRANGE("Navision Item No.",SalesShipmentLine."No.");
                EDITradePtnrItem.SETRANGE("Navision Variant Code",SalesShipmentLine."Variant Code");
                IF NOT EDITradePtnrItem.FIND('-') THEN
                  EDITradePtnrItem.SETRANGE("Navision Variant Code");
                IF NOT EDITradePtnrItem.FIND('-') THEN
                  CLEAR(EDITradePtnrItem);
                EDIReceiveDocLineInfo.RESET;
                EDIReceiveDocLineInfo.SETCURRENTKEY("Document No.","Line No.");
                EDIReceiveDocLineInfo.SETRANGE("Document No.",SalesShipmentHeader."Order No.");
                EDIReceiveDocLineInfo.SETRANGE("Internal Doc. No.",SalesShipmentHeader."EDI Internal Doc. No.");
                EDIReceiveDocLineInfo.SETRANGE("Line No.",SalesShipmentLine."Line No.");
                IF NOT EDIReceiveDocLineInfo.FIND('+') THEN
                  CLEAR(EDIReceiveDocLineInfo);
                SalesCommentLineDetail.RESET;
                SalesCommentLineDetail.SETRANGE(
                  "Document Type",SalesCommentLine."Document Type"::Shipment);
                SalesCommentLineDetail.SETRANGE("No.",SalesShipmentHeader."No.");
                SalesCommentLineDetail.SETRANGE("Document Line No.",SalesShipmentLine."Line No.");
                IF NOT SalesCommentLineDetail.FIND('-') THEN
                   CLEAR(SalesCommentLineDetail);
                UpdateLineTotalsLP;//VAH
                ExportItemLP;//VAH
              END;
            LPBOLSummaryLine.Type::"Item (ASN)":
              BEGIN
                BOLItemQty := BOLItemQty + LPBOLSummaryLine."Package Line Quantity";
                BOLItemQtyBase := BOLItemQtyBase + LPBOLSummaryLine."Package Line Quantity (Base)";
                ProcessingLines := TRUE;
                Item.GET(LPBOLSummaryLine."No.");
                PostedPackageLine.INIT;
                SalesShipmentLine.RESET;
                SalesShipmentLine.SETRANGE("Document No.",LPBOLSummaryLine."Posted Source ID");
                SalesShipmentLine.SETRANGE(Type,SalesShipmentLine.Type::Item);
                SalesShipmentLine.SETRANGE("No.",LPBOLSummaryLine."No.");
                IF LPBOLSummaryLine."Custom Value 1" <> '' THEN BEGIN
                  EVALUATE(SalesShipmentLineNo,LPBOLSummaryLine."Custom Value 1");
                  SalesShipmentLine.SETRANGE("Line No.",SalesShipmentLineNo);
                END;
                IF NOT SalesShipmentLine.FIND('-') THEN
                  ERROR(
                    Text005,
                    LPBOLSummaryLine."Package No.",LPBOLSummaryLine."No.");
                SalesShipmentHeader.GET(SalesShipmentLine."Document No.");
                IF SalesShipmentLine."Blanket Order No." <> '' THEN
                  EDILoadEDIOutFields.CumulativeTotal;
                IF InvoiceFound THEN
                  SalesInvoiceLine.GET(SalesInvoiceHeader."No.",SalesShipmentLine."Line No.")
                ELSE
                 CLEAR(SalesInvoiceLine);
                ItemCrossReference.RESET;
                ItemCrossReference.SETCURRENTKEY("Cross-Reference Type","Cross-Reference Type No.");
                ItemCrossReference.SETFILTER(
                  "Cross-Reference Type",'<>%1',ItemCrossReference."Cross-Reference Type"::Vendor);
                ItemCrossReference.SETRANGE(
                  "Cross-Reference Type No.",SalesShipmentHeader."Sell-to Customer No.");
                ItemCrossReference.SETRANGE("Item No.",SalesShipmentLine."No.");
                ItemCrossReference.SETRANGE("Variant Code",SalesShipmentLine."Variant Code");
                IF NOT ItemCrossReference.FIND('-') THEN BEGIN
                  ItemCrossReference.SETRANGE("Cross-Reference Type No.",'');
                  IF NOT ItemCrossReference.FIND('-') THEN
                    CLEAR(ItemCrossReference);
                END;
                EDITradePtnrItem.RESET;
                EDITradePtnrItem.SETRANGE("Trade Partner No.",EDITradePartner."No.");
                EDITradePtnrItem.SETRANGE("Navision Item No.",SalesShipmentLine."No.");
                EDITradePtnrItem.SETRANGE("Navision Variant Code",SalesShipmentLine."Variant Code");
                IF NOT EDITradePtnrItem.FIND('-') THEN
                  EDITradePtnrItem.SETRANGE("Navision Variant Code");
                IF NOT EDITradePtnrItem.FIND('-') THEN
                  CLEAR(EDITradePtnrItem);
                CLEAR(PackageSummaryLine);
                EDIReceiveDocLineInfo.RESET;
                EDIReceiveDocLineInfo.SETCURRENTKEY("Document No.","Line No.");
                EDIReceiveDocLineInfo.SETRANGE("Document No.",SalesShipmentHeader."Order No.");
                EDIReceiveDocLineInfo.SETRANGE("Internal Doc. No.",SalesShipmentHeader."EDI Internal Doc. No.");
                EDIReceiveDocLineInfo.SETRANGE("Line No.",SalesShipmentLine."Line No.");
                IF NOT EDIReceiveDocLineInfo.FIND('+') THEN
                  CLEAR(EDIReceiveDocLineInfo);
                SalesCommentLineDetail.RESET;
                SalesCommentLineDetail.SETRANGE(
                  "Document Type",SalesCommentLine."Document Type"::Shipment);
                SalesCommentLineDetail.SETRANGE("No.",SalesShipmentHeader."No.");
                SalesCommentLineDetail.SETRANGE("Document Line No.",SalesShipmentLine."Line No.");
                IF NOT SalesCommentLineDetail.FIND('-') THEN
                   CLEAR(SalesCommentLineDetail);
                UpdateLineTotalsLP;//VAH
                ExportItemLP;//VAH
              END;
          END;
        UNTIL (LPBOLSummaryLine.NEXT = 0);
      END; //ELSE
        //ERROR(Text006,IWXLicensePlateHeader."BOL No.");//VAH

      // Create Trailer Segments and Elements
      ProcessingLines := FALSE;
      EDISegment2.RESET;
      EDISegment2.SETRANGE("Trade Partner No.",EDIDocument."Trade Partner No.");
      EDISegment2.SETRANGE("Navision Document",EDIDocument."Navision Document");
      EDISegment2.SETRANGE("EDI Document No.",EDIDocument."EDI Document No.");
      EDISegment2.SETRANGE(Version,EDIDocument.Version);
      EDISegment2.SETRANGE("Segment Type",EDISegment2."Segment Type"::Command);
      IF XMLDoc THEN
        EDISegment2.SETRANGE("Node Name",'HL END')
      ELSE
        EDISegment2.SETRANGE(Segment,'HL END');
      IF NOT EDISegment2.FIND('-') THEN
        ERROR(Text007);
      EDISegment2.SETRANGE("Segment Type");
      IF XMLDoc THEN
        EDISegment2.SETRANGE("Node Name")
      ELSE
      EDISegment2.SETRANGE(Segment);
      REPEAT
        IF (EDISegment2."Segment Type" <> EDISegment2."Segment Type"::Command) THEN BEGIN
          TotalSegments := TotalSegments + 1;
          CreateASNElements(EDISegment2);
          IF (EDISegment2."Repeat Segment") AND (NOT LoopFinished) THEN BEGIN
            GetNextRecord;
            EDISegment2.NEXT(-1);
          END;
        END;
      UNTIL EDISegment2.NEXT = 0;
    END;

    PROCEDURE ExportItemLP@1000000005();
    BEGIN
      IF XMLDoc THEN
        EDISegment2.SETRANGE("Node Name",'HL ITEM BEGIN')
      ELSE
        EDISegment2.SETRANGE(Segment,'HL ITEM BEGIN');
      IF NOT EDISegment2.FIND('-') THEN
        ERROR(
          Text012,
          EDIDocument."Trade Partner No.",EDIDocument."Navision Document");
      EDISegment2.SETRANGE(EDISegment2."Segment Type");
      IF XMLDoc THEN
        EDISegment2.SETRANGE("Node Name")
      ELSE
      EDISegment2.SETRANGE(Segment);
      REPEAT
      // read associated records
        IF EDISegment2.Segment = 'HL ITEM BEGIN' THEN BEGIN
          LPBOLSummaryLine2.RESET;
          LPBOLSummaryLine2.SETRANGE("Bill of Lading No.",IWXLicensePlateHeader."BOL No.");
          LPBOLSummaryLine2.SETRANGE("Bill of Lading Type",LPBOLSummaryLine2."Bill of Lading Type"::"ASN (EDI)");
          LPBOLSummaryLine2.SETRANGE(Type,LPBOLSummaryLine2.Type::"Package (Item)");
          LPBOLSummaryLine2.SETRANGE("Advanced Parent Line No.",LPBOLSummaryLine."Advanced Line No.");
          IF LPBOLSummaryLine2.FIND('-') THEN BEGIN
            CLEAR(StdPackQtyArray);
            CLEAR(PackageQtyArray);
            x := 0;
            REPEAT
              x := x + 1;
              StdPackQtyArray[x] := LPBOLSummaryLine2."Package Line Quantity";
              IF x = 1 THEN
                PackageQtyArray[x] := 1;
            UNTIL LPBOLSummaryLine2.NEXT = 0;
          END;
          x := 1;
          y := 1;
          Finished := FALSE;
          REPEAT
            IF StdPackQtyArray[x + 1] = 0 THEN
              Finished := TRUE
            ELSE BEGIN
              IF StdPackQtyArray[x] = StdPackQtyArray[x + 1] THEN
                PackageQtyArray[y] := PackageQtyArray[y] + 1
              ELSE BEGIN
                y := x + 1;
                PackageQtyArray[y] := PackageQtyArray[y] + 1;
              END;
              x := x + 1;
            END;
          UNTIL Finished;
          PackageUnderItem := 0;

          SLNGroup := 0;
          GetSLNSegment;
          IF SLNFound THEN BEGIN
            EDIRecDocField.RESET;
            EDIRecDocField.SETCURRENTKEY("Internal Doc. No.","Segment Group");
            EDIRecDocField.SETRANGE("Internal Doc. No.",SalesShipmentHeader."EDI Internal Doc. No.");
            EDIRecDocField.SETRANGE("Segment Group",SalesShipmentLine."EDI Segment Group");
            EDIRecDocField.SETRANGE("SLN Document Line No.",SalesShipmentLine."Line No.");
            EDIRecDocField.SETRANGE("New Segment",TRUE);
            EDIRecDocField.SETRANGE(Segment,'SLN');
            IF NOT EDIRecDocField.FIND('-') THEN BEGIN
              IF EDIRecDocHdr.GET(SalesShipmentHeader."EDI Internal Doc. No.") THEN BEGIN
                EDIRecDocField.SETRANGE(Segment);
                EDIRecDocField.SETRANGE(Segment,EDIRecDocHdr."Subline Segment");
                IF EDIRecDocField.FIND('-') THEN
                  SLNGroup := EDIRecDocField."SLN Group"
                ELSE
                  CLEAR(EDIRecDocField);
              END ELSE
                CLEAR(EDIRecDocField);
            END ELSE
              SLNGroup := EDIRecDocField."SLN Group";
          END;
        END ELSE
          IF (EDISegment2."Segment Type" <> EDISegment2."Segment Type"::Command) THEN BEGIN
            TotalSegments := TotalSegments + 1;
            CreateASNElements(EDISegment2);
            IF (EDISegment2."Repeat Segment") AND (NOT LoopFinished) THEN BEGIN
              GetNextRecord;
              EDISegment2.NEXT(-1);
            END;
          END;
      UNTIL (EDISegment2.NEXT = 0) OR
        (EDISegment2."Segment Type" = EDISegment2."Segment Type"::Command);
    END;

    PROCEDURE UpdateLineTotalsLP@1000000009();
    BEGIN
      LineNumber := LineNumber + 1;

      TotalUnits := TotalUnits + LPBOLSummaryLine."Package Line Quantity";
      TotalBaseUnits := TotalBaseUnits + LPBOLSummaryLine."Package Line Quantity (Base)";
    END;

    BEGIN
    {
      2018-09-07 TPZ2409 UCHOUHAN
        Added code to update BOL No. in shipment in BOL EDI ASN .
      001 TPZ3202 GKG 06152021 Code added to flow LP
    }
    END.
  }
}

