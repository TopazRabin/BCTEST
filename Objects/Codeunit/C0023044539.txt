OBJECT Codeunit 23044539 WHI Extension Template
{
  OBJECT-PROPERTIES
  {
    Date=02/25/20;
    Time=[ 9:13:34 AM];
    Version List=WHI2.4.7684.0;
  }
  PROPERTIES
  {
    TableNo=23044511;
    OnRun=BEGIN
            //////////////////////////////////////////////
            //<Summary>
            // The entry point for extensibility.
            // Basic function use stubbed out for various usage scenarios.
            // For more complete information on the Extensibility options
            // see the appropriate documentation guides.
            //</Summary>
            //<Author>R.Trudeau</Author>
            //<Date>05/26/16</Date>
            //<Issue></Issue>
            //<Version>IW16.05</Version>
            //////////////////////////////////////////////

            trecEventParams.COPY(Rec, TRUE);  //make Rec data global

            //
            // The Event ID being called
            // The event is either set in the menu configuration or pre-defined
            // for the normal operation.
            // For pre-defined values consult the documentation.
            iEventID := Rec.getEvent();


            CASE getExtensibilityEvent OF
              "Extensibility Event"::OnPrint: onPrint;
              "Extensibility Event"::OnBeforeProcessEvent: onBeforeProcessEvent;
              "Extensibility Event"::OnAfterProcessEvent:  onAfterProcessEvent;
            END; // case

            COPY(trecEventParams, TRUE);
          END;

  }
  CODE
  {
    VAR
      trecEventParams@1000000000 : TEMPORARY Record 23044511;
      cuCommonFuncs@1000000001 : Codeunit 23044501;
      iEventID@1000000002 : Integer;

    LOCAL PROCEDURE onPrint@1000000001();
    BEGIN
      //
      // Use this function to override or extend existing print requests
      //

      CASE trecEventParams.getEvent OF
        9999999: sampleExtensionFunction;
      END;
    END;

    LOCAL PROCEDURE onBeforeProcessEvent@1000000002();
    BEGIN
      //
      // Use this function to override or extend existing events or when creating new
      // requests.
      //

      CASE trecEventParams.getEvent OF
        123: samplePrintFunction;
        9999999: sampleExtensionFunction();
      END;
    END;

    LOCAL PROCEDURE onAfterProcessEvent@1000000003();
    BEGIN
      //
      // Use this function to add additional functionality to existing events after they
      // have completed.
      //

      CASE trecEventParams.getEvent OF
        9999999: sampleExtensionFunction;
      END;
    END;

    LOCAL PROCEDURE sendSuccessResult@1000000014(psResultMessage@1000000001 : Text;pbOverrideEvent@1000000002 : Boolean);
    VAR
      lbtTemp@1000000004 : BigText;
      losTemp@1000000005 : OutStream;
    BEGIN
      //
      // Wrapper function to abstract some of the boiler plate code
      // when using the extensibility framework.
      //
      cuCommonFuncs.generateSuccessReturnWithMsg(1, psResultMessage,lbtTemp);
      trecEventParams.setExtensibilityOverride(pbOverrideEvent);
      trecEventParams."Extensibility Blob".CREATEOUTSTREAM( losTemp );
      lbtTemp.WRITE( losTemp );
      trecEventParams.MODIFY();
    END;

    LOCAL PROCEDURE sendStandardResult@1000000009(pbtResult@1000000001 : BigText;pbOverrideEvent@1000000000 : Boolean);
    VAR
      losTemp@1000000003 : OutStream;
    BEGIN
      //
      // Wrapper function to abstract some of the boiler plate code
      // when using the extensibility framework.
      //
      trecEventParams.setExtensibilityOverride(pbOverrideEvent);
      trecEventParams."Extensibility Blob".CREATEOUTSTREAM( losTemp );
      pbtResult.WRITE( losTemp );
      trecEventParams.MODIFY();
    END;

    LOCAL PROCEDURE runReport@1000000005(piCodeunit@1000000000 : Integer);
    VAR
      liSessionID@1000000002 : Integer;
      lrecConfig@1000000001 : Record 23044504;
    BEGIN
      STARTSESSION(liSessionID,piCodeunit,COMPANYNAME,trecEventParams);
    END;

    LOCAL PROCEDURE sampleExtensionFunction@1000000007();
    VAR
      lsInputTextResult@1000000001 : Text;
      lbBoolParam@1000000002 : Boolean;
      ldDecimalParam@1000000003 : Decimal;
      liIntParam@1000000010 : Integer;
      lcodDocNumber@1000000004 : Code[20];
      liLineNumber@1000000005 : Integer;
      lcodItemNumber@1000000006 : Text;
      lcodVariantCode@1000000007 : Text;
      lsLotNumber@1000000008 : Text;
      lsSerialNumber@1000000009 : Text;
      lbsOutput@1000000000 : BigText;
    BEGIN
      //
      // Misc. code implementation to show some basic features/concepts.
      //

      // get the parameters of interest from the event.
      // The params are stored as key/value pairs.  Supplies some common wrappers
      // around some values but for specific details consult the documentation.


      // the result of a custom input type text menu
      lsInputTextResult := trecEventParams.getValue('action_result');

      // a boolean value
      lbBoolParam := trecEventParams.getValueAsBool('Boolean_Field');

      // a decimal value
      ldDecimalParam := trecEventParams.getValueAsDecimal('Quantity');

      // an integer or option value
      liIntParam := trecEventParams.getValueAsInt('document_type');

      // standard document/line routines
      lcodDocNumber := trecEventParams.getDocumentNo();
      liLineNumber := trecEventParams.getLineNo();
      lcodItemNumber := trecEventParams.getItemNo();
      lcodVariantCode := trecEventParams.getVariant();
      lsLotNumber := trecEventParams.getLotNo();
      lsSerialNumber := trecEventParams.getSerialNo();

      //
      // do whatever processing is required
      //


      // Errors can be generated back to the client by calling the ERROR routine
      // E.g. ERROR('Quantity must be greater than 0');


      // When the processing is complete choose whether the event should be
      // overridden (e.g. normal implementation ignored) or left to continue.
      // This would not be required typically when extending existing functions
      // like before and after processing since the base functionality would likely
      // already be returning a message/result back to the client.
      sendSuccessResult(
        'Put your return message to the user here.',
        TRUE  // true if the event is to be considered handled, false if not (custom events must set to TRUE)
      );

      //
      // to return base nav type dataset type structures or existing functions that use the 'big text' result
      // Call:
      //   sendStandardResult(
      //     lbsOutput,
      //     TRUE  // true if the event is to be considered handled, false if not (custom events must set to TRUE)
      //   );
    END;

    LOCAL PROCEDURE samplePrintFunction@1000000000();
    VAR
      lcodDocNumber@1000000001 : Code[20];
    BEGIN
      //
      // get whatever variables are require to perform validation
      //
      lcodDocNumber := trecEventParams.getDocumentNo();

      // send back a success message (though printing may actually fail, we cannot determine that)
      sendSuccessResult(
        'The document has printed.',
        TRUE
        );

      // call the printing in another session
      runReport(CODEUNIT::"WHI Print Ext. Template");
    END;

    BEGIN
    END.
  }
}

