OBJECT Codeunit 11123310 SC - Validation
{
  OBJECT-PROPERTIES
  {
    Date=04/18/17;
    Time=[ 1:00:00 PM];
    Version List=SCW19.2.0;
  }
  PROPERTIES
  {
    TableNo=11123321;
    OnRun=BEGIN
            RunTest(Rec);
          END;

  }
  CODE
  {
    VAR
      GlobalRecRefToTest@11123319 : RecordRef;
      GlobalEntryNo@11123310 : Integer;
      Port@11123307 : Integer;
      Secure@11123308 : Boolean;
      GlobalFirstCallSucceed@11123309 : Boolean;
      GlobalTestSucceed@11123311 : Boolean;
      Text11123302@11123302 : TextConst 'ENU=The NAS service is properly configured for Sana Commerce.';
      Text11123303@11123303 : TextConst 'ENU=PageNumber cannot be less then 0.';
      Text11123304@11123304 : TextConst 'ENU=PageSize cannot be less then 0.';
      Text11123305@11123305 : TextConst 'ENU=Max length of %1 field value in %2 table must be %3.';
      Text11123306@11123306 : TextConst 'ENU=Field No. %1 does not exist in Table No. %2 or this table does not exist in database.';
      Text11123307@11123312 : TextConst 'ENU=Test failed for %1 field in %2 table. Value must be %3 ''%4''. Current value is ''%5''.';
      Text11123308@11123313 : TextConst 'ENU=Do you want to set default validation rules for all tables?';
      Text11123309@11123314 : TextConst 'ENU=Do you want to set default validation rules for %1 table?';
      Text11123310@11123315 : TextConst 'ENU=There are no defaults predefined for %1 table.';
      Text11123311@11123316 : TextConst 'ENU=Defaults successfully set.';
      Text11123312@11123318 : TextConst 'ENU=The changes made in data validation rule(s) required refreshing the products orderability information.\\Do you want to refresh it now?';
      Text11123313@11123317 : TextConst 'ENU=Do you want to refresh the products orderability information now?';
      Text11123314@11123320 : TextConst 'ENU="Using this fuction you can compare two records with the same type only. For instance; SalesHeader and TempSalesHeader."';
      Text11123331@11123357 : TextConst 'ENU=%1 %2 can only contain %3 characters (%4).';
      Text11123332@11123356 : TextConst 'ENU=%1 is not a supported datatype.';
      Text11123333@11123355 : TextConst 'ENU=%1 is not a valid Date.';
      Text11123334@11123354 : TextConst 'ENU=%1 is not a valid Dateformula.';
      Text11123335@11123353 : TextConst 'ENU=%1 is not a valid DateTime.';
      Text11123336@11123352 : TextConst 'ENU=%1 is not a valid Time.';
      Text11123337@11123351 : TextConst 'ENU=%1 is not a valid Duration.';
      Text11123338@11123350 : TextConst 'ENU=%1 is not a valid Integer.';
      Text11123339@11123349 : TextConst 'ENU=%1 is not a valid BigInteger.';
      Text11123340@11123348 : TextConst 'ENU=%1 is not a valid Decimal.';
      Text11123341@11123347 : TextConst 'ENU=%1 is not a valid GUID (Globally Unique Identifier).';
      Text11123342@11123346 : TextConst 'ENU=%1 is not a valid option.\Valid options are %2.';
      Text11123343@11123345 : TextConst 'ENU=%1 is not a valid boolean.';
      Text11123350@11123358 : TextConst 'ENU=Template Customer No. is empty on Webshop.';
      Text11123351@11123344 : TextConst 'ENU=Shipping Cost Type is empty on Webshop.';
      Text11123352@11123343 : TextConst 'ENU=Shipping Cost No. is empty on Webshop.';
      Text11123353@11123342 : TextConst 'ENU=Payment Cost Type is empty on Webshop.';
      Text11123354@11123341 : TextConst 'ENU=Payment Cost No. is empty on Webshop.';
      Text11123355@11123340 : TextConst 'ENU=Item Unit of Measure is invalid on Item.';
      Text11123381@11123321 : TextConst 'ENU=Customer Template Code is empty on Country.';
      Text11123382@11123322 : TextConst 'ENU=Customer No. is empty.';
      Text11123383@11123323 : TextConst 'ENU=Customer is blocked.';
      Text11123384@11123324 : TextConst 'ENU=Customer Posting Group is empty on Customer.';
      Text11123385@11123325 : TextConst 'ENU=Gen. Bus. Posting Group is empty on Customer.';
      Text11123386@11123326 : TextConst 'ENU=VAT Bus. Posting Group is empty on Customer.';
      Text11123387@11123327 : TextConst 'ENU=Customer is blocked by Customer Status.';
      Text11123388@11123328 : TextConst 'ENU=Item No. is empty.';
      Text11123389@11123329 : TextConst 'ENU=Item is blocked.';
      Text11123390@11123330 : TextConst 'ENU=Inventory Posting Group is empty on Item.';
      Text11123391@11123331 : TextConst 'ENU=Gen. Prod. Posting Group is empty on Item.';
      Text11123392@11123332 : TextConst 'ENU=Tax Group Code is empty on Item.';
      Text11123393@11123333 : TextConst 'ENU=Item is blocked by Item Status.';
      Text11123394@11123334 : TextConst 'ENU=Document Status must be Open.';
      Text11123395@11123335 : TextConst 'ENU=Customer Template Code is empty on Contact.';
      Text11123396@11123336 : TextConst 'ENU=Customer Posting Group is empty on Customer Template.';
      Text11123397@11123337 : TextConst 'ENU=Gen. Bus. Posting Group is empty on Customer Template.';
      Text11123399@11123339 : TextConst 'ENU=Variant is blocked by Item Status.';
      GlobalHideConfirm@11123399 : Boolean;
      Text11123356@11123359 : TextConst 'ENU=VAT Prod. Posting is empty on Item.';
      Text11123357@11123360 : TextConst 'ENU=VAT Bus. Posting Group is empty on Customer Template.';
      GlobalVATInUse@11123361 : Boolean;
      Text11123379@11123362 : TextConst 'ENU=Operation %1 is not valid for %2 tier call.';
      Text11123380@11123338 : TextConst 'ENU=Kit BOM settings are not valid or at least one component is non-orderable.';
      GlobalSupportsKitBOM@11123363 : Boolean;

    LOCAL PROCEDURE RunTest@11123304(VAR DataValidLine@11123302 : Record 11123321);
    VAR
      TempDummyLookupValue@11123303 : TEMPORARY Record 11123322;
      TestSucceed@11123304 : Boolean;
    BEGIN
      IF DataValidLine.Method = DataValidLine.Method::"Custom Function" THEN
        TestSucceed := ProcessCustomFunctionTest(DataValidLine,TempDummyLookupValue,TRUE)
      ELSE
        TestSucceed := PerformRegularTest(DataValidLine);

      GlobalTestSucceed := TestSucceed;
    END;

    LOCAL PROCEDURE PerformRegularTest@11123306(VAR DataValidLine@11123302 : Record 11123321) : Boolean;
    VAR
      TempMustBeRecRef@11123305 : RecordRef;
      MustBeFieldRef@11123306 : FieldRef;
      CurrentFieldRef@11123303 : FieldRef;
    BEGIN
      TempMustBeRecRef.OPEN(DataValidLine."Table No.",TRUE);
      MustBeFieldRef := TempMustBeRecRef.FIELD(DataValidLine."Field No.");
      EvaluateTextToFieldRef(DataValidLine.GetCorrectStringValue,MustBeFieldRef,FALSE);

      CurrentFieldRef := GlobalRecRefToTest.FIELD(DataValidLine."Field No.");

      EXIT(TestValues(DataValidLine,CurrentFieldRef.VALUE,MustBeFieldRef.VALUE));
    END;

    LOCAL PROCEDURE ProcessCustomFunctionTest@11123330(VAR DataValidLine@11123303 : Record 11123321;VAR TempLookupValue@11123302 : TEMPORARY Record 11123322;Execute@11123304 : Boolean) : Boolean;
    VAR
      CatalogHelper@11123306 : Codeunit 11123318;
      CustomerFunc@11123308 : Codeunit 11123313;
      Context@11123309 : Codeunit 11123305;
      ErrorTextToUpdate@11123307 : Text[250];
      TestSucceed@11123305 : Boolean;
    BEGIN
      TestSucceed := TRUE;
      CASE DataValidLine."Table No." OF
        DATABASE::Customer :
          IF Execute THEN
            CASE DataValidLine.Value OF
              'TestAddonCustomerStatus' : TestSucceed := CustomerFunc.TestAddonCustomerStatus(GlobalRecRefToTest,ErrorTextToUpdate);
              // Example of how to execute Custom Function(s)
              // 'CustomFunctionName1' : TestSucceed := CustomFunctionName1(GlobalRecRefToTest,ErrorTextToUpdate);
              // 'CustomFunctionName2' : TestSucceed := CustomFunctionName2(GlobalRecRefToTest,ErrorTextToUpdate);
            END
          ELSE BEGIN
            InsertLookupValue(TempLookupValue,'TestAddonCustomerStatus');
            // Example of how to add Custom Function(s) to the Lookup Value list
            // InsertLookupValue(TempLookupValue,'CustomFunctionName1');
            // InsertLookupValue(TempLookupValue,'CustomFunctionName2');
          END;

        DATABASE::Item, DATABASE::"Item Variant" :
          IF Execute THEN
            CASE DataValidLine.Value OF
              'TestAddonItemStatus' : TestSucceed := CatalogHelper.TestAddonItemStatus(GlobalRecRefToTest,ErrorTextToUpdate);
              'TestItemUOM' : TestSucceed := CatalogHelper.TestItemUOM(GlobalRecRefToTest,ErrorTextToUpdate);
              'TestKitBOM' :
                IF Context.IsNorthAmericaLocalization THEN
                  IF Context.SupportsKitBOM THEN
                    TestSucceed := CatalogHelper.TestKitBOM(GlobalRecRefToTest,ErrorTextToUpdate);
            END
          ELSE BEGIN
            InsertLookupValue(TempLookupValue,'TestAddonItemStatus');
            InsertLookupValue(TempLookupValue,'TestItemUOM');
            IF Context.IsNorthAmericaLocalization THEN
              IF Context.SupportsKitBOM THEN
            InsertLookupValue(TempLookupValue,'TestKitBOM');
          END;

        DATABASE::"SC - Setup" :
            IF Execute THEN
              CASE DataValidLine.Value OF
                'CheckQueue' :
                  BEGIN
                    CheckQueue(Port,Secure,GlobalFirstCallSucceed);
                    TestSucceed := GlobalFirstCallSucceed;
                  END;
              END
            ELSE BEGIN
              InsertLookupValue(TempLookupValue,'CheckQueue');
            END;
      END;

      IF NOT TestSucceed THEN
        DataValidLine."Error Text" := ErrorTextToUpdate;

      EXIT(TestSucceed);
    END;

    PROCEDURE RunValidationTests@11123332(VAR RecRef@11123302 : RecordRef;VAR ErrorText@11123303 : Text[250]) : Boolean;
    VAR
      DataValidHeader@11123304 : Record 11123320;
      CommonFunc@11123305 : Codeunit 11123309;
      TableNumber@11123306 : Integer;
      AllTestsSucceed@11123307 : Boolean;
    BEGIN
      TableNumber := CommonFunc.GetCorrectTableNoFromRecRef(RecRef);
      IF NOT FindEnabledTableRule(TableNumber,DataValidHeader) THEN
        EXIT(TRUE);

      AllTestsSucceed := DataValidHeader.ExecuteValidationTests(RecRef,ErrorText);

      EXIT(AllTestsSucceed);
    END;

    PROCEDURE ValidatePageParameters@11123302(PageNumber@11123302 : Integer;PageSize@11123303 : BigInteger);
    BEGIN
      IF PageNumber < 0 THEN
        ERROR(Text11123303);
      IF PageSize < 0 THEN
        ERROR(Text11123304);
    END;

    PROCEDURE ValidateMaxFieldLen@11123318(TableNumber@11123302 : Integer;FieldNumber@11123303 : Integer;ValueToAssign@11123304 : Text[1024];VAR ErrorText@11123306 : Text[1024]) : Boolean;
    VAR
      FieldRec@11123305 : Record 2000000041;
    BEGIN
      FieldRec.RESET;
      FieldRec.SETRANGE(TableNo,TableNumber);
      FieldRec.SETRANGE("No.",FieldNumber);
      IF FieldRec.FINDFIRST THEN BEGIN
        IF STRLEN(ValueToAssign) > FieldRec.Len THEN BEGIN
          ErrorText := STRSUBSTNO(Text11123305,FieldRec.FieldName,FieldRec.TableName,FieldRec.Len);
          EXIT(FALSE);
        END;
      END ELSE BEGIN
        ErrorText := STRSUBSTNO(Text11123306,FieldNumber,TableNumber);
        EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CheckQueue@11123319(port@11123302 : Integer;secure@11123303 : Boolean;FirstCallSucceed@11123304 : Boolean);
    VAR
      Obj@11123305 : Record 2000000001;
      NASParams@11123306 : RecordRef;
      PortField@11123307 : FieldRef;
      SecureField@11123308 : FieldRef;
      TestRunField@11123309 : FieldRef;
    BEGIN
      IF NOT Obj.GET(Obj.Type::Table,'',11123311) THEN
        EXIT;

      NASParams.OPEN(11123311,TRUE);
      NASParams.INIT;
      PortField := NASParams.FIELD(2);
      PortField.VALUE(port);
      SecureField := NASParams.FIELD(3);
      SecureField.VALUE(secure);
      TestRunField := NASParams.FIELD(4);
      TestRunField.VALUE(TRUE);
      NASParams.INSERT(TRUE);
      IF FirstCallSucceed THEN
        MESSAGE(Text11123302);
      NASParams.CLOSE;
    END;

    PROCEDURE SetServiceParams@11123320(ServicePort@11123302 : Integer;ServiceSecure@11123303 : Boolean;ServiceFirstCallSucceed@11123304 : Boolean);
    BEGIN
      Port := ServicePort;
      Secure := ServiceSecure;
      GlobalFirstCallSucceed := ServiceFirstCallSucceed;
    END;

    PROCEDURE GetLookupName@11123322(DataValidLine@11123302 : Record 11123321;VAR ValueToUpdate@11123309 : Text[250]) : Boolean;
    VAR
      FieldRec@11123306 : Record 2000000041;
      TempLookupValue@11123305 : TEMPORARY Record 11123322;
      OptionCount@11123303 : Integer;
      I@11123304 : Integer;
    BEGIN
      IF (DataValidLine."Table No." = 0) OR (DataValidLine."Field No." = 0) THEN
        EXIT(FALSE);

      FieldRec.GET(DataValidLine."Table No.",DataValidLine."Field No.");

      GlobalEntryNo := 0;

      IF DataValidLine.Method = DataValidLine.Method::"Custom Function" THEN
        ProcessCustomFunctionTest(DataValidLine,TempLookupValue,FALSE)
      ELSE BEGIN
        CASE FieldRec.Type OF
          FieldRec.Type::Boolean :
            BEGIN
              InsertLookupValue(
                TempLookupValue,
                DataValidLine.GetEmptyDefaultValidationValue);

              InsertLookupValue(TempLookupValue,FORMAT(TRUE));
            END;
          FieldRec.Type::Option :
            BEGIN
              OptionCount := DataValidLine.GetOptionsCount;
              FOR I := 0 TO OptionCount DO
                InsertLookupValue(
                  TempLookupValue,
                  DataValidLine.GetOptionStringByIndex(DataValidLine."Table No.",DataValidLine."Field No.",I));
            END;
          ELSE BEGIN
            InsertLookupValue(
              TempLookupValue,
              DataValidLine.GetEmptyDefaultValidationValue);

            GetRelatedData(DataValidLine,TempLookupValue);
          END;
        END;
      END;

      IF TempLookupValue.FINDFIRST THEN
        IF PAGE.RUNMODAL(PAGE::"SC - Lookup Values",TempLookupValue) = ACTION::LookupOK THEN BEGIN
          ValueToUpdate := TempLookupValue.Value;
          EXIT(TRUE);
        END;
    END;

    LOCAL PROCEDURE InsertLookupValue@11123324(VAR LookupValue@11123302 : Record 11123322;Value@11123303 : Text[250]);
    BEGIN
      GlobalEntryNo := GlobalEntryNo + 1;
      LookupValue.INIT;
      LookupValue."Entry No." := GlobalEntryNo;
      LookupValue.Value := Value;
      LookupValue.INSERT;
    END;

    LOCAL PROCEDURE GetRelatedData@11123331(DataValidLine@11123302 : Record 11123321;VAR TempLookupValue@11123303 : TEMPORARY Record 11123322);
    VAR
      RecRef@11123304 : RecordRef;
      FieldRef@11123305 : FieldRef;
      KeyRef@11123307 : KeyRef;
      CommonFunc@11123306 : Codeunit 11123309;
    BEGIN
      IF DataValidLine."Relation Table No." = 0 THEN
        EXIT;

      RecRef.OPEN(DataValidLine."Relation Table No.");
      IF DataValidLine."Relation Field No." <> 0 THEN BEGIN
        FieldRef := RecRef.FIELD(DataValidLine."Relation Field No.");
        CommonFunc.SetCurrentKeyByFieldName(RecRef,FieldRef.NAME,TRUE);
      END;

      IF RecRef.FINDSET THEN
        REPEAT
          IF DataValidLine."Relation Field No." = 0 THEN BEGIN
            KeyRef := RecRef.KEYINDEX(1);
            FieldRef := KeyRef.FIELDINDEX(1);
          END ELSE
            FieldRef := RecRef.FIELD(DataValidLine."Relation Field No.");

          InsertLookupValue(TempLookupValue,FORMAT(FieldRef));
        UNTIL RecRef.NEXT = 0;
    END;

    PROCEDURE SetGlobalRecordRefToTest@11123335(VAR NewRecRef@11123302 : RecordRef);
    BEGIN
      GlobalRecRefToTest := NewRecRef;
    END;

    PROCEDURE FindCustomFunctionLine@11123327(VAR DataValidLine@11123302 : Record 11123321;TableNumber@11123303 : Integer;FunctionName@11123304 : Text[250]) : Boolean;
    VAR
      DataValidHeader@11123305 : Record 11123320;
    BEGIN
      IF FindEnabledTableRule(TableNumber,DataValidHeader) THEN BEGIN
        DataValidLine.RESET;
        DataValidLine.SETRANGE("Table No.",DataValidHeader."Table No.");
        DataValidLine.SETRANGE(Method,DataValidLine.Method::"Custom Function");
        DataValidLine.SETRANGE(Value,FunctionName);
        EXIT(DataValidLine.FINDFIRST);
      END;
    END;

    PROCEDURE FindEnabledTableRule@11123333(TableNumber@11123302 : Integer;VAR DataValidHeader@11123304 : Record 11123320) : Boolean;
    VAR
      RecMgt@11123303 : Codeunit 11123326;
    BEGIN
      IF RecMgt.GetDataValidHeader(TableNumber,DataValidHeader,FALSE) THEN
        EXIT(DataValidHeader."Enable Validation Tests");
    END;

    PROCEDURE GetTestSucceed@11123311() : Boolean;
    BEGIN
      EXIT(GlobalTestSucceed);
    END;

    LOCAL PROCEDURE TestValues@11123305(VAR DataValidLine@11123304 : Record 11123321;CurrentValue@11123302 : Variant;MustBeValue@11123303 : Variant) : Boolean;
    VAR
      RecRef@11123306 : RecordRef;
      TestSucceed@11123305 : Boolean;
    BEGIN
      CASE TRUE OF
        CurrentValue.ISCODE :
          TestSucceed := TestCode(DataValidLine,CurrentValue,MustBeValue);
        CurrentValue.ISTEXT :
          TestSucceed := TestText(DataValidLine,CurrentValue,MustBeValue);
        CurrentValue.ISDATEFORMULA :
          TestSucceed := TestDateFormula(DataValidLine,CurrentValue,MustBeValue);
        CurrentValue.ISINTEGER,CurrentValue.ISOPTION :
          TestSucceed := TestBigInteger(DataValidLine,CurrentValue,MustBeValue);
        CurrentValue.ISDECIMAL :
          TestSucceed := TestDecimal(DataValidLine,CurrentValue,MustBeValue);
        CurrentValue.ISBOOLEAN :
          TestSucceed := TestBoolean(DataValidLine,CurrentValue,MustBeValue);
        CurrentValue.ISDATE :
          TestSucceed := TestDate(DataValidLine,CurrentValue,MustBeValue);
        CurrentValue.ISTIME :
          TestSucceed := TestTime(DataValidLine,CurrentValue,MustBeValue);
        CurrentValue.ISDATETIME :
          TestSucceed := TestTime(DataValidLine,CurrentValue,MustBeValue);

      END;

      RecRef.OPEN(DataValidLine."Table No.",TRUE);
      DataValidLine."Error Text" :=
        STRSUBSTNO(
          Text11123307,DataValidLine."Field Name",RecRef.NAME,
          LOWERCASE(FORMAT(DataValidLine.Method)),MustBeValue,CurrentValue);

      EXIT(TestSucceed);
    END;

    LOCAL PROCEDURE TestCode@11123309(VAR DataValidLine@11123302 : Record 11123321;CurrentValue@11123303 : Code[250];MustBeValue@11123304 : Code[250]) : Boolean;
    BEGIN
      CASE DataValidLine.Method OF
        DataValidLine.Method::Equal :
          EXIT(CurrentValue = MustBeValue);
        DataValidLine.Method::"Not Equal" :
          EXIT(CurrentValue <> MustBeValue);
        DataValidLine.Method::Greater :
          EXIT(CurrentValue > MustBeValue);
        DataValidLine.Method::"Greater or Equal" :
          EXIT(CurrentValue >= MustBeValue);
        DataValidLine.Method::Less :
          EXIT(CurrentValue < MustBeValue);
        DataValidLine.Method::"Less or Equal" :
          EXIT(CurrentValue <= MustBeValue);
      END;
    END;

    LOCAL PROCEDURE TestText@11123310(VAR DataValidLine@11123304 : Record 11123321;CurrentValue@11123303 : Text[250];MustBeValue@11123302 : Text[250]) : Boolean;
    BEGIN
      CASE DataValidLine.Method OF
        DataValidLine.Method::Equal :
          EXIT(CurrentValue = MustBeValue);
        DataValidLine.Method::"Not Equal" :
          EXIT(CurrentValue <> MustBeValue);
        DataValidLine.Method::Greater :
          EXIT(CurrentValue > MustBeValue);
        DataValidLine.Method::"Greater or Equal" :
          EXIT(CurrentValue >= MustBeValue);
        DataValidLine.Method::Less :
          EXIT(CurrentValue < MustBeValue);
        DataValidLine.Method::"Less or Equal" :
          EXIT(CurrentValue <= MustBeValue);
      END;
    END;

    LOCAL PROCEDURE TestDateFormula@11123312(VAR DataValidLine@11123304 : Record 11123321;CurrentValue@11123303 : DateFormula;MustBeValue@11123302 : DateFormula) : Boolean;
    BEGIN
      CASE DataValidLine.Method OF
        DataValidLine.Method::Equal :
          EXIT(CurrentValue = MustBeValue);
        DataValidLine.Method::"Not Equal" :
          EXIT(CurrentValue <> MustBeValue);
      END;
    END;

    LOCAL PROCEDURE TestInteger@11123313(VAR DataValidLine@11123304 : Record 11123321;CurrentValue@11123303 : Integer;MustBeValue@11123302 : Integer) : Boolean;
    BEGIN
      CASE DataValidLine.Method OF
        DataValidLine.Method::Equal :
          EXIT(CurrentValue = MustBeValue);
        DataValidLine.Method::"Not Equal" :
          EXIT(CurrentValue <> MustBeValue);
        DataValidLine.Method::Greater :
          EXIT(CurrentValue > MustBeValue);
        DataValidLine.Method::"Greater or Equal" :
          EXIT(CurrentValue >= MustBeValue);
        DataValidLine.Method::Less :
          EXIT(CurrentValue < MustBeValue);
        DataValidLine.Method::"Less or Equal" :
          EXIT(CurrentValue <= MustBeValue);
      END;
    END;

    LOCAL PROCEDURE TestBigInteger@11123314(VAR DataValidLine@11123304 : Record 11123321;CurrentValue@11123303 : BigInteger;MustBeValue@11123302 : BigInteger) : Boolean;
    BEGIN
      CASE DataValidLine.Method OF
        DataValidLine.Method::Equal :
          EXIT(CurrentValue = MustBeValue);
        DataValidLine.Method::"Not Equal" :
          EXIT(CurrentValue <> MustBeValue);
        DataValidLine.Method::Greater :
          EXIT(CurrentValue > MustBeValue);
        DataValidLine.Method::"Greater or Equal" :
          EXIT(CurrentValue >= MustBeValue);
        DataValidLine.Method::Less :
          EXIT(CurrentValue < MustBeValue);
        DataValidLine.Method::"Less or Equal" :
          EXIT(CurrentValue <= MustBeValue);
      END;
    END;

    LOCAL PROCEDURE TestDecimal@11123315(VAR DataValidLine@11123304 : Record 11123321;CurrentValue@11123303 : Decimal;MustBeValue@11123302 : Decimal) : Boolean;
    BEGIN
      CASE DataValidLine.Method OF
        DataValidLine.Method::Equal :
          EXIT(CurrentValue = MustBeValue);
        DataValidLine.Method::"Not Equal" :
          EXIT(CurrentValue <> MustBeValue);
        DataValidLine.Method::Greater :
          EXIT(CurrentValue > MustBeValue);
        DataValidLine.Method::"Greater or Equal" :
          EXIT(CurrentValue >= MustBeValue);
        DataValidLine.Method::Less :
          EXIT(CurrentValue < MustBeValue);
        DataValidLine.Method::"Less or Equal" :
          EXIT(CurrentValue <= MustBeValue);
      END;
    END;

    LOCAL PROCEDURE TestBoolean@11123316(VAR DataValidLine@11123304 : Record 11123321;CurrentValue@11123303 : Boolean;MustBeValue@11123302 : Boolean) : Boolean;
    BEGIN
      CASE DataValidLine.Method OF
        DataValidLine.Method::Equal :
          EXIT(CurrentValue = MustBeValue);
        DataValidLine.Method::"Not Equal" :
          EXIT(CurrentValue <> MustBeValue);
      END;
    END;

    LOCAL PROCEDURE TestDate@11123317(VAR DataValidLine@11123304 : Record 11123321;CurrentValue@11123303 : Date;MustBeValue@11123302 : Date) : Boolean;
    BEGIN
      CASE DataValidLine.Method OF
        DataValidLine.Method::Equal :
          EXIT(CurrentValue = MustBeValue);
        DataValidLine.Method::"Not Equal" :
          EXIT(CurrentValue <> MustBeValue);
        DataValidLine.Method::Greater :
          EXIT(CurrentValue > MustBeValue);
        DataValidLine.Method::"Greater or Equal" :
          EXIT(CurrentValue >= MustBeValue);
        DataValidLine.Method::Less :
          EXIT(CurrentValue < MustBeValue);
        DataValidLine.Method::"Less or Equal" :
          EXIT(CurrentValue <= MustBeValue);
      END;
    END;

    LOCAL PROCEDURE TestDateTime@11123321(VAR DataValidLine@11123304 : Record 11123321;CurrentValue@11123303 : DateTime;MustBeValue@11123302 : DateTime) : Boolean;
    BEGIN
      CASE DataValidLine.Method OF
        DataValidLine.Method::Equal :
          EXIT(CurrentValue = MustBeValue);
        DataValidLine.Method::"Not Equal" :
          EXIT(CurrentValue <> MustBeValue);
        DataValidLine.Method::Greater :
          EXIT(CurrentValue > MustBeValue);
        DataValidLine.Method::"Greater or Equal" :
          EXIT(CurrentValue >= MustBeValue);
        DataValidLine.Method::Less :
          EXIT(CurrentValue < MustBeValue);
        DataValidLine.Method::"Less or Equal" :
          EXIT(CurrentValue <= MustBeValue);
      END;
    END;

    LOCAL PROCEDURE TestTime@11123325(VAR DataValidLine@11123304 : Record 11123321;CurrentValue@11123303 : Time;MustBeValue@11123302 : Time) : Boolean;
    BEGIN
      CASE DataValidLine.Method OF
        DataValidLine.Method::Equal :
          EXIT(CurrentValue = MustBeValue);
        DataValidLine.Method::"Not Equal" :
          EXIT(CurrentValue <> MustBeValue);
        DataValidLine.Method::Greater :
          EXIT(CurrentValue > MustBeValue);
        DataValidLine.Method::"Greater or Equal" :
          EXIT(CurrentValue >= MustBeValue);
        DataValidLine.Method::Less :
          EXIT(CurrentValue < MustBeValue);
        DataValidLine.Method::"Less or Equal" :
          EXIT(CurrentValue <= MustBeValue);
      END;
    END;

    LOCAL PROCEDURE TestGuid@11123326(VAR DataValidLine@11123304 : Record 11123321;CurrentValue@11123303 : GUID;MustBeValue@11123302 : GUID) : Boolean;
    BEGIN
      CASE DataValidLine.Method OF
        DataValidLine.Method::Equal :
          EXIT(CurrentValue = MustBeValue);
        DataValidLine.Method::"Not Equal" :
          EXIT(CurrentValue <> MustBeValue);
      END;
    END;

    PROCEDURE SetDefaults@11123303(TableNumber@11123308 : Integer;VAR Setup@11123306 : Record 11123305);
    VAR
      DataValidHeader@11123309 : Record 11123320;
      DummyParams@11123307 : TEMPORARY Record 11123310;
      TempRecRef@11123305 : RecordRef;
      Context@11123304 : Codeunit 11123305;
      ConfirmMessage@11123303 : Text[1024];
    BEGIN
      IF TableNumber <> 0 THEN BEGIN
        TempRecRef.OPEN(TableNumber,TRUE);
        ConfirmMessage := STRSUBSTNO(Text11123309,TempRecRef.CAPTION);
      END ELSE
        ConfirmMessage := Text11123308;

      GlobalVATInUse := Context.SupportsVAT(FALSE);
      GlobalSupportsKitBOM := Context.SupportsKitBOM;

      IF NOT GlobalHideConfirm THEN
        IF NOT CONFIRM(ConfirmMessage,FALSE) THEN
          EXIT;

      CASE TableNumber OF
        0 :
          BEGIN
            DataValidHeader.RESET;
            DataValidHeader.DELETEALL(TRUE);

            SetDefaultsCountry;
            SetDefaultsCustomer;
            SetDefaultsItem;
            SetDefaultsSalesHeader;
            SetDefaultsContact;
            SetDefaultsCustomerTemplate;
            SetDefaultsItemVariant;
            SetDefaultsSCSetup;
            SetDefaultsSCWebshop;

            SetRefreshCatOverviewRequired(TRUE,Setup);
          END;
        DATABASE::"Country/Region" : SetDefaultsCountry;
        DATABASE::Customer : SetDefaultsCustomer;
        DATABASE::Item :
          BEGIN
            SetDefaultsItem;
            SetRefreshCatOverviewRequired(TRUE,Setup);
          END;
        DATABASE::"Sales Header" : SetDefaultsSalesHeader;
        DATABASE::Contact : SetDefaultsContact;
        DATABASE::"Customer Template" : SetDefaultsCustomerTemplate;
        DATABASE::"Item Variant" :
          BEGIN
            SetDefaultsItemVariant;
            SetRefreshCatOverviewRequired(TRUE,Setup);
          END;
        DATABASE::"SC - Setup" : SetDefaultsSCSetup;
        DATABASE::"SC - Webshop" : SetDefaultsSCWebshop;
        ELSE
          ERROR(Text11123310,TempRecRef.CAPTION);
      END;

      IF NOT GlobalHideConfirm THEN
        MESSAGE(Text11123311);

      IF RefreshCatOverviewRequired THEN
        RefreshCatalogOverview(DummyParams,1);
    END;

    LOCAL PROCEDURE SetDefaultsCountry@11123307();
    BEGIN
      GlobalEntryNo := 0;
      AddDataValidHeader(DATABASE::"Country/Region");

      AddDataValidLine(DATABASE::"Country/Region",11123302,2,'',Text11123381);
    END;

    LOCAL PROCEDURE SetDefaultsCustomer@11123308();
    VAR
      ExecContext@11123302 : Codeunit 11123305;
    BEGIN
      GlobalEntryNo := 0;
      AddDataValidHeader(DATABASE::Customer);

      AddDataValidLine(DATABASE::Customer,1,2,'',Text11123382);
      AddDataValidLine(DATABASE::Customer,39,1,'',Text11123383);
      AddDataValidLine(DATABASE::Customer,21,2,'',Text11123384);
      AddDataValidLine(DATABASE::Customer,88,2,'',Text11123385);

      IF GlobalVATInUse THEN
        AddDataValidLine(DATABASE::Customer,110,2,'',Text11123386);

      CASE TRUE OF
        ExecContext.PfsAddonIsUsed :
          AddDataValidLine(DATABASE::Customer,11006100,7,'TestAddonCustomerStatus',Text11123387);
      END;
    END;

    LOCAL PROCEDURE SetDefaultsItem@11123323();
    VAR
      ExecContext@11123302 : Codeunit 11123305;
    BEGIN
      GlobalEntryNo := 0;
      AddDataValidHeader(DATABASE::Item);

      AddDataValidLine(DATABASE::Item,1,2,'',Text11123388);
      AddDataValidLine(DATABASE::Item,54,1,'',Text11123389);
      AddDataValidLine(DATABASE::Item,11,2,'',Text11123390);
      AddDataValidLine(DATABASE::Item,91,2,'',Text11123391);

      IF GlobalVATInUse THEN
        AddDataValidLine(DATABASE::Item,99,2,'',Text11123356)
      ELSE BEGIN
        AddDataValidLine(DATABASE::Item,98,2,'',Text11123392);
        IF GlobalSupportsKitBOM THEN
          AddDataValidLine(DATABASE::Item,25000,7,'TestKitBOM',Text11123380);
      END;

      AddDataValidLine(DATABASE::Item,5425,7,'TestItemUOM',Text11123355);
      CASE TRUE OF
        ExecContext.PfsAddonIsUsed :
          AddDataValidLine(DATABASE::Item,11006106,7,'TestAddonItemStatus',Text11123393);
        ExecContext.LsAddonIsUsed :
          AddDataValidLine(DATABASE::Item,10000711,7,'TestAddonItemStatus',Text11123393);
      END;
    END;

    LOCAL PROCEDURE SetDefaultsSalesHeader@11123339();
    VAR
      RecRef@11123302 : RecordRef;
      FieldRef@11123303 : FieldRef;
    BEGIN
      GlobalEntryNo := 0;
      AddDataValidHeader(DATABASE::"Sales Header");
      AddDataValidLine(DATABASE::"Sales Header",120,1,'Open',Text11123394);

      // For future improvement
      // RecRef.OPEN(DATABASE::"Sales Header");
      // FieldRef := RecRef.FIELD(120); // Status::Open
      // AddDataValidLine(DATABASE::"Sales Header",FieldRef.NUMBER,1,FORMAT(FieldRef),Text11123394);
    END;

    LOCAL PROCEDURE SetDefaultsContact@11123328();
    BEGIN
      GlobalEntryNo := 0;
      AddDataValidHeader(DATABASE::Contact);

      AddDataValidLine(DATABASE::Contact,11123350,2,'',Text11123395);
    END;

    LOCAL PROCEDURE SetDefaultsCustomerTemplate@11123329();
    BEGIN
      GlobalEntryNo := 0;
      AddDataValidHeader(DATABASE::"Customer Template");

      AddDataValidLine(DATABASE::"Customer Template",21,2,'',Text11123396);
      AddDataValidLine(DATABASE::"Customer Template",88,2,'',Text11123397);

      IF GlobalVATInUse THEN
        AddDataValidLine(DATABASE::"Customer Template",110,2,'',Text11123357);
    END;

    LOCAL PROCEDURE SetDefaultsItemVariant@11123334();
    VAR
      ExecContext@11123302 : Codeunit 11123305;
    BEGIN
      GlobalEntryNo := 0;
      CASE TRUE OF
        ExecContext.PfsAddonIsUsed :
          BEGIN
            AddDataValidHeader(DATABASE::"Item Variant");
            AddDataValidLine(DATABASE::"Item Variant",11006115,7,'TestAddonItemStatus',Text11123399);
          END;
        ExecContext.LsAddonIsUsed:
          BEGIN
            AddDataValidHeader(DATABASE::"Item Variant");
            AddDataValidLine(DATABASE::"Item Variant",11123302,7,'TestAddonItemStatus',Text11123399);
          END;
      END;
    END;

    LOCAL PROCEDURE SetDefaultsSCSetup@11123336();
    BEGIN
      GlobalEntryNo := 0;
      AddDataValidHeader(DATABASE::"SC - Setup");

      AddDataValidLine(DATABASE::"SC - Setup",1,7,'CheckQueue','');
    END;

    LOCAL PROCEDURE SetDefaultsSCWebshop@11123337();
    BEGIN
      GlobalEntryNo := 0;
      AddDataValidHeader(DATABASE::"SC - Webshop");

      AddDataValidLine(DATABASE::"SC - Webshop",2,2,'',Text11123350);
      AddDataValidLine(DATABASE::"SC - Webshop",5,2,'',Text11123351);
      AddDataValidLine(DATABASE::"SC - Webshop",4,2,'',Text11123352);
      AddDataValidLine(DATABASE::"SC - Webshop",7,2,'',Text11123353);
      AddDataValidLine(DATABASE::"SC - Webshop",6,2,'',Text11123354);
    END;

    LOCAL PROCEDURE AddDataValidHeader@11123342(TableNumber@11123302 : Integer);
    VAR
      DataValidHeader@11123303 : Record 11123320;
      DataValidLine@11123304 : Record 11123321;
    BEGIN
      IF NOT DataValidHeader.GET(TableNumber) THEN BEGIN
        DataValidHeader.INIT;
        DataValidHeader.VALIDATE("Table No.",TableNumber);
        DataValidHeader.INSERT(TRUE);
      END ELSE BEGIN
        DataValidLine.RESET;
        DataValidLine.SETRANGE("Table No.",TableNumber);
        DataValidLine.DELETEALL(TRUE);
      END;
    END;

    LOCAL PROCEDURE AddDataValidLine@11123341(TableNumber@11123302 : Integer;FieldNumber@11123303 : Integer;Method@11123304 : Integer;Value@11123305 : Text[250];ErrorText@11123306 : Text[250]);
    VAR
      DataValidLine@11123307 : Record 11123321;
    BEGIN
      GlobalEntryNo := GlobalEntryNo + 1;
      DataValidLine.INIT;
      DataValidLine.VALIDATE("Table No.",TableNumber);
      DataValidLine.VALIDATE("Field No.",FieldNumber);
      DataValidLine.VALIDATE(Method,Method);
      IF Value <> '' THEN
        DataValidLine.VALIDATE(Value,Value);
      DataValidLine.VALIDATE("Error Text",ErrorText);
      DataValidLine.VALIDATE(Priority,GlobalEntryNo);
      DataValidLine.INSERT(TRUE);
    END;

    PROCEDURE RefreshCatalogOverview@11123338(VAR Params@11123303 : Record 11123310;MessageType@11123305 : 'Simple,Validation Changed');
    VAR
      ProductInfo@11123302 : Record 11123317;
      Setup@11123306 : Record 11123305;
      ConfirmationMessage@11123307 : Text[1024];
      Confirmed@11123304 : Boolean;
    BEGIN
      ProductInfo.RESET;
      Confirmed := TRUE;
      CASE MessageType OF
        MessageType::Simple : ConfirmationMessage := Text11123313;
        MessageType::"Validation Changed" : ConfirmationMessage := Text11123312;
      END;

      IF NOT GlobalHideConfirm THEN
        IF GUIALLOWED THEN
          Confirmed := CONFIRM(ConfirmationMessage,TRUE)
      ELSE
        Confirmed := TRUE;

      IF Confirmed THEN BEGIN
        ProductInfo.RefreshAllProductsInfo(Params);
        SetRefreshCatOverviewRequired(FALSE,Setup);
        COMMIT;
      END;
    END;

    PROCEDURE SetRefreshCatOverviewRequired@11123340(NewRefreshCatOverviewRequired@11123302 : Boolean;VAR Setup@11123303 : Record 11123305);
    BEGIN
      IF NOT Setup.GET THEN BEGIN
        Setup.INIT;
        Setup.INSERT(TRUE);
      END;

      IF Setup."Refresh Cat. Overview Required" <> NewRefreshCatOverviewRequired THEN BEGIN
        Setup."Refresh Cat. Overview Required" := NewRefreshCatOverviewRequired;
        Setup.MODIFY(TRUE);
      END;
    END;

    PROCEDURE RefreshCatOverviewRequired@11123343() : Boolean;
    VAR
      Setup@11123302 : Record 11123305;
    BEGIN
      IF Setup.GET THEN
        EXIT(Setup."Refresh Cat. Overview Required");
    END;

    PROCEDURE DefineRefreshCatOverviewReq@11123344(TableNumber@11123303 : Integer);
    VAR
      Setup@11123304 : Record 11123305;
    BEGIN
      IF (TableNumber = DATABASE::Item) OR
         (TableNumber = DATABASE::"Item Variant")
      THEN
        SetRefreshCatOverviewRequired(TRUE,Setup);
    END;

    PROCEDURE RecordsEqual@11123345(RecRef1@11123302 : RecordRef;RecRef2@11123303 : RecordRef;VAR ErrorText@11123312 : Text[250]) : Boolean;
    VAR
      TempDataValidLine@11123304 : TEMPORARY Record 11123321;
      CommonFunc@11123310 : Codeunit 11123309;
      FieldRef1@11123306 : FieldRef;
      I@11123305 : Integer;
      TableNumber1@11123308 : Integer;
      TableNumber2@11123309 : Integer;
      Equal@11123311 : Boolean;
    BEGIN
      TableNumber1 := CommonFunc.GetCorrectTableNoFromRecRef(RecRef1);
      TableNumber2 := CommonFunc.GetCorrectTableNoFromRecRef(RecRef2);
      IF TableNumber1 <> TableNumber2 THEN
        ERROR(Text11123314);

      I := 1;
      REPEAT
        FieldRef1 := RecRef1.FIELDINDEX(I);

        IF FieldRef1.ACTIVE AND
          (FORMAT(FieldRef1.CLASS) = 'Normal') AND
          (FORMAT(FieldRef1.TYPE) <> 'BLOB') AND
          (FORMAT(FieldRef1.TYPE) <> 'Binary')
        THEN BEGIN
          CLEAR(TempDataValidLine);
          TempDataValidLine.INIT;
          TempDataValidLine."Table No." := TableNumber1;
          TempDataValidLine."Field No." := FieldRef1.NUMBER;
          TempDataValidLine."Field Name" := FieldRef1.NAME;
          TempDataValidLine."Field Caption" := FieldRef1.CAPTION;
          TempDataValidLine.Method := TempDataValidLine.Method::Equal;
          TempDataValidLine.Value := FORMAT(FieldRef1);

          Equal := TempDataValidLine.ExecuteValidationTest(RecRef2,ErrorText);
        END;
        I := I + 1;
      UNTIL (I > RecRef1.FIELDCOUNT) OR NOT Equal;
      EXIT(Equal);
    END;

    PROCEDURE EvaluateTextToFieldRef@11123350(InputText@11123304 : Text[1024];VAR FieldRef@11123303 : FieldRef;ToValidate@11123302 : Boolean) : Boolean;
    VAR
      GUIDVar@11123326 : GUID;
      GUIDVar1@11123325 : GUID;
      BigIntVar@11123324 : BigInteger;
      BigIntVar1@11123323 : BigInteger;
      IntVar@11123322 : Integer;
      IntVar1@11123321 : Integer;
      DecimalVar@11123320 : Decimal;
      DecimalVar1@11123319 : Decimal;
      BoolVar@11123318 : Boolean;
      BoolVar1@11123317 : Boolean;
      DateVar@11123316 : Date;
      DateVar1@11123315 : Date;
      TimeVar@11123314 : Time;
      TimeVar1@11123313 : Time;
      DateTimeVar@11123312 : DateTime;
      DateTimeVar1@11123311 : DateTime;
      DurationVar@11123310 : Duration;
      DurationVar1@11123309 : Duration;
      DateFormulaVar@11123308 : DateFormula;
      DateFormulaVar1@11123307 : DateFormula;
      TextVar@11123306 : Text[1024];
      TextVar1@11123305 : Text[1024];
    BEGIN
      IF (FORMAT(FieldRef.CLASS) = 'FlowField') OR (FORMAT(FieldRef.CLASS) = 'FlowFilter') THEN
        EXIT(TRUE);

      CASE FORMAT(FieldRef.TYPE) OF

        'Option':
          BEGIN
            GetOption(InputText,FieldRef.OPTIONCAPTION,IntVar);
            IF IntVar = -1 THEN
              EXIT(FALSE);

            IF ToValidate THEN BEGIN
              IntVar1 := FieldRef.VALUE;
              IF IntVar1 <> IntVar THEN
                FieldRef.VALIDATE(IntVar);
            END ELSE
              FieldRef.VALUE := IntVar;
          END;

        'Integer':
          IF EVALUATE(IntVar,InputText) THEN BEGIN
            IF ToValidate THEN BEGIN
              IntVar1 := FieldRef.VALUE;
              IF IntVar1 <> IntVar THEN
                FieldRef.VALIDATE(IntVar);
            END ELSE
              FieldRef.VALUE := IntVar;
          END ELSE
            EXIT(FALSE);

        'Decimal':
          IF EVALUATE(DecimalVar,InputText) THEN BEGIN
            IF ToValidate THEN BEGIN
              DecimalVar1 := FieldRef.VALUE;
              IF DecimalVar1 <> DecimalVar THEN
                FieldRef.VALIDATE(DecimalVar);
            END ELSE
              FieldRef.VALUE := DecimalVar;
          END ELSE
            EXIT(FALSE);

        'Date':
          IF EVALUATE(DateVar,InputText) THEN BEGIN
            IF ToValidate THEN BEGIN
              DateVar1 := FieldRef.VALUE;
              IF DateVar1 <> DateVar THEN
                FieldRef.VALIDATE(DateVar);
            END ELSE
              FieldRef.VALUE := DateVar;
          END ELSE
            EXIT(FALSE);

        'Time':
          IF EVALUATE(TimeVar,InputText) THEN BEGIN
            IF ToValidate THEN BEGIN
              TimeVar1 := FieldRef.VALUE;
              IF TimeVar1 <> TimeVar THEN
                FieldRef.VALIDATE(TimeVar);
            END ELSE
              FieldRef.VALUE := TimeVar;
          END ELSE
            EXIT(FALSE);

        'DateTime':
          IF EVALUATE(DateTimeVar,InputText) THEN BEGIN
            IF ToValidate THEN BEGIN
              DateTimeVar1 := FieldRef.VALUE;
              IF DateTimeVar1 <> DateTimeVar THEN
                FieldRef.VALIDATE(DateTimeVar);
            END ELSE
              FieldRef.VALUE := DateTimeVar;
          END ELSE
            EXIT(FALSE);

        'Boolean':
          IF EVALUATE(BoolVar,InputText) THEN BEGIN
            IF ToValidate THEN BEGIN
              BoolVar1 := FieldRef.VALUE;
              IF BoolVar1 <> BoolVar THEN
                FieldRef.VALIDATE(BoolVar);
            END ELSE
              FieldRef.VALUE := BoolVar;
          END ELSE
            EXIT(FALSE);

        'Duration':
          IF EVALUATE(DurationVar,InputText) THEN BEGIN
            IF ToValidate THEN BEGIN
              DurationVar1 := FieldRef.VALUE;
              IF DurationVar1 <> DurationVar THEN
                FieldRef.VALIDATE(DurationVar);
            END ELSE
              FieldRef.VALUE := DurationVar;
          END ELSE
            EXIT(FALSE);

        'BigInteger':
          IF EVALUATE(BigIntVar,InputText) THEN BEGIN
            IF ToValidate THEN BEGIN
              BigIntVar1 := FieldRef.VALUE;
              IF BigIntVar1 <> BigIntVar THEN
                FieldRef.VALIDATE(BigIntVar);
            END ELSE
              FieldRef.VALUE := BigIntVar;
          END ELSE
            EXIT(FALSE);

        'GUID':
          IF EVALUATE(GUIDVar,InputText) THEN BEGIN
            IF ToValidate THEN BEGIN
              GUIDVar1 := FieldRef.VALUE;
              IF GUIDVar1 <> GUIDVar THEN
                FieldRef.VALIDATE(GUIDVar);
            END ELSE
              FieldRef.VALUE := GUIDVar;
          END ELSE
            EXIT(FALSE);

        'Code','Text':
          BEGIN
            IF STRLEN(InputText) > FieldRef.LENGTH THEN BEGIN
              IF ToValidate THEN BEGIN
                TextVar := FieldRef.VALUE;
                TextVar1 := PADSTR(InputText,FieldRef.LENGTH);
                IF TextVar <> TextVar1 THEN
                  FieldRef.VALIDATE(TextVar1);
              END ELSE
                FieldRef.VALUE := PADSTR(InputText,FieldRef.LENGTH);
            END ELSE BEGIN
              IF ToValidate THEN BEGIN
                TextVar := FieldRef.VALUE;
                IF TextVar <> InputText THEN
                  FieldRef.VALIDATE(InputText);
              END ELSE
                FieldRef.VALUE := InputText;
            END;
          END;

        'DateFormula':
          BEGIN
            IF EVALUATE(DateFormulaVar,InputText) THEN BEGIN
              IF ToValidate THEN BEGIN
                DateFormulaVar1 := FieldRef.VALUE;
                IF DateFormulaVar1 <> DateFormulaVar THEN
                  FieldRef.VALIDATE(DateFormulaVar);
              END ELSE
                FieldRef.VALUE := DateFormulaVar;
            END ELSE
              EXIT(FALSE);
          END;

        ELSE
          EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetOption@11123351(Value@11123304 : Text[250];OptionString@11123303 : Text[1024];VAR OptionInteger@11123302 : Integer) Valid : Boolean;
    VAR
      Option@11123308 : Text[1024];
      CommaPos@11123307 : Integer;
      OptionPos@11123306 : Integer;
      ValueInOptionString@11123305 : Boolean;
    BEGIN
      IF Value = '' THEN
        EXIT;
      IF EVALUATE(OptionInteger,Value) THEN BEGIN
        EXIT(TRUE);
      END;

      ValueInOptionString := FALSE;

      CommaPos := STRPOS(OptionString,',');

      WHILE NOT ValueInOptionString AND (CommaPos > 0) DO BEGIN
        IF STRPOS(OptionString,',') <> 0 THEN
          Option := COPYSTR(OptionString,1,STRPOS(OptionString,',')-1)
        ELSE
          Option := OptionString;
        IF Option = Value THEN
          ValueInOptionString := TRUE
        ELSE
          OptionPos := OptionPos + 1;
        OptionString := DELSTR(OptionString,1,CommaPos);
        CommaPos := STRPOS(OptionString,',');
      END;

      IF OptionString = Value THEN
        ValueInOptionString := TRUE;

      OptionInteger := OptionPos;
      EXIT(ValueInOptionString);
    END;

    PROCEDURE EvaluateValue@11123352(VAR FldRef@11123303 : FieldRef;Value@11123302 : Text[250]) ErrorText : Text[250];
    VAR
      Field@11123317 : Record 2000000041;
      RecordRef@11123316 : RecordRef;
      Date@11123315 : Date;
      DateTime@11123314 : DateTime;
      Time@11123313 : Time;
      Integer@11123312 : Integer;
      BigInteger@11123311 : BigInteger;
      Guid@11123310 : GUID;
      Option@11123309 : Option;
      Duration@11123308 : Duration;
      DateFormula@11123307 : DateFormula;
      Decimal@11123306 : Decimal;
      Code@11123305 : Code[250];
      Boolean@11123304 : Boolean;
    BEGIN
      EVALUATE(Field.Type,FORMAT(FldRef.TYPE));

      IF (Value <> '') AND NOT IsNormalField(FldRef) THEN
        EXIT(STRSUBSTNO(Text11123332,Value));

      CASE Field.Type OF
        Field.Type::Text:
          BEGIN
            RecordRef := FldRef.RECORD;
            Field.GET(RecordRef.NUMBER,FldRef.NUMBER);
            IF STRLEN(Value) > Field.Len THEN
              EXIT(STRSUBSTNO(Text11123331,FldRef.RECORD.CAPTION,FldRef.CAPTION,Field.Len, Value));
            FldRef.VALUE := Value;
          END;
        Field.Type::Code:
          BEGIN
            Code := Value;
            RecordRef := FldRef.RECORD;
            Field.GET(RecordRef.NUMBER,FldRef.NUMBER);
            IF STRLEN(Value) > Field.Len THEN
              EXIT(STRSUBSTNO(Text11123331,FldRef.RECORD.CAPTION,FldRef.CAPTION,Field.Len, Value));
            FldRef.VALUE := Value;
          END;
        Field.Type::Option:
          BEGIN
            IF NOT ValidateOptionValue(FldRef,Value) THEN
              EXIT(COPYSTR(STRSUBSTNO(Text11123342,Value,FldRef.OPTIONCAPTION),1,250));
            IF GetOption(Value,FldRef.OPTIONCAPTION,Integer) THEN
              FldRef.VALUE := Integer
            ELSE
              EXIT(COPYSTR(STRSUBSTNO(Text11123342,Value,FldRef.OPTIONCAPTION),1,250));
          END;
        Field.Type::Date:
          BEGIN
            IF NOT EVALUATE(Date, Value) AND NOT EVALUATE(Date, Value, XMLFormat) THEN
              EXIT(STRSUBSTNO(Text11123333,Value));
            FldRef.VALUE := Date;
          END;
        Field.Type::DateFormula:
          BEGIN
            IF NOT EVALUATE(DateFormula, Value) AND NOT EVALUATE(DateFormula, Value, XMLFormat) THEN
              EXIT(STRSUBSTNO(Text11123334,Value));
            FldRef.VALUE := DateFormula;
          END;
        Field.Type::DateTime:
          BEGIN
            IF NOT EVALUATE(DateTime, Value) AND NOT EVALUATE(DateTime, Value, XMLFormat) THEN
              EXIT(STRSUBSTNO(Text11123335,Value));
            FldRef.VALUE := DateTime;
          END;
        Field.Type::Time:
          BEGIN
            IF NOT EVALUATE(Time, Value) AND NOT EVALUATE(Time, Value, XMLFormat) THEN
              EXIT(STRSUBSTNO(Text11123336,Value));
            FldRef.VALUE := Time;
          END;
        Field.Type::Duration:
          BEGIN
            IF NOT EVALUATE(Duration, Value) AND NOT EVALUATE(Duration, Value, XMLFormat) THEN
              EXIT(STRSUBSTNO(Text11123337,Value));
            FldRef.VALUE := Duration;
          END;
        Field.Type::Integer:
          BEGIN
            IF NOT EVALUATE(Integer, Value) AND NOT EVALUATE(Integer, Value, XMLFormat) THEN
              EXIT(STRSUBSTNO(Text11123338,Value));
            FldRef.VALUE := Integer;
          END;
        Field.Type::BigInteger:
          BEGIN
            IF NOT EVALUATE(BigInteger, Value) AND NOT EVALUATE(BigInteger, Value, XMLFormat) THEN
              EXIT(STRSUBSTNO(Text11123339,Value));
            FldRef.VALUE := BigInteger;
          END;
        Field.Type::Decimal:
          BEGIN
            IF NOT EVALUATE(Decimal, Value) AND NOT EVALUATE(Decimal, Value, XMLFormat) THEN
              EXIT(STRSUBSTNO(Text11123340,Value));
            FldRef.VALUE := Decimal;
          END;
        Field.Type::Boolean:
          BEGIN
            IF NOT EVALUATE(Boolean, Value) AND NOT EVALUATE(Boolean, Value, XMLFormat) THEN
              EXIT(STRSUBSTNO(Text11123343,Value));
            FldRef.VALUE := Boolean;
          END;
        Field.Type::GUID:
          BEGIN
            IF NOT EVALUATE(Guid, Value) AND NOT EVALUATE(Guid, Value, XMLFormat) THEN
              EXIT(STRSUBSTNO(Text11123341,Value));
            FldRef.VALUE := Guid;
          END
      END;
    END;

    PROCEDURE IsNormalField@11123353(FldRef@11123302 : FieldRef) : Boolean;
    VAR
      Field@11123303 : Record 2000000041;
    BEGIN
      EVALUATE(Field.Type,FORMAT(FldRef.TYPE));

      EXIT(UPPERCASE(FORMAT(FldRef.CLASS)) = 'NORMAL');
    END;

    PROCEDURE ValidateOptionValue@11123354(VAR FieldRef@11123303 : FieldRef;OptionValue@11123302 : Text[250]) Valid : Boolean;
    VAR
      StartPos@11123306 : Integer;
      OptionNo@11123305 : Integer;
      OptionValueAsInteger@11123304 : Integer;
    BEGIN
      IF OptionValue = '' THEN
        EXIT;
      IF EVALUATE(OptionValueAsInteger,OptionValue) THEN BEGIN
        StartPos := 1;
        OptionNo := 0;

        WHILE NOT (StartPos = STRLEN(FieldRef.OPTIONCAPTION) + 1) DO BEGIN
          IF COPYSTR(FieldRef.OPTIONCAPTION,StartPos,1) = ',' THEN
            OptionNo := OptionNo + 1;
          StartPos := StartPos + 1;
        END;

        EXIT(NOT(OptionValueAsInteger > OptionNo));
      END ELSE BEGIN
        EXIT(GetOption(OptionValue,FieldRef.OPTIONCAPTION,OptionValueAsInteger))
      END
    END;

    PROCEDURE XMLFormat@11123355() : Integer;
    BEGIN
      EXIT(9);
    END;

    PROCEDURE ValidateTableRelation@11123356(VAR FieldRef@11123302 : FieldRef) : Boolean;
    VAR
      Field@11123308 : Record 2000000041;
      RecRef@11123307 : RecordRef;
      RecRef2@11123306 : RecordRef;
      FieldRef2@11123305 : FieldRef;
      KeyRef2@11123304 : KeyRef;
    BEGIN
      IF FORMAT(FieldRef.VALUE) = '' THEN
        EXIT(TRUE);

      RecRef := FieldRef.RECORD;
      IF Field.GET(RecRef.NUMBER,FieldRef.NUMBER) THEN BEGIN
        IF Field.RelationTableNo <> 0 THEN BEGIN
          IF Field.RelationFieldNo <> 0 THEN BEGIN
            RecRef2.OPEN(Field.RelationTableNo);
            IF NOT RecRef2.FIND('-') THEN
              EXIT(FALSE);
            FieldRef2 := RecRef2.FIELD(Field.RelationFieldNo);
            IF (FieldRef2.TYPE <> FieldRef.TYPE) OR (FieldRef2.LENGTH <> FieldRef.LENGTH) THEN
              EXIT(TRUE);
            FieldRef2.VALUE := FieldRef.VALUE;
          END ELSE BEGIN
            RecRef2.OPEN(Field.RelationTableNo);
            IF NOT RecRef2.FIND('-') THEN
              EXIT(FALSE);
            KeyRef2 := RecRef2.KEYINDEX(1);
            IF KeyRef2.FIELDCOUNT > 1 THEN
              EXIT(TRUE);
            FieldRef2 := KeyRef2.FIELDINDEX(1);
            IF (FieldRef2.TYPE <> FieldRef.TYPE) OR (FieldRef2.LENGTH <> FieldRef.LENGTH) THEN
              EXIT(TRUE);
            FieldRef2.VALUE := FieldRef.VALUE;
          END;
          IF NOT RecRef2.FIND('=') THEN
            EXIT(FALSE)
          ELSE
            EXIT(TRUE);
        END ELSE
          EXIT(TRUE)
      END ELSE
        EXIT(TRUE);
    END;

    PROCEDURE SetGlobalHideConfirm@11123347(NewGlobalHideConfirm@11123302 : Boolean);
    BEGIN
      GlobalHideConfirm := NewGlobalHideConfirm;
    END;

    PROCEDURE ValidateDocumentDownloading@11123365() : Boolean;
    VAR
      CommonFunc@11123303 : Codeunit 11123309;
      Context@11123307 : Codeunit 11123305;
      OperationName@11123308 : Text[80];
      ClientTier@11123302 : 'RTC,WEBSERVICE,CLASSIC,NAS';
    BEGIN
      ClientTier := CommonFunc.DefineClientTier;
      IF ClientTier IN [ClientTier::CLASSIC,ClientTier::NAS] THEN BEGIN
        OperationName := Context.GetCurrentOperationName;
        ERROR(Text11123379,OperationName,ClientTier);
      END;
    END;

    PROCEDURE ValidationRulesExist@11123346() : Boolean;
    VAR
      DataValidationHeader@11123302 : Record 11123320;
    BEGIN
      EXIT(NOT DataValidationHeader.ISEMPTY);
    END;

    BEGIN
    END.
  }
}

