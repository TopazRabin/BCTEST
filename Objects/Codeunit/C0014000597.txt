OBJECT Codeunit 14000597 Check Replenishment Path
{
  OBJECT-PROPERTIES
  {
    Date=11/01/20;
    Time=12:00:00 PM;
    Version List=UBP3.03;
  }
  PROPERTIES
  {
    TableNo=472;
    OnRun=BEGIN
            "Parameter String" := UPPERCASE("Parameter String");
            IF "Parameter String" = '/UPDATE/' THEN
              AllProcUnits(TRUE)
            ELSE
              AllProcUnits(FALSE);
          END;

  }
  CODE
  {
    VAR
      Item@1240020012 : Record 27;
      Update@1240020001 : Boolean;
      ReplPathAlert@1240020002 : Record 14097464;
      AFPAlertSetup@1240020022 : Record 14002703;
      ProgWindow@1240020006 : Dialog;
      AlertEntryNo@1240020017 : Integer;
      Text001@1240020018 : TextConst 'ENU="Checking Replenishment Path (Update = %1)"';
      Text002@1240020020 : TextConst 'ENU=Create Repl. Path Alerts?';
      Text003@1240020021 : TextConst 'ENU="Repaired: Repl. Source Type = VENDOR "';
      Text004@1240020023 : TextConst 'ENU=Inserted: Item';
      TextProduction@1240020025 : TextConst 'ENU=PRODUCTION';
      TextAssembly@1240020024 : TextConst 'ENU=ASSEMBLY';
      TextItem@1240020026 : TextConst 'ENU=ITEM';
      TextSource@1240020027 : TextConst 'ENU=SOURCE';

    PROCEDURE AllProcUnits@1240020004(CurrUpdate@1240020000 : Boolean);
    VAR
      InvMgt@1240020001 : Codeunit 14000553;
      LogEntryNo@1240020002 : Integer;
    BEGIN
      InvMgt.CreateLogEntry('',STRSUBSTNO(Text001,CurrUpdate),LogEntryNo);

      ReplPathAlert.DELETEALL(TRUE);
      COMMIT;

      Update := CurrUpdate;
      ByLocation;

      InvMgt.CloseLogEntry(LogEntryNo,'');
    END;

    PROCEDURE ByLocation@1240020000();
    VAR
      Location@1240020001 : Record 14;
      ProcUnit@1240020000 : Record 14000555;
      TotalCount@1240020002 : Integer;
      Counter@1240020003 : Integer;
    BEGIN
      IF GUIALLOWED THEN
        ProgWindow.OPEN(
          STRSUBSTNO(Text001,Update) + '\' +
          PADSTR('Location',10) + '#1########\' +
          PADSTR('Item',10) + '@2@@@@@@@@@@@@@@@@@@');

      AFPAlertSetup.GET;

      Location.RESET;
      IF Location.FINDSET THEN
        REPEAT
          ProcUnit.SETRANGE("Location Code",Location.Code);
          IF GUIALLOWED THEN BEGIN
            TotalCount := ProcUnit.COUNT;
            Counter := 0;
            ProgWindow.UPDATE(1,Location.Code);
          END;

          IF ProcUnit.FINDSET THEN
            REPEAT
              CheckSourceAlerts(ProcUnit);
            UNTIL ProcUnit.NEXT = 0;

          IF GUIALLOWED THEN BEGIN
            Counter := Counter + 1;
            IF Counter MOD 10 = 0 THEN
              ProgWindow.UPDATE(2,ROUND(10000 * (Counter / TotalCount),1));
          END;

          IF Counter MOD 1000 = 0 THEN
            COMMIT;

        UNTIL Location.NEXT = 0;

      IF GUIALLOWED THEN
        ProgWindow.CLOSE;
    END;

    PROCEDURE ByFilter@1240020011(VAR CurrProcUnit@1240020001 : Record 14000555);
    VAR
      Location@1240020002 : Record 14;
      ProcUnit@1240020000 : Record 14000555;
      TotalCount@1240020003 : Integer;
      Counter@1240020004 : Integer;
    BEGIN
      IF GUIALLOWED THEN
        ProgWindow.OPEN(
          STRSUBSTNO(Text001,Update) + '\' +
          PADSTR('Location',10) + '#1########\' +
          PADSTR('Item',10) + '@2@@@@@@@@@@@@@@@@@@');

      AFPAlertSetup.GET;

      Location.SETFILTER(Code, CurrProcUnit.GETFILTER(CurrProcUnit."Location Code"));
      IF Location.FINDSET THEN
        REPEAT
          ProcUnit.COPYFILTERS(CurrProcUnit);
          CurrProcUnit.SETRANGE("Location Code");
          ProcUnit.SETRANGE("Location Code", Location.Code);

          IF GUIALLOWED THEN BEGIN
            TotalCount := ProcUnit.COUNT;
            Counter := 0;
            ProgWindow.UPDATE(1,Location.Code);
          END;

          IF ProcUnit.FINDSET THEN
            REPEAT
              CheckSourceAlerts(ProcUnit);
            UNTIL ProcUnit.NEXT = 0;

          IF GUIALLOWED THEN BEGIN
            Counter := Counter + 1;
            IF Counter MOD 10 = 0 THEN
              ProgWindow.UPDATE(2,ROUND(10000 * (Counter / TotalCount),1));
          END;

          IF Counter MOD 1000 = 0 THEN
            COMMIT;

        UNTIL Location.NEXT = 0;

      IF GUIALLOWED THEN
        ProgWindow.CLOSE;
    END;

    PROCEDURE CheckSourceAlerts@1240020009(VAR CurrProcUnit@1240020001 : Record 14000555);
    VAR
      LocProcUnit@1240020000 : Record 14000555;
      LowLevelCode@1240020002 : Integer;
      AlertType@1240020003 : Code[20];
      ModifyProcUnit@1240020004 : Boolean;
      ErrorMessage@1240020005 : Text[150];
    BEGIN
      ErrorMessage := '';

      IF Update THEN
        LocProcUnit.GET(CurrProcUnit."Location Code",CurrProcUnit."Item No.",CurrProcUnit."Variant Code");

      // item does not exist - setup and retreived in this routine
      ErrorMessage := CheckItem(CurrProcUnit);
      IF ErrorMessage <> '' THEN BEGIN
        IF Update THEN
          WriteReplPathAlert(CurrProcUnit."Location Code",CurrProcUnit."Item No.",CurrProcUnit."Variant Code",Text004, TextItem)
        ELSE
          WriteReplPathAlert(CurrProcUnit."Location Code",CurrProcUnit."Item No.",CurrProcUnit."Variant Code",ErrorMessage, TextItem);
      END;

      // production
      IF Item."No." <> '' THEN BEGIN
        IF (CurrProcUnit."Replenishment Source Type" = CurrProcUnit."Replenishment Source Type"::Production) THEN BEGIN
          CheckProductionBOM(Item, LowLevelCode, CurrProcUnit);
        END;
      END;

      // assembly
      IF Item."No." <> '' THEN BEGIN
        IF (CurrProcUnit."Replenishment Source Type" = CurrProcUnit."Replenishment Source Type"::Assembly) THEN BEGIN
          CheckAssemblyBOM(Item, LowLevelCode, CurrProcUnit);
        END;
      END;

      // Repl Path
      CheckPath(CurrProcUnit, ErrorMessage, AlertType);
      IF ErrorMessage <> '' THEN BEGIN
         IF Update THEN
           WriteReplPathAlert(CurrProcUnit."Location Code",CurrProcUnit."Item No.",CurrProcUnit."Variant Code",Text003, TextSource)
         ELSE
          WriteReplPathAlert(CurrProcUnit."Location Code",CurrProcUnit."Item No.",CurrProcUnit."Variant Code",ErrorMessage, TextItem);
        IF Update THEN BEGIN
          IF (CurrProcUnit."Replenishment Source Type" = CurrProcUnit."Replenishment Source Type"::Vendor) OR
            (CurrProcUnit."Replenishment Source Type" = CurrProcUnit."Replenishment Source Type"::Location) THEN BEGIN
            LocProcUnit.VALIDATE("Replenishment Source Type",CurrProcUnit."Replenishment Source Type"::Vendor);
            LocProcUnit.VALIDATE("Replenishment Source Code", AFPAlertSetup."Repl. Path Repair Vendor");
            ModifyProcUnit := TRUE;
          END;
        END;
      END;

      // modification
      IF Update THEN BEGIN
        IF ModifyProcUnit THEN BEGIN
          LocProcUnit.Review := TRUE;
          LocProcUnit.MODIFY(FALSE);
        END;
      END;
    END;

    PROCEDURE CheckPath@1240020001(VAR CurrProcUnit@1240020000 : Record 14000555;VAR ErrMsg@1240020001 : Text[150];VAR ErrType@1240020002 : Code[20]);
    VAR
      Location2@1240020003 : Record 14;
      ProcUnit2@1240020004 : Record 14000555;
      ReplLocation@1240020005 : Code[10];
      LocationArray@1240020007 : ARRAY [500] OF Code[10];
      i@1240020008 : Integer;
      j@1240020006 : Integer;
    BEGIN
      ErrMsg := '';
      ErrType := '';
      CASE CurrProcUnit."Replenishment Source Type" OF
        0:
        BEGIN
          ErrMsg := 'Replenishment Source Type not set.';
          ErrType := 'SOURCE';
          EXIT;
        END;
        1: // Location
          BEGIN
            IF CurrProcUnit."Replenishment Source Code" = '' THEN BEGIN
              ErrMsg :='Replenishment Source Code not set.';
              ErrType := 'SOURCE';
              EXIT;
            END;

            IF CurrProcUnit."Replenishment Source Code" = CurrProcUnit."Location Code" THEN BEGIN
              ErrMsg :='Location Code and Repl. Source Code are the same.';
              ErrType := 'SOURCE';
              EXIT;
            END;

            IF Location2.GET(CurrProcUnit."Location Code") THEN BEGIN
              IF NOT Location2."Enable Adv. Forecasting" THEN BEGIN
                ErrMsg :=STRSUBSTNO('Location %1 not Enabled.',CurrProcUnit."Location Code");
                ErrType := 'SOURCE';
                EXIT;
              END;
            END ELSE BEGIN
              ErrMsg := STRSUBSTNO('Location Code %1 not found.', CurrProcUnit."Location Code");
              ErrType := 'SOURCE';
              EXIT;
            END;

            IF Location2.GET(CurrProcUnit."Replenishment Source Code") THEN BEGIN
              IF NOT Location2."Enable Adv. Forecasting" THEN BEGIN
                ErrMsg :=STRSUBSTNO('Replenishment Location %1 not AFP Enabled.',CurrProcUnit."Replenishment Source Code");
                ErrType := 'SOURCE';
                EXIT;
              END;
            END ELSE BEGIN
              ErrMsg := STRSUBSTNO('Replenishment Source Code %1 not found.', CurrProcUnit."Replenishment Source Code");
              ErrType := 'SOURCE';
              EXIT;
            END;

            CLEAR(LocationArray);
            i := 1;
            LocationArray[i] := CurrProcUnit."Location Code";
            ReplLocation := CurrProcUnit."Replenishment Source Code";
            REPEAT
              IF ProcUnit2.GET(
                   ReplLocation,CurrProcUnit."Item No.",CurrProcUnit."Variant Code")
              THEN BEGIN
                CASE ProcUnit2."Replenishment Source Type" OF
                  0:
                  BEGIN
                    ErrMsg :='Repl. Proc. Unit has no Source Type';
                    ErrType := 'SOURCE';
                    EXIT;
                  END;
                  1:
                  BEGIN
                   // Location
                    IF (ProcUnit2."Replenishment Source Code" = '') AND
                       (ProcUnit2."Replenishment Source Type" = ProcUnit2."Replenishment Source Type"::Location)
                    THEN BEGIN
                      ErrMsg :='Repl. Proc. Unit is Location Replenished and has no Source Code';
                      ErrType := 'SOURCE';
                      EXIT;
                    END;
                  END;
                  2, 3, 4:  // Vendor, Production, Kit
                    BEGIN
                      ErrMsg :='';
                      ErrType := '';
                      EXIT;
                    END;
                END;
                j := 0;
                REPEAT
                  j := j + 1;
                  IF ProcUnit2."Location Code" = LocationArray[j] THEN BEGIN
                    ErrMsg :='Repl. Path Loop';
                    ErrType := 'SOURCE';
                    EXIT;
                  END;
                UNTIL (LocationArray[j] = '');
                i := i + 1;
                LocationArray[i] := ProcUnit2."Location Code";
                ReplLocation := ProcUnit2."Replenishment Source Code";
              END ELSE BEGIN
                ErrMsg :=
                  STRSUBSTNO(
                    'Replenishment Source Proc. Unit %1 %2 %3 not found.',
                     ReplLocation,CurrProcUnit."Item No.",CurrProcUnit."Variant Code");
                ErrType := 'SOURCE';
                EXIT;
              END;
            UNTIL LocationArray[i] = '';
          END;
        2: // Vendor
          BEGIN
          END;
        3: // Production
          BEGIN
            IF CurrProcUnit."Replenishment Source Code" = '' THEN BEGIN
              ErrMsg :='Replenishment Source Code not set.';
              ErrType := 'SOURCE';
            END;
          END;
        4: // Kit or Assembly
          BEGIN
          END;
      END;
    END;

    PROCEDURE CheckItem@1240020005(VAR CurrProcUnit@1240020000 : Record 14000555) ErrorText : Text[150];
    BEGIN
      ErrorText := '';
      IF NOT Item.GET(CurrProcUnit."Item No.") THEN BEGIN
        IF Update THEN BEGIN
          Item.INIT;
          Item."No." := CurrProcUnit."Item No.";
          Item.Description := 'Created by Ck. Repl. Path';
          Item.INSERT(TRUE);
          ErrorText := STRSUBSTNO('Item %1 has been created.',CurrProcUnit."Item No.");
        END ELSE
          ErrorText := '**** Item does not exist. ****';
      END;

      EXIT(ErrorText);
    END;

    PROCEDURE GetNextAlertEntryNo@1240020002() NextEntryNo : Integer;
    VAR
      ReplPathAlert@1240020000 : Record 14097464;
    BEGIN
      ReplPathAlert.LOCKTABLE;
      IF ReplPathAlert.FINDLAST THEN
        NextEntryNo := ReplPathAlert."Entry No." + 1
      ELSE
        NextEntryNo := 1;
      EXIT(NextEntryNo);
    END;

    PROCEDURE CheckProductionBOM@1240020006(VAR Item@1240020000 : Record 27;VAR LowLevelCode@1240020003 : Integer;VAR CurrProcUnit@1240020009 : Record 14000555) Err : Boolean;
    VAR
      ProdBOMHeader@1240020001 : Record 99000771;
      BOMdoesNotExist@1000 : TextConst 'ENU=%1  BOM does not exist';
      BOMIsNotSet@1240020008 : TextConst 'ENU=%1  BOM is not set on the item.';
      BOMisNotCertified@1001 : TextConst 'ENU=%1  BOM is not certified';
      BOMisEmpty@1240020002 : TextConst 'ENU=%1 BOM is Empty';
      BOMexceedsLevel@1240020006 : TextConst 'ENU=%1 BOM exceeds max level.';
      BOMComponent@1240020004 : Record 99000772;
      CalcLowLevel@1240020005 : Codeunit 99000793;
      ErrMsg@1240020007 : Text[250];
    BEGIN
      Err := FALSE;

      IF Item."Production BOM No." = '' THEN BEGIN
        ErrMsg := STRSUBSTNO(BOMIsNotSet, Item."Production BOM No.");
        WriteReplPathAlert(CurrProcUnit."Location Code",Item."No.",CurrProcUnit."Variant Code",ErrMsg, TextProduction);
        Err := TRUE;
        EXIT(Err);
      END ELSE BEGIN
        IF NOT ProdBOMHeader.GET(Item."Production BOM No.") THEN BEGIN
          ErrMsg := STRSUBSTNO(BOMdoesNotExist, Item."Production BOM No.");
          WriteReplPathAlert(CurrProcUnit."Location Code",Item."No.",CurrProcUnit."Variant Code",ErrMsg, TextProduction);
          Err := TRUE;
          EXIT(Err);
        END;

        IF (ProdBOMHeader.Status <> ProdBOMHeader.Status::Certified) THEN BEGIN
          ErrMsg := STRSUBSTNO(BOMisNotCertified, Item."Production BOM No.");
          WriteReplPathAlert(CurrProcUnit."Location Code",Item."No.",CurrProcUnit."Variant Code",ErrMsg, TextProduction);
          Err := TRUE;
        END;

        CLEAR(CalcLowLevel);
        COMMIT;
        IF NOT CalcLowLevel.RUN(Item) THEN BEGIN
          ErrMsg := STRSUBSTNO(BOMexceedsLevel, Item."Production BOM No.");
          WriteReplPathAlert(CurrProcUnit."Location Code",Item."No.",CurrProcUnit."Variant Code",ErrMsg, TextProduction);
          Err := TRUE;
        END ELSE BEGIN
          LowLevelCode := Item."Low-Level Code";
        END;
        EXIT(Err);
      END;
    END;

    PROCEDURE CheckRouting@1240020003(VAR Item@1240020000 : Record 27;VAR CurrProcUnit@1240020003 : Record 14000555) Err : Boolean;
    VAR
      RtngHeader@1240020001 : Record 99000763;
      RoutingdoesNotExist@1001 : TextConst 'ENU=%1 Routing does not exist';
      RoutingisNotCertified@1000 : TextConst 'ENU=%1 Routing is not certified';
      ErrMsg@1240020002 : Text[250];
    BEGIN
      IF Item."Routing No." = '' THEN
        EXIT;

      IF NOT RtngHeader.GET(Item."Routing No.") THEN BEGIN
        ErrMsg := STRSUBSTNO( RoutingdoesNotExist, Item."Routing No.");
        WriteReplPathAlert(CurrProcUnit."Location Code",Item."No.",CurrProcUnit."Variant Code",ErrMsg, TextProduction);
        Err := TRUE;
      END;

      IF (RtngHeader.Status <> RtngHeader.Status::Certified) THEN BEGIN
        ErrMsg := STRSUBSTNO(RoutingisNotCertified, Item."Routing No.");
        WriteReplPathAlert(CurrProcUnit."Location Code",Item."No.",CurrProcUnit."Variant Code",ErrMsg, TextProduction);
        Err := TRUE;
      END;
    END;

    PROCEDURE CheckAssemblyBOM@1240020008(VAR Item@1240020000 : Record 27;VAR LowLevelCode@1240020003 : Integer;VAR CurrProcUnit@1240020009 : Record 14000555) Err : Boolean;
    VAR
      BOMisEmpty@1240020002 : TextConst 'ENU=%1 Assembly BOM is Empty';
      BOMexceedsLevel@1240020006 : TextConst 'ENU=%1 Assembly BOM exceeds max level.';
      BOMComponent@1240020001 : Record 90;
      CalcLowLevel@1240020005 : Codeunit 99000793;
      ErrMsg@1240020007 : Text[250];
      BOMComponentBlank@1240020004 : TextConst 'ENU=%1 Assembly BOM Component''s No. is missing.';
      BOMComponentQtyPer@1240020008 : TextConst 'ENU=%1 Assembly BOM Component %2 Qty. Per is missing.';
    BEGIN
      Err := FALSE;

      BOMComponent.SETRANGE("Parent Item No.",Item."No.");
      BOMComponent.SETRANGE(Type,BOMComponent.Type::Item);
      BOMComponent.SETFILTER("No.",'<>%1','');
      BOMComponent.SETFILTER("Quantity per",'<>%1',0);
      IF BOMComponent.ISEMPTY THEN BEGIN
        ErrMsg := STRSUBSTNO(BOMisEmpty, Item."No.");
        WriteReplPathAlert(CurrProcUnit."Location Code",Item."No.",CurrProcUnit."Variant Code",ErrMsg, TextAssembly);
        Err := TRUE;
        EXIT(FALSE);
      END;

      BOMComponent.SETRANGE("No.");
      BOMComponent.SETRANGE("Quantity per");
      IF BOMComponent.FINDSET THEN BEGIN
        REPEAT

          IF BOMComponent."No." = '' THEN BEGIN
            ErrMsg := STRSUBSTNO(BOMComponentBlank, Item."No.", BOMComponent."No.");
            WriteReplPathAlert(CurrProcUnit."Location Code",Item."No.",CurrProcUnit."Variant Code",ErrMsg, TextAssembly);
            Err := TRUE;
            EXIT(FALSE);
          END;

          IF BOMComponent."Quantity per" = 0 THEN BEGIN
            ErrMsg := STRSUBSTNO(BOMComponentQtyPer, Item."No.", BOMComponent."No.");
            WriteReplPathAlert(CurrProcUnit."Location Code",Item."No.",CurrProcUnit."Variant Code",ErrMsg, TextAssembly);
            Err := TRUE;
            EXIT(FALSE);
          END;
        UNTIL BOMComponent.NEXT = 0;
      END;

      CLEAR(CalcLowLevel);
      COMMIT;
      IF NOT CalcLowLevel.RUN(Item) THEN BEGIN
        ErrMsg := STRSUBSTNO(BOMexceedsLevel, Item."No.");
        WriteReplPathAlert(CurrProcUnit."Location Code",Item."No.",CurrProcUnit."Variant Code",ErrMsg, TextAssembly);
        Err := TRUE;
      END ELSE BEGIN
        LowLevelCode := Item."Low-Level Code";
      END;
      EXIT(Err);
    END;

    LOCAL PROCEDURE WriteReplPathAlert@1240020007(LocCode@1240020001 : Code[10];ItemNo@1240020002 : Code[50];VariantCode@1240020003 : Code[10];ErrorMessage@1240020004 : Text[250];AlertType@1240020000 : Code[20]);
    BEGIN
      IF AlertEntryNo = 0 THEN BEGIN
        ReplPathAlert.LOCKTABLE;
        IF ReplPathAlert.FINDLAST THEN
          AlertEntryNo := ReplPathAlert."Entry No." + 1
        ELSE
          AlertEntryNo := 1;
      END ELSE
        AlertEntryNo := AlertEntryNo + 1;
      ReplPathAlert.INIT;
      ReplPathAlert."Entry No." := AlertEntryNo;
      ReplPathAlert."Location Code" := LocCode;
      ReplPathAlert."Item No." := ItemNo;
      ReplPathAlert."Variant Code" := VariantCode;
      ReplPathAlert."Alert Description" := ErrorMessage;
      ReplPathAlert."Alert Date" := TODAY;
      ReplPathAlert."Alert Type" := AlertType;
      ReplPathAlert.INSERT;
    END;

    BEGIN
    END.
  }
}

