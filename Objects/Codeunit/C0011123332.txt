OBJECT Codeunit 11123332 SC - Role Center Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=04/18/17;
    Time=[ 1:00:00 PM];
    Version List=SCW19.2.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TrailingSalesOrdersSetup@11123304 : Record 11123332;
      GlobalSalesDocumentHeader@11123303 : Record 11123323;

    PROCEDURE OnOpenPage@11123303(VAR TrailingSalesOrdersSetup@11123303 : Record 11123332);
    BEGIN
      WITH TrailingSalesOrdersSetup DO
        IF NOT GET(USERID) THEN BEGIN
          "User ID" := USERID;
          "Use Work Date as Base" := TRUE;
          "Period Length" := "Period Length"::Month;
          "Value to Calculate" := "Value to Calculate"::"No. of Orders";
          "Chart Type" := "Chart Type"::"Stacked Column";
          INSERT;
        END;
    END;

    PROCEDURE ChartDrillDown@11123304(VAR BusChartBuf@11123303 : Record 485);
    VAR
      SalesHeader@11123308 : Record 36;
      TempSalesHeader@11123307 : TEMPORARY Record 36;
      SalesDocumentHeader@11123306 : Record 11123323;
      ToDate@11123305 : Date;
      Measure@11123304 : Integer;
    BEGIN
      Measure := BusChartBuf."Drill-Down Measure Index";
      IF (Measure < 0) OR (Measure > 3) THEN
        EXIT;
      TrailingSalesOrdersSetup.GET(USERID);
      SalesDocumentHeader.SETRANGE("Document Type",SalesDocumentHeader."Document Type"::Order);
      IF TrailingSalesOrdersSetup."Show Orders" = TrailingSalesOrdersSetup."Show Orders"::"Delayed Orders" THEN
        SalesDocumentHeader.SETFILTER("Date Received",'<%1',TrailingSalesOrdersSetup.GetStartDate);
      IF EVALUATE(SalesDocumentHeader.Status,BusChartBuf.GetMeasureValueString(Measure),9) THEN
        SalesDocumentHeader.SETRANGE(Status,SalesDocumentHeader.Status);

      ToDate := BusChartBuf.GetXValueAsDate(BusChartBuf."Drill-Down X Index");
      SalesDocumentHeader.SETRANGE("Date Received",0D,ToDate);

      DrillDown(SalesDocumentHeader);
    END;

    PROCEDURE DrillDown@11123308(VAR SalesDocumentHeader@11123303 : Record 11123323);
    VAR
      SalesHeader@11123305 : Record 36;
      TempSalesHeader@11123304 : TEMPORARY Record 36;
    BEGIN
      IF SalesDocumentHeader.FINDSET THEN BEGIN
        REPEAT
          IF NOT TempSalesHeader.GET(SalesDocumentHeader."Document Type",SalesDocumentHeader."Document No.") THEN
            IF SalesHeader.GET(SalesDocumentHeader."Document Type",SalesDocumentHeader."Document No.") THEN BEGIN
              TempSalesHeader.INIT;
              TempSalesHeader := SalesHeader;
              TempSalesHeader.INSERT;
            END;
        UNTIL SalesDocumentHeader.NEXT = 0;
      END;

      IF SalesDocumentHeader."Document Type" = SalesDocumentHeader."Document Type"::Quote THEN
        PAGE.RUN(PAGE::"Sales Quotes",TempSalesHeader)
      ELSE
        PAGE.RUN(PAGE::"Sales Order List",TempSalesHeader);
    END;

    PROCEDURE UpdateData@11123306(VAR BusChartBuf@11123303 : Record 485);
    VAR
      ChartToStatusMap@11123310 : ARRAY [4] OF Integer;
      ToDate@11123309 : ARRAY [5] OF Date;
      FromDate@11123308 : ARRAY [5] OF Date;
      Value@11123307 : Decimal;
      TotalValue@11123306 : Decimal;
      ColumnNo@11123305 : Integer;
      SalesHeaderStatus@11123304 : Integer;
    BEGIN
      TrailingSalesOrdersSetup.GET(USERID);
      WITH BusChartBuf DO BEGIN
        Initialize;
        "Period Length" := TrailingSalesOrdersSetup."Period Length";
        SetPeriodXAxis;

        CreateMap(ChartToStatusMap);
        FOR SalesHeaderStatus := 1 TO ARRAYLEN(ChartToStatusMap) DO BEGIN
          GlobalSalesDocumentHeader.Status := ChartToStatusMap[SalesHeaderStatus];
          AddMeasure(FORMAT(GlobalSalesDocumentHeader.Status),GlobalSalesDocumentHeader.Status,"Data Type"::Decimal,TrailingSalesOrdersSetup.GetChartType);
        END;

        IF CalcPeriods(FromDate,ToDate,BusChartBuf) THEN BEGIN
          AddPeriods(ToDate[1],ToDate[ARRAYLEN(ToDate)]);

          FOR SalesHeaderStatus := 1 TO ARRAYLEN(ChartToStatusMap) DO BEGIN
            TotalValue := 0;
            FOR ColumnNo := 1 TO ARRAYLEN(ToDate) DO BEGIN
              Value := GetSalesOrderValue(ChartToStatusMap[SalesHeaderStatus],FromDate[ColumnNo],ToDate[ColumnNo]);
              IF ColumnNo = 1 THEN
                TotalValue := Value
              ELSE
                TotalValue += Value;
              SetValueByIndex(SalesHeaderStatus - 1,ColumnNo - 1,TotalValue);
            END;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE CalcPeriods@11123302(VAR FromDate@11123305 : ARRAY [5] OF Date;VAR ToDate@11123304 : ARRAY [5] OF Date;VAR BusChartBuf@11123303 : Record 485) : Boolean;
    VAR
      MaxPeriodNo@11123307 : Integer;
      i@11123306 : Integer;
    BEGIN
      MaxPeriodNo := ARRAYLEN(ToDate);
      ToDate[MaxPeriodNo] := TrailingSalesOrdersSetup.GetStartDate;
      IF ToDate[MaxPeriodNo] = 0D THEN
        EXIT(FALSE);
      FOR i := MaxPeriodNo DOWNTO 1 DO BEGIN
        IF i > 1 THEN BEGIN
          FromDate[i] := BusChartBuf.CalcFromDate(ToDate[i]);
          ToDate[i - 1] := FromDate[i] - 1;
        END ELSE
          FromDate[i] := 0D
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetSalesOrderValue@11123301(Status@11123305 : Option;FromDate@11123304 : Date;ToDate@11123303 : Date) : Decimal;
    BEGIN
      IF TrailingSalesOrdersSetup."Value to Calculate" = TrailingSalesOrdersSetup."Value to Calculate"::"No. of Orders" THEN
        EXIT(GetSalesOrderCount(Status,FromDate,ToDate));
      EXIT(GetSalesOrderAmount(Status,FromDate,ToDate));
    END;

    LOCAL PROCEDURE GetSalesOrderAmount@11123325(Status@11123305 : Option;FromDate@11123304 : Date;ToDate@11123303 : Date) : Decimal;
    VAR
      CurrExchRate@11123309 : Record 330;
      TrailingSalesOrderQry@11123308 : Query 11123332;
      Amount@11123307 : Decimal;
      TotalAmount@11123306 : Decimal;
    BEGIN
      IF TrailingSalesOrdersSetup."Show Orders" = TrailingSalesOrdersSetup."Show Orders"::"Delayed Orders" THEN
        TrailingSalesOrderQry.SETFILTER(ShipmentDate,'<%1',TrailingSalesOrdersSetup.GetStartDate);

      TrailingSalesOrderQry.SETRANGE(Status,Status);
      TrailingSalesOrderQry.SETRANGE(DocumentDate,FromDate,ToDate);
      TrailingSalesOrderQry.OPEN;
      WHILE TrailingSalesOrderQry.READ DO BEGIN
        IF TrailingSalesOrderQry.CurrencyCode = '' THEN
          Amount := TrailingSalesOrderQry.Amount
        ELSE
          Amount := ROUND(TrailingSalesOrderQry.Amount / CurrExchRate.ExchangeRate(TODAY,TrailingSalesOrderQry.CurrencyCode));
        TotalAmount := TotalAmount + Amount;
      END;
        EXIT(TotalAmount);
    END;

    LOCAL PROCEDURE GetSalesOrderCount@11123307(Status@11123305 : Option;FromDate@11123304 : Date;ToDate@11123303 : Date) : Decimal;
    BEGIN
      GlobalSalesDocumentHeader.SETRANGE("Document Type",GlobalSalesDocumentHeader."Document Type"::Order);
      IF TrailingSalesOrdersSetup."Show Orders" = TrailingSalesOrdersSetup."Show Orders"::"Delayed Orders" THEN
        GlobalSalesDocumentHeader.SETFILTER("Shipment Date",'<%1',TrailingSalesOrdersSetup.GetStartDate)
      ELSE
        GlobalSalesDocumentHeader.SETRANGE("Shipment Date");
      GlobalSalesDocumentHeader.SETRANGE(Status,Status);
      GlobalSalesDocumentHeader.SETRANGE("Date Received",FromDate,ToDate);

      GlobalSalesDocumentHeader.SETRANGE("Sales Header Exists",TRUE);

      EXIT(GlobalSalesDocumentHeader.COUNT);
    END;

    PROCEDURE CreateMap@11123305(VAR Map@11123303 : ARRAY [4] OF Integer);
    VAR
      SalesDocumentHeader@11123304 : Record 11123323;
    BEGIN
      Map[1] := GlobalSalesDocumentHeader.Status::Released;
      Map[2] := GlobalSalesDocumentHeader.Status::"Pending Prepayment";
      Map[3] := GlobalSalesDocumentHeader.Status::"Pending Approval";
      Map[4] := GlobalSalesDocumentHeader.Status::Open;
    END;

    PROCEDURE IsWebClient@11123346() : Boolean;
    VAR
      ActiveSession@11123303 : Record 2000000110;
    BEGIN
      IF ActiveSession.GET(SERVICEINSTANCEID,SESSIONID) THEN
        EXIT(ActiveSession."Client Type" = ActiveSession."Client Type"::"Web Client");

      EXIT(FALSE);
    END;

    PROCEDURE IsWindowsClient@11123339() : Boolean;
    VAR
      ActiveSession@11123303 : Record 2000000110;
    BEGIN
      IF ActiveSession.GET(SERVICEINSTANCEID,SESSIONID) THEN
        EXIT(ActiveSession."Client Type" = ActiveSession."Client Type"::"Windows Client");

      EXIT(FALSE);
    END;

    PROCEDURE PlayVideoForWebClient@11123310(Link@11123303 : Text);
    BEGIN
      PlayVideo('Text Caption',GetLanguageSpecificURL(Link));
    END;

    LOCAL PROCEDURE PlayVideo@11123309(PageCaption@11123304 : Text;Src@11123303 : Text);
    VAR
      MiniVideoPlayerPage@11123307 : Page 1395;
      Height@11123306 : Integer;
      Width@11123305 : Integer;
    BEGIN
      Height := 415;
      Width := 740;

      MiniVideoPlayerPage.SetParameters(Height,Width,Src,PageCaption);
      MiniVideoPlayerPage.RUN;
    END;

    LOCAL PROCEDURE GetLanguageSpecificURL@11123314(NonLanguageSpecificURL@11123303 : Text) : Text;
    BEGIN
      EXIT(NonLanguageSpecificURL + GetLanguageURLParameter);
    END;

    LOCAL PROCEDURE GetLanguageURLParameter@11123311() : Text;
    VAR
      Convert@11123304 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      LanguageHexaDecimalCode@11123303 : Text;
    BEGIN
      LanguageHexaDecimalCode := Convert.ToString(GLOBALLANGUAGE,16);
      EXIT(STRSUBSTNO('&clcid=0x%1',LanguageHexaDecimalCode));
    END;

    PROCEDURE GetCustomerOrdersCount@11123312(VAR KeyValue@11123303 : Record 11123330);
    VAR
      CustActivityQry@11123304 : Query 11123333;
    BEGIN
      KeyValue.DELETEALL;
      CustActivityQry.OPEN;
      WHILE CustActivityQry.READ DO BEGIN
        IF NOT KeyValue.GET(CustActivityQry.Sell_to_Customer_No) THEN BEGIN
          KeyValue.INIT;
          KeyValue.Key := CustActivityQry.Sell_to_Customer_No;
          KeyValue."Decimal Value" := CustActivityQry.Count;
          KeyValue.INSERT;
         END;
      END;
    END;

    PROCEDURE GetAmountTopSoldItems@11123313(VAR KeyValue@11123303 : Record 11123330);
    VAR
      ItemsTopSoldAmountQry@11123304 : Query 11123334;
    BEGIN
      KeyValue.DELETEALL;
      ItemsTopSoldAmountQry.OPEN;
      WHILE ItemsTopSoldAmountQry.READ DO BEGIN
        IF NOT KeyValue.GET(ItemsTopSoldAmountQry.No) THEN BEGIN
          KeyValue.INIT;
          KeyValue.Key := ItemsTopSoldAmountQry.No;
          KeyValue."Decimal Value" := ItemsTopSoldAmountQry.Sum_Line_Amount;
          KeyValue.INSERT;
        END;
      END;
    END;

    PROCEDURE GetQuantityTopSoldItems@11123315(VAR KeyValue@11123303 : Record 11123330);
    VAR
      ItemsTopSoldQuantityQry@11123304 : Query 11123335;
    BEGIN
      KeyValue.DELETEALL;
      ItemsTopSoldQuantityQry.OPEN;
      WHILE ItemsTopSoldQuantityQry.READ DO BEGIN
        IF NOT KeyValue.GET(ItemsTopSoldQuantityQry.No) THEN BEGIN
          KeyValue.INIT;
          KeyValue.Key := ItemsTopSoldQuantityQry.No;
          KeyValue."Decimal Value" := ItemsTopSoldQuantityQry.Sum_Quantity;
          KeyValue.INSERT;
        END;
      END;
    END;

    PROCEDURE GetItemsStockInfo@11123316(VAR KeyValue@11123303 : Record 11123330);
    VAR
      ItemsStockInfoQry@11123304 : Query 11123336;
    BEGIN
      KeyValue.DELETEALL;
      ItemsStockInfoQry.OPEN;
      WHILE ItemsStockInfoQry.READ DO BEGIN
        IF NOT KeyValue.GET(ItemsStockInfoQry.No) THEN BEGIN
          KeyValue.INIT;
          KeyValue.Key := ItemsStockInfoQry.No;
          KeyValue."Decimal Value" := ItemsStockInfoQry.Sum_Quantity;
          KeyValue.INSERT;
        END;
      END;
    END;

    BEGIN
    END.
  }
}

