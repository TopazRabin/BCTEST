OBJECT Codeunit 14050004 UPSlink Manifest Export
{
  OBJECT-PROPERTIES
  {
    Date=07/13/20;
    Time=12:00:00 PM;
    Version List=SE0.62;
  }
  PROPERTIES
  {
    TableNo=14050007;
    OnRun=VAR
            UPSManifest@1240030000 : Record 14050007;
            UPSManifest2@1240030001 : Record 14050007;
            Package@1240030004 : Record 14000701;
            PostedPackage@1240030005 : Record 14000704;
            PostedPackageLine@1240030006 : Record 14000705;
            UPSOptionPage@1240030007 : Record 14000761;
            UPSPostedOptionPage@1240030008 : Record 14000762;
            UPSUploadedManifest@1240030027 : Record 14050009;
            UPSlinkMgt@1240030003 : Codeunit 14050002;
            FileName@1240030009 : Text[250];
            Posted@1240030011 : Boolean;
            SendSED@1240030012 : Boolean;
            Window@1240030014 : Dialog;
            TotalPrice@1240030010 : Decimal;
            TotalShipping@1240030013 : Decimal;
            TotalInsurance@1240030015 : Decimal;
            TotalDiscount@1240030029 : Decimal;
            TotalOther@1240030020 : Decimal;
            TotalPackages@1240030016 : Integer;
            TotalPackagesInclVoids@1240030017 : Integer;
            TotalDimWeight@1240030018 : Decimal;
            TotalWeight@1240030019 : Decimal;
            TotalCODAmount@1240030021 : Decimal;
            TotalInsuredValue@1240030022 : Decimal;
            UploadFileName@1240030002 : Text[250];
            EntryNo@1240030028 : Integer;
            TotalAHCPackages@1240030023 : Integer;
            ExportDoc@1240030024 : Record 14000981;
            TotalShipments@1240030025 : Integer;
          BEGIN
            CompanyInfo.GET;
            PackingStation.GetPackingStation;
            CarrierPackingStation.GetPackingStation(PackingStation);
            ShippingSetup.GET;
            ShippingAgentAccount.GET("Shipper Account Number");
            UPSlinkSetup.GET;

            UPSManifest.RESET;
            UPSManifest.SETCURRENTKEY("Manifest No.","Shipper Account Number");
            UPSManifest.SETRANGE("Manifest No.","Manifest No.");
            UPSManifest.SETRANGE("Shipper Account Number","Shipper Account Number");
            UPSManifest.SETRANGE("Book Number","Book Number");
            UPSManifest.SETRANGE("Page Number","Page Number");
            UPSManifest.SETRANGE("First Package",TRUE);
            UPSManifest.FIND('-');

            TotalShipments := 0;
            IF UPSManifest."World Ease Master No." <> '' THEN
              TotalShipments := WETransaction.VoidedPackageCount(UPSManifest."World Ease Master No.") + 1;

            REPEAT
              TotalShipments := TotalShipments + 1;
            UNTIL UPSManifest.NEXT = 0;

            UPSManifest.FIND('-');

            CreateManifestFile(Rec,UploadFileName);
            HeaderSegment(Rec,UPSManifest."Pickup Date");
            BookPageInfoSegment(Rec,TotalShipments);

            IF UPSManifest."World Ease Master No." <> '' THEN
              WEManifestExport.WorldEaseDocBox(
                UPSManifest,ManifestFile,PackingStation,CarrierPackingStation,ShippingSetup,UPSlinkSetup);

            UPSManifest2.RESET;
            UPSManifest2.SETCURRENTKEY("Shipment Number","Manifest No.");

            REPEAT
              IF PostedPackage.GET(UPSManifest."Package No.") THEN BEGIN
                Package.TRANSFERFIELDS(PostedPackage);
                UPSPostedOptionPage.GET(UPSManifest."Package No.");
                UPSOptionPage.Type := UPSOptionPage.Type::Package;
                UPSOptionPage.TRANSFERFIELDS(UPSPostedOptionPage);
                Posted := TRUE;
              END ELSE BEGIN
                Package.GET(UPSManifest."Package No.");
                UPSOptionPage.GET(UPSOptionPage.Type::Package,UPSManifest."Package No.");
                Posted := FALSE;
              END;

              IF Package.Closed AND
                 (Package."World Wide Service" OR
                  Package."UPS Canadian Service" OR
                  Package."UPS Puerto Rico Service")
              THEN BEGIN
                Package.TESTFIELD("Export Document No.");
                ExportDoc.GET(Package."Export Document No.");
              END;

              SegmentCount := 0;
              GetShipmentTotals(
                UPSManifest,TotalShipping,TotalInsurance,TotalDiscount,TotalPackages,
                TotalPackagesInclVoids,TotalWeight,TotalDimWeight,TotalCODAmount,TotalInsuredValue,
                TotalAHCPackages);

              ShipmentInfoSegment(
                UPSManifest,Package,UPSOptionPage,TotalPackages,TotalPackagesInclVoids,TotalWeight,
                TotalDimWeight);
              PartyAddressInfo(Package,UPSOptionPage,ExportDoc);
              IF UPSlinkSetup."Online Address Validation" THEN
                AddressValidationInfo(Package);

              ValueAddedShipmentLevel(Package,UPSOptionPage,TotalCODAmount,TotalInsuredValue,TotalAHCPackages);
              ReferenceSegment(Package,UPSOptionPage,FALSE);  // Shipment Level Reference Segment

              IF ((UPSOptionPage."Call Tag Type" > UPSOptionPage."Call Tag Type"::None) OR
                 UPSOptionPage."Ship Notification" OR
                 UPSOptionPage."Exception Notification") AND
                 (UPSOptionPage."Call Tag Type" < UPSOptionPage."Call Tag Type"::"Exchange Outbound")
              THEN
                NotificationInfoSegment(Package,UPSOptionPage,FALSE);  // Shipment Level Notification Segment

              IF UPSOptionPage."Delivery Notification" AND
                 (UPSOptionPage."Delivery Info. Level" = UPSOptionPage."Delivery Info. Level"::Shipment)
              THEN
                DeliveryInfoSegment(Package,UPSOptionPage);  // Shipment Level Delivery Notification Segment

              IF UPSOptionPage."Call Tag Type" IN
                 [UPSOptionPage."Call Tag Type"::"Exchange Outbound",
                  UPSOptionPage."Call Tag Type"::"Exchange Return",
                  UPSOptionPage."Call Tag Type"::"IC 1 attempt",
                  UPSOptionPage."Call Tag Type"::"IC 3 attempt",
                  UPSOptionPage."Call Tag Type"::"IC PRL",
                  UPSOptionPage."Call Tag Type"::"IC ERL",
                  UPSOptionPage."Call Tag Type"::"IC P & M Label",
                  UPSOptionPage."Call Tag Type"::"Pack and Collect 3 attempt",
                  UPSOptionPage."Call Tag Type"::"Pack and Collect 1 attempt"]
              THEN
                NotificationInfoSegment(Package,UPSOptionPage,FALSE);  // Shipment Level Notification Segment

              FreeFormTextSegment(Package,UPSOptionPage,FALSE);  // Shipment Level Free Form Text Segment

              IF Package.Closed AND
                 (Package."World Wide Service" OR
                  Package."UPS Canadian Service" OR
                  Package."UPS Puerto Rico Service")
              THEN BEGIN
                StandardInternationalSegment(Package,UPSOptionPage);

                IF (UPSOptionPage."International Routing" <>
                    UPSOptionPage."International Routing"::"Nondutiable Document") AND
                   (UPSOptionPage."UPS Packaging Type" <> UPSOptionPage."UPS Packaging Type"::"UPS Letter")
                THEN BEGIN
                  SendSED := FALSE;

                  IF (UPSOptionPage."Certificate of Origin" = UPSOptionPage."Certificate of Origin"::"Paperless NAFTA") OR
                     (UPSOptionPage."Export Declaration" = UPSOptionPage."Export Declaration"::"UPS Prepare") THEN
                     UPSOptionPage."SED Required" := TRUE;

                  CommodityInfoSegment2(
                    Package,UPSOptionPage,ExportDoc,SendSED,TotalPrice,TotalShipping,TotalInsurance,
                    TotalDiscount,TotalOther);

                  InternationalInvDetailSegment(
                    Package,UPSOptionPage,TotalPrice,TotalShipping,TotalInsurance,TotalDiscount,TotalOther);

                  IF SendSED THEN BEGIN
                    SEDSegment(Package,UPSOptionPage);
                    IF NOT UPSOptionPage."SED Required" THEN
                      IF UPSPostedOptionPage.GET(UPSManifest."Package No.") THEN BEGIN
                        UPSPostedOptionPage."SED Required" := TRUE;
                        UPSPostedOptionPage.MODIFY;
                      END ELSE BEGIN
                        UPSOptionPage."SED Required" := TRUE;
                        UPSOptionPage.MODIFY;
                      END;
                  END;
                  InternationalSpecCommSegment;
                END;
              END;

              IF (UPSOptionPage."Call Tag Type" = UPSOptionPage."Call Tag Type"::None) AND
                 (ShippingAgentAccount."Displayable Company Name") AND
                 (ShippingAgentAccount."Company Display Name" <> '')
              THEN
                NonPLDRelatedInfoSegment;

              // Package Level for First Package
              PackageLevel(Package,UPSOptionPage,UPSManifest,Posted);

              // Package Level for other packages in the shipment
              UPSManifest2.SETRANGE("Shipment Number",UPSManifest."Shipment Number");
              UPSManifest2.SETRANGE("Manifest No.",UPSManifest."Manifest No.");
              UPSManifest2.SETRANGE("First Package",FALSE);

              IF UPSManifest2.FIND('-') THEN BEGIN
                REPEAT
                  IF PostedPackage.GET(UPSManifest2."Package No.") THEN BEGIN
                    Package.TRANSFERFIELDS(PostedPackage);
                    UPSPostedOptionPage.GET(UPSManifest2."Package No.");
                    UPSOptionPage.Type := UPSOptionPage.Type::Package;
                    UPSOptionPage.TRANSFERFIELDS(UPSPostedOptionPage);
                    Posted := TRUE;
                  END ELSE BEGIN
                    Package.GET(UPSManifest2."Package No.");
                    UPSOptionPage.GET(UPSOptionPage.Type::Package,UPSManifest2."Package No.");
                    Posted := FALSE;
                  END;
                  PackageLevel(Package,UPSOptionPage,UPSManifest2,Posted);
                UNTIL UPSManifest2.NEXT = 0;
              END;
              ShipmentFooterSegment();
            UNTIL UPSManifest.NEXT = 0;

            IF UPSOptionPage."World Ease Master No." <> '' THEN
              WEManifestExport.VoidedPackageSegments(
                UPSOptionPage."World Ease Master No.",ManifestFile,ShippingSetup,PackingStation);

            PostDataport(Rec);

            IF SegmentCount > 0 THEN BEGIN
              UPSManifest.FIND('-');

              IF UPSlinkSetup.Demo THEN BEGIN
                UPSUploadedManifest.SETCURRENTKEY("Manifest No.","World Ease Master No.");
                UPSUploadedManifest.SETRANGE("World Ease Master No.",UPSOptionPage."World Ease Master No.");
                UPSUploadedManifest.SETRANGE("Manifest No.","Manifest No.");
                UPSUploadedManifest.SETRANGE("Shipping Agent Account No.","Shipper Account Number");
                IF UPSUploadedManifest.FIND('-') THEN
                  IF NOT
                     CONFIRM(
                       STRSUBSTNO(
                         Text003,FIELDCAPTION("Shipper Account Number"),"Shipper Account Number",
                         UPSOptionPage."World Ease Master No."))
                  THEN
                    EXIT;

                Window.OPEN(Text001);
                UPSUploadedManifest.RESET;
                UPSUploadedManifest.LOCKTABLE;
                IF UPSUploadedManifest.FIND('+') THEN
                  EntryNo := UPSUploadedManifest."Entry No." + 1
                ELSE
                  EntryNo := 1;

                UPSUploadedManifest.INIT;
                UPSUploadedManifest."Entry No." := EntryNo;
                UPSUploadedManifest."Manifest No." := "Manifest No.";
                UPSUploadedManifest."Shipping Agent Account No." := "Shipper Account Number";
                UPSUploadedManifest."Pickup Date" := UPSManifest."Pickup Date";
                UPSUploadedManifest."Text File Name" := UPSManifest."Text File Name";
                UPSUploadedManifest."World Ease Master No." := UPSManifest."World Ease Master No.";
                UPSUploadedManifest."Book Number" := UPSManifest."Book Number";
                UPSUploadedManifest."Page Number" := UPSManifest."Page Number";
                UPSUploadedManifest.INSERT(TRUE);
                COMMIT;

                Window.CLOSE;
                MESSAGE(Text002,UPSManifest.TABLECAPTION);
              END ELSE
                UPSlinkMgt.UploadUPSManifest(UPSManifest,UploadFileName);
            END;
          END;

  }
  CODE
  {
    VAR
      CompanyInfo@1240030000 : Record 79;
      PackingStation@1240030001 : Record 14000709;
      CarrierPackingStation@1240030008 : Record 14000729;
      ShippingAgentAccount@1240030002 : Record 14050005;
      ShippingAgent@1240030017 : Record 291;
      ShippingSetup@1240030018 : Record 14000707;
      PackageTmp@1240030014 : TEMPORARY Record 14000701;
      PackageLineTmp@1240030015 : TEMPORARY Record 14000702;
      UPSOptionPageTmp@1240030013 : TEMPORARY Record 14000761;
      UPSlinkSetup@1240030016 : Record 14050001;
      Shipping@1240030006 : Codeunit 14000701;
      UPSTransaction@1240030007 : Codeunit 14050001;
      ManifestFile@1240030003 : File;
      SegmentCount@1240030004 : Integer;
      Letter@1240030012 : Boolean;
      Text001@1001 : TextConst 'ENU=Uploading Manifest to UPS.  Please wait...';
      Text002@1002 : TextConst 'ENU=%1 uploaded successfully';
      Text003@1240030005 : TextConst 'ENU=Manifest for %1 %2 %3 already uploaded to UPS. Do you want to upload it to UPS again?  This may result in duplicate UPS charges.';
      WEManifestExport@14050601 : Codeunit 14050603;
      WEPrintDoc@14050602 : Codeunit 14050604;
      WETransaction@1240030009 : Codeunit 14050601;
      Text004@1240020000 : TextConst 'ENU=%1 %2 not found in %3.';

    LOCAL PROCEDURE HeaderSegment@10(UPSManifest@1240030000 : Record 14050007;PickupDate@1240030003 : Code[8]);
    BEGIN
      WriteData('0200');  // Version Number
      WriteData('49');  // Data Source

      WriteData(PADSTR(UPSlinkSetup."Mailbox ID",24));  // Mailbox ID
      WriteData(PADSTR(UPSlinkSetup.UPSlinkVersion,10));  // ClientSoftwareVersion
      WriteData(PickupDate);

      WriteData('00000' + UPSManifest."Book Number" + '0' + UPSManifest."Page Number");  // PLD Seq
      WriteData('00');  // Incremental PLD Code
      WriteData('948');  // Software Vendor Code for Lanham
      WriteData(PADSTR('',8,'0') + '1');  // Number of Shipper Segments In File
    END;

    LOCAL PROCEDURE BookPageInfoSegment@11(UPSManifest@1240030000 : Record 14050007;TotalShipments@1240030001 : Integer);
    BEGIN
      WriteData('*AA');  // Segment Identifier
      WriteData(PADSTR(UPSManifest."Shipper Account Number",10));  // Sender Shipper Number

      IF PackingStation."Ship-from Country Code" = '' THEN
        WriteData('US')
      ELSE
        WriteData(UPPERCASE(COPYSTR(PackingStation."Ship-from Country Code",1,2)));

      WriteData(PADSTR(CompanyInfo."VAT Registration No.",15));  // Shipper EIN
      WriteData(' ');  // Calculated Rates Indicator
      WriteData(UPSManifest."Book Number");
      WriteData('0' + UPSManifest."Page Number");
      WriteData(Integer2Text(TotalShipments,6));  // Num Shipments In Page
    END;

    LOCAL PROCEDURE ShipmentInfoSegment@12(UPSManifest@1240030000 : Record 14050007;Package@1240030001 : Record 14000701;UPSOptionPage@1240030002 : Record 14000761;TotalPackages@1240030003 : Integer;TotalPackagesInclVoids@1240030006 : Integer;TotalWeight@1240030004 : Decimal;TotalDimWeight@1240030005 : Decimal);
    BEGIN
      WriteData('*BA');  // Segment Identifier
      SegmentCount := SegmentCount + 1;

      WriteData(PADSTR(UPSManifest."Shipment Number",35));
      WriteData(Integer2Text(TotalPackages,5));
      WriteData('+' + Integer2Text(TotalWeight,16));  // Total Shipment Weight

      IF UPSOptionPage."Package Weight Averaged" THEN
        WriteData('1')
      ELSE
        WriteData('0');

      WriteData('+' + Integer2Text(TotalDimWeight,16));  // Total Dim. Weight
      IF UPSManifest."UOM Weight" = '' THEN
        WriteData('LBS')
      ELSE
        WriteData(PADSTR(UPSManifest."UOM Weight",3));

      IF Package."Service Indicator" = '15' THEN
        WriteData('14')
      ELSE IF Package."Service Indicator" = '04' THEN
        WriteData('65')
      ELSE IF Package."Service Indicator" = 'E1' THEN
        WriteData('96')
      ELSE
        WriteData(PADSTR(Package."Service Indicator",2));

      IF Package."World Wide Service" OR
         Package."UPS Canadian Service" OR
         Package."UPS Puerto Rico Service"
      THEN BEGIN
        IF (Package."UPS Puerto Rico Service") AND
           (Package."Shipping Payment Type" =
             Package."Shipping Payment Type"::Consignee) THEN
             WriteData('CBS')
        ELSE
          CASE UPSOptionPage."International Billing" OF
            UPSOptionPage."International Billing"::"Free On Board":
              WriteData('FOB');
            UPSOptionPage."International Billing"::FreightCollect:
              WriteData('COL');
            UPSOptionPage."International Billing"::"Third Party":
              IF Package."UPS Puerto Rico Service" THEN
                WriteData('TPB')
              ELSE
                WriteData('PRE');
            UPSOptionPage."International Billing"::"Cost Freight":
              WriteData('C&F');
            UPSOptionPage."International Billing"::"Delivery Duty Paid":
              WriteData('DDP');
            UPSOptionPage."International Billing"::"Shipping Duty Tax":
              WriteData('SDT');
            ELSE
              WriteData('PRE');
          END;
      END ELSE BEGIN
        CASE Package."Shipping Payment Type" OF
          Package."Shipping Payment Type"::"Third Party":
            WriteData('TPB');
          Package."Shipping Payment Type"::"Freight Collect":
            WriteData('COL');
          Package."Shipping Payment Type"::Consignee:
            WriteData('CBS');
          ELSE
            WriteData('PRE');
        END;
      END;  // Shipment Chg Type

      WriteData('10');  // Payment Media Type Code
      IF Package."Blind Shipment" OR Package."Double Blind Shipment" THEN
        WriteData(PADSTR(StripInvalidChar(Package."Blind Ship-from Name"),35))
      ELSE
        WriteData(PADSTR(StripInvalidChar(PackingStation."Ship-from Company"),35));  // Sender Name

      IF Package."Service Indicator" = 'E1' THEN
        WriteData('4')
      ELSE IF (UPSOptionPage."UPS Packaging Type" <>
            UPSOptionPage."UPS Packaging Type"::"UPS Letter") AND
           (UPSOptionPage."International Routing" <>
            UPSOptionPage."International Routing"::"Nondutiable Document") THEN
        WriteData('3')
      ELSE
        WriteData('1');  // Document Indicator
      WriteData('IN');  // UOM Dim

      IF Package."Currency Code" = '' THEN
        WriteData('USD')
      ELSE
        WriteData(PADSTR(COPYSTR(Package."Currency Code",1,3),3));  // Currency Code
      WriteData(Integer2Text(TotalPackagesInclVoids,6));
    END;

    LOCAL PROCEDURE PartyAddressInfo@13(Package@1240030000 : Record 14000701;UPSOptionPage@1240030001 : Record 14000761;ExportDoc@1240030002 : Record 14000981);
    VAR
      ExportSourceLine@1240020000 : Record 14000983;
      ProducerOfGoods@1240020001 : Boolean;
    BEGIN
      IF (UPSOptionPage."Call Tag Type" <> UPSOptionPage."Call Tag Type"::None) AND
         (UPSOptionPage."Call Tag Type" <> UPSOptionPage."Call Tag Type"::"Exchange Outbound")
      THEN BEGIN
        AddressInfoSegment(Package,UPSOptionPage,'01');  // Pickup From Address

        IF UPSOptionPage."Alternate Call Tag Return" THEN
          AddressInfoSegment(Package,UPSOptionPage,'18A')
        ELSE
          AddressInfoSegment(Package,UPSOptionPage,'18R');
      END ELSE BEGIN
        AddressInfoSegment(Package,UPSOptionPage,'18');  // Delivery Address

        IF (UPSOptionPage."Call Tag Type" = UPSOptionPage."Call Tag Type"::None) AND
           (ShippingAgentAccount."Displayable Company Name") AND
           (ShippingAgentAccount."Company Display Name" <> '')
        THEN
          AddressInfoSegment(Package,UPSOptionPage,'37');  //Shipper Address
      END;

      IF (Package."World Wide Service" OR
          Package."UPS Canadian Service" OR
          Package."UPS Puerto Rico Service") AND
          Package.Closed
      THEN BEGIN
        IF (UPSOptionPage."International Billing" =
             UPSOptionPage."International Billing"::"Third Party") AND
            (UPSOptionPage."Third Party Name" <> '')
        THEN
          AddressInfoSegment(Package,UPSOptionPage,'07');

        IF (Package."Shipping Payment Type" = Package."Shipping Payment Type"::"Third Party") AND
           (UPSOptionPage."International Billing" = UPSOptionPage."International Billing"::"Shipping Duty Tax") AND
           (UPSOptionPage."Third Party Name" <> '')
        THEN
          AddressInfoSegment(Package,UPSOptionPage,'07');
        IF ExportDoc."Ult. Consig. Name" <> '' THEN
          AddressInfoSegment(Package,UPSOptionPage,'23');

        ExportSourceLine.RESET;
        ExportSourceLine.SETRANGE(ExportSourceLine."Export Document No.",Package."Export Document No.");
        IF ExportSourceLine.FIND('-') THEN
        REPEAT
          IF  ExportSourceLine."Producer of Good Indicator" = ExportSourceLine."Producer of Good Indicator"::YES THEN
            ProducerOfGoods := TRUE;
        UNTIL ExportSourceLine.NEXT = 0;

        IF ProducerOfGoods THEN
          AddressInfoSegment(Package,UPSOptionPage,'68');

        IF UPSOptionPage."Importer Name" <> '' THEN
          AddressInfoSegment(Package,UPSOptionPage,'05');
        IF (UPSOptionPage."Call Tag Type" = UPSOptionPage."Call Tag Type"::None) OR
           (UPSOptionPage."Call Tag Type" = UPSOptionPage."Call Tag Type"::"Exchange Outbound")
        THEN
          AddressInfoSegment(Package,UPSOptionPage,'06')
        ELSE
          AddressInfoSegment(Package,UPSOptionPage,'06R');
      END ELSE
        IF Package."Shipping Payment Type" = Package."Shipping Payment Type"::"Third Party" THEN
          AddressInfoSegment(Package,UPSOptionPage,'07');
    END;

    LOCAL PROCEDURE AddressInfoSegment@14(Package@1240030000 : Record 14000701;UPSOptionPage@1240030001 : Record 14000761;Qualifier@1240030002 : Code[3]);
    VAR
      ExportDoc@1240030003 : Record 14000981;
      AttnName@1240030006 : Text[35];
      Companytxt@1240030007 : Text[35];
      Address1@1240030008 : Text[35];
      Address2@1240030009 : Text[35];
      Dept@1240030010 : Text[35];
      AddressCity@1240030011 : Text[30];
      AddressState@1240030012 : Text[5];
      PostalCode@1240030013 : Text[9];
      Country@1240030014 : Text[2];
      PhoneNo@1240030015 : Text[15];
      FaxNo@1240030016 : Text[15];
      UPSAccountNo@1240030017 : Text[10];
      TaxID@1240030018 : Text[15];
      UPSFaxDestination@1240030019 : Code[1];
    BEGIN
      WriteData('*CA');  // Segment Identifier
      SegmentCount := SegmentCount + 1;
      WriteData(COPYSTR(Qualifier,1,2));  // Address Qualifier

      CASE Qualifier OF
        '18','01','06R':  // Deliver To Address, Pickup From Address
          BEGIN
            AttnName := PADSTR(LeftString(StripInvalidChar(Package."Ship-to Contact")),35);
            Companytxt := PADSTR(LeftString(StripInvalidChar(Package."Ship-to Name")),35);
            Address1 := PADSTR(LeftString(StripInvalidChar(Package."Ship-to Address")),35);
            Address2 := PADSTR(LeftString(StripInvalidChar(Package."Ship-to Address 2")),35);
            Dept := PADSTR(StripInvalidChar(UPSOptionPage."Deliver-to Department"),35);
            AddressCity := PADSTR(LeftString(StripInvalidChar(COPYSTR(Package."Ship-to City",1,25))),30);
            AddressState := PADSTR(FixState(Package."Ship-to State"),5);
            PostalCode := PADSTR(FixZIPCode(Package."Ship-to ZIP Code"),9);
            Country := PADSTR(UPSTransaction.GetUPSCountryCode(Package."Ship-to Country Code"),2);
            UPSFaxDestination := GetUPSFaxDestination(Package."Ship-to Country Code");

            IF Package."Ship-to Phone No." <> '' THEN
              PhoneNo := PADSTR(FixPhoneNo(Package."Ship-to Phone No.",UPSFaxDestination),15)
            ELSE
              PhoneNo := PADSTR('',15);

            IF Package."Ship-to Fax No." <> '' THEN
              FaxNo := PADSTR(FixPhoneNo(Package."Ship-to Fax No.",UPSFaxDestination),15)
            ELSE
              FaxNo := PADSTR('',15);

            IF Qualifier = '18' THEN BEGIN
              IF ((UPSOptionPage."International Billing" IN
                   [UPSOptionPage."International Billing"::"Cost Freight",
                    UPSOptionPage."International Billing"::"Free On Board",
                    UPSOptionPage."International Billing"::FreightCollect]) OR
                  (Package."Shipping Payment Type" = Package."Shipping Payment Type"::"Freight Collect"))
              THEN
                UPSAccountNo := PADSTR(Package."Third Party Ship. Account No.",10)
              ELSE
                UPSAccountNo := PADSTR('',10);
            END ELSE
              UPSAccountNo := PADSTR('',10);

            IF ExportDoc.GET(Package."Export Document No.") THEN
              TaxID := PADSTR(ExportDoc."Ship-to VAT Registration No.",15)
            ELSE
              TaxID := PADSTR('',15);
          END;
        '06':  // Exporter Address
          BEGIN
            ExportDoc.GET(Package."Export Document No.");
            AttnName := PADSTR(LeftString(StripInvalidChar(ExportDoc."PPI Contact")),35);
            IF ExportDoc."PPI Name" <> '' THEN
              Companytxt := PADSTR(LeftString(StripInvalidChar(ExportDoc."PPI Name")),35)
            ELSE
              Companytxt := PADSTR(LeftString(StripInvalidChar(ExportDoc."PPI Contact")),35);
            Address1 := PADSTR(LeftString(StripInvalidChar(ExportDoc."PPI Address")),35);
            Address2 := PADSTR(LeftString(StripInvalidChar(ExportDoc."PPI Address 2")),35);
            Dept := PADSTR('',35);

            AddressCity := PADSTR(LeftString(StripInvalidChar(ExportDoc."PPI City")),30);
            AddressState := PADSTR(FixState(ExportDoc."PPI State"),5);
            PostalCode := PADSTR(FixZIPCode(ExportDoc."PPI ZIP Code"),9);
            Country := 'US';

            IF ExportDoc."PPI Phone No." <> '' THEN
              PhoneNo := PADSTR(FixPhoneNo(ExportDoc."PPI Phone No.",'0'),15)
            ELSE
              PhoneNo := PADSTR('',15);

            IF ExportDoc."PPI Fax No." <> '' THEN
              FaxNo := PADSTR(FixPhoneNo(ExportDoc."PPI Fax No.",'0'),15)
            ELSE
              FaxNo := PADSTR('',15);
            UPSAccountNo := PADSTR('',10);
            TaxID := PADSTR(ExportDoc."PPI ID",15)
          END;
        '18R','68','37':  // Return to Shipper Address
          BEGIN
            AttnName := PADSTR(LeftString(StripInvalidChar(PackingStation."Ship-from Contact")),35);
            Companytxt := PADSTR(LeftString(StripInvalidChar(PackingStation."Ship-from Company")),35);
            Address1 := PADSTR(LeftString(StripInvalidChar(PackingStation."Ship-from Address")),35);
            Address2 := PADSTR(LeftString(StripInvalidChar(PackingStation."Ship-from Address2")),35);
            Dept := PADSTR('',35);
            AddressCity := PADSTR(LeftString(StripInvalidChar(PackingStation."Ship-from City")),30);
            AddressState := PADSTR(FixState(PackingStation."Ship-from State"),5);
            PostalCode := PADSTR(FixZIPCode(PackingStation."Ship-from ZIP Code"),9);
            Country := PADSTR(UPSTransaction.GetUPSCountryCode(PackingStation."Ship-from Country Code"),2);
            UPSFaxDestination := GetUPSFaxDestination(PackingStation."Ship-from Country Code");

            IF PackingStation."Ship-from Phone No." <> '' THEN
              PhoneNo := PADSTR(FixPhoneNo(PackingStation."Ship-from Phone No.",UPSFaxDestination),15)
            ELSE
              PhoneNo := PADSTR('',15);

            IF PackingStation."Ship-from Fax No." <> '' THEN
              FaxNo := PADSTR(FixPhoneNo(PackingStation."Ship-from Fax No.",UPSFaxDestination),15)
            ELSE
              FaxNo := PADSTR('',15);

            UPSAccountNo := PADSTR('',10);

            TaxID := PADSTR(PackingStation."Federal ID No.",15)
          END;
        '18A':  // Return to Alternate Address
          BEGIN
            AttnName := PADSTR(LeftString(StripInvalidChar(UPSOptionPage."Return Contact")),35);
            Companytxt := PADSTR(LeftString(StripInvalidChar(UPSOptionPage."Return Company Name")),35);
            Address1 := PADSTR(LeftString(StripInvalidChar(UPSOptionPage."Return Address")),35);
            Address2 := PADSTR(LeftString(StripInvalidChar(UPSOptionPage."Return Address 2")),35);
            Dept := PADSTR('',35);
            AddressCity := PADSTR(LeftString(StripInvalidChar(UPSOptionPage."Return City")),30);
            AddressState := PADSTR(FixState(StripInvalidChar(UPSOptionPage."Return State")),5);
            PostalCode := PADSTR(FixZIPCode(StripInvalidChar(UPSOptionPage."Return ZIP Code")),9);
            Country := PADSTR(UPSTransaction.GetUPSCountryCode(UPSOptionPage."Return Country Code"),2);
            UPSFaxDestination := GetUPSFaxDestination(UPSOptionPage."Return Country Code");

            IF UPSOptionPage."Return Phone No." <> '' THEN
              PhoneNo := PADSTR(FixPhoneNo(UPSOptionPage."Return Phone No.",UPSFaxDestination),15)
            ELSE
              PhoneNo := PADSTR('',15);

            FaxNo := PADSTR('',15);
            UPSAccountNo := PADSTR('',10);
            IF ExportDoc.GET(Package."Export Document No.") THEN
              TaxID := PADSTR(ExportDoc."PPI ID",15)
            ELSE
              TaxID := PADSTR('',15);
          END;
        '05':  // Importer Address
          BEGIN
            AttnName := PADSTR(LeftString(StripInvalidChar(UPSOptionPage."Importer Contact")),35);
            Companytxt := PADSTR(LeftString(StripInvalidChar(UPSOptionPage."Importer Name")),35);
            Address1 := PADSTR(LeftString(StripInvalidChar(UPSOptionPage."Importer Address")),35);
            Address2 := PADSTR(LeftString(StripInvalidChar(UPSOptionPage."Impoter Address 2")),35);

            Dept := PADSTR('',35);
            AddressCity := PADSTR(LeftString(StripInvalidChar(UPSOptionPage."Importer City")),30);
            AddressState := PADSTR(FixState(UPSOptionPage."Importer State"),5);

            PostalCode := PADSTR(FixZIPCode(UPSOptionPage."Importer ZIP Code"),9);
            Country := PADSTR(UPSTransaction.GetUPSCountryCode(UPSOptionPage."Importer Country Code"),2);
            UPSFaxDestination := GetUPSFaxDestination(UPSOptionPage."Importer Country Code");

            IF UPSOptionPage."Importer Phone No." <> '' THEN
              PhoneNo := PADSTR(FixPhoneNo(UPSOptionPage."Importer Phone No.",UPSFaxDestination),15)
            ELSE
              PhoneNo := PADSTR('',15);
            FaxNo := PADSTR('',15);

            UPSAccountNo := PADSTR('',10);
            TaxID := PADSTR(UPSOptionPage."Importer Tax ID",15);
          END;
        '07','08':  // Consignee Third Party Billing Address
          BEGIN
            AttnName := PADSTR(LeftString(StripInvalidChar(UPSOptionPage."Third Party Contact")),35);
            Companytxt := PADSTR(LeftString(StripInvalidChar(UPSOptionPage."Third Party Name")),35);
            Address1 := PADSTR(LeftString(StripInvalidChar(UPSOptionPage."Third Party Address")),35);
            Address2 := PADSTR(LeftString(StripInvalidChar(UPSOptionPage."Third Party Address 2")),35);

            Dept := PADSTR('',35);
            AddressCity := PADSTR(LeftString(StripInvalidChar(UPSOptionPage."Third Party City")),30);
            AddressState := PADSTR(FixState(UPSOptionPage."Third Party State"),5);

            PostalCode := PADSTR(FixZIPCode(UPSOptionPage."Third Party ZIP Code"),9);
            Country :=
              PADSTR(UPSTransaction.GetUPSCountryCode(UPSOptionPage."Third Party Country Code"),2);
            UPSFaxDestination := GetUPSFaxDestination(UPSOptionPage."Third Party Country Code");

            IF UPSOptionPage."Third Party Phone No." <> '' THEN
              PhoneNo := PADSTR(FixPhoneNo(UPSOptionPage."Third Party Phone No.",UPSFaxDestination),15)
            ELSE
              PhoneNo := PADSTR('',15);
            FaxNo := PADSTR('',15);
            UPSAccountNo := PADSTR(Package."Third Party Ship. Account No.",10);
            TaxID := PADSTR(UPSOptionPage."Third Party Tax ID",15);
          END;
        '23':  // Ultimate Consignee Address (Ship For)
          BEGIN
            ExportDoc.GET(Package."Export Document No.");

            AttnName := PADSTR(LeftString(StripInvalidChar(ExportDoc."Ult. Consig. Contact")),35);
            Companytxt := PADSTR(LeftString(StripInvalidChar(ExportDoc."Ult. Consig. Name")),35);
            Address1 := PADSTR(LeftString(StripInvalidChar(ExportDoc."Ult. Consig. Address")),35);
            Address2 := PADSTR(LeftString(StripInvalidChar(ExportDoc."Ult. Consig. Address 2")),35);

            Dept := PADSTR('',35);
            AddressCity := PADSTR(LeftString(StripInvalidChar(ExportDoc."Ult. Consig. City")),30);
            AddressState := PADSTR(FixState(ExportDoc."Ult. Consig. State"),5);

            PostalCode := PADSTR(FixZIPCode(ExportDoc."Ult. Consig. ZIP Code"),9);
            Country := PADSTR(ExportDoc.GetISOCountryCode(ExportDoc."Country of Destination"),2);
            UPSFaxDestination := GetUPSFaxDestination(ExportDoc."Ult. Consig. Country Code");

            IF ExportDoc."Ult. Consig. Phone No." <> '' THEN
              PhoneNo := PADSTR(FixPhoneNo(ExportDoc."Ult. Consig. Phone No.",UPSFaxDestination),15)
            ELSE
              PhoneNo := PADSTR('',15);

            FaxNo := PADSTR('',15);
            UPSAccountNo := PADSTR('',10);
            TaxID := PADSTR('',15);
          END;
      END;

      WriteData(AttnName);
      WriteData(Companytxt);

      WriteData(Address1);
      WriteData(Address2);
      WriteData(Dept);

      WriteData(AddressCity);
      WriteData(AddressState);
      WriteData(PostalCode);
      WriteData(Country);

      WriteData(PhoneNo);
      IF (DELCHR(FaxNo) <> '') AND
         (UPSFaxDestination = '1')
      THEN
        WriteData(UPSFaxDestination)
      ELSE
        WriteData(' ');

      WriteData(FaxNo);
      WriteData(UPSAccountNo);
      WriteData(TaxID);
    END;

    LOCAL PROCEDURE AddressValidationInfo@15(Package@1240030000 : Record 14000701);
    VAR
      UPSManifest@1240030002 : Record 14050007;
    BEGIN
      WriteData('*DA');  // Segment Identifier
      SegmentCount := SegmentCount + 1;
      WriteData('18');  // Qualifier
      CASE Package."Ship-to Type" OF
        Package."Ship-to Type"::Customer:
          IF Package."Ship-to Code" <> '' THEN
            WriteData(PADSTR('0222' + Package."Ship-to No." + '~' +Package."Ship-to Code",36))
          ELSE
            WriteData(PADSTR('0018' + Package."Ship-to No.",36));
        Package."Ship-to Type"::Vendor:
          IF Package."Ship-to Code" <> '' THEN
            WriteData(PADSTR('0224' + Package."Ship-to No." + '~' + Package."Ship-to Code",36))
          ELSE
            WriteData(PADSTR('0023' + Package."Ship-to No.",36));
        Package."Ship-to Type"::Bank:
          WriteData(PADSTR('0270' + Package."Ship-to No.",36));
        Package."Ship-to Type"::Contact:
          WriteData(PADSTR('5050' + Package."Ship-to No.",36));
        Package."Ship-to Type"::Resource:
          WriteData(PADSTR('0156' + Package."Ship-to No.",36));
        Package."Ship-to Type"::Employee:
          WriteData(PADSTR('5200,' + Package."Ship-to No.",36));
        Package."Ship-to Type"::Location:
          WriteData(PADSTR('0014' + Package."Ship-to No.",36));
        ELSE
          WriteData(PADSTR('0000' + Package."Ship-to No.",36));
      END;

      UPSManifest.RESET;
      UPSManifest.SETCURRENTKEY(
        "Consignee Address1","Consignee Address2","Consignee City","Consignee State");
      UPSManifest.SETRANGE("Consignee Address1",Package."Ship-to Address");
      UPSManifest.SETRANGE("Consignee Address2",Package."Ship-to Address 2");

      UPSManifest.SETRANGE("Consignee City",Package."Ship-to City");
      UPSManifest.SETRANGE("Consignee State",Package."Ship-to State");
      UPSManifest.SETFILTER(
        "Consignee Postal Code",'%1..',COPYSTR(DELCHR(Package."Ship-to ZIP Code",'=','-'),1,5));
      UPSManifest.SETFILTER("Book Number",'<>%1','');

      IF UPSManifest.FIND('+') THEN BEGIN
        IF UPSManifest.NEXT(-1) = 0 THEN
          WriteData(PADSTR('   00',15))
        ELSE
          CASE UPSManifest."Address Validation Results" OF
            UPSManifest."Address Validation Results"::Validated:
              WriteData(PADSTR('   01  ' + Date2Text(UPSManifest."Address Validation Date"),15));
            UPSManifest."Address Validation Results"::"Validation Rejected":
              WriteData(PADSTR('   02  ' + Date2Text(UPSManifest."Address Validation Date"),15));
            UPSManifest."Address Validation Results"::Pending:
              WriteData(PADSTR('   04',15));
            ELSE
              WriteData(PADSTR('   00  ' + Date2Text(UPSManifest."Address Validation Date"),15));
          END;
      END ELSE
        WriteData(PADSTR('   00',15));
    END;

    LOCAL PROCEDURE ValueAddedShipmentLevel@16(Package@1240030000 : Record 14000701;UPSOptionPage@1240030001 : Record 14000761;TotalCODAmount@1240030002 : Decimal;TotalInsurancedValue@1240030004 : Decimal;TotalAHCPackages@1240030005 : Integer);
    VAR
      IntegerText@1240030003 : Text[30];
      ItemCount@1240020000 : Integer;
    BEGIN
      WITH UPSOptionPage DO BEGIN

        IF "Saturday Delivery" THEN BEGIN
          WriteData('*EA');
          SegmentCount := SegmentCount + 1;
          WriteData('SAT');
        END;

        IF UPSOptionPage."Direct Delivery Only" THEN BEGIN
          WriteData('*EA');
          SegmentCount := SegmentCount + 1;
          WriteData('INDDDO');
        END;

        IF "Call Tag Type" <> "Call Tag Type"::None THEN BEGIN

          IF Package."World Wide Service" AND "Additional Handling Required" THEN BEGIN
            WriteData('*EA');
            SegmentCount := SegmentCount + 1;
            WriteData('AHS');
            WriteData(Integer2Text(TotalAHCPackages,5));
          END;

          WriteData('*EA');
          SegmentCount := SegmentCount + 1;

          CASE "Call Tag Type" OF
            "Call Tag Type"::"Electronic Return Label":
              WriteData('ERL');
            "Call Tag Type"::"Print Return Label Only":
              IF ShippingAgentAccount."UPS Prints Return Label" THEN
                WriteData('PNM')
              ELSE
                WriteData('ALP');
            "Call Tag Type"::"1 attempt":
              WriteData('RSO');
            "Call Tag Type"::"3 attempt":
              WriteData('ART');
          END;

          IF "Call Tag Type" IN
             ["Call Tag Type"::"IC 1 attempt",
              "Call Tag Type"::"IC 3 attempt",
              "Call Tag Type"::"IC PRL",
              "Call Tag Type"::"IC ERL",
              "Call Tag Type"::"IC P & M Label"] THEN BEGIN
                WriteData('IMP');
                WriteData('*EA');
                SegmentCount := SegmentCount + 1;
                WriteData('LDM');

                CASE "Call Tag Type" OF
                  "Call Tag Type"::"IC 1 attempt":
                    WriteData('LDO');
                  "Call Tag Type"::"IC 3 attempt":
                    WriteData('LDT');
                  "Call Tag Type"::"IC PRL":
                    WriteData('LDP');
                  "Call Tag Type"::"IC ERL":
                    WriteData('LDE');
                  "Call Tag Type"::"IC P & M Label":
                    WriteData('LPM');
                END;

                IF "Commercial Invoice Removal" THEN BEGIN
                  WriteData('*EA');
                  SegmentCount := SegmentCount + 1;
                  WriteData('CIR')
                END;
          END;

          IF "Call Tag Type" = "Call Tag Type"::"Exchange Outbound" THEN
            WriteData('EXO');

          IF "Call Tag Type" = "Call Tag Type"::"Exchange Return" THEN BEGIN
            WriteData('EXI');
            WriteData('*EA');
            SegmentCount := SegmentCount + 1;
            WriteData('LDM');
            WriteData('LDP');
          END;

          IF ("Call Tag Type" = "Call Tag Type"::"Pack and Collect 1 attempt") OR
             ("Call Tag Type" = "Call Tag Type"::"Pack and Collect 3 attempt")
          THEN BEGIN
            WriteData('PAC');
            CASE "Pack and Collect Box Size" OF
              "Pack and Collect Box Size"::"1":
                WriteData('PC1');
              "Pack and Collect Box Size"::"2":
                WriteData('PC2');
              "Pack and Collect Box Size"::"3":
                WriteData('PC3');
              "Pack and Collect Box Size"::"4":
                WriteData('PC4');
              "Pack and Collect Box Size"::"5":
                WriteData('PC5');
            END;
            WriteData('*EA');
            SegmentCount := SegmentCount + 1;
            WriteData('LDM');
            IF "Call Tag Type" = "Call Tag Type"::"Pack and Collect 1 attempt" THEN
              WriteData('LDO');
            IF "Call Tag Type" = "Call Tag Type"::"Pack and Collect 3 attempt" THEN
              WriteData('LDT');
          END;
        END;

        IF Package."Residential Delivery" THEN BEGIN
          WriteData('*EA');
          SegmentCount := SegmentCount + 1;
          WriteData('RES');
        END;

        IF Package."UPS Hundred Weight" THEN BEGIN
          WriteData('*EA');
          SegmentCount := SegmentCount + 1;
          IF "Hundred Wgt. Keep Mult. Value" THEN
            WriteData('CWM')
          ELSE
            WriteData('CWS');
        END;

        IF "Receiver Location ID" <> '' THEN BEGIN
          WriteData('*EA');
          SegmentCount := SegmentCount + 1;
          WriteData('RLI');
          WriteData(PADSTR("Receiver Location ID",10));
        END;

        IF "Saturday Pickup" THEN BEGIN
          WriteData('*EA');
          SegmentCount := SegmentCount + 1;
          WriteData('SPU');
        END;

        IF "UPS Carbon Neutral" THEN BEGIN
          WriteData('*EA');
          SegmentCount := SegmentCount + 1;
          WriteData('CNS');
        END;

        IF Package."World Wide Service" OR
           Package."UPS Canadian Service"
        THEN BEGIN
          IF Package.COD THEN BEGIN
            WriteData('*EA');
            SegmentCount := SegmentCount + 1;
            WriteData('EXC');

            IntegerText := Decimal2Text(ROUND(TotalCODAmount,0.01,'>') * 100,0);
            WriteData('+' + PADSTR('',18 - STRLEN(IntegerText),'0') + IntegerText);
            WriteData('USD');

            IF Package."Add Shipping Charge to COD Amt" THEN
              WriteData('100')
            ELSE
              WriteData('000');

            WriteData(PADSTR(StripInvalidChar(Package.Description),50));
            WriteData(PADSTR('',50));  // Additional Comments
            IF CompanyInfo."COD Email" <> '' THEN
              WriteData(PADSTR(CompanyInfo."COD Email",50))
            ELSE
               WriteData(PADSTR(PackingStation."Ship-from E-Mail",50));
            WriteData(PADSTR("EXC Payor Email",50));
          END;

          IF "Commercial Invoice" = "Commercial Invoice"::"Paperless Invoice" THEN BEGIN
            WriteData('*EA');
            SegmentCount := SegmentCount + 1;
            WriteData('PLI');
            IF "Need Power of Attorney" OR
                NOT ("Export Declaration" IN ["Export Declaration"::" ","Export Declaration"::Unknown]) OR
                ("Certificate of Origin" <> "Certificate of Origin"::" ")
            THEN
              WriteData('1')
            ELSE
              WriteData('0');
          END;

          IF "Certificate of Origin" = "Certificate of Origin"::"Paperless NAFTA" THEN BEGIN
            WriteData('*EA');
            SegmentCount := SegmentCount + 1;
            WriteData('PLN');
            WriteData(PADSTR('',8)); //BlanketPeriodFromDate
            WriteData(PADSTR('',8)); //BlanketPeriodToDate
            WriteData(PADSTR('02',2)); //ProducerAddressCode
          END;

          CASE "Insurance Type" OF
            "Insurance Type"::"Declared Value":
              IF TotalInsurancedValue > 1 THEN BEGIN
                WriteData('*EA');
                SegmentCount := SegmentCount + 1;
                IF "Shipper Pays Declared Value" THEN
                  WriteData('DVS')
                ELSE
                  WriteData('EVS');
                IntegerText := Decimal2Text(ROUND(TotalInsurancedValue,0.01,'>') * 100,0);
                WriteData('+' + PADSTR('',18 - STRLEN(IntegerText),'0') + IntegerText);
                WriteData('USD');
              END;
            "Insurance Type"::"Expanded Parcel":
              BEGIN
                WriteData('*EA');
                SegmentCount := SegmentCount + 1;
                WriteData('EPI');
                IntegerText := Decimal2Text(ROUND(TotalInsurancedValue,0.01,'>') * 100,0);
                WriteData('+' + PADSTR('',18 - STRLEN(IntegerText),'0') + IntegerText);
                WriteData('USD');
              END;
            "Insurance Type"::"Flexible Parcel":
              BEGIN
                WriteData('*EA');
                SegmentCount := SegmentCount + 1;
                WriteData('BPI');
                IntegerText := Decimal2Text(ROUND(TotalInsurancedValue,0.01,'>') * 100,0);
                WriteData('+' + PADSTR('',18 - STRLEN(IntegerText),'0') + IntegerText);
                WriteData('USD');
              END;
            "Insurance Type"::"Time in Transit":
              BEGIN
                WriteData('*EA');
                SegmentCount := SegmentCount + 1;
                WriteData('TNT');
                IntegerText := Decimal2Text(ROUND(TotalInsurancedValue,0.01,'>') * 100,0);
                WriteData('+' + PADSTR('',18 - STRLEN(IntegerText),'0') + IntegerText);
                WriteData('USD');
              END;
          END;

          CASE "Delivery Confirmation Type" OF
            "Delivery Confirmation Type"::"Adult Signature":
              BEGIN
                WriteData('*EA');
                SegmentCount := SegmentCount + 1;
                WriteData('ADS');
              END;
            "Delivery Confirmation Type"::"Signature Date":
              BEGIN
                WriteData('*EA');
                SegmentCount := SegmentCount + 1;
                WriteData('DCS');
              END;
          END;

          IF "Extended Area Surcharge" THEN BEGIN
            WriteData('*EA');
            SegmentCount := SegmentCount + 1;
            WriteData('EDS');
          END;

          IF Package."Service Indicator" = 'E1' THEN BEGIN
            WriteData('*EA');
            SegmentCount := SegmentCount + 1;
            WriteData('PSI');
            IF UPSOptionPage."Lift Gate For Delivery" THEN
              WriteData('LGS')
            ELSE
              WriteData(PADSTR('',3)); //LiftGateDelivery

            IF UPSOptionPage."Lift Gate For Pickup" THEN
              WriteData('LGP')
            ELSE
              WriteData(PADSTR('',3)); //LiftGatePickup

            IF UPSOptionPage."Drop Off At UPS Facility" THEN
              WriteData('DAF')
            ELSE
              WriteData(PADSTR('',3)); //DropOffAtFacility

            IF UPSOptionPage."Hold For Pickup" THEN
              WriteData('HFP')
            ELSE
              WriteData(PADSTR('',3)); //HoldForPickup

            WriteData('00001');//TotalNumOfPieces

            IF (UPSOptionPage."Freight Packing List" =
              UPSOptionPage."Freight Packing List"::Paperless)
            THEN BEGIN
              WriteData('*EA');
              SegmentCount := SegmentCount + 1;
              WriteData('FPL');
              WriteData('+' + PADSTR('',9,'0')); //PalletUnitPriceAmount
              WriteData(PADSTR(PackingStation.Description,150));
              ItemCount := 0;
              IF PackageLineTmp.FIND('-') THEN
                REPEAT
                  ItemCount := ItemCount + 1;
                UNTIL PackageLineTmp.NEXT = 0;
              WriteData(Integer2Text(ItemCount,5)); //number of pieces
              IF UPSOptionPage."Dangerous Goods" THEN
                WriteData('1')
              ELSE
                WriteData(' ');
              WriteData('+' + Integer2Text(UPSOptionPage."Pallet Weight",7));  //PalletWeightQuantity
              WriteData('LBS'); //PalletUOM
              WriteData(PADSTR('Pallet',35)); //Package type
              WriteData('+' + Integer2Text(Package."Override Length",8));
              WriteData('+' + Integer2Text(Package."Override Width",8));
              WriteData('+' + Integer2Text(Package."Override Height",8));
            END;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE ReferenceSegment@17(Package@1240030000 : Record 14000701;UPSOptionPage@1240030001 : Record 14000761;PackageLevel@1240030002 : Boolean);
    BEGIN
      WITH UPSOptionPage DO BEGIN
        IF NOT PackageLevel THEN BEGIN
          IF ("Ship. Ref. Type 1" <> "Ship. Ref. Type 1"::" ") AND
             ("Ship. Ref. No. 1" <> '')
          THEN BEGIN
            WriteData('*FA');
            SegmentCount := SegmentCount + 1;
            WriteData('001');
            WriteData(GetReferenceTypeID("Ship. Ref. Type 1"));
            WriteData(PADSTR(StripInvalidChar("Ship. Ref. No. 1"),35));
          END;

          IF ("Ship. Ref. Type 2" <> "Ship. Ref. Type 2"::" ") AND
             ("Ship. Ref. No. 2" <> '')
          THEN BEGIN
            WriteData('*FA');
            SegmentCount := SegmentCount + 1;
            WriteData('002');
            WriteData(GetReferenceTypeID("Ship. Ref. Type 2"));
            WriteData(PADSTR(StripInvalidChar("Ship. Ref. No. 2"),35));
          END;
        END ELSE BEGIN
          IF ("Cust. Ref. Type 1" <> "Cust. Ref. Type 1"::" ") AND
             ("Cust. Ref. No. 1" <> '')
          THEN BEGIN
            WriteData('*FA');
            SegmentCount := SegmentCount + 1;
            WriteData('003');
            WriteData(GetReferenceTypeID("Cust. Ref. Type 1"));
            WriteData(PADSTR(StripInvalidChar("Cust. Ref. No. 1"),35));
          END ELSE BEGIN
            IF Package."Source ID" <> '' THEN BEGIN
              WriteData('*FA');
              SegmentCount := SegmentCount + 1;
              WriteData('003');
              WriteData('ON');
              WriteData(PADSTR(StripInvalidChar(Package."Source ID"),35));
            END ELSE BEGIN
              IF (Package.Miscellaneous) AND (Package."No." <> '') THEN BEGIN
                WriteData('*FA');
                SegmentCount := SegmentCount + 1;
                WriteData('003');
                WriteData('ON');
                WriteData(PADSTR(Package."No.",35));
              END;
            END;
          END;

          IF ("Cust. Ref. Type 2" <> "Cust. Ref. Type 2"::" ") AND
             ("Cust. Ref. No. 2" <> '')
          THEN BEGIN
            WriteData('*FA');
            SegmentCount := SegmentCount + 1;
            WriteData('004');
            WriteData(GetReferenceTypeID("Cust. Ref. Type 2"));
            WriteData(PADSTR(StripInvalidChar("Cust. Ref. No. 2"),35));
          END ELSE BEGIN
            IF Package."External Document No." <> '' THEN BEGIN
              WriteData('*FA');
              SegmentCount := SegmentCount + 1;
              WriteData('004');
              WriteData('TN');
              WriteData(PADSTR(StripInvalidChar(Package."External Document No."),35));
            END;
          END;

          IF ("Cust. Ref. Type 3" <> "Cust. Ref. Type 3"::" ") AND
             ("Cust. Ref. No. 3" <> '')
          THEN BEGIN
            WriteData('*FA');
            SegmentCount := SegmentCount + 1;
            WriteData('005');
            WriteData(GetReferenceTypeID("Cust. Ref. Type 3"));
            WriteData(PADSTR(StripInvalidChar("Cust. Ref. No. 3"),35));
          END;

          IF ("Cust. Ref. Type 4" <> "Cust. Ref. Type 4"::" ") AND
             ("Cust. Ref. No. 4" <> '')
          THEN BEGIN
            WriteData('*FA');
            SegmentCount := SegmentCount + 1;
            WriteData('006');
            WriteData(GetReferenceTypeID("Cust. Ref. Type 4"));
            WriteData(PADSTR(StripInvalidChar("Cust. Ref. No. 4"),35));
          END;

          IF ("Cust. Ref. Type 5" <> "Cust. Ref. Type 5"::" ") AND
             ("Cust. Ref. No. 5" <> '')
          THEN BEGIN
            WriteData('*FA');
            SegmentCount := SegmentCount + 1;
            WriteData('007');
            WriteData(GetReferenceTypeID("Cust. Ref. Type 5"));
            WriteData(PADSTR(StripInvalidChar("Cust. Ref. No. 5"),35));
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE NotificationInfoSegment@18(Package@1240030000 : Record 14000701;UPSOptionPage@1240030001 : Record 14000761;PackageLevel@1240030002 : Boolean);
    BEGIN
      WITH UPSOptionPage DO BEGIN
        IF NOT PackageLevel AND
           (("Call Tag Type" = "Call Tag Type"::"Electronic Return Label") OR
            ("Call Tag Type" = "Call Tag Type"::"IC ERL"))
        THEN BEGIN
          WriteData('*GA');
          SegmentCount := SegmentCount + 1;

          WriteData('001');
          WriteData('03');  // Media Type Email
          WriteData(PADSTR("Electronic Return Label Email",50));
          WriteData(PADSTR('ENG',3));  // Language Code
          WriteData(PADSTR('US',2));  // Dialect

          WriteData(PADSTR('',85));  // Filler for Send From, Reply to email
          WriteData(PADSTR("Failure Email",50));
          WriteData(PADSTR('',178));  // Filler for Fax Info
        END;

        IF "Call Tag Type" = "Call Tag Type"::None THEN BEGIN
          IF "Ship Notification" AND
             ((PackageLevel AND
              ("UPS Advisory Info. Level" = "UPS Advisory Info. Level"::Package)) OR
             (NOT PackageLevel AND
              ("UPS Advisory Info. Level" = "UPS Advisory Info. Level"::Shipment)))
          THEN BEGIN
            WriteData('*GA');
            SegmentCount := SegmentCount + 1;
            WriteData('006');

            IF "Ship Notification Type" = "Ship Notification Type"::Email THEN BEGIN
              WriteData := ('03');
              WriteData(PADSTR("Ship Notification Email",50));
            END ELSE
              WriteData := ('04');
            WriteNotificationInfo(Package,UPSOptionPage);
          END;

          IF "Exception Notification" AND
             ((PackageLevel AND
              ("Exception Info. Level" = "Exception Info. Level"::Package)) OR
             (NOT PackageLevel AND
              ("Exception Info. Level" = "Exception Info. Level"::Shipment)))
          THEN BEGIN
            WriteData('*GA');
            SegmentCount := SegmentCount + 1;
            WriteData('007');
            WriteData := ('03');
            WriteData(PADSTR("Exception Notification Email",50));
            WriteNotificationInfo(Package,UPSOptionPage);
          END;

          IF NOT(PackageLevel) AND
             "SED Required" AND
             "Ship Notification" AND
             ("Ship Notification Type" = "Ship Notification Type"::Email) AND
             ("Ship Notification Email" <> '')
          THEN BEGIN
            WriteData ('*GA');
            SegmentCount := SegmentCount + 1;
            WriteData ('011');
            WriteData('03');
            WriteData(PADSTR("Ship Notification Email",50));
            WriteData(PADSTR('',200));
            WriteData(PADSTR('',118));
          END;
        END ELSE BEGIN
          IF "Ship Notification" AND
            NOT PackageLevel
          THEN BEGIN
            WriteData('*GA');
            SegmentCount := SegmentCount + 1;
            WriteData('004');

            IF "Ship Notification Type" = "Ship Notification Type"::Email THEN BEGIN
              WriteData := ('03');
              WriteData(PADSTR("Ship Notification Email",50));
            END ELSE
              WriteData := ('04');

            WriteNotificationInfo(Package,UPSOptionPage);
          END;

          IF "Inbound Return Notification" AND
            PackageLevel
          THEN BEGIN
            WriteData('*GA');
            SegmentCount := SegmentCount + 1;
            WriteData('005');

            IF "Ship Notification Type" = "Ship Notification Type"::Email THEN BEGIN
              WriteData := ('03');
              WriteData(PADSTR("Ship Notification Email",50));
            END ELSE
              WriteData := ('04');

            WriteNotificationInfo(Package,UPSOptionPage);
          END;
        END;

        IF "Call Tag Type" IN
           ["Call Tag Type"::"Exchange Outbound",
            "Call Tag Type"::"Pack and Collect 3 attempt",
            "Call Tag Type"::"Pack and Collect 1 attempt"]
        THEN BEGIN
          IF ("Alert Email" <> '') OR
             ("Alert Phone No." <> '') OR
             ("Alert SMS Text Phone No." <> '')
          THEN BEGIN
            IF "Alert Email" <> ''THEN BEGIN
              WriteData ('*GA');
              SegmentCount := SegmentCount + 1;
              WriteData ('010');
              WriteData('03');
              WriteData(PADSTR("Alert Email",50));
              WriteAlertNotificationInfo(Package,UPSOptionPage,'');
            END;
            IF "Alert Phone No." <> ''THEN BEGIN
              WriteData ('*GA');
              SegmentCount := SegmentCount + 1;
              WriteData ('010');
              WriteData('01');
              WriteData(PADSTR('',50));
              WriteAlertNotificationInfo(Package,UPSOptionPage, '01');
            END;
            IF "Alert SMS Text Phone No." <> ''THEN BEGIN
              WriteData ('*GA');
              SegmentCount := SegmentCount + 1;
              WriteData ('010');
              WriteData('12');
              WriteData(PADSTR('',50));
              WriteAlertNotificationInfo(Package,UPSOptionPage,'12');
            END;
          END;
        END;

        IF (("Delivery In-Transit Notif.") AND
            ("Call Tag Type" <>
             "Call Tag Type"::None) AND
            ("Call Tag Type" <>
             "Call Tag Type"::"Exchange Outbound"))
        THEN BEGIN
          WriteData ('*GA');
          SegmentCount := SegmentCount + 1;
          WriteData ('009');
          WriteData('03');
          WriteData(PADSTR("Delivery Notification Email",50));
          WriteData(PADSTR('',200));
          WriteData(PADSTR('',118));
        END;
      END;
    END;

    LOCAL PROCEDURE DeliveryInfoSegment@19(Package@1240030000 : Record 14000701;UPSOptionPage@1240030001 : Record 14000761);
    BEGIN
      WITH UPSOptionPage DO BEGIN
        WriteData('*GA');
        SegmentCount := SegmentCount + 1;

        WriteData('008');
        WriteData := ('03');
        WriteData(PADSTR("Delivery Notification Email",50));
        WriteData(PADSTR('',5));  // Request Type Language Code and Dialect

        IF "Call Tag Type" = "Call Tag Type"::None THEN
          WriteNotificationSendFrom(Package)
        ELSE
          WriteData(PADSTR('',35));

        WriteData(PADSTR('',250));  // Filler 1 for Fax Request
        WriteData(PADSTR('',28));  // Filler 2 for Fax Request
      END;
    END;

    LOCAL PROCEDURE WriteNotificationInfo@20(Package@1240030000 : Record 14000701;UPSOptionPage@1240030001 : Record 14000761);
    VAR
      FaxDestinationInd@1240030002 : Code[1];
    BEGIN
      WITH UPSOptionPage DO BEGIN
        IF "Exception Notification" OR
           ("Ship Notification Type" = "Ship Notification Type"::Email)
        THEN BEGIN
          WriteData(PADSTR('',5));  // Request Type Language Code and Dialect
          IF "Call Tag Type" = "Call Tag Type"::None THEN
            WriteNotificationSendFrom(Package)
          ELSE
            WriteData(PADSTR('',35));

          WriteData(PADSTR("Reply To Email Address",50));
          WriteData(PADSTR("Failure Email",50));
          WriteData(PADSTR('',101));  // Filler for Fax Request

          CASE "Email Subject" OF
            "Email Subject"::"Ship. Ref. No. 1":
              WriteData('01');
            "Email Subject"::"Ship. Ref. No. 2":
              WriteData('02');
            "Email Subject"::"Pkg. Ref. No. 1":
              WriteData('03');
            "Email Subject"::"Pkg. Ref. No. 2":
              WriteData('04');
            "Email Subject"::"Pkg. Ref. No. 3":
              WriteData('05');
            "Email Subject"::"Pkg. Ref. No. 4":
              WriteData('06');
            "Email Subject"::"Pkg. Ref. No. 5":
              WriteData('07');
            ELSE
              WriteData(PADSTR('',2));
          END;

          WriteData(PADSTR('',75));  // Filler for Subject Text
        END ELSE BEGIN
          WriteData(PADSTR('',55));  // Filler for Email Request, Language Code, Dialect
          IF "Call Tag Type" = "Call Tag Type"::None THEN
            WriteNotificationSendFrom(Package)
          ELSE
            WriteData(PADSTR('',35));

          WriteData(PADSTR('',100));  // Filler for Reply to Email, Failure Email
          FaxDestinationInd := GetUPSFaxDestination(Package."Ship-to Country Code");
          WriteData(FaxDestinationInd);

          IF "Ship Notification Fax No." = '' THEN
            WriteData(PADSTR(FixPhoneNo(Package."Ship-to Fax No.",FaxDestinationInd),15))
          ELSE
            WriteData(PADSTR(FixPhoneNo("Ship Notification Fax No.",FaxDestinationInd),15));

          WriteData(PADSTR(StripInvalidChar(Package."Ship-to Name"),35));  // Receiver's to Company Name
          IF "Ship Notification Attn Name" <> '' THEN
            WriteData(PADSTR(StripInvalidChar("Ship Notification Attn Name"),35))
          ELSE
            WriteData(PADSTR(StripInvalidChar(Package."Ship-to Contact"),35));

          IF "Ship Notification Phone" <> '' THEN
            WriteData(PADSTR(FixPhoneNo("Ship Notification Phone",FaxDestinationInd),15))
          ELSE
            WriteData(PADSTR(FixPhoneNo(Package."Ship-to Phone No.",FaxDestinationInd),15));

          WriteData(PADSTR('',2));  // Filler for Subject Code
          WriteData(PADSTR('',75));  // Filler for Subject Text
        END;
      END;
    END;

    LOCAL PROCEDURE WriteNotificationSendFrom@21(Package@1240030000 : Record 14000701);
    BEGIN
      IF Package."Blind Shipment" OR Package."Double Blind Shipment" THEN
        WriteData(PADSTR(StripInvalidChar(Package."Blind Ship-from Name"),35))
      ELSE
        WriteData(PADSTR(StripInvalidChar(PackingStation."Ship-from Company"),35));
    END;

    LOCAL PROCEDURE FreeFormTextSegment@22(Package@1240030000 : Record 14000701;UPSOptionPage@1240030001 : Record 14000761;PackageLevel@1240030002 : Boolean);
    VAR
      ShippingCommentLine@1240030003 : Record 14000706;
      DataText@1240030004 : Text[250];
      DataText2@1240020000 : Text[550];
      i@1240030005 : Integer;
      EndofComment@1240030006 : Boolean;
    BEGIN
      WITH UPSOptionPage DO BEGIN
        IF NOT PackageLevel THEN BEGIN
          IF ("Ship Notification Memo" <> '') AND
             ("UPS Advisory Info. Level" = "UPS Advisory Info. Level"::Shipment)
          THEN BEGIN
            WriteData('*NA');
            SegmentCount := SegmentCount + 1;
            WriteData('001');
            WriteData(PADSTR(StripInvalidChar("Ship Notification Memo"),150));
          END;

          IF Package."World Wide Service" OR
             Package."UPS Canadian Service" OR
             Package."UPS Puerto Rico Service"
          THEN BEGIN
            IF ("UPS Advisory Info. Level" = "UPS Advisory Info. Level"::Shipment) AND
               ("Special Instructions" <> '')
            THEN BEGIN
              WriteData('*NA');
              SegmentCount := SegmentCount + 1;
              WriteData('003');
              WriteData(PADSTR(StripInvalidChar("Special Instructions"),69));
            END;

            ShippingCommentLine.RESET;
            ShippingCommentLine.SETRANGE("Table ID",DATABASE::Package);
            ShippingCommentLine.SETRANGE(Code,Package."No.");
            ShippingCommentLine.SETRANGE("Shipment Declaration",TRUE);

            IF ShippingCommentLine.FIND('-') THEN BEGIN
              i := 1;
              EndofComment := FALSE;

              REPEAT
                DataText2 := ShippingCommentLine.Comment;
                IF ShippingCommentLine.NEXT <> 0 THEN BEGIN
                  DataText2 :=  DataText2 + ' ' + ShippingCommentLine.Comment;
                  IF ShippingCommentLine.NEXT <> 0 THEN BEGIN
                    DataText2 :=  DataText2 + ' ' + ShippingCommentLine.Comment;
                    IF ShippingCommentLine.NEXT = 0 THEN
                      EndofComment := TRUE;
                  END ELSE
                    EndofComment := TRUE;
                END ELSE
                  EndofComment := TRUE;

                WriteData2('*NA');
                SegmentCount := SegmentCount + 1;
                WriteData2('007');
                WriteData2(PADSTR(StripInvalidChar(DataText2),550));
              UNTIL EndofComment;
            END;

            ShippingCommentLine.SETRANGE("Shipment Declaration");
            ShippingCommentLine.SETRANGE("Shipment Comment",TRUE);

            IF ShippingCommentLine.FIND('-') THEN BEGIN
              i := 1;
              EndofComment := FALSE;

              REPEAT
                DataText := ShippingCommentLine.Comment;
                IF ShippingCommentLine.NEXT <> 0 THEN BEGIN
                  DataText :=  DataText + ' ' + ShippingCommentLine.Comment;
                  IF ShippingCommentLine.NEXT <> 0 THEN BEGIN
                    DataText :=  DataText + ' ' + ShippingCommentLine.Comment;
                    IF ShippingCommentLine.NEXT = 0 THEN
                      EndofComment := TRUE;
                  END ELSE
                    EndofComment := TRUE;
                END ELSE
                  EndofComment := TRUE;

                WriteData('*NA');
                SegmentCount := SegmentCount + 1;
                WriteData('005');
                WriteData(PADSTR(StripInvalidChar(DataText),250));
                WriteData(PADSTR('',50));
              UNTIL EndofComment;
            END;

            IF (UPSOptionPage."UPS Packaging Type" <>
                UPSOptionPage."UPS Packaging Type"::"UPS Letter")
            THEN BEGIN
              WriteData2('*NA');
              SegmentCount := SegmentCount + 1;
              WriteData2('007');

              WriteData2(
                PADSTR(
                  'These commodities, technology or software were exported from the United States ' +
                  'in accordance with the Export Administration Regulations.  Diversion contrary to ' +
                  'U.S. law prohibited.',550));
            END;

            // Destination Control
            IF (UPSOptionPage."UPS Packaging Type" <>
                UPSOptionPage."UPS Packaging Type"::"UPS Letter") AND
               (UPSOptionPage."International Routing" <>
                UPSOptionPage."International Routing"::"Nondutiable Document")
            THEN BEGIN
              WriteData('*NA');
              SegmentCount := SegmentCount + 1;
              WriteData('006');

              WriteData(
                PADSTR(
                    'I hereby declare that the information on this invoice is true and ' +
                    'correct. I hereby authorize UPS to execute any additional documents as ' +
                    'may be necessary for the export of the goods described herein.',200));
            END;
          END;
        END ELSE BEGIN
          // Package Level
          IF ("Ship Notification Memo" <> '') AND
             ("UPS Advisory Info. Level" = "UPS Advisory Info. Level"::Package)
          THEN BEGIN
            WriteData('*NA');
            SegmentCount := SegmentCount + 1;
            WriteData('001');
            WriteData(PADSTR(StripInvalidChar("Ship Notification Memo"),150));
          END;

          IF Package."World Wide Service" OR
             Package."UPS Canadian Service" OR
             Package."UPS Puerto Rico Service"
          THEN BEGIN
            IF ("UPS Advisory Info. Level" = "UPS Advisory Info. Level"::Package) AND
               ("Special Instructions" <> '')
            THEN BEGIN
              WriteData('*NA');
              SegmentCount := SegmentCount + 1;
              WriteData('002');
              WriteData(PADSTR(StripInvalidChar("Special Instructions"),69));
            END;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE StandardInternationalSegment@23(Package@1240030001 : Record 14000701;UPSOptionPage@1240030002 : Record 14000761);
    BEGIN
      WITH UPSOptionPage DO BEGIN
        WriteData('*IA');
        SegmentCount := SegmentCount + 1;
        WriteData(PADSTR(DELCHR("Waybill No."),11));

        IF NOT Package."UPS Puerto Rico Service" THEN
          WriteData('1')
        ELSE
          WriteData(' ');

        WriteData(PADSTR(StripInvalidChar(Package.Description),50));
        WriteData(PADSTR(DELCHR("World Ease GCCN"),11));  // Global Consolid. Clearance No.
        WriteData(PADSTR('',3));  // Broker Code

        IF "Commodity Origin" = '' THEN
          WriteData('US')
        ELSE
          WriteData(PADSTR("Commodity Origin",2));

        IF (UPSOptionPage."UPS Packaging Type" = UPSOptionPage."UPS Packaging Type"::"UPS Letter") OR
           (UPSOptionPage."World Ease")
        THEN
          WriteData(PADSTR('',5))
        ELSE
          CASE "Certificate of Origin" OF
            "Certificate of Origin"::"NAFTA Included":
              WriteData('NAFTA');
            "Certificate of Origin"::"Non-NAFTA Included","Certificate of Origin"::"UPS Prepare":
              WriteData('T1   ');
            ELSE
              WriteData(PADSTR('',5));
        END;
      END;
    END;

    LOCAL PROCEDURE CommodityInfoSegment@24(Package@1240030000 : Record 14000701;UPSOptionPage@1240030013 : Record 14000761;ExportDoc@1240030015 : Record 14000981;VAR SendSED@1240030004 : Boolean;VAR TotalPrice@1240030016 : Decimal;VAR TotalShipping@1240030021 : Decimal;VAR TotalInsurance@1240030022 : Decimal;VAR TotalDiscount@1240030023 : Decimal;VAR TotalOther@1240030024 : Decimal);
    VAR
      SourceLineSummaryTmp@1240030001 : TEMPORARY Record 14000983;
      AmountText@1240030014 : Text[30];
      PackagesPerCommodity@1240030007 : Integer;
      ExportDocSetup@1240030008 : Record 14000991;
      Item@1240030011 : Record 27;
    BEGIN
      ExportDocSetup.GET;

      IF ExportDoc.AESITNRequired OR
         (ExportDoc."ITN No." <> '') OR
         UPSOptionPage."SED Required"
      THEN
        SendSED := TRUE;

      TotalPrice :=
        ExportDoc.TotalForType(2) + ExportDoc.TotalForType(3);  // Item + Resource

      TotalOther :=
        ExportDoc.TotalForType(0) + ExportDoc.TotalForType(1);  // " " + "Account (G/L)"

      TotalInsurance :=
        TotalInsurance + ExportDoc.TotalForType(6);  // "Adj. Ins. Charge"

      TotalShipping :=
        TotalShipping +
        ExportDoc.TotalForType(4) + ExportDoc.TotalForType(6);  //  "Adj. Shipping Charge" + "Adj. Ins.

      IF NOT ExportDoc."Export Rpts. Excl. Pkg. Disc." THEN
        TotalDiscount :=  TotalDiscount + ExportDoc.TotalForType(5);  // "Adj. Discount"

      IF ExportDocSetup."Comm. Invoice Detail Summary" =
         ExportDocSetup."Comm. Invoice Detail Summary"::"By Item No."
      THEN BEGIN
        ExportDoc.ItemSummaryByItem(SourceLineSummaryTmp,FALSE);
        ExportDoc.ItemResourceSummaryByScheduleB(SourceLineSummaryTmp,TRUE,TRUE);
        SourceLineSummaryTmp.RESET;
        SourceLineSummaryTmp.SETCURRENTKEY(
          "Export Document No.",Type,"No.","Country of Origin ISO 2 Char");
      END ELSE BEGIN
        ExportDoc.ItemResourceSummaryByScheduleB(SourceLineSummaryTmp,FALSE,FALSE);
        SourceLineSummaryTmp.RESET;
        SourceLineSummaryTmp.SETCURRENTKEY(
          "Export Document No.","Schedule B Code",Description,"Country of Origin ISO 2 Char",
          "Source Unit of Measure (Base)");
      END;

      IF SourceLineSummaryTmp.FIND('-') THEN BEGIN
        REPEAT
          WriteData('*KA');
          SegmentCount := SegmentCount + 1;
          WriteData(PADSTR(SourceLineSummaryTmp."Schedule B Code",35));

          IF SourceLineSummaryTmp.Type = SourceLineSummaryTmp.Type::Item THEN
            WriteData(PADSTR(SourceLineSummaryTmp."No.",35))
          ELSE
            WriteData(PADSTR('',35));  // Part Number

          WriteData(PADSTR('',3));  // Invoice Line Number
          WriteData(PADSTR(SourceLineSummaryTmp."Country of Origin ISO 2 Char",2));

          WriteData('USD');

          AmountText := Decimal2Text(ROUND(SourceLineSummaryTmp."Value USD",0.01) * 100,0);
          WriteData('+' + PADSTR('',18 - STRLEN(AmountText),'0') + AmountText);  // Line Extended Amount

          SourceLineSummaryTmp.TESTFIELD("Source Quantity");
          AmountText :=
            Decimal2Text(ROUND(SourceLineSummaryTmp."Value USD" /
            SourceLineSummaryTmp."Source Quantity",0.000001) * 1000000,0);
          WriteData(
            '+' + PADSTR('',18 - STRLEN(AmountText),'0') + AmountText);  // Line Unit Amount Price

          AmountText := Decimal2Text(ROUND(SourceLineSummaryTmp."Source Quantity",1,'>'),0);
          WriteData(PADSTR('',7 - STRLEN(AmountText),'0') + AmountText);  // Line Qty

          IF Package."UPS Canadian Service" AND
             (SourceLineSummaryTmp."Source Unit of Measure" = 'EA')
          THEN
            WriteData('NMB')
          ELSE
            IF SourceLineSummaryTmp."Source Unit of Measure" IN
               ['BA','BE','BG','BH','BOX','BT','BU','BX','CI','CM','CON','CR','CS','CT',
                'CY','DOZ','EA','EN','FT','KG','KGS','LB','LBS','L','M','NMB','PA','PAL',
                'PC','PCS','PF','PK','PKG','PR','PRS','RL','SET','SME','SYD','TU','YD']
            THEN
              WriteData(PADSTR(SourceLineSummaryTmp."Source Unit of Measure",3))
            ELSE
              WriteData('PCS');

          IF (UPSOptionPageTmp."Export Declaration" IN
              [UPSOptionPageTmp."Export Declaration"::Included,
               UPSOptionPageTmp."Export Declaration"::"UPS Prepare"])
          THEN BEGIN
            IF (PackingStation."Export License No." <> '') AND
               ((PackingStation."Export License Expiration Date" = 0D) OR
                (PackingStation."Export License Expiration Date" >= WORKDATE))
            THEN BEGIN
              WriteData(PADSTR(PackingStation."Export License No.",35));
              WriteData(PADSTR(Date2Text(PackingStation."Export License Expiration Date"),8));
            END ELSE
              IF PackingStation."Export License Exception" <> '' THEN BEGIN
                WriteData(PADSTR(StripInvalidChar(PackingStation."Export License Exception"),35));
                WriteData(PADSTR('',8));
              END ELSE
                WriteData(PADSTR('',43));
          END ELSE
            WriteData(PADSTR('',43));

          IF STRLEN(SourceLineSummaryTmp.Description) > 35 THEN BEGIN
            WriteData(COPYSTR(StripInvalidChar(SourceLineSummaryTmp.Description),1,35));
            WriteData(PADSTR(LeftString(COPYSTR(StripInvalidChar(SourceLineSummaryTmp.Description),36)),35));  // Line Merch Descr 2
          END ELSE BEGIN
            WriteData(PADSTR(StripInvalidChar(SourceLineSummaryTmp.Description),35));
            WriteData(PADSTR('',35));  // Line Merchandise Description 2
          END;

          WriteData(PADSTR('',35));  // Line Merchandise Description 3
          WriteData(PADSTR(SourceLineSummaryTmp."Export Control Class No.",15));

          IF (SourceLineSummaryTmp."Country of Origin ISO 2 Char" = 'US') AND
             UPSOptionPageTmp."Need Certificate of Origin"
          THEN
            WriteData(PADSTR(SourceLineSummaryTmp."No.",10))
          ELSE
            WriteData(PADSTR('',10));
          WriteData(PADSTR('',10));  // Line Trade Agreement Type);

          IF (UPSOptionPageTmp."Export Declaration" IN
              [UPSOptionPageTmp."Export Declaration"::Included,
               UPSOptionPageTmp."Export Declaration"::"UPS Prepare"])
          THEN BEGIN
            WriteData(PADSTR(SourceLineSummaryTmp."Schedule B Unit of Measure 1",3));

            IF SourceLineSummaryTmp."Schedule B Unit of Measure 1" = 'X' THEN
              WriteData(PADSTR('',10))  // Quantity Schedule B Units 1
            ELSE BEGIN
              AmountText := Decimal2Text(ROUND(SourceLineSummaryTmp."Schedule B Quantity 1",1,'>'),0);
              WriteData(PADSTR('',10 - STRLEN(AmountText),'0') + AmountText);
            END;

            IF SourceLineSummaryTmp."Schedule B Unit of Measure 2" = '' THEN
               SourceLineSummaryTmp."Schedule B Unit of Measure 2" := 'X';
            WriteData(PADSTR(SourceLineSummaryTmp."Schedule B Unit of Measure 2",3));

            IF SourceLineSummaryTmp."Schedule B Unit of Measure 2" = 'X' THEN
              WriteData(PADSTR('',10))  // Quantity Schedule B Units 2
            ELSE BEGIN
              AmountText := Decimal2Text(ROUND(SourceLineSummaryTmp."Schedule B Quantity 2",1,'>'),0);
              WriteData(PADSTR('',10 - STRLEN(AmountText),'0') + AmountText);
            END;

            WriteData(PADSTR(SourceLineSummaryTmp."Schedule B Code",10))
          END ELSE BEGIN
            WriteData(PADSTR('',3));
            WriteData(PADSTR('',10));
            WriteData(PADSTR('',3));
            WriteData(PADSTR('',10));
            WriteData(PADSTR('',10));
          END;

          AmountText := Decimal2Text(ROUND(SourceLineSummaryTmp."Weight (KGS)",0.1,'>') * 10,0);
          WriteData('+' + PADSTR('',6 - STRLEN(AmountText),'0') + AmountText);  // Commodity Weight

          IF ExportDocSetup."Comm. Invoice Detail Summary" =
             ExportDocSetup."Comm. Invoice Detail Summary"::"By Item No."
          THEN
            PackagesPerCommodity :=
              ExportDoc.TotalPackagesForCommodity(
                SourceLineSummaryTmp.Type,SourceLineSummaryTmp."No.",'','',
                SourceLineSummaryTmp."Country of Origin Code",'','')
          ELSE
            PackagesPerCommodity :=
              ExportDoc.TotalPackagesForCommodity(
                -1,'',SourceLineSummaryTmp."Schedule B Code",SourceLineSummaryTmp.Description,
                SourceLineSummaryTmp."Country of Origin Code",
                SourceLineSummaryTmp."Source Unit of Measure (Base)",'');

          WriteData(Integer2Text(PackagesPerCommodity,3));  // Number of Packages per Commodity

          AmountText := Decimal2Text(ROUND(SourceLineSummaryTmp."Value USD",0.01) * 100,0);
          WriteData('+' + PADSTR('',18 - STRLEN(AmountText),'0') + AmountText);  // SED Line Amt

          IF UPSOptionPageTmp."World Ease" THEN
            UPSOptionPageTmp."Certificate of Origin" := UPSOptionPageTmp."Certificate of Origin"::" ";

          CASE UPSOptionPageTmp."Certificate of Origin" OF
            UPSOptionPageTmp."Certificate of Origin"::" ":
              WriteData(' ');
            UPSOptionPageTmp."Certificate of Origin"::"Non-NAFTA Included":
              IF SourceLineSummaryTmp."Country of Origin ISO 2 Char" = 'US' THEN
                WriteData('1')
              ELSE
                WriteData(' ');
            UPSOptionPageTmp."Certificate of Origin"::"NAFTA Included",
            UPSOptionPageTmp."Certificate of Origin"::"Paperless NAFTA":
              IF SourceLineSummaryTmp."Country of Origin ISO 2 Char" IN ['US','CA','MX'] THEN
                WriteData('2')
              ELSE
                WriteData(' ');
            UPSOptionPageTmp."Certificate of Origin"::"UPS Prepare":
              IF ExportDoc.GetISOCountryCode(ExportDoc."Country of Destination") IN ['CA','MX']
              THEN BEGIN
                IF SourceLineSummaryTmp."Country of Origin ISO 2 Char" IN ['US','CA','MX'] THEN
                  WriteData('2')
                ELSE
                  WriteData(' ');
              END ELSE
                IF SourceLineSummaryTmp."Country of Origin ISO 2 Char" = 'US' THEN
                  WriteData('1')
                ELSE
                  WriteData(' ');
          END;

          IF SourceLineSummaryTmp."Export License Required" OR
             (SourceLineSummaryTmp."Value USD" > ExportDocSetup."AES Commodity Minimum Value")
          THEN
            WriteData('1')
          ELSE
            WriteData(' ');

          WriteData(PADSTR(' ',140));  // Commodity Remarks
          WriteData(PADSTR(' ',35));  // Marks & Numbers
        UNTIL SourceLineSummaryTmp.NEXT = 0;
      END;
    END;

    PROCEDURE CommodityInfoSegment2@1240020001(Package@1240020008 : Record 14000701;UPSOptionPage@1240020007 : Record 14000761;ExportDoc@1240020006 : Record 14000981;VAR SendSED@1240020005 : Boolean;VAR TotalPrice@1240020004 : Decimal;VAR TotalShipping@1240020003 : Decimal;VAR TotalInsurance@1240020002 : Decimal;VAR TotalDiscount@1240020001 : Decimal;VAR TotalOther@1240020000 : Decimal);
    VAR
      SourceLineSummaryTmp@1240020013 : TEMPORARY Record 14000983;
      AmountText@1240020012 : Text[30];
      PackagesPerCommodity@1240020011 : Integer;
      ExportDocSetup@1240020010 : Record 14000991;
      Item@1240020009 : Record 27;
    BEGIN
      ExportDocSetup.GET;

      IF ExportDoc.AESITNRequired OR
         (ExportDoc."ITN No." <> '') OR
         UPSOptionPage."SED Required"
      THEN
        SendSED := TRUE;

      TotalPrice :=
        ExportDoc.TotalForType(2) + ExportDoc.TotalForType(3);  // Item + Resource

      TotalOther :=
        ExportDoc.TotalForType(0) + ExportDoc.TotalForType(1);  // " " + "Account (G/L)"

      TotalInsurance :=
        TotalInsurance + ExportDoc.TotalForType(6);  // "Adj. Ins. Charge"

      TotalShipping :=
        TotalShipping +
        ExportDoc.TotalForType(4) + ExportDoc.TotalForType(6);  //  "Adj. Shipping Charge" + "Adj. Ins.

      IF NOT ExportDoc."Export Rpts. Excl. Pkg. Disc." THEN
        TotalDiscount :=  TotalDiscount + ExportDoc.TotalForType(5);  // "Adj. Discount"

      IF ExportDocSetup."Comm. Invoice Detail Summary" =
         ExportDocSetup."Comm. Invoice Detail Summary"::"By Item No."
      THEN BEGIN
        ExportDoc.ItemSummaryByItem(SourceLineSummaryTmp,FALSE);
        ExportDoc.ItemResourceSummaryByScheduleB(SourceLineSummaryTmp,TRUE,TRUE);
        SourceLineSummaryTmp.RESET;
        SourceLineSummaryTmp.SETCURRENTKEY(
          "Export Document No.",Type,"No.","Country of Origin ISO 2 Char");
      END ELSE BEGIN
        ExportDoc.ItemResourceSummaryByScheduleB(SourceLineSummaryTmp,FALSE,FALSE);
        SourceLineSummaryTmp.RESET;
        SourceLineSummaryTmp.SETCURRENTKEY(
          "Export Document No.","Schedule B Code",Description,"Country of Origin ISO 2 Char",
          "Source Unit of Measure (Base)");
      END;

      IF SourceLineSummaryTmp.FIND('-') THEN BEGIN
        REPEAT
          WriteData('*KC');
          SegmentCount := SegmentCount + 1;
          WriteData(PADSTR(SourceLineSummaryTmp."Schedule B Code",35));

          IF SourceLineSummaryTmp.Type = SourceLineSummaryTmp.Type::Item THEN
            WriteData(PADSTR(SourceLineSummaryTmp."No.",35))
          ELSE
            WriteData(PADSTR('',35));  // Part Number

          WriteData(PADSTR('',3));  // Invoice Line Number
          WriteData(PADSTR(SourceLineSummaryTmp."Country of Origin ISO 2 Char",2));

          WriteData('USD');

          AmountText := Decimal2Text(ROUND(SourceLineSummaryTmp."Value USD",0.01) * 100,0);
          WriteData('+' + PADSTR('',18 - STRLEN(AmountText),'0') + AmountText);  // Line Extended Amount

          SourceLineSummaryTmp.TESTFIELD("Source Quantity");
          AmountText :=
            Decimal2Text(ROUND(SourceLineSummaryTmp."Value USD" /
            SourceLineSummaryTmp."Source Quantity",0.000001) * 1000000,0);
          WriteData(
            '+' + PADSTR('',18 - STRLEN(AmountText),'0') + AmountText);  // Line Unit Amount Price

          AmountText := Decimal2Text(ROUND(SourceLineSummaryTmp."Source Quantity",1,'>'),0);
          WriteData(PADSTR('',7 - STRLEN(AmountText),'0') + AmountText);  // Line Qty

          IF Package."UPS Canadian Service" AND
             (SourceLineSummaryTmp."Source Unit of Measure" = 'EA')
          THEN
            WriteData('NMB')
          ELSE
            IF SourceLineSummaryTmp."Source Unit of Measure" IN
               ['BA','BE','BG','BH','BOX','BT','BU','BX','CI','CM','CON','CR','CS','CT',
                'CY','DOZ','EA','EN','FT','KG','KGS','LB','LBS','L','M','NMB','PA','PAL',
                'PC','PCS','PF','PK','PKG','PR','PRS','RL','SET','SME','SYD','TU','YD']
            THEN
              WriteData(PADSTR(SourceLineSummaryTmp."Source Unit of Measure",3))
            ELSE
              WriteData('PCS');

          IF (UPSOptionPageTmp."Export Declaration" IN
              [UPSOptionPageTmp."Export Declaration"::"AESDirect Pre-Depart",
               UPSOptionPageTmp."Export Declaration"::"UPS Prepare"])
          THEN BEGIN
            IF (PackingStation."Export License No." <> '') AND
               ((PackingStation."Export License Expiration Date" = 0D) OR
                (PackingStation."Export License Expiration Date" >= WORKDATE))
            THEN BEGIN
              WriteData(PADSTR(PackingStation."Export License No.",35));
              WriteData(PADSTR(Date2Text(PackingStation."Export License Expiration Date"),8));
            END ELSE
              IF PackingStation."Export License Exception" <> '' THEN BEGIN
                WriteData(PADSTR(StripInvalidChar(PackingStation."Export License Exception"),35));
                WriteData(PADSTR('',8));
              END ELSE
                WriteData(PADSTR('',43));
          END ELSE
            WriteData(PADSTR('',43));

          IF STRLEN(SourceLineSummaryTmp.Description) > 35 THEN BEGIN
            WriteData(COPYSTR(StripInvalidChar(SourceLineSummaryTmp.Description),1,35));
            WriteData(PADSTR(LeftString(COPYSTR(StripInvalidChar(
              SourceLineSummaryTmp.Description),36)),35));  // Line Merch Descr 2
          END ELSE BEGIN
            WriteData(PADSTR(StripInvalidChar(SourceLineSummaryTmp.Description),35));
            WriteData(PADSTR('',35));  // Line Merchandise Description 2
          END;

          WriteData(PADSTR('',35));  // Line Merchandise Description 3
          WriteData(PADSTR(SourceLineSummaryTmp."Export Control Class No.",15));

          IF (SourceLineSummaryTmp."Country of Origin ISO 2 Char" = 'US') AND
             UPSOptionPageTmp."Need Certificate of Origin"
          THEN
            WriteData(PADSTR(SourceLineSummaryTmp."No.",10))
          ELSE
            WriteData(PADSTR('',10));
          WriteData(PADSTR('',10));  // Line Trade Agreement Type);

          IF (UPSOptionPageTmp."Export Declaration" =
              UPSOptionPageTmp."Export Declaration"::"UPS Prepare") OR
             (PackingStation."Export License No." <> '')
          THEN BEGIN
            WriteData(PADSTR(SourceLineSummaryTmp."Schedule B Unit of Measure 1",3));

            IF SourceLineSummaryTmp."Schedule B Unit of Measure 1" = 'X' THEN
              WriteData(PADSTR('',10))  // Quantity Schedule B Units 1
            ELSE BEGIN
              AmountText := Decimal2Text(ROUND(SourceLineSummaryTmp."Schedule B Quantity 1",1,'>'),0);
              WriteData(PADSTR('',10 - STRLEN(AmountText),'0') + AmountText);
            END;

            IF SourceLineSummaryTmp."Schedule B Unit of Measure 2" = '' THEN
               SourceLineSummaryTmp."Schedule B Unit of Measure 2" := 'X';
            WriteData(PADSTR(SourceLineSummaryTmp."Schedule B Unit of Measure 2",3));

            IF SourceLineSummaryTmp."Schedule B Unit of Measure 2" = 'X' THEN
              WriteData(PADSTR('',10))  // Quantity Schedule B Units 2
            ELSE BEGIN
              AmountText := Decimal2Text(ROUND(SourceLineSummaryTmp."Schedule B Quantity 2",1,'>'),0);
              WriteData(PADSTR('',10 - STRLEN(AmountText),'0') + AmountText);
            END;

            WriteData(PADSTR(SourceLineSummaryTmp."Schedule B Code",10))
          END ELSE BEGIN
            WriteData(PADSTR('',3));
            WriteData(PADSTR('',10));
            WriteData(PADSTR('',3));
            WriteData(PADSTR('',10));
            WriteData(PADSTR('',10));
          END;

          AmountText := Decimal2Text(ROUND(SourceLineSummaryTmp."Weight (KGS)",0.1,'>') * 10,0);
          WriteData('+' + PADSTR('',6 - STRLEN(AmountText),'0') + AmountText);  // Commodity Weight

          IF ExportDocSetup."Comm. Invoice Detail Summary" =
             ExportDocSetup."Comm. Invoice Detail Summary"::"By Item No."
          THEN
            PackagesPerCommodity :=
              ExportDoc.TotalPackagesForCommodity(
                SourceLineSummaryTmp.Type,SourceLineSummaryTmp."No.",'','',
                SourceLineSummaryTmp."Country of Origin Code",'','')
          ELSE
            PackagesPerCommodity :=
              ExportDoc.TotalPackagesForCommodity(
                -1,'',SourceLineSummaryTmp."Schedule B Code",SourceLineSummaryTmp.Description,
                SourceLineSummaryTmp."Country of Origin Code",
                SourceLineSummaryTmp."Source Unit of Measure (Base)",'');

          WriteData(Integer2Text(PackagesPerCommodity,3));  // Number of Packages per Commodity

          AmountText := Decimal2Text(ROUND(SourceLineSummaryTmp."Value USD",0.01) * 100,0);
          WriteData('+' + PADSTR('',18 - STRLEN(AmountText),'0') + AmountText);  // SED Line Amt

          IF NOT(UPSOptionPageTmp."World Ease") THEN BEGIN
            CASE UPSOptionPageTmp."Certificate of Origin" OF
              UPSOptionPageTmp."Certificate of Origin"::" ":
                WriteData(' ');
              UPSOptionPageTmp."Certificate of Origin"::"Non-NAFTA Included":
                IF SourceLineSummaryTmp."Country of Origin ISO 2 Char" = 'US' THEN
                  WriteData('1')
                ELSE
                  WriteData(' ');
              UPSOptionPageTmp."Certificate of Origin"::"NAFTA Included",
              UPSOptionPageTmp."Certificate of Origin"::"Paperless NAFTA":
                IF SourceLineSummaryTmp."Country of Origin ISO 2 Char" IN ['US','CA','MX'] THEN
                  WriteData('2')
                ELSE
                  WriteData(' ');
              UPSOptionPageTmp."Certificate of Origin"::"UPS Prepare":
                IF ExportDoc.GetISOCountryCode(ExportDoc."Country of Destination") IN ['CA','MX']
                THEN BEGIN
                  IF SourceLineSummaryTmp."Country of Origin ISO 2 Char" IN ['US','CA','MX'] THEN
                    WriteData('2')
                  ELSE
                    WriteData(' ');
                END ELSE
                  IF SourceLineSummaryTmp."Country of Origin ISO 2 Char" = 'US' THEN
                    WriteData('1')
                  ELSE
                    WriteData(' ');
              UPSOptionPageTmp."Certificate of Origin"::"Paperless NAFTA":
                WriteData('2');
            END;
          END ELSE
            WriteData(' ');

          IF SourceLineSummaryTmp."Export License Required" OR
             (SourceLineSummaryTmp."Value USD" > ExportDocSetup."AES Commodity Minimum Value")
          THEN
            WriteData('1')
          ELSE
            WriteData(' ');

          WriteData(PADSTR('',140));  // Commodity Remarks
          WriteData(PADSTR('',35));  // Marks & Numbers
          WriteData(FORMAT(SourceLineSummaryTmp."Preference Criteria"));    //PreferenceCriterionCode
          CASE SourceLineSummaryTmp."Producer of Good Indicator" OF     //ProducerofGoodsCode
            SourceLineSummaryTmp."Producer of Good Indicator"::YES:
              WriteData('01');
            SourceLineSummaryTmp."Producer of Good Indicator"::"1":   //NO(1)
              WriteData('02');
            SourceLineSummaryTmp."Producer of Good Indicator"::"2":   //NO(2)
              WriteData('03');
            SourceLineSummaryTmp."Producer of Good Indicator"::"3":   //NO(3)
              WriteData('04');
        ELSE
          WriteData('02');
      END;

          IF SourceLineSummaryTmp."RVC in Net Cost Method" THEN    //NetCostCode
            WriteData('01')  //NC
          ELSE
            WriteData('02'); //NO

          WriteData(PADSTR('',8));     //NetCostRVCBegDate
          WriteData(PADSTR('',8));     //NetCostRVCEndDate
          WriteData('0');    //MultiplesCountriesInd

          IF (UPSOptionPageTmp."Export Declaration" IN
              [UPSOptionPageTmp."Export Declaration"::"AESDirect Pre-Depart",
               UPSOptionPageTmp."Export Declaration"::"UPS Prepare"])
          THEN BEGIN
            IF ExportDoc."Export Information Code" <> '' THEN
              WriteData(PADSTR(COPYSTR(ExportDoc."Export Information Code",1,2),2))
            ELSE
              WriteData(PADSTR('',2)); //exportinformationcode
          END ELSE
            WriteData(PADSTR('',2));   //ExportInformationCode

          WriteData(PADSTR('',11));    //ApprovedCommunityMemberNum
          WriteData(PADSTR('',2));     //DDTCUSMLCategoryCode
          WriteData(PADSTR('',1));     //DDTCEligiblePartyCertificationInd

          IF (UPSOptionPageTmp."Export Declaration" IN
              [UPSOptionPageTmp."Export Declaration"::"AESDirect Pre-Depart",
               UPSOptionPageTmp."Export Declaration"::"UPS Prepare"])
          THEN BEGIN
            IF PackingStation."Export License Type" <> '' THEN
              WriteData(PADSTR(COPYSTR(PackingStation."Export License Type",1,3),3))
            ELSE
              WriteData(PADSTR('',3)); //LicenseType
          END ELSE
            WriteData(PADSTR('',3));   //LicenseType

          WriteData(PADSTR('',10));    //DDTCRegistrationNum
          WriteData(PADSTR('',1));     //ForeignDomesticOriginInd
          WriteData(PADSTR('',7));     //DDTCQuantity
          WriteData(PADSTR('',3));     //DDTCUnitofMeasureCode
          WriteData(PADSTR('',10));    //LicenseLineValue
          WriteData(PADSTR('',1));     //DDTCSignificatnMilitaryEquipmentSMEInd
        UNTIL SourceLineSummaryTmp.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE InternationalInvDetailSegment@25(Package@1240030000 : Record 14000701;UPSOptionPage@1240030001 : Record 14000761;TotalPrice@1240030002 : Decimal;TotalShipping@1240030016 : Decimal;TotalInsurance@1240030017 : Decimal;TotalDiscount@1240030009 : Decimal;TotalOther@1240030010 : Decimal);
    VAR
      ExportDoc@1240030011 : Record 14000981;
      InvoiceTotal@1240030006 : Decimal;
      AmountText@1240030013 : Text[30];
    BEGIN
      WriteData('*LA');
      SegmentCount := SegmentCount + 1;
      ExportDoc.GET(Package."Export Document No.");

      IF (UPSOptionPage."Call Tag Type" = UPSOptionPage."Call Tag Type"::None) OR
         (UPSOptionPage."Call Tag Type" = UPSOptionPage."Call Tag Type"::"Exchange Outbound")
      THEN BEGIN
        ExportDoc.TESTFIELD("Departure Date");
        WriteData(Date2Text(ExportDoc."Departure Date"));
      END ELSE
        WriteData(PADSTR('',8));  // Invoice Date

      TotalPrice :=
        ExportDoc.TotalForType(2) + ExportDoc.TotalForType(3);  // Item + Resource

      IF TotalPrice > 0 THEN BEGIN
        AmountText := Decimal2Text(ROUND(TotalPrice,0.01) * 100,0);
        WriteData('+' + PADSTR('',18 - STRLEN(AmountText),'0') + AmountText);  // Invoice Line Totals
        IF Package."Currency Code" <> '' THEN
          WriteData(PADSTR(Package."Currency Code",3))
        ELSE
          WriteData('USD');
      END ELSE BEGIN
        WriteData('+000000000000000000');
        WriteData('USD');
      END;

      WriteData(PADSTR(ExportDoc."No.",35));  // Invoice No.
      WriteData(PADSTR('',35));  // PO Number

      IF TotalPrice > 0 THEN BEGIN
        AmountText := Decimal2Text(ROUND(TotalPrice,0.01) * 100,0);
        WriteData('+' + PADSTR('',18 - STRLEN(AmountText),'0') + AmountText);
      END ELSE
        WriteData('+000000000000000000');  // Subtotal

      InvoiceTotal := TotalPrice + TotalDiscount + TotalShipping + TotalInsurance + TotalOther;

      IF InvoiceTotal > 0 THEN BEGIN
        AmountText := Decimal2Text(ROUND(InvoiceTotal,0.01) * 100,0);
        WriteData('+' + PADSTR('',18 - STRLEN(AmountText),'0') + AmountText);
      END ELSE
        WriteData('+000000000000000000');

      WriteData(PADSTR('',3));  // Terms of Shipment
      WriteData(PADSTR('',35));  // Payment Terms
      IF UPSOptionPage."Special Instructions" <> '' THEN
        WriteData(PADSTR(COPYSTR(UPSOptionPage."Special Instructions",1,35),35))
      ELSE
        WriteData(PADSTR('Sale',35));  // Reason For Export

      IF TotalShipping > 0 THEN BEGIN
        AmountText := Decimal2Text(ROUND(TotalShipping,0.01) * 100,0);
        WriteData('+' + PADSTR('',18 - STRLEN(AmountText),'0') + AmountText);
      END ELSE
        WriteData('+000000000000000000');  // Freight Charges

      IF TotalInsurance > 0 THEN BEGIN
        AmountText := Decimal2Text(ROUND(TotalInsurance,0.01) * 100,0);
        WriteData('+' + PADSTR('',18 - STRLEN(AmountText),'0') + AmountText);
      END ELSE
        WriteData('+000000000000000000');

      IF TotalDiscount > 0 THEN BEGIN
        AmountText := Decimal2Text(ROUND(TotalDiscount,0.01) * 100,0);
        WriteData('+' + PADSTR('',18 - STRLEN(AmountText),'0') + AmountText);
      END ELSE
        WriteData('+000000000000000000');

      IF TotalOther > 0 THEN BEGIN
        AmountText := Decimal2Text(ROUND(TotalOther,0.01) * 100,0);
        WriteData('+' + PADSTR('',18 - STRLEN(AmountText),'0') + AmountText);
      END ELSE
        WriteData('+000000000000000000');

      IF UPSOptionPage."World Ease" THEN
        UPSOptionPage."Certificate of Origin" := UPSOptionPageTmp."Certificate of Origin"::" ";

      CASE UPSOptionPage."Certificate of Origin" OF
        UPSOptionPage."Certificate of Origin"::" ":
          WriteData(' ');
        UPSOptionPage."Certificate of Origin"::"Non-NAFTA Included":
          WriteData('D');
        UPSOptionPage."Certificate of Origin"::"NAFTA Included":
          WriteData('N');
        UPSOptionPage."Certificate of Origin"::"UPS Prepare":
          WriteData('U');
        ELSE
          WriteData(' ');
      END;
    END;

    LOCAL PROCEDURE SEDSegment@26(Package@1240030000 : Record 14000701;UPSOptionPage@1240030001 : Record 14000761);
    VAR
      ExportDoc@1240030002 : Record 14000981;
    BEGIN
      WITH UPSOptionPage DO BEGIN
        WriteData('*MB');
        SegmentCount := SegmentCount + 1;

        ExportDoc.GET(Package."Export Document No.");
        IF ExportDoc."Alt. Ult. Consignee" THEN
          WriteData(PADSTR(ExportDoc.GetISOCountryCode(ExportDoc."Ult. Consig. Country Code"),2))
        ELSE
          WriteData(PADSTR(ExportDoc.GetISOCountryCode(ExportDoc."Ship-to Country Code"),2));

        //SEDCode
        CASE "Export Declaration" OF
          "Export Declaration"::Included:
            WriteData('D');
          "Export Declaration"::"UPS Prepare":
            WriteData('U');
          "Export Declaration"::Unknown:
            WriteData('Y');
          "Export Declaration"::"AESDirect Pre-Depart":
            WriteData('E');
          "Export Declaration"::"AESDirect Post-Depart":
            WriteData('P');
          ELSE
            IF ExportDoc."ITN No." <> '' THEN
              WriteData('E')
            ELSE
              WriteData(' ');
        END;

        IF ("Export Declaration" = "Export Declaration"::"AESDirect Pre-Depart") OR
           (ExportDoc."ITN No." <> '')
        THEN
          WriteData(PADSTR(ExportDoc."ITN No.",28))
        ELSE
          WriteData(PADSTR('',28));

        IF "Export Declaration" IN
            ["Export Declaration"::Included,"Export Declaration"::"UPS Prepare"]
        THEN BEGIN
          IF ExportDoc."Related Companies" THEN
            WriteData('R')
          ELSE
            WriteData('N');           // Parties to Trans
          WriteData('  ');            // Export Information Code
        END ELSE BEGIN
          WriteData(' ');             // Parties to Trans
          WriteData('  ');            // Export Information Code
        END;

        IF ExportDoc."Routed Transaction" THEN
          WriteData('1')
        ELSE
          WriteData('0');  // Routed Transaction Ind

        CASE ExportDoc."PPI ID Type" OF
          ExportDoc."PPI ID Type"::EIN:
            WriteData('79');
          ExportDoc."PPI ID Type"::SSN:
            WriteData('06');
          ELSE
            WriteData('04');  // Exporter Tax ID Type  - DUNS
        END;

        WriteData('01');          //AcSmtPowerofAttorneyCategorycd
        WriteData(PADSTR('',16)); //AESExemptionLegend

        IF ("Export Declaration" IN
            ["Export Declaration"::"AESDirect Pre-Depart",
             "Export Declaration"::"UPS Prepare",
             "Export Declaration"::Included])
        THEN
          WriteData('O')  //UltimateConsigneeType
        ELSE
          WriteData(PADSTR('',1));  //UltimateConsigneeType

        IF ExportDoc."State of Origin" <> '' THEN
          WriteData(FixState(PackingStation."Ship-from State"))
        ELSE
          WriteData('  '); //USStateofOrigin
        WriteData('70');  //InbondCode
        WriteData(PADSTR('',15)); //InbondNumber
        WriteData(PADSTR('',7));  //FTZIdentifier
      END;
    END;

    LOCAL PROCEDURE PackageLevel@27(Package@1240030000 : Record 14000701;UPSOptionPage@1240030001 : Record 14000761;UPSManifest@1240030002 : Record 14050007;Posted@1240030003 : Boolean);
    BEGIN
      PackageInfoSegment(Package,UPSOptionPage,UPSManifest,Posted);
      ValueAddedPackageLevel(Package,UPSOptionPage);

      ReferenceSegment(Package,UPSOptionPage,TRUE);

      IF ((UPSOptionPage."Call Tag Type" > UPSOptionPage."Call Tag Type"::None) OR
         UPSOptionPage."Ship Notification" OR
         UPSOptionPage."Exception Notification") AND
         (UPSOptionPage."Call Tag Type" < UPSOptionPage."Call Tag Type"::"Exchange Outbound")
      THEN
        NotificationInfoSegment(Package,UPSOptionPage,TRUE);  // Package Level Notification Segment

      IF UPSOptionPage."Delivery Notification" AND
         (UPSOptionPage."Delivery Info. Level" = UPSOptionPage."Delivery Info. Level"::Package)
      THEN
        DeliveryInfoSegment(Package,UPSOptionPage);  // Package Level Delivery Notification Segment
      FreeFormTextSegment(Package,UPSOptionPage,TRUE);
      IF (UPSOptionPage."Dry Ice") AND
         (Package."Service Indicator" <> 'E1') THEN
        QADryIceSegment(Package,UPSOptionPage);

      IF UPSOptionPage."Dangerous Goods" AND
         Package.Closed
      THEN BEGIN
        IF Package."Service Indicator" <> 'E1' THEN
          QAHazMatSegments(Package,UPSOptionPage,Posted);
      END;
    END;

    LOCAL PROCEDURE PackageInfoSegment@28(Package@1240030000 : Record 14000701;UPSOptionPage@1240030001 : Record 14000761;UPSManifest@1240030002 : Record 14050007;Posted@1240030003 : Boolean);
    VAR
      FaxDestinationInd@1240030006 : Code[1];
    BEGIN
      WriteData('*PA');
      SegmentCount := SegmentCount + 1;
      WriteData(PADSTR(Package."External Tracking No.",35));
      IF Package."Service Indicator" = 'E1' THEN
        WriteData('30')
      ELSE IF UPSOptionPage."Call Tag Type" IN
             [UPSOptionPage."Call Tag Type"::"Pack and Collect 1 attempt",
              UPSOptionPage."Call Tag Type"::"Pack and Collect 3 attempt"] THEN
        WriteData('02')
      ELSE
        WriteData(GetPackagingType(UPSOptionPage));

      WriteData(UPSManifest."Package Actual Weight");
      IF UPSOptionPage."Deliver-to Attn Name" <> '' THEN
        WriteData(PADSTR(StripInvalidChar(UPSOptionPage."Deliver-to Attn Name"),35))
      ELSE
        IF UPSOptionPage."Call Tag Type" = UPSOptionPage."Call Tag Type"::None THEN
          WriteData(PADSTR(StripInvalidChar(Package."Ship-to Contact"),35))
        ELSE
          WriteData(PADSTR(StripInvalidChar(PackingStation."Ship-from Contact"),35));

      IF UPSOptionPage."Call Tag Type" = UPSOptionPage."Call Tag Type"::None THEN
        FaxDestinationInd := GetUPSFaxDestination(Package."Ship-to Country Code")
      ELSE
        FaxDestinationInd := GetUPSFaxDestination(PackingStation."Ship-from Country Code");

      IF UPSOptionPage."Deliver-to Attn Phone" <> '' THEN
        WriteData(PADSTR(FixPhoneNo(UPSOptionPage."Deliver-to Attn Phone",FaxDestinationInd),15))
      ELSE
        IF UPSOptionPage."Call Tag Type" = UPSOptionPage."Call Tag Type"::None THEN
          IF Package."Ship-to Phone No." = '' THEN
            WriteData(PADSTR('',15))
          ELSE
            WriteData(PADSTR(FixPhoneNo(Package."Ship-to Phone No.",FaxDestinationInd),15))
        ELSE
          IF PackingStation."Ship-from Phone No." = '' THEN
            WriteData(PADSTR('',15))
          ELSE
            WriteData(PADSTR(FixPhoneNo(PackingStation."Ship-from Phone No.",FaxDestinationInd),15));

      WriteData(PADSTR(StripInvalidChar(Package.Description),35));
      WriteData(PADSTR(UPSManifest."Void Indicator",1));

      WriteData(UPSManifest."Package Published Weight");
      IF (UPSManifest."Package Length" >= UPSManifest."Package Width") AND
         (UPSManifest."Package Length" >= UPSManifest."Package Height")
      THEN BEGIN
        WriteData(UPSManifest."Package Length");
        WriteData(UPSManifest."Package Width");
        WriteData(UPSManifest."Package Height");
      END ELSE
        IF (UPSManifest."Package Height" >= UPSManifest."Package Width") AND
           (UPSManifest."Package Height" >= UPSManifest."Package Length")
        THEN BEGIN
          WriteData(UPSManifest."Package Height");
          WriteData(UPSManifest."Package Width");
          WriteData(UPSManifest."Package Length");
        END ELSE BEGIN
          WriteData(UPSManifest."Package Width");
          WriteData(UPSManifest."Package Length");
          WriteData(UPSManifest."Package Height");
        END;
    END;

    LOCAL PROCEDURE ValueAddedPackageLevel@29(Package@1240030000 : Record 14000701;UPSOptionPage@1240030001 : Record 14000761);
    VAR
      ShippingAgentService@1240020000 : Record 14000708;
      AmountText@1240030002 : Text[30];
      FaxDestinationInd@1240030003 : Code[1];
      Air@1240020001 : Boolean;
    BEGIN
      WITH UPSOptionPage DO BEGIN
        IF "Additional Handling Required" THEN BEGIN
          WriteData('*EA');
          SegmentCount := SegmentCount + 1;
          WriteData('AHC');
        END;

        IF "Hold At Location" THEN BEGIN
          WriteData('*EA');
          SegmentCount := SegmentCount + 1;
          WriteData('HFP');
        END;

        IF "Proactive Response" THEN BEGIN
          WriteData('*EA');
          SegmentCount := SegmentCount + 1;
          WriteData('PAR');
        END;

        IF Refrigeration THEN BEGIN
          WriteData('*EA');
          SegmentCount := SegmentCount + 1;
          WriteData('REF');
        END;
        IF NOT Package."World Wide Service" AND
           NOT Package."UPS Canadian Service" AND
           "Shipper Release"
        THEN BEGIN
          WriteData('*EA');
          SegmentCount := SegmentCount + 1;
          WriteData('SRP');
        END;

        IF "Large Package" THEN BEGIN
          WriteData('*EA');
          SegmentCount := SegmentCount + 1;
          WriteData('LPK');
        END;

        IF NOT Package."World Wide Service" AND
           NOT Package."UPS Canadian Service" AND
           NOT Package."UPS Puerto Rico Service"
        THEN BEGIN
          IF "Delivery Confirmation Type" = "Delivery Confirmation Type"::"Name Date" THEN BEGIN
            WriteData('*EA');
            SegmentCount := SegmentCount + 1;
            WriteData('DAS');
            WriteData(PADSTR('',11));  // DCIS No.
          END;
        END;

        IF ShippingAgentService.GET(Package."Shipping Agent Code",
          Package."Shipping Agent Service",Package."World Wide Service") THEN
          IF ShippingAgentService."Transport Method Type" =
             ShippingAgentService."Transport Method Type"::Air THEN
               Air := TRUE;

        IF "Dry Ice" AND Air AND (Package."Service Indicator" <> 'E1') THEN BEGIN
          WriteData('*EA');
          SegmentCount := SegmentCount + 1;
          WriteData('ICE');
          IF Package."World Wide Service" OR
             Package."UPS Canadian Service" OR
             Package."UPS Puerto Rico Service" OR
             (("Dry Ice Weight" > 2.3) AND
              (NOT "Dry Ice Medical Purpose"))
          THEN
            WriteData('1')  // Audit Required
          ELSE
            WriteData('0');
        END;

        CASE "Insurance Type" OF
          "Insurance Type"::"Declared Value":
            IF Package."Calculation Insured Value" > 1 THEN BEGIN
              IF NOT Package."World Wide Service" AND
                 NOT Package."UPS Canadian Service" AND
                 NOT Package."UPS Puerto Rico Service" THEN
              BEGIN
                WriteData('*EA');
                SegmentCount := SegmentCount + 1;
                IF "Shipper Pays Declared Value" THEN
                  WriteData('DVS')
                ELSE
                  WriteData('EVS');
                AmountText := Decimal2Text(ROUND(Package."Calculation Insured Value",0.01,'>') * 100,0);
                WriteData('+' + PADSTR('',18 - STRLEN(AmountText),'0') + AmountText);
                WriteData('USD');
              END;
            END;
          "Insurance Type"::"Expanded Parcel":
            BEGIN
              WriteData('*EA');
              SegmentCount := SegmentCount + 1;
              WriteData('EPI');
              AmountText := Decimal2Text(ROUND(Package."Calculation Insured Value",0.01,'>') * 100,0);
              WriteData('+' + PADSTR('',18 - STRLEN(AmountText),'0') + AmountText);
              WriteData('USD');
            END;
          "Insurance Type"::"Flexible Parcel":
            BEGIN
              WriteData('*EA');
              SegmentCount := SegmentCount + 1;
              WriteData('BPI');
              AmountText := Decimal2Text(ROUND(Package."Calculation Insured Value",0.01,'>') * 100,0);
              WriteData('+' + PADSTR('',18 - STRLEN(AmountText),'0') + AmountText);
              WriteData('USD');
            END;
          "Insurance Type"::"Time in Transit":
            BEGIN
              WriteData('*EA');
              SegmentCount := SegmentCount + 1;
              WriteData('TNT');
              AmountText := Decimal2Text(ROUND(Package."Calculation Insured Value",0.01,'>') * 100,0);
              WriteData('+' + PADSTR('',18 - STRLEN(AmountText),'0') + AmountText);
              WriteData('USD');
            END;
        END;

        IF NOT Package."World Wide Service" AND
           NOT Package."UPS Canadian Service" AND
           Package.COD
        THEN BEGIN
          WriteData('*EA');
          SegmentCount := SegmentCount + 1;
          WriteData('CDI');

          IF Package."COD Cashiers Check" THEN
            WriteData('08')
          ELSE
            WriteData('09');

          AmountText := Decimal2Text(ROUND(Package."COD Amount",0.01,'>') * 100,0);
          WriteData('+' + PADSTR('',18 - STRLEN(AmountText),'0') + AmountText);
          WriteData('USD');
        END;

        IF "Verbal Confirm. of Delivery" THEN BEGIN
          WriteData('*EA');
          SegmentCount := SegmentCount + 1;
          WriteData('VCD');

          IF "Deliver-to Attn Name" <> '' THEN
            WriteData(PADSTR(StripInvalidChar("Deliver-to Attn Name"),35))
          ELSE
            WriteData(PADSTR(StripInvalidChar(Package."Ship-to Contact"),35));

          FaxDestinationInd := GetUPSFaxDestination(Package."Ship-to Country Code");
          WriteData(FaxDestinationInd);

          IF "Deliver-to Attn Phone" <> '' THEN
            WriteData(PADSTR(FixPhoneNo("Deliver-to Attn Phone",FaxDestinationInd),15))
          ELSE
            WriteData(PADSTR(FixPhoneNo(Package."Ship-to Phone No.",FaxDestinationInd),15));
        END;

        IF NOT Package."World Wide Service" AND
           NOT Package."UPS Canadian Service"
        THEN
          CASE "Delivery Confirmation Type" OF
            "Delivery Confirmation Type"::"Adult Signature":
              BEGIN
                WriteData('*EA');
                SegmentCount := SegmentCount + 1;
                WriteData('ADS');
              END;
            "Delivery Confirmation Type"::"Signature Date":
              BEGIN
                WriteData('*EA');
                SegmentCount := SegmentCount + 1;
                WriteData('DCS');
              END;
          END;
      END;
    END;

    LOCAL PROCEDURE InternationalSpecCommSegment@30();
    VAR
      i@1240030000 : Integer;
      ISCTypeArray@1240030001 : ARRAY [20] OF ' ,Seeds,Perishables,Tobacco,Plants,Alcoholic Beverages,Biological Substance,Special Exceptions';
    BEGIN
      IF PackageLineTmp.FIND('-') THEN
        REPEAT
          IF PackageLineTmp."UPS ISC Type" <> PackageLineTmp."UPS ISC Type"::" " THEN BEGIN
            i := 0;
            REPEAT
              i := i + 1;
            UNTIL (ISCTypeArray[i] = PackageLineTmp."UPS ISC Type"::" ") OR
                  (ISCTypeArray[i] = PackageLineTmp."UPS ISC Type");

            IF ISCTypeArray[i] = PackageLineTmp."UPS ISC Type"::" " THEN
              ISCTypeArray[i] := PackageLineTmp."UPS ISC Type";
          END;
        UNTIL PackageLineTmp.NEXT = 0;

      i := 0;

      REPEAT
        i := i + 1;
        IF ISCTypeArray[i] <> 0 THEN BEGIN
          WriteData('*QA');
          SegmentCount := SegmentCount + 1;
          WriteData('ISC');
          CASE ISCTypeArray[i] OF
            1:
              WriteData('032');  // Seeds
            2:
              WriteData('033');  // Perishables
            3:
              WriteData('034');  // Tobacco
            4:
              WriteData('035');  // Plants
            5:
              WriteData('036');  // Alcoholic Beverages
            6:
              WriteData('037');  // Biological Substance
            7:
              WriteData('038');  // Special Exceptions
          END;
        END;
      UNTIL (ISCTypeArray[i] = 0) OR (i = ARRAYLEN(ISCTypeArray));
    END;

    LOCAL PROCEDURE ShipmentFooterSegment@31();
    BEGIN
      WriteData('*SA');
      SegmentCount := SegmentCount + 1;
      WriteData(Integer2Text(SegmentCount,6));
    END;

    LOCAL PROCEDURE PostDataport@32(UPSManifest@1240030000 : Record 14050007);
    VAR
      UPSManifest2@1240030001 : Record 14050007;
    BEGIN
      UPSManifest2.RESET;
      UPSManifest2.SETCURRENTKEY("Manifest No.","Shipper Account Number");
      UPSManifest2.SETRANGE("Manifest No.",UPSManifest."Manifest No.");
      UPSManifest2.SETRANGE("Shipper Account Number",UPSManifest."Shipper Account Number");

      IF UPSManifest2.FIND('-') THEN
        REPEAT
          UPSManifest2."Text File Created" := TRUE;
          UPSManifest2."Text File Name" := ManifestFile.NAME;
          UPSManifest2."Export Count" := UPSManifest."Export Count" + 1;
          UPSManifest2.MODIFY;
        UNTIL UPSManifest2.NEXT = 0;
      ManifestFile.CLOSE;
    END;

    LOCAL PROCEDURE CreateManifestFile@33(UPSManifest@1240030000 : Record 14050007;VAR UploadFileName@1240030002 : Text[250]);
    VAR
      FileSequence@1240030001 : Text[30];
    BEGIN
      CarrierPackingStation.TESTFIELD("UPS Manifest Upload Directory");
      UploadFileName :=
        DELCHR(
          STRSUBSTNO(
            'UPS-%1-%2-%3-%4',
            ShippingAgentAccount."Account No.",UPSManifest."Manifest No.",WORKDATE,TIME),
          '=','/:.;');

      IF UPSManifest."World Ease Master No." <> '' THEN
        UploadFileName :=
          DELCHR(
            STRSUBSTNO(
              'UPS-%1-%2-%3-%4-%5',
              ShippingAgentAccount."Account No.",UPSManifest."Manifest No.",
              UPSManifest."World Ease Master No.",WORKDATE,TIME),
            '=','/:.;');

      IF COPYSTR(
           CarrierPackingStation."UPS Manifest Upload Directory",
           STRLEN(CarrierPackingStation."UPS Manifest Upload Directory"),1) = '\'
      THEN
        UploadFileName := CarrierPackingStation."UPS Manifest Upload Directory" + UploadFileName
      ELSE
        UploadFileName := CarrierPackingStation."UPS Manifest Upload Directory" + '\' + UploadFileName;

      FileSequence := '1';
      IF EXISTS(UploadFileName + '.txt') THEN BEGIN
        REPEAT
          FileSequence := INCSTR(FileSequence);
        UNTIL NOT EXISTS(UploadFileName + '-' + FileSequence + '.txt');
        UploadFileName := UploadFileName + '-' + FileSequence + '.txt';
      END ELSE
        UploadFileName := UploadFileName + '.txt';

      ManifestFile.WRITEMODE(TRUE);
      ManifestFile.CREATE(UploadFileName);
    END;

    LOCAL PROCEDURE WriteData@34(DataText@1240030000 : Text[250]);
    VAR
      I@1240030001 : Integer;
      WriteChar@1240030002 : Char;
    BEGIN
      FOR I := 1 TO STRLEN(DataText) DO BEGIN
        WriteChar := DataText[I];
        ManifestFile.WRITE(WriteChar);
      END;
    END;

    PROCEDURE WriteData2@1240020000(DataText2@1240020002 : Text[550]);
    VAR
      I@1240020001 : Integer;
      WriteChar@1240020000 : Char;
    BEGIN
      FOR I := 1 TO STRLEN(DataText2) DO BEGIN
        WriteChar := DataText2[I];
        ManifestFile.WRITE(WriteChar);
      END;
    END;

    LOCAL PROCEDURE GetShipmentTotals@35(UPSManifest@1240030000 : Record 14050007;VAR TotalShipping@1240030002 : Decimal;VAR TotalInsurance@1240030003 : Decimal;VAR TotalDiscount@1240030011 : Decimal;VAR TotalPackages@1240030001 : Integer;VAR TotalPackagesInclVoids@1240030006 : Integer;VAR TotalWeight@1240030007 : Decimal;VAR TotalDimWeight@1240030008 : Decimal;VAR TotalCODAmount@1240030017 : Decimal;VAR TotalInsuredValue@1240030023 : Decimal;VAR TotalAHCPackages@1240030004 : Integer);
    VAR
      UPSManifest2@1240030005 : Record 14050007;
      Package@1240030021 : Record 14000701;
      PostedPackage@1240030020 : Record 14000704;
      UPSOptionPage@1240030024 : Record 14000761;
      UPSPostedOptionPage@1240030025 : Record 14000762;
      TempDec@1240030009 : Decimal;
      TempInt@1240030010 : Integer;
      Length@1240030014 : Integer;
      Width@1240030013 : Integer;
      Height@1240030012 : Integer;
      Posted@1240030022 : Boolean;
    BEGIN
      TotalShipping := 0;
      TotalInsurance := 0;
      TotalDiscount := 0;

      TotalPackages := 0;
      TotalPackagesInclVoids := 0;
      TotalWeight := 0;
      TotalDimWeight := 0;
      TotalCODAmount := 0;
      TotalInsuredValue := 0;
      TotalAHCPackages := 0;

      PackageTmp.RESET;
      PackageTmp.DELETEALL;
      UPSOptionPageTmp.RESET;
      UPSOptionPageTmp.DELETEALL;
      PackageLineTmp.RESET;
      PackageLineTmp.DELETEALL;

      UPSManifest2.RESET;
      UPSManifest2.SETCURRENTKEY("Shipment Number","Manifest No.","Shipper Account Number");
      UPSManifest2.SETRANGE("Shipment Number",UPSManifest."Shipment Number");
      UPSManifest2.SETRANGE("Manifest No.",UPSManifest."Manifest No.");
      UPSManifest2.SETRANGE("Shipper Account Number",UPSManifest."Shipper Account Number");

      IF UPSManifest2.FIND('-') THEN
        REPEAT
          TotalPackagesInclVoids := TotalPackagesInclVoids + 1;
          IF UPSManifest2."Void Indicator" = '' THEN
            TotalPackages := TotalPackages + 1;

          IF UPSManifest2."Package Length" <> '' THEN
            EVALUATE(
              Length,
              COPYSTR(UPSManifest2."Package Length",2,STRLEN(UPSManifest2."Package Length") - 3))
          ELSE
            Length := 0;

          IF UPSManifest2."Package Width" <> '' THEN
            EVALUATE(
              Width,COPYSTR(UPSManifest2."Package Width",2,STRLEN(UPSManifest2."Package Width") - 3))
          ELSE
            Width := 0;

          IF UPSManifest2."Package Height" <> '' THEN
            EVALUATE(
              Height,
              COPYSTR(UPSManifest2."Package Height",2,STRLEN(UPSManifest2."Package Height") - 3))
          ELSE
            Height := 0;

          EVALUATE(TempInt,DELCHR(UPSManifest2."Package Published Weight",'=','+'));
          TotalDimWeight := TotalDimWeight + TempInt;

          EVALUATE(
            TempInt,
            COPYSTR(
              UPSManifest2."Package Actual Weight",2,STRLEN(UPSManifest2."Package Actual Weight")));
          TotalWeight := TotalWeight + TempInt;
          TempDec := 0;

          IF PostedPackage.GET(UPSManifest2."Package No.") THEN BEGIN
            PackageTmp.TRANSFERFIELDS(PostedPackage);
            PackageTmp.INSERT;

            UPSPostedOptionPage.GET(UPSManifest2."Package No.");
            UPSOptionPageTmp.TRANSFERFIELDS(UPSPostedOptionPage);
            UPSOptionPageTmp.Type := UPSOptionPageTmp.Type::Package;
            UPSOptionPageTmp.INSERT;
            SummarizePackageLineTmp(PostedPackage."No.",TRUE);
          END ELSE BEGIN
            Package.GET(UPSManifest2."Package No.");
            PackageTmp := Package;
            PackageTmp.INSERT;

            UPSOptionPage.GET(UPSOptionPage.Type::Package,UPSManifest2."Package No.");
            UPSOptionPageTmp := UPSOptionPage;
            UPSOptionPageTmp.INSERT;
            SummarizePackageLineTmp(Package."No.",FALSE);
          END;

          IF UPSOptionPageTmp."Additional Handling Required" THEN
            TotalAHCPackages := TotalAHCPackages + 1;

          IF PackageTmp."Shipping Charge" > 0 THEN BEGIN
            TotalShipping :=
              TotalShipping +
              ROUND((PackageTmp."Shipping Charge" - PackageTmp."Insurance Charge"),0.01,'>');
            TotalInsurance := TotalInsurance + ROUND(PackageTmp."Insurance Charge",0.01,'>');
          END;

          TotalDiscount := TotalDiscount + ROUND(PackageTmp."Discount Amount",0.01,'>');
          TotalCODAmount := TotalCODAmount + ROUND(PackageTmp."COD Amount",0.01,'>');
          TotalInsuredValue :=
            TotalInsuredValue + ROUND(PackageTmp."Calculation Insured Value",0.01,'>');
        UNTIL UPSManifest2.NEXT = 0;
    END;

    LOCAL PROCEDURE GetUPSFaxDestination@37(CountryCode@1240030000 : Code[10]) : Code[10];
    VAR
      Country@1240030001 : Record 9;
    BEGIN
      IF CountryCode <> '' THEN BEGIN
        Country.GET(CountryCode);
        IF Country."ISO 2 char Country Code" IN
           ['AG','AI','BB','BM','BS','CA','DM','DO','GD','GU','JM','KN','KY','LC','MP','MS','PR','TC',
            'TT','US','VC','VI','VG']
        THEN
          EXIT('0')
        ELSE
          EXIT('1');
      END ELSE
        EXIT('0');
    END;

    LOCAL PROCEDURE GetPackagingType@38(UPSOptionPage@1240030000 : Record 14000761) : Code[2];
    BEGIN
      WITH UPSOptionPage DO BEGIN
        CASE "UPS Packaging Type" OF
          "UPS Packaging Type"::Unknown:
            EXIT('02');
          "UPS Packaging Type"::"UPS Letter":
            EXIT('01');
          "UPS Packaging Type"::Package:
            EXIT('02');
          "UPS Packaging Type"::"UPS Express Tube":
            EXIT('03');
          "UPS Packaging Type"::"UPS Express Pak":
            EXIT('04');
          "UPS Packaging Type"::None:
            EXIT('02');
          UPSOptionPage."UPS Packaging Type"::Bag:
            EXIT('07');
          UPSOptionPage."UPS Packaging Type"::Barrel:
            EXIT('08');
          UPSOptionPage."UPS Packaging Type"::Bolt:
            EXIT('09');
          UPSOptionPage."UPS Packaging Type"::Bundle:
            EXIT('10');
          UPSOptionPage."UPS Packaging Type"::Can:
            EXIT('11');
          UPSOptionPage."UPS Packaging Type"::Canister:
            EXIT('12');
          UPSOptionPage."UPS Packaging Type"::Coffin:
            EXIT('13');
          UPSOptionPage."UPS Packaging Type"::Crate:
            EXIT('14');
          UPSOptionPage."UPS Packaging Type"::Cylinder:
            EXIT('15');
          UPSOptionPage."UPS Packaging Type"::Drum:
            EXIT('16');
          UPSOptionPage."UPS Packaging Type"::Palletized:
            EXIT('18');
          UPSOptionPage."UPS Packaging Type"::Spool:
            EXIT('19');
          UPSOptionPage."UPS Packaging Type"::Roll:
            EXIT('20');
          UPSOptionPage."UPS Packaging Type"::"UPS Express Box Small":
            EXIT('21');
          UPSOptionPage."UPS Packaging Type"::Envelope:
            EXIT('22');
          UPSOptionPage."UPS Packaging Type"::"Jumbo Box":
            EXIT('02');
          UPSOptionPage."UPS Packaging Type"::"UPS 25kg Box":
            EXIT('24');
          UPSOptionPage."UPS Packaging Type"::"UPS 10kg Box":
            EXIT('25');
          UPSOptionPage."UPS Packaging Type"::"UPS Express Box Medium":
            EXIT('21');
          UPSOptionPage."UPS Packaging Type"::"UPS Express Box Large":
            EXIT('21');
        END;
      END;
    END;

    LOCAL PROCEDURE GetReferenceTypeID@39(ReferenceType@1240030000 : Integer) ReferenceCode : Code[2];
    VAR
      UPSOptionPage@1240030001 : Record 14000761;
    BEGIN
      CASE ReferenceType OF
        UPSOptionPage."Cust. Ref. Type 1"::" ":
          ReferenceCode := '';
        UPSOptionPage."Cust. Ref. Type 1"::"FDA Prod":
          ReferenceCode := '3Q';
        UPSOptionPage."Cust. Ref. Type 1"::"Customer Account":
          ReferenceCode := 'AJ';
        UPSOptionPage."Cust. Ref. Type 1"::"Appropriation No.":
          ReferenceCode := 'AT';
        UPSOptionPage."Cust. Ref. Type 1"::"Bill of Lading":
          ReferenceCode := 'BM';
        UPSOptionPage."Cust. Ref. Type 1"::"Dept No.":
          ReferenceCode := 'DP';
        UPSOptionPage."Cust. Ref. Type 1"::"Employer No.":
          ReferenceCode := 'EI';
        UPSOptionPage."Cust. Ref. Type 1"::"Invoice No.":
          ReferenceCode := 'IK';
        UPSOptionPage."Cust. Ref. Type 1"::"Model No.":
          ReferenceCode := 'MJ';
        UPSOptionPage."Cust. Ref. Type 1"::"Manifest No.":
          ReferenceCode := 'MK';
        UPSOptionPage."Cust. Ref. Type 1"::"Dealer No.":
          ReferenceCode := 'ON';
        UPSOptionPage."Cust. Ref. Type 1"::"Production Code":
          ReferenceCode := 'PC';
        UPSOptionPage."Cust. Ref. Type 1"::"Part No.":
          ReferenceCode := 'PM';
        UPSOptionPage."Cust. Ref. Type 1"::"P.O. No.":
          ReferenceCode := 'PO';
        UPSOptionPage."Cust. Ref. Type 1"::"Purch. Req.":
          ReferenceCode := 'RQ';
        UPSOptionPage."Cust. Ref. Type 1"::Salesperson:
          ReferenceCode := 'SA';
        UPSOptionPage."Cust. Ref. Type 1"::"Serial No.":
          ReferenceCode := 'SE';
        UPSOptionPage."Cust. Ref. Type 1"::"Store No.":
          ReferenceCode := 'ST';
        UPSOptionPage."Cust. Ref. Type 1"::SSN:
          ReferenceCode := 'SY';
        UPSOptionPage."Cust. Ref. Type 1"::"Fed Tax ID":
          ReferenceCode := 'TJ';
        UPSOptionPage."Cust. Ref. Type 1"::"Trans Ref No.":
          ReferenceCode := 'TN';
      END;
    END;

    LOCAL PROCEDURE SummarizePackageLineTmp@42(PackageNo@1240030000 : Code[20];Posted@1240030001 : Boolean);
    VAR
      PackageLine@1240030003 : Record 14000702;
      PostedPackageLine@1240030002 : Record 14000705;
      PackageLine2@1240020000 : Record 14000702;
      PackageLineNo@1240030004 : Integer;
    BEGIN
      IF Posted THEN BEGIN
        PostedPackageLine.RESET;
        PostedPackageLine.SETRANGE("Package No.",PackageNo);
        PostedPackageLine.SETFILTER(Quantity,'<>0');

        IF PostedPackageLine.FIND('-') THEN
          REPEAT
            PackageLineTmp.TRANSFERFIELDS(PostedPackageLine);
            PackageLineNo := PackageLineNo + 1;
            PackageLineTmp."Line No." := PackageLineNo;
            PackageLineTmp.INSERT;
          UNTIL PostedPackageLine.NEXT = 0;
      END ELSE BEGIN
        PackageLine.RESET;
        PackageLine.SETRANGE("Package No.",PackageNo);
        PackageLine.SETFILTER(Quantity,'<>0');

        IF PackageLine.FIND('-') THEN
           REPEAT
            PackageLineTmp.COPY(PackageLine);
            PackageLineNo := PackageLineNo + 1;
            PackageLineTmp."Line No." := PackageLineNo;
            PackageLineTmp.INSERT;
           UNTIL PackageLine.NEXT = 0;

        IF PackageLine.Type = PackageLine.Type::Package THEN BEGIN
          IF PackageLine.Type = PackageLine.Type::Package THEN BEGIN
            PackageLine2.RESET;
            PackageLine2.SETRANGE("Package No.",PackageLine."No.");
            IF PackageLine2.FIND('-') THEN
              REPEAT
                IF (PackageLine2."UPS ISC Type" <> PackageLine2."UPS ISC Type"::" ") THEN BEGIN
                  PackageLineTmp.COPY(PackageLine2);
                  PackageLineNo := PackageLineNo + 1;
                  PackageLineTmp."Line No." := PackageLineNo;
                  PackageLineTmp.INSERT;
                END;
              UNTIL PackageLine2.NEXT = 0;
          END
        END;

      END;
    END;

    LOCAL PROCEDURE GetUPSlinkSetup@44();
    BEGIN
      IF UPSlinkSetup."Primary Account No." = '' THEN
        UPSlinkSetup.GET;
    END;

    LOCAL PROCEDURE FixPhoneNo@45(OriginalPhone@1240030000 : Text[30];FaxDestinationInd@1240030001 : Code[1]) ReturnPhone : Text[30];
    VAR
      PhoneNoText@1240030002 : Text[30];
    BEGIN
      OriginalPhone := StripInvalidChar(OriginalPhone);
      IF STRLEN(OriginalPhone) <> 0 THEN BEGIN
        REPEAT
          IF COPYSTR(OriginalPhone,1,1) IN ['0','1','2','3','4','5','6','7','8','9','0'] THEN
            PhoneNoText := PhoneNoText + COPYSTR(OriginalPhone,1,1);

          IF STRLEN(OriginalPhone) > 1 THEN
            OriginalPhone := COPYSTR(OriginalPhone,2)
          ELSE
            OriginalPhone := '';
        UNTIL STRLEN(OriginalPhone) = 0;

        IF FaxDestinationInd = '0' THEN BEGIN
          IF STRLEN(PhoneNoText) = 11 THEN
            ReturnPhone := PhoneNoText + '    '
          ELSE IF STRLEN(PhoneNoText) = 10 THEN
            ReturnPhone := '1' + PhoneNoText + '    '
          ELSE
            ReturnPhone := '';
        END ELSE
          ReturnPhone := PhoneNoText;
      END ELSE
        ReturnPhone := '';

      ReturnPhone := COPYSTR(ReturnPhone,1,15);
    END;

    LOCAL PROCEDURE FixZIPCode@46(ZIPCodeText@1240030000 : Text[30]) : Text[9];
    BEGIN
      EXIT(COPYSTR(StripInvalidChar(DELCHR(ZIPCodeText,'=',' -')),1,9));
    END;

    LOCAL PROCEDURE FixState@47(StateText@1240030000 : Text[30]) : Text[2];
    BEGIN
      EXIT(COPYSTR(LeftString(StateText),1,2));
    END;

    LOCAL PROCEDURE LeftString@48(TextString@1240030000 : Text[250]) OutText : Text[250];
    BEGIN
      IF STRLEN(TextString) > 0 THEN
        OutText := DELCHR(TextString,'<',' ')
      ELSE
        OutText := '';
    END;

    LOCAL PROCEDURE Date2Text@49(InDate@1240030000 : Date) : Text[30];
    BEGIN
      IF InDate = 0D THEN
        EXIT('')
      ELSE
        EXIT(
          DELCHR(
            FORMAT(
              10000 * DATE2DMY(InDate,3) + 100 * DATE2DMY(InDate,2) + DATE2DMY(InDate,1)),'=',',.'));
    END;

    LOCAL PROCEDURE Decimal2Text@50(CalcDecimal@1240030000 : Decimal;DecimalToShow@1240030001 : Integer) : Text[30];
    VAR
      TempText@1240030002 : Text[30];
      ThousandChar@1240030003 : Text[1];
    BEGIN
      ThousandChar := COPYSTR(FORMAT(1000.1),2,1);
      TempText := FORMAT(CalcDecimal);
      TempText := DELCHR(TempText,'=',ThousandChar);
      TempText := CONVERTSTR(TempText,',','.');

      IF DecimalToShow <> 0 THEN BEGIN
        IF STRPOS(TempText,'.') = 0 THEN
          TempText := TempText + '.000000'
        ELSE
          TempText := TempText + '00000';
        TempText := COPYSTR(TempText,1,STRPOS(TempText,'.') + DecimalToShow);
      END;

      EXIT(TempText);
    END;

    LOCAL PROCEDURE Integer2Text@51(CalcInteger@1240030000 : Integer;FillLen@1240030001 : Integer) TempText : Text[30];
    VAR
      FillText@1240030002 : Text[30];
      ThousandChar@1240030003 : Text[1];
      DataLen@1240030004 : Integer;
    BEGIN
      ThousandChar := COPYSTR(FORMAT(1000.1),2,1);
      TempText := FORMAT(CalcInteger);
      TempText := DELCHR(TempText,'=',ThousandChar);
      TempText := CONVERTSTR(TempText,',','.');
      FillText := PADSTR('',FillLen,'0');
      DataLen := STRLEN(TempText);
      TempText := COPYSTR(FillText,1,FillLen - DataLen) + TempText;
      EXIT(TempText);
    END;

    LOCAL PROCEDURE Decimal2Integer@52(DecimalNumber@1240030000 : Decimal) IntegerNumber : Integer;
    BEGIN
      IntegerNumber := ROUND(DecimalNumber,0.01,'>') * 100;
    END;

    LOCAL PROCEDURE StripInvalidChar@1000000000(InText@1000000001 : Text[250]) OutText : Text[250];
    VAR
      i@1000000000 : Integer;
      Ch@1240020000 : Text[3];
    BEGIN
      OutText := InText;
      FOR i := 1 TO STRLEN(InText) DO
        IF (InText[i] < ' ') OR
           (InText[i] > '~')
        THEN
          OutText := DELCHR(OutText,'=',FORMAT(InText[i]));

      //Remove invisible chars
      Ch[1] := 9; //TAB
      Ch[2] := 10; //LF
      Ch[3] := 13; //CR
      OutText := DELCHR(OutText,'=',Ch);

      OutText := LeftString(OutText);
    END;

    LOCAL PROCEDURE QADryIceSegment@1240030000(Package@1240030003 : Record 14000701;UPSOptionPage@1240030002 : Record 14000761);
    BEGIN
      WriteData('*QA004');
      SegmentCount := SegmentCount + 1;

      IF Package."World Wide Service" OR
         Package."UPS Canadian Service" OR
         Package."UPS Puerto Rico Service"
      THEN
        WriteData(PADSTR('IATA',5))
      ELSE
        WriteData(PADSTR('CFR',5));  // Regulatory Set

      WriteData(PADSTR('',2));  // Optional Field
      WriteData(PADSTR('9',7));  // Hazardous Class/Division REQUIRED
      WriteData(PADSTR('',7));  // Subrisk Class
      WriteData(PADSTR('UN1845',6));  // Hazmat Number for Dry Ice
      WriteData(PADSTR('',16));  // Optional Fields

      WriteData(
        PADSTR(
          Decimal2Text(ShippingSetup.PoundToKilo(UPSOptionPage."Dry Ice Weight"),1),5));  // Qty
      WriteData(PADSTR('KG',10));  // Units

      WriteData(PADSTR('904',4));  // Packing Instructions Code
      WriteData(PADSTR('',55));  // Optional Fields
      WriteData(PADSTR('Dry Ice',150));  // Proper Shipping Name UN1845
      WriteData(PADSTR('',250));  // Optional Fields
      WriteData(PADSTR('',205));  // Optional Fields

      IF Package."World Wide Service" OR
         Package."UPS Canadian Service" OR
         Package."UPS Puerto Rico Service"
      THEN
        WriteData(PADSTR('FIBERBOARD BOX',250))
      ELSE
        WriteData(PADSTR('FIBERBOARD BOX',250));

      WriteData(PADSTR('',5));   // Package Type padding
      WriteData(PADSTR('',50));  // Optional Field
      WriteData(PADSTR('',35));  // Optional Field
      WriteData(PADSTR('',3));   // not required for dry ice
    END;

    LOCAL PROCEDURE QAHazMatSegments@68(VAR CurrentPackage@1240030000 : Record 14000701;UPSOptionPage@1240030001 : Record 14000761;Posted@1240030003 : Boolean);
    VAR
      ReportWorkFileTmp@1240030007 : TEMPORARY Record 14050013;
      HazMatProductClass@1240030008 : Record 14050103;
      UPSTransaction@1240030004 : Codeunit 14050001;
      QtyText@1240030002 : Text[30];
      HazMatManifest@1240030005 : Record 14050014;
      EntryNo@1240030006 : Integer;
    BEGIN
      WITH CurrentPackage DO BEGIN
        IF "Service Indicator" <> 'E1' THEN BEGIN
          IF NOT Posted THEN
            UPSTransaction.HazMatPackageLines(CurrentPackage."No.",ReportWorkFileTmp)
          ELSE
            UPSTransaction.HazMatPostedPackageLines(CurrentPackage."No.",ReportWorkFileTmp);

          IF ReportWorkFileTmp.FIND('-') THEN BEGIN
            HazMatManifest.RESET;
            HazMatManifest.LOCKTABLE;
            IF HazMatManifest.FIND('+') THEN
              EntryNo := HazMatManifest."Entry No." + 1
            ELSE
              EntryNo := 1;
            REPEAT
              HazMatProductClass.GET(ReportWorkFileTmp."Code 1");

              HazMatManifest.INIT;
              HazMatManifest."Entry No." := EntryNo;
              HazMatManifest."Manifest No." := "Manifest No.";
              HazMatManifest."Shipper Account Number" := "Shipping Agent Account No.";
              HazMatManifest."Package Tracking Number" := "External Tracking No.";
              HazMatManifest."Haz. Mat. Product Code" := HazMatProductClass.Code;
              HazMatManifest."Haz. Mat. Quantity" := ROUND(ReportWorkFileTmp."Decimal 1",0.02,'>');

              HazMatManifest."Service Indicator" := "Service Indicator";
              HazMatManifest."Emergency Contact Phone No." :=
                FixPhoneNo(CarrierPackingStation."UPS Haz. Mat. Emergency No.",'0');
              HazMatManifest."Emergency Contact" := CarrierPackingStation."UPS Haz. Mat. Emerg. Contact";
              HazMatManifest.INSERT;
              EntryNo := EntryNo + 1;

              WriteData('*QA');
              SegmentCount := SegmentCount + 1;
              WriteData('004');
              IF ("World Wide Service" OR "UPS Canadian Service") AND
                 ("Service Indicator" <> '11')
              THEN
                WriteData(PADSTR('IATA',5))
              ELSE
                WriteData(PADSTR('CFR',5));  // Regulation Set

              IF ReportWorkFileTmp."Decimal 2" > HazMatProductClass."Reportable Quantity" THEN
                WriteData('RQ')
              ELSE
                WriteData('  ');  // Reportable Quantity;

              WriteData(PADSTR(HazMatProductClass."Hazard Division No.",7));
              WriteData(PADSTR(HazMatProductClass."Subrisk Class",7));
              WriteData(PADSTR(HazMatProductClass."Identification No.",6));

              WriteData(PADSTR('',10));  // ADR Item Number
              WriteData(PADSTR(HazMatProductClass."Packing Group No.",5));
              WriteData(' ');  // ADR Packing Group Letter
              QtyText := Decimal2Text(ReportWorkFileTmp."Decimal 1",0);  // Quantity
              WriteData(PADSTR('',5 - STRLEN(QtyText),'0') + QtyText);
              IF HazMatProductClass."Haz. Mat. Unit of Measure" = '' THEN
                WriteData(PADSTR(PackageLineTmp."Unit of Measure Code",10))
              ELSE
                WriteData(PADSTR(HazMatProductClass."Haz. Mat. Unit of Measure",10));  // Unit of Measure

              WriteData(PADSTR(HazMatProductClass."Packing Instructions Code",4));

              CASE UPSOptionPage."Haz Mat Eligibility" OF
                UPSOptionPage."Haz Mat Eligibility"::"GROUND ONLY":
                  WriteData(PADSTR('Ground',30));  // Transportation Mode
                UPSOptionPage."Haz Mat Eligibility"::"AIR ELIGIBLE":
                  WriteData(PADSTR('Cargo Aircraft Only',30));  // Transportation Mode
              END;

              WriteData(PADSTR(FixPhoneNo(CarrierPackingStation."UPS Haz. Mat. Emergency No.",'0'),25));
              WriteData(PADSTR(StripInvalidChar(HazMatProductClass."Proper Shipping Name"),150));
              WriteData(PADSTR(StripInvalidChar(HazMatProductClass."Technical Name"),200));
              WriteData(PADSTR(StripInvalidChar(HazMatProductClass."Additional Description"),250));
              WriteData(PADSTR('',5));  // Additional Description length is 255
              WriteData(PADSTR(HazMatProductClass."Package Type",250));
              WriteData(PADSTR('',5));  // Package Type length is 255
              WriteData(PADSTR(HazMatProductClass."Labels Required",50));
              WriteData(PADSTR(StripInvalidChar(CarrierPackingStation."UPS Haz. Mat. Emerg. Contact"),35));
              IF "Service Indicator" = 'E1' THEN
                WriteData(Integer2Text(HazMatManifest."Haz. Mat. Quantity",3)) // quantity of the package type
              ELSE
                WriteData(PADSTR('',3));  // quantity of the package type;
            UNTIL ReportWorkFileTmp.NEXT = 0;
          END;
        END;
        IF "Service Indicator" = 'E1' THEN BEGIN
          WriteData('*QA');
          SegmentCount := SegmentCount + 1;
          WriteData('004');
          WriteData(PADSTR('IATA',5));
          WriteData('  ');  // Reportable Quantity;
          WriteData(PADSTR('',7));  //Hazard/Class Division Number
          WriteData(PADSTR('',7));
          WriteData(PADSTR('',6));
          WriteData(PADSTR('',10));  // ADR Item Number
          WriteData(PADSTR('',5));
          WriteData(' ');  // ADR Packing Group Letter
          WriteData(PADSTR('',5));   //Quantity
          WriteData(PADSTR('',10));  //Units
          WriteData(PADSTR('',4));  //Packing Instructions
          WriteData(PADSTR('',30));  // Transportation Mode
          WriteData(PADSTR(FixPhoneNo(CarrierPackingStation."UPS Haz. Mat. Emergency No.",'0'),25));
          WriteData(PADSTR('',150));
          WriteData(PADSTR('',200));
          WriteData(PADSTR('',250));
          WriteData(PADSTR('',5));  // Additional Description length is 255
          WriteData(PADSTR('',250));
          WriteData(PADSTR('',5));  // Package Type length is 255
          WriteData(PADSTR('',50));
          WriteData(PADSTR(StripInvalidChar(CarrierPackingStation."UPS Haz. Mat. Emerg. Contact"),35));
          WriteData(PADSTR('',3));  // quantity of the package type;
        END;
      END;
    END;

    LOCAL PROCEDURE WriteAlertNotificationInfo@1240030001(Package@1240030001 : Record 14000701;UPSOptionPage@1240030000 : Record 14000761;MediaTypeCode@1240030003 : Text[2]);
    VAR
      AlertNotificationPhone@1240030002 : Code[15];
    BEGIN
      WITH UPSOptionPage DO BEGIN
        WriteData(PADSTR('ENG',3));
        WriteData(PADSTR('US',2));
        WriteData(PADSTR('',35));
        WriteData(PADSTR('',50));
        WriteData(PADSTR("Failure Email",50));
        WriteData(PADSTR('',16));  // Filler for Fax Request
        WriteData(PADSTR('',35));
        WriteData(PADSTR('',35));
        CASE MediaTypeCode OF
          '':
            WriteData(PADSTR('',15));
          '01':
            WriteData(PADSTR(FixPhoneNo("Alert Phone No.",AlertNotificationPhone),15));
          '12':
            WriteData(PADSTR(FixPhoneNo("Alert SMS Text Phone No.",AlertNotificationPhone),15));
        END;
        WriteData(PADSTR('',2));  // Filler for Subject Code
        WriteData(PADSTR('',75));  // Filler for Subject Text
      END;
    END;

    PROCEDURE NonPLDRelatedInfoSegment@1240020002();
    BEGIN
      WriteData('*QACDN');
      SegmentCount := SegmentCount + 1;
      WriteData('01'); //UseCode
      WriteData(PADSTR(StripInvalidChar(ShippingAgentAccount."Company Display Name"),35));
    END;

    BEGIN
    END.
  }
}

