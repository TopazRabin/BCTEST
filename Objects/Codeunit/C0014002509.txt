OBJECT Codeunit 14002509 RF PalletContent Bin List
{
  OBJECT-PROPERTIES
  {
    Date=07/17/17;
    Time=12:00:00 PM;
    Version List=RF1.50.09;
  }
  PROPERTIES
  {
    TableNo=7700;
    OnRun=VAR
            MiniformMgmt@1240020000 : Codeunit 7702;
          BEGIN
            MiniformMgmt.Initialize(
              MiniformHeader,Rec,DOMxmlin,ReturnedNode,
              RootNode,XMLDOMMgmt,ADCSCommunication,LoginID,
              CurrentCode,StackCode,WhseEmpId,LocationFilter);

            IF Code <> CurrentCode THEN
              PrepareData
            ELSE
              ProcessSelection;

            CLEAR(DOMxmlin);
          END;

  }
  CODE
  {
    VAR
      MiniformHeader@1240020016 : Record 7700;
      MiniformHeader2@1240020015 : Record 7700;
      XMLDOMMgmt@1240020014 : Codeunit 6224;
      ADCSCommunication@1240020013 : Codeunit 7701;
      ADCSNASStartup@1240020012 : Codeunit 7700;
      DOMxmlin@1240020010 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      ReturnedNode@1240020009 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      RootNode@1240020008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      LoginID@1240020007 : Text[250];
      WhseEmpId@1240020011 : Text[250];
      LocationFilter@1240020006 : Text[250];
      CurrentCode@1240020005 : Text[250];
      PreviousCode@1240020004 : Text[250];
      StackCode@1240020003 : Text[250];
      Remark@1240020002 : Text[250];
      TextValue@1240020021 : Text[250];
      ActiveInputField@1240020001 : Integer;
      RecRef@1240020000 : RecordRef;
      Text000@1240020020 : TextConst 'ENU=Function not Found';
      Text004@1240020019 : TextConst 'ENU=Invalid %1.';
      Text006@1240020018 : TextConst 'ENU=No input Node found';
      Text009@1240020017 : TextConst 'ENU=No Documents found';

    LOCAL PROCEDURE ProcessSelection@8();
    VAR
      Lookup@1000 : Record 14002971;
      FuncGroup@1001 : Record 7702;
      Bin@1002 : Record 7354;
      ReturnedNode2@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      TableNo@1004 : Integer;
      RecordId@1005 : RecordID;
    BEGIN
      IF XMLDOMMgmt.FindNode(RootNode,'Header/Input',ReturnedNode) THEN
        TextValue := ReturnedNode.InnerText
      ELSE
        ERROR(Text006);

      XMLDOMMgmt.FindNode(RootNode,'ExtraInfo',ReturnedNode2);
      Bin.Code := ADCSCommunication.GetNodeAttribute(ReturnedNode2,'BinCode');
      ADCSCommunication.SetExtraValue('BinCode',Bin.Code);

      EVALUATE(TableNo,ADCSCommunication.GetNodeAttribute(ReturnedNode,'TableNo'));
      RecRef.OPEN(TableNo);
      EVALUATE(RecordId,ADCSCommunication.GetNodeAttribute(ReturnedNode,'RecordID'));
      IF RecRef.GET(RecordId) THEN BEGIN
        RecRef.SETTABLE(Lookup);
        Lookup.RESET;
        Lookup.SETFILTER(Location,LocationFilter);
        Lookup.SETRANGE(Bin,Lookup.Bin);
        RecRef.GETTABLE(Lookup);
        ADCSCommunication.SetRecRef(RecRef);
      END ELSE BEGIN
        ADCSCommunication.RunPreviousMiniform(DOMxmlin);
        EXIT;
      END;

      FuncGroup.KeyDef := ADCSCommunication.GetFunctionKey(MiniformHeader.Code,TextValue);
      ActiveInputField := 1;

      CASE FuncGroup.KeyDef OF
        FuncGroup.KeyDef::Esc:
          ADCSCommunication.RunPreviousMiniform(DOMxmlin);
        FuncGroup.KeyDef::First:
          ADCSCommunication.FindRecRef(0,MiniformHeader."No. of Records in List");
        FuncGroup.KeyDef::LnDn:
          IF NOT ADCSCommunication.FindRecRef(1,MiniformHeader."No. of Records in List") THEN
            Remark := Text009;
        FuncGroup.KeyDef::LnUp:
          ADCSCommunication.FindRecRef(2,MiniformHeader."No. of Records in List");
        FuncGroup.KeyDef::Last:
          ADCSCommunication.FindRecRef(3,MiniformHeader."No. of Records in List");
        FuncGroup.KeyDef::PgDn:
          IF NOT ADCSCommunication.FindRecRef(4,MiniformHeader."No. of Records in List") THEN
            Remark := Text009;
        FuncGroup.KeyDef::PgUp:
          ADCSCommunication.FindRecRef(5,MiniformHeader."No. of Records in List");
        FuncGroup.KeyDef::Input:
          BEGIN
            ADCSCommunication.IncreaseStack(DOMxmlin,MiniformHeader.Code);
            ADCSCommunication.GetNextMiniForm(MiniformHeader,MiniformHeader2);
            MiniformHeader2.SaveXMLin(DOMxmlin);
            CODEUNIT.RUN(MiniformHeader2."Handling Codeunit",MiniformHeader2);
          END;
        ELSE
          ERROR(Text000);
      END;

      IF NOT (FuncGroup.KeyDef IN [FuncGroup.KeyDef::Esc,FuncGroup.KeyDef::Input]) THEN
        SendForm(ActiveInputField);
    END;

    LOCAL PROCEDURE PrepareData@4();
    VAR
      Lookup@1000 : Record 14002971;
      RFEmployeeSetup@1240030000 : Record 14002802;
      RFMgt@1240030002 : Codeunit 14002801;
      ReturnedNode2@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      TableNo@1002 : Integer;
      RecordId@1003 : RecordID;
      Bin@1005 : Record 7354;
      BinCode@1240030001 : Code[20];
    BEGIN
      XMLDOMMgmt.FindNode(RootNode,'ExtraInfo',ReturnedNode2);
      Bin.Code := ADCSCommunication.GetNodeAttribute(ReturnedNode2,'BinCode');
      ADCSCommunication.SetExtraValue('BinCode',Bin.Code);

      IF ADCSCommunication.GetNodeAttribute(ReturnedNode2,'FromCard') = '' THEN BEGIN
        IF XMLDOMMgmt.FindNode(RootNode,'Header/Input',ReturnedNode) THEN
          TextValue := ReturnedNode.InnerText
        ELSE
          ERROR(Text006);

        RFEmployeeSetup.GetRFEmployeeSetup(WhseEmpId);
        IF NOT RFMgt.GetBin(TextValue,RFEmployeeSetup,LocationFilter,TRUE,BinCode) THEN
          Remark := STRSUBSTNO(Text004,Lookup.FIELDCAPTION(Bin))
        ELSE
          TextValue := BinCode;

        Lookup.RESET;
        Lookup.SETFILTER(Location,LocationFilter);
        Lookup.SETRANGE("Warehouse Employee Code",WhseEmpId);
        Lookup.SETRANGE(
          Bin,COPYSTR(UPPERCASE(TextValue),1,MAXSTRLEN(Lookup.Bin)));
      END ELSE BEGIN
        XMLDOMMgmt.FindNode(RootNode,'Header/Input',ReturnedNode);
        EVALUATE(TableNo,ADCSCommunication.GetNodeAttribute(ReturnedNode,'TableNo'));
        RecRef.OPEN(TableNo);
        EVALUATE(RecordId,ADCSCommunication.GetNodeAttribute(ReturnedNode,'RecordID'));
        IF RecRef.GET(RecordId) THEN BEGIN
          RecRef.SETTABLE(Lookup);
          Lookup.RESET;
          Lookup.SETRANGE("Warehouse Employee Code",WhseEmpId);
          Lookup.SETRANGE(Location,LocationFilter);
          Lookup.SETRANGE(Bin,Lookup.Bin);
        END ELSE BEGIN
          Lookup.RESET;
          Lookup.SETFILTER(Location,'A&<>A');
        END;
      END;

      IF NOT Lookup.FINDFIRST THEN BEGIN
        IF ADCSCommunication.GetNodeAttribute(ReturnedNode,'RunReturn') = '0' THEN BEGIN
          ADCSNASStartup.SendError(Text009);
          EXIT;
        END;
        ADCSCommunication.DecreaseStack(DOMxmlin,PreviousCode);
        MiniformHeader2.GET(PreviousCode);
        MiniformHeader2.SaveXMLin(DOMxmlin);
        CODEUNIT.RUN(MiniformHeader2."Handling Codeunit",MiniformHeader2);
      END ELSE BEGIN
        RecRef.GETTABLE(Lookup);
        ADCSCommunication.SetRecRef(RecRef);
        ActiveInputField := 1;
        SendForm(ActiveInputField);
      END;
    END;

    LOCAL PROCEDURE SendForm@1(InputField@1000 : Integer);
    BEGIN
      ADCSCommunication.EncodeMiniForm(MiniformHeader,StackCode,DOMxmlin,InputField,Remark,LoginID);
      ADCSCommunication.GetReturnXML(DOMxmlin);
      ADCSNASStartup.SendXMLReply(DOMxmlin);
    END;

    EVENT DOMxmlin@1240020010::NodeInserting@93(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020010::NodeInserted@94(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020010::NodeRemoving@95(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020010::NodeRemoved@96(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020010::NodeChanging@97(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DOMxmlin@1240020010::NodeChanged@98(sender@1240020001 : Variant;e@1240020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    BEGIN
    END.
  }
}

