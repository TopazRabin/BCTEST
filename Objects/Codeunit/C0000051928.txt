OBJECT Codeunit 51928 UAT Test
{
  OBJECT-PROPERTIES
  {
    Date=07/26/21;
    Time=11:21:50 AM;
    Modified=Yes;
    Version List=PS,PRICE;
  }
  PROPERTIES
  {
    OnRun=VAR
            PurchaseLine@1000000000 : Record 39;
            ShippingAccount@1000000001 : Record 14000714;
            WarehouseShipmentLine@1000000002 : Record 7321;
            T5741@1000000003 : Record 5744;
            T50021@1000000004 : Record 50021;
            countervar@1000000005 : Integer;
            CurrRec@1000000006 : Integer;
            window@1000000007 : Dialog;
            Item@1000000008 : Record 27;
            sp@1000000009 : Record 7002;
            T5740@1000000010 : Record 5740;
            T37@1000000011 : Record 37;
            T36@1000000012 : Record 36;
            P23044641@1000000013 : Page 23044641;
          BEGIN
            // P23044641.SetUniShipOrder(TRUE);
            // P23044641.RUNMODAL;
            // P23044641.ReturnSpecialInstructions(ServerFileName);
            // MESSAGE(ServerFileName);
            //ExportPostedInvoice;
            //CheckPostedDshipOrder;
            {T37.SETRANGE("Document Type",T37."Document Type"::Order);
            T37.SETRANGE(Type,T37.Type::"G/L Account");
            T37.SETFILTER("Sell-to Customer No.",'=%1','');
            IF T37.FINDSET THEN
              REPEAT
                T36.GET(T37."Document Type",'SO2112661');
                T37."Sell-to Customer No." := T36."Sell-to Customer No.";
                T37."Shipment Date" := T36."Shipment Date";
                T37.MODIFY;
              UNTIL T37.NEXT = 0;
              }
            // sp.SETRANGE("Modified Date",042221D,050121D);
            // sp.SETRANGE("Sales Type",sp."Sales Type"::Customer);//sp."Sales Type"::"Customer Price Group");
            // IF sp.FINDFIRST THEN
            //  MESSAGE(FORMAT(sp.COUNT));
            // Item.SETRANGE("Last Date Modified",042221D,043021D);
            // IF Item.FINDFIRST THEN
            //  MESSAGE(FORMAT(Item.COUNT));
            //DeleteDuplicateSalesPrice;
            //UpdatePrice; //PVC Increase
            //DeleteDuplicateClose;
            //ExportHotSheet;
            //ExtractSalesPriceBuy2020;
            //ExtractSalesPrice;
            //UpdatePurchaseReceipt;
            //OpenEmail;
            //UpdateItemAttributes;  //Visible in PIM
            //ImportExcelFile;
            UpdateCreatedDateContact;

            {T50021.RESET;
            T50021.SETRANGE("Pricing Logic",T50021."Pricing Logic"::"Hot Sheet");
            IF T50021.FINDFIRST THEN BEGIN
              countervar := T50021.COUNT;
              window.OPEN('Updating...@1@@@@@@@@');
              REPEAT
                CurrRec += 1;
                window.UPDATE(1,(CurrRec/countervar * 10000) DIV 1);
                //T50021.VALIDATE("No.");
                Item.GET(T50021."No.");
                //T50021."Item Category Code" := Item."Item Category Code";
                //T50021."Product Group Code" := Item."Product Group Code";
                T50021."Unit Cost" := Item."Average Unit Cost";
                //-->TPZ2881
                IF (T50021.Quantity <> 0) AND (T50021."Unit Cost" <> 0) AND (T50021."Actual Unit Price" <> 0) THEN BEGIN
                  T50021."Gross Margin %" := ROUND(((T50021.Quantity * T50021."Actual Unit Price") - (T50021.Quantity * T50021."Unit Cost")) * 100 / (T50021.Quantity * T50021."Actual Unit Price"),0.1);
                END ELSE
                  T50021."Gross Margin %" := 0;
                //<--
                T50021.MODIFY;
              UNTIL T50021.NEXT = 0;
            END;
            }
            MESSAGE('Done');
          END;

  }
  CODE
  {
    VAR
      TempExcelBuffer@1000000000 : TEMPORARY Record 370;
      FileMgt@1000000002 : Codeunit 419;
      ServerFileName@1000000001 : Text;
      numvar@1000000003 : Integer;

    LOCAL PROCEDURE UpdatePrice@1000000004();
    VAR
      ExcelBuff@1000000006 : Record 370;
      Window@1000000005 : Dialog;
      ServerFileName@1000000004 : Text;
      SheetName@1000000003 : Text[250];
      RecNo@1000000002 : Integer;
      TotalRecNo@1000000001 : Integer;
      RowNo@1000000000 : Integer;
      FileMgt@1000000007 : Codeunit 419;
      Text51000@1000000010 : TextConst 'ENU=Import Excel File;ESM=Importar fich. Excel;FRC=Importer fichier Excel;ENC=Import Excel File';
      Text51001@1000000009 : TextConst 'ENU=Importing Data...\\;ESM=Analizar Datos...\\;FRC=Analyse des donn‚es...\\;ENC=Analysing Data...\\';
      ExcelExtensionTok@1000000008 : TextConst '@@@={Locked};ENU=.xlsx;ESM=.xlsx;FRC=.xlsx;ENC=.xlsx';
      IntegerRec@1000000011 : Record 2000000026;
      ColText@1000000012 : ARRAY [40] OF Text[250];
      ItemRec@1000000013 : Record 27;
      SalesPrice@1000000014 : Record 7002;
      Itemno@1000000015 : Code[20];
      CPG@1000000016 : Code[20];
      CustNo@1000000017 : Code[20];
      unitprice@1000000018 : Decimal;
    BEGIN
      ServerFileName := FileMgt.UploadFile(Text51000,ExcelExtensionTok);
      IF ServerFileName = '' THEN
        EXIT;

      SheetName := ExcelBuff.SelectSheetsName(ServerFileName);
      IF SheetName = '' THEN
        EXIT;
      ExcelBuff.LOCKTABLE;
      ExcelBuff.OpenBook(ServerFileName,SheetName);
      ExcelBuff.ReadSheet;

      Window.OPEN(Text51000 + '@1@@@@@@@@@@@@@@@@@@@@@@@@@\');
      TotalRecNo := ExcelBuff.COUNT;
      IntegerRec.RESET;
      IntegerRec.SETRANGE(Number,2,TotalRecNo);
      REPEAT
        CLEAR(ColText);
        ExcelBuff.SETRANGE("Row No.",IntegerRec.Number);
        IF ExcelBuff.FIND('-') THEN
          REPEAT
            ColText[ExcelBuff."Column No."] := ExcelBuff."Cell Value as Text";
          UNTIL ExcelBuff.NEXT = 0;
        unitprice := 0;

        //Itemno := ColText[3];
        CPG := ColText[10];  //customer price group
        CustNo := ColText[1]; //Customer

        //-->Customer Price Group
        {
        IF ColText[1] <> '' THEN BEGIN
          EVALUATE(unitprice,ColText[8]);
          IF CPG <> 'CMG' THEN
            UpdateSalesPriceCPG(ColText[1],'',CPG,unitprice);
        END;
        }
        //<--

        //-->Special Price / Customer price
        {
        IF ColText[3] <> '' THEN BEGIN
          EVALUATE(unitprice,ColText[10]);
          UpdateSalesPriceSpecial(Itemno,CustNo,'',unitprice);
        END;
        }
        //<--
        {
        //-->Hotsheet
        IF ColText[1] <> '' THEN BEGIN
          EVALUATE(unitprice,ColText[11]);
          UpdateHotSheetPrice(ColText[12],ColText[1],unitprice,ColText[3]);
        END;
        //<--
        }
        //-->Item Card Unit Price

        IF ColText[3] <> '' THEN BEGIN
          EVALUATE(unitprice,ColText[13]);
          UpdateItemUnitPrice(ColText[3],unitprice);
        END;

        //<--
      UNTIL IntegerRec.NEXT = 0;
      ExcelBuff.DELETEALL;
    END;

    LOCAL PROCEDURE UpdateSalesPriceCPG@1000000000(ItemNo@1000000000 : Code[20];CustNo@1000000001 : Code[20];CPG@1000000002 : Code[20];UnitPrice@1000000004 : Decimal);
    VAR
      SalesPrice@1000000003 : Record 7002;
      TopazSetup@1000000005 : Record 50056;
    BEGIN
      //Update Customer Price Group
      IF ItemNo = '' THEN EXIT;
      SalesPrice.RESET;
      SalesPrice.SETRANGE("Sales Type",SalesPrice."Sales Type"::"Customer Price Group");
      SalesPrice.SETRANGE("Sales Code",CPG);
      SalesPrice.SETRANGE("Item No.",ItemNo);
      IF SalesPrice.FINDLAST THEN BEGIN
        SalesPrice."Unit Price" := UnitPrice;
        //SalesPrice."Starting Date" := TODAY;

        SalesPrice."Modified Date" := TODAY;
        SalesPrice."Modified Time" := TIME;
        SalesPrice.MODIFY(TRUE);
      END ELSE BEGIN
        SalesPrice.INIT;
        SalesPrice."Sales Type" := SalesPrice."Sales Type"::"Customer Price Group";
        SalesPrice.VALIDATE("Sales Code",CPG);
        SalesPrice.VALIDATE("Item No.",ItemNo);
        SalesPrice."Starting Date" := TODAY;
        SalesPrice."Unit Price" := UnitPrice;
        SalesPrice.INSERT(TRUE);
        //-->test record to identify missing entry
        TopazSetup.INIT;
        TopazSetup.Option := CPG;
        TopazSetup."Option Choice" := FORMAT(numvar);
        TopazSetup."DefaultCode 20_1" := ItemNo;
        TopazSetup."DefaultCode 20" := 'SALESPRICG';
        TopazSetup.INSERT;
        numvar += 1;
        //<--
      END;// ELSE UpdateSalesPriceSpecial(ItemNo,CustNo,CPG,UnitPrice);
    END;

    LOCAL PROCEDURE UpdateSalesPriceSpecial@1000000002(ItemNo@1000000000 : Code[20];CustNo@1000000001 : Code[20];CPG@1000000002 : Code[20];UnitPrice@1000000004 : Decimal);
    VAR
      SalesPrice@1000000003 : Record 7002;
      TopazSetup@1000000005 : Record 50056;
    BEGIN
      //Update specia sales price for customer
      IF ItemNo = '' THEN EXIT;
      SalesPrice.RESET;
      SalesPrice.SETRANGE("Sales Type",SalesPrice."Sales Type"::Customer);
      SalesPrice.SETRANGE("Sales Code",CustNo);
      SalesPrice.SETRANGE("Item No.",ItemNo);
      IF SalesPrice.FINDLAST THEN BEGIN
        SalesPrice."Unit Price" := UnitPrice;
        //SalesPrice."Starting Date" := TODAY;
        SalesPrice."Modified Date" := TODAY;
        SalesPrice."Modified Time" := TIME;
        SalesPrice.MODIFY(TRUE);
      END ELSE BEGIN
        SalesPrice.INIT;
        SalesPrice."Sales Type" := SalesPrice."Sales Type"::Customer;
        SalesPrice.VALIDATE("Sales Code",CustNo);
        SalesPrice.VALIDATE("Item No.",ItemNo);
        SalesPrice."Starting Date" := TODAY;
        SalesPrice."Unit Price" := UnitPrice;
        SalesPrice.INSERT(TRUE);
        TopazSetup.INIT;
        TopazSetup.Option := CustNo;
        TopazSetup."Option Choice" := ItemNo;
        TopazSetup."DefaultCode 20" := 'SALESPRICE';
        TopazSetup.INSERT;
      END;
    END;

    LOCAL PROCEDURE UpdateItemUnitPrice@1000000001(ItemNo@1000000003 : Code[20];UnitPrice@1000000000 : Decimal);
    VAR
      ItemRec@1000000001 : Record 27;
      DateFilterCalc@1000000004 : Codeunit 358;
      Now@1000000002 : DateTime;
    BEGIN
      IF ItemNo = '' THEN EXIT;
      IF ItemRec.GET(ItemNo) THEN BEGIN
        ItemRec.VALIDATE("Unit Price" , UnitPrice);
        Now := DateFilterCalc.ConvertToUtcDateTime(CURRENTDATETIME);
        ItemRec."Last Date Modified" := DT2DATE(Now);
        ItemRec."Last Time Modified" := DT2TIME(Now);
        ItemRec.MODIFY;
      END;
    END;

    LOCAL PROCEDURE UpdateHotSheetPrice@1000000003(HotSheetCode@1000000001 : Code[20];ItemNo@1000000000 : Code[20];UnitPrice@1000000002 : Decimal;UOMPara@1000000004 : Code[10]);
    VAR
      HotSheetPrice@1000000003 : Record 50017;
    BEGIN
      IF ItemNo = '' THEN EXIT;
      HotSheetPrice.RESET;
      HotSheetPrice.SETRANGE(Code,HotSheetCode);
      HotSheetPrice.SETRANGE("Item No.",ItemNo);
      //HotSheetPrice.SETRANGE("Unit of Measure Code",UOMPara); //04/28/21 commented as the file has no UOM
      IF HotSheetPrice.FINDFIRST THEN BEGIN
        HotSheetPrice."Unit Price" := UnitPrice;
        HotSheetPrice.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE ExportHotSheet@1000000018();
    VAR
      HotSheetPrice@1000000000 : Record 50017;
      RowNo@1000000001 : Integer;
    BEGIN
      HotSheetPrice.RESET;
      HotSheetPrice.SETRANGE("Last Modified Date",012521D,TODAY); //Date parameter
      //HotSheetPrice.SETFILTER("User ID",'<>%1','TOPAZ\VAHAMAD');
      IF HotSheetPrice.FINDFIRST THEN BEGIN
        EnterCell(1,1,'HOT Sheet Code',TRUE,'',1);
        EnterCell(1,2,'Item No.',TRUE,'',1);
        EnterCell(1,3,'Unit Of Measure Code',TRUE,'',1);
        EnterCell(1,4,'Unit Price',TRUE,'',0);
        RowNo := 2;
        REPEAT
          EnterCell(RowNo,1,HotSheetPrice.Code,FALSE,'@',1);
          EnterCell(RowNo,2,HotSheetPrice."Item No.",FALSE,'@',1);
          EnterCell(RowNo,3,HotSheetPrice."Unit of Measure Code",FALSE,'@',1);
          EnterCell(RowNo,4,FORMAT(HotSheetPrice."Unit Price"),FALSE,'0.00',0);
          RowNo += 1;
        UNTIL HotSheetPrice.NEXT = 0;
      END;
      ExporttoExcel;
    END;

    LOCAL PROCEDURE UpdateCont@1000000005();
    VAR
      ContactFeederEntry@1000000001 : Record 50019;
      Contact@1000000000 : Record 5050;
    BEGIN
      ContactFeederEntry.RESET;
      ContactFeederEntry.SETFILTER("Contact No.",'<>%1','');
      IF ContactFeederEntry.FINDSET THEN REPEAT
        IF Contact.GET(ContactFeederEntry."Contact No.") THEN BEGIN
          IF Contact."E-Mail" = '' THEN BEGIN
            Contact.VALIDATE("E-Mail",ContactFeederEntry."E-Mail Address");
            Contact.MODIFY;
          END;
        END;
      UNTIL ContactFeederEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateBOL@1000000015();
    VAR
      BillofLading@1000000000 : Record 14000822;
      CustFilter@1000000001 : Text;
    BEGIN
      //CustFilter :=
      //'BOL121135|BOL120508|BOL116183|BOL102238|BOL101141|BOL098737|BOL094657|BOL094582|BOL090056|' +
      //                'BOL089486|BOL088756|BOL079392|BOL121135|BOL120508|BOL116183|BOL102238|BOL101141|BOL098737|BOL094657|BOL094582|BOL090056|BOL089486' +
      //'|BOL088756|BOL079392|BOL111275|BOL111256|BOL111128|BOL111011|BOL110357|BOL110198|BOL110158|BOL109992|BOL109947|BOL109640|BOL109460';
      //'BOL109305|BOL109147|BOL109031|BOL108923|BOL108778|BOL108585|BOL108436|BOL108422|BOL108161|BOL107765|BOL107389|BOL106876|BOL106832|BOL106753|BOL106507|BOL106476|BOL106409|BOL106271';
      //'BOL106255|BOL105795|BOL105772|BOL105682|BOL105561|BOL105350|BOL104715|BOL104611|BOL104271|BOL104214|BOL104025|BOL103983' +
      //'|BOL103795|BOL103786|BOL103583|BOL103534|BOL103446|BOL103219|BOL103094|BOL102733|BOL102591|BOL102442|BOL102298|BOL102086|BOL102050|BOL101739'
      //'BOL101603|BOL101546|BOL100971|BOL100904|BOL100889|BOL100683|BOL100491|BOL100343|BOL100026|BOL099923|BOL099853|BOL099796|BOL099689|'
      // + 'BOL111275|BOL111256|BOL111128|BOL111011|BOL110357|BOL110198|BOL110158|BOL109992|BOL109947|BOL109640|BOL109460|BOL109305|BOL109147|'
      //+ 'BOL109031|BOL108923|BOL108778|BOL108585|BOL108436|BOL108422|BOL108161|BOL107765|BOL107389|BOL106876|BOL106832|BOL106753|BOL106507|'
      //+ 'BOL106476|BOL106409|BOL106271|BOL106255|BOL105795|BOL105772|BOL105682|BOL105561|BOL105350|BOL104715|BOL104611|BOL104271|BOL104214|'
      //+ 'BOL104025|BOL103983|BOL103795|BOL103786|BOL103583|BOL103534|BOL103446|BOL103219|BOL103094|BOL102733|BOL102591|BOL102442|BOL102298'
      //'BOL102086|BOL102050|BOL101739|BOL101603|BOL101546|BOL100971|BOL100904|BOL100889|BOL100683|BOL100491|BOL100343|BOL100026|BOL099923|BOL099853|BOL099796|BOL099689|BOL101349'
      // + '|BOL100342|BOL098546|BOL097846|BOL097541|BOL096085|BOL087687|BOL101349|BOL100342|BOL098546|BOL097846|BOL097541|BOL096085|BOL087687';
      //'BOL101349|BOL100342|BOL098546|BOL097846|BOL097541|BOL096085|BOL087687';
      BillofLading.RESET;
      BillofLading.SETFILTER("No.",CustFilter);
      IF BillofLading.FINDSET THEN
        REPEAT
          BillofLading."EDI ASN" := FALSE;
          BillofLading.MODIFY;
        UNTIL BillofLading.NEXT = 0
    END;

    LOCAL PROCEDURE CustPriceBook@1000000014();
    VAR
      CustPriceBook@1000000002 : Report 51014;
      CustRec@1000000001 : Record 18;
      CustFilter@1000000000 : Text[1024];
    BEGIN
      CustFilter :='54083|50714|50788|50483|50347|53276|50976|50049|53727|52050|53325|55357|54162|50077'+
      '|50184|00822|50549|53936|50873|53040|54766|52031|50941|53344|52109|53345|53938|53322|53395|51159|54320|55881|01093|52859|51473|50449|55260|00734|54392|53843|51444|50158|52590|54607|90350|90095|53726|50426|53025';

      CustRec.RESET;
      CustRec.SETFILTER("No.",CustFilter);
      IF CustRec.FINDFIRST THEN
        REPEAT
          CustPriceBook.SetParameters(CustRec."No.");
          CustPriceBook.RUN;
        UNTIL CustRec.NEXT = 0;
      MESSAGE('Exported');
    END;

    PROCEDURE ScalarCalculation@1000000013(VAR ItemTemp@1000000002 : Record 27);
    VAR
      CustomerDivision@1000000000 : Record 50007;
      Item@1000000001 : Record 27;
    BEGIN
      //WHERE(Item Category Code=FILTER(EXIT EMERG|FXT LED|LED),Product Group Code=FILTER(ACCESSORY|COMBO|COMBO NYC|EMERG NYC|EMERGENCY|EXIT|EXIT NYC|ARCHIT-WP|AREA PK-LT|BARN-LIGHT|CANOPY|FLOOD-LT|SECURITY|WALLPACK|DISK-LIGHT|DOWNLIGHT|FLAT PANEL|FLUSH-
      CustomerDivision.RESET;
      CustomerDivision.SETRANGE("Shortcut Dimension 5 Code",'L');
      IF CustomerDivision.FINDFIRST THEN
        REPEAT
          Item.RESET;
          Item.SETFILTER("Item Category Code",'%1|%2|%3','EXIT EMERG','FXT LED','LED');
          Item.SETFILTER("ABC Code",'A|B|C|N&<>CL');
          IF Item.FINDFIRST THEN
            REPEAT
              ItemTemp.INIT;
              ItemTemp.TRANSFERFIELDS(Item);
              IF ItemTemp.INSERT THEN;
            UNTIL Item.NEXT= 0;
        UNTIL CustomerDivision.NEXT = 0
    END;

    LOCAL PROCEDURE ModifyItemAttributes@1000000012();
    VAR
      ItemAttributeValueMapping@1000000000 : Record 7505;
      Item@1000000001 : Record 27;
    BEGIN
      //Item.SETFILTER("Shortcut Dimension 5 Code",'E');
      Item.SETFILTER(Description,'%1','@*,*');
      IF Item.FINDSET THEN
        MESSAGE(FORMAT(Item.COUNT));
        {REPEAT
        IF ItemAttributeValueMapping.GET('27',Item."No.",'1') THEN
          ItemAttributeValueMapping.DELETE;
      UNTIL Item.NEXT = 0;
      }
    END;

    LOCAL PROCEDURE UpdateCustomerLocation@1000000011();
    VAR
      CustomerDivision@1000000000 : Record 50007;
      ShiptoAddressDivision@1000000001 : Record 51002;
    BEGIN
      //ShiptoAddressDivision.SETFILTER("Location Code",'76');
      //ShiptoAddressDivision.MODIFYALL("Location Code",'80');

      //CustomerDivision.SETFILTER("Location Code",'76');
      //CustomerDivision.MODIFYALL("Location Code",'80');

      ShiptoAddressDivision.SETFILTER("Location Code",'1');
      ShiptoAddressDivision.SETFILTER("Shipping Agent Code",'LOCAL');
      ShiptoAddressDivision.MODIFYALL("Location Code",'80');

      CustomerDivision.SETFILTER("Location Code",'1');
      CustomerDivision.SETFILTER("Shipping Agent Code",'LOCAL');
      CustomerDivision.MODIFYALL("Location Code",'80');
    END;

    LOCAL PROCEDURE SendInv@1000000009();
    VAR
      SalesInvoiceHeader@1000000000 : Record 112;
      InvoiceNotificationHandling@1000000005 : Codeunit 50043;
    BEGIN
      SalesInvoiceHeader.SETRANGE("No.",'2007744','2009937');
      SalesInvoiceHeader.SETRANGE("E-Mail Invoice Notice Handled",FALSE);
      //IF SalesInvoiceHeader."E-Mail Invoice Notice Handled" = FALSE THEN
      IF SalesInvoiceHeader.FINDFIRST THEN
        REPEAT
        //IF SalesInvoiceHeader."E-Mail Invoice Notice Handled" = FALSE THEN
          CLEAR(InvoiceNotificationHandling);
          InvoiceNotificationHandling.GlobalTPZ_SendNotifications(SalesInvoiceHeader."No.");
          //MESSAGE(SalesInvoiceHeader."No.");
        UNTIL SalesInvoiceHeader.NEXT = 0;
        MESSAGE('Done');
    END;

    LOCAL PROCEDURE UpdateMfrReptoCLE@1000000008();
    VAR
      SalesInvoiceHeader@1000000000 : Record 112;
      CustLedgerEntry@1000000001 : Record 21;
      CountVar@1000000002 : Integer;
    BEGIN
      SalesInvoiceHeader.SETRANGE("Posting Date",080120D,100520D);
      IF SalesInvoiceHeader.FINDFIRST THEN
        REPEAT
          CustLedgerEntry.RESET;
          CustLedgerEntry.SETRANGE("Document Type",CustLedgerEntry."Document Type"::Invoice);
          CustLedgerEntry.SETRANGE("Document No.",SalesInvoiceHeader."No.");
          IF CustLedgerEntry.FINDFIRST THEN BEGIN
            CustLedgerEntry.MODIFYALL("Mfr. Rep. Code",SalesInvoiceHeader."Mfr. Rep. Code");
            CountVar += 1;
          END;
        UNTIL SalesInvoiceHeader.NEXT = 0;

      MESSAGE('Done'+FORMAT(CountVar));
    END;

    LOCAL PROCEDURE UpdateDim@1000000007();
    VAR
      CLE@1000000000 : Record 21;
      GLE@1000000001 : Record 17;
      DCLE@1000000002 : Record 379;
      R114@1000000003 : Record 114;
    BEGIN
      IF CLE.GET(41091369) THEN BEGIN
        CLE."Shortcut Dimension 5 Code" := 'E';
        CLE."Dimension Set ID" := 1326;
        CLE.MODIFY;
      END;
      IF GLE.GET(41091369) THEN BEGIN
        GLE."Shortcut Dimension 5 Code":= 'E';
        GLE."Dimension Set ID" := 1326;
        GLE.MODIFY;
      END;
      IF DCLE.GET(2873555)THEN BEGIN
        DCLE."Shortcut Dimension 5 Code" := 'E';
        DCLE.MODIFY;
      END;
      IF R114.GET('SCM1092890') THEN BEGIN
        R114."Dimension Set ID" := 1326;
        R114.MODIFY;
      END;
    END;

    LOCAL PROCEDURE ExporttoExcel@1000000006();
    BEGIN
      TempExcelBuffer.CreateBook('' ,'Data');
      TempExcelBuffer.WriteSheet('',COMPANYNAME,USERID);
      TempExcelBuffer.CloseBook;
      TempExcelBuffer.OpenExcel;
      TempExcelBuffer.GiveUserControl;
    END;

    LOCAL PROCEDURE EnterCell@2(RowNo@1000 : Integer;ColumnNo@1001 : Integer;CellValue@1002 : Text[250];Bold@1003 : Boolean;Format@1006 : Text[30];CellType@1007 : Option);
    BEGIN
      TempExcelBuffer.INIT;
      TempExcelBuffer.VALIDATE("Row No.",RowNo);
      TempExcelBuffer.VALIDATE("Column No.",ColumnNo);
      TempExcelBuffer."Cell Value as Text" := CellValue;
      TempExcelBuffer.Formula := '';
      TempExcelBuffer.Bold := Bold;
      // TempExcelBuffer.Italic := Italic;
      // IF DoubleUnderLine = TRUE THEN BEGIN
      //  TempExcelBuffer."Double Underline" := TRUE;
      //  TempExcelBuffer.Underline := FALSE;
      // END ELSE BEGIN
      //  TempExcelBuffer."Double Underline" := FALSE;
      //  TempExcelBuffer.Underline := UnderLine;
      // END;
      TempExcelBuffer.NumberFormat := Format;
      TempExcelBuffer."Cell Type" := CellType;
      TempExcelBuffer.INSERT;
    END;

    LOCAL PROCEDURE Slotting@1000000010();
    VAR
      RegisteredWhseActivityLine@1000000000 : Record 5773;
      RegisteredWhseActivityHdr@1000000001 : Record 5772;
      SH@1000000002 : Record 36;
      SHA@1000000003 : Record 5107;
      RowNo@1000000004 : Integer;
      ColNo@1000000005 : Integer;
      bin@1000000006 : Record 7354;
      TempSL@1000000007 : TEMPORARY Record 37;
      numVar@1000000008 : Integer;
      TempSL1@1000000009 : TEMPORARY Record 37;
      Anum@1000000010 : Integer;
      Bnum@1000000011 : Integer;
      Cnum@1000000012 : Integer;
      Dnum@1000000013 : Integer;
      Enum@1000000014 : Integer;
      Fnum@1000000015 : Integer;
      Gnum@1000000016 : Integer;
      Hnum@1000000017 : Integer;
      LevelVar@1000000018 : Code[2];
      TNum@1000000019 : Integer;
    BEGIN
      RegisteredWhseActivityHdr.RESET;
      RegisteredWhseActivityHdr.SETRANGE(Type,RegisteredWhseActivityHdr.Type::Pick);
      RegisteredWhseActivityHdr.SETRANGE("Registering Date",081820D);//,110520D);//08/18/20..11/05/20
      IF RegisteredWhseActivityHdr.FINDFIRST THEN BEGIN
        RowNo := 1; ColNo := 1; numVar := 1;
        {EnterCell(RowNo,ColNo,'Level',TRUE,'',1); ColNo += 1;
        EnterCell(RowNo,ColNo,'Picks',TRUE,'',1); ColNo += 1;
        EnterCell(RowNo,ColNo,' ',TRUE,'',1); ColNo += 1;
        EnterCell(RowNo,ColNo,'A&B',TRUE,'',1); ColNo += 1;
        EnterCell(RowNo,ColNo,' ',TRUE,'',1); ColNo += 1;
        EnterCell(RowNo,ColNo,'Row',TRUE,'',1); ColNo += 1;
        EnterCell(RowNo,ColNo,'Picks',TRUE,'',1); ColNo += 1;
        EnterCell(RowNo,ColNo,' ',TRUE,'',1); ColNo += 1;
        EnterCell(RowNo,ColNo,'1 thu 10 ',TRUE,'',1); ColNo += 1;}
        REPEAT
          RowNo +=1;
          RegisteredWhseActivityLine.RESET;
          RegisteredWhseActivityLine.SETRANGE("No.",RegisteredWhseActivityHdr."No.");
          RegisteredWhseActivityLine.SETRANGE("Action Type",RegisteredWhseActivityLine."Action Type"::Take);
          RegisteredWhseActivityLine.SETRANGE("Location Code",'25');
          IF RegisteredWhseActivityLine.FINDFIRST THEN
            REPEAT
              IF SH.GET(SH."Document Type"::Order,RegisteredWhseActivityLine."Source No.") AND (SH."Shipping Agent Code" = 'UPS') THEN BEGIN
                TempSL.RESET;
                TempSL.SETRANGE("No.",RegisteredWhseActivityHdr."No.");
                IF NOT TempSL.FINDFIRST THEN BEGIN
                TempSL.INIT;
                TempSL."Document Type" := TempSL."Document Type"::Quote;
                TempSL."Document No." := 'SLOTTINGREPORT';// + '-'+ FORMAT(numVar);
                TempSL."Shortcut Dimension 1 Code" := SH."No.";
                TempSL."Line No." := numVar;
                IF STRPOS(RegisteredWhseActivityLine."Bin Code",'A') > 0 THEN BEGIN
                  TempSL."Sell-to Customer No." := 'A';
                  TempSL.Quantity := RegisteredWhseActivityLine.Quantity;
                END ELSE IF STRPOS(RegisteredWhseActivityLine."Bin Code",'B') > 0 THEN BEGIN
                  TempSL."Sell-to Customer No." := 'B';
                  TempSL.Quantity := RegisteredWhseActivityLine.Quantity;
                END ELSE IF STRPOS(RegisteredWhseActivityLine."Bin Code",'C') > 0 THEN BEGIN
                  TempSL."Sell-to Customer No." := 'C';
                  TempSL.Quantity := RegisteredWhseActivityLine.Quantity;
                END ELSE IF STRPOS(RegisteredWhseActivityLine."Bin Code",'D') > 0 THEN BEGIN
                  TempSL."Sell-to Customer No." := 'D';
                  TempSL.Quantity := RegisteredWhseActivityLine.Quantity;
                END ELSE IF STRPOS(RegisteredWhseActivityLine."Bin Code",'E') > 0 THEN BEGIN
                  TempSL."Sell-to Customer No." := 'E' ;
                  TempSL.Quantity := RegisteredWhseActivityLine.Quantity;
                END ELSE IF STRPOS(RegisteredWhseActivityLine."Bin Code",'F') > 0 THEN BEGIN
                  TempSL."Sell-to Customer No." := 'F';
                  TempSL.Quantity := RegisteredWhseActivityLine.Quantity;
                END ELSE IF STRPOS(RegisteredWhseActivityLine."Bin Code",'G') > 0 THEN BEGIN
                  TempSL."Sell-to Customer No." := 'G';
                  TempSL.Quantity := RegisteredWhseActivityLine.Quantity;
                END ELSE IF STRPOS(RegisteredWhseActivityLine."Bin Code",'H') > 0 THEN BEGIN
                  TempSL."Sell-to Customer No." := 'H';
                  TempSL.Quantity := RegisteredWhseActivityLine.Quantity;
                END;
                TempSL.Description := FORMAT(numVar);
                numVar += 1;
                TempSL."Shipment Date" := RegisteredWhseActivityHdr."Registering Date";
                TempSL."No." := RegisteredWhseActivityHdr."No.";
                TempSL."Bin Code" := RegisteredWhseActivityHdr."Whse. Activity No.";
                TempSL."Job No." := RegisteredWhseActivityLine."Bin Code";
                TempSL.INSERT;
                //EnterCell(RowNo,ColNo,,TRUE,'',1); ColNo += 1;
                END;
              END ELSE BEGIN
                SHA.RESET;
                SHA.SETRANGE("No.",RegisteredWhseActivityLine."Source No.");
                SHA.SETRANGE("Shipping Agent Code",'UPS');
                IF SHA.FINDFIRST THEN BEGIN
                  TempSL.RESET;
                  TempSL.SETRANGE("No.",RegisteredWhseActivityHdr."No.");
                  IF NOT TempSL.FINDFIRST THEN BEGIN
                  TempSL.INIT;
                  TempSL."Document Type" := TempSL."Document Type"::Quote;
                  TempSL."Document No." := 'SLOTTINGREPORT';// + '-'+ FORMAT(numVar);
                  TempSL."Shortcut Dimension 1 Code" := SH."No.";
                  TempSL."Line No." := numVar;
                  IF STRPOS(RegisteredWhseActivityLine."Bin Code",'A') > 0 THEN BEGIN
                    TempSL."Sell-to Customer No." := 'A';
                    TempSL.Quantity := RegisteredWhseActivityLine.Quantity;
                  END ELSE IF STRPOS(RegisteredWhseActivityLine."Bin Code",'B') > 0 THEN BEGIN
                    TempSL."Sell-to Customer No." := 'B';
                    TempSL.Quantity := RegisteredWhseActivityLine.Quantity;
                  END ELSE IF STRPOS(RegisteredWhseActivityLine."Bin Code",'C') > 0 THEN BEGIN
                    TempSL."Sell-to Customer No." := 'C';
                    TempSL.Quantity := RegisteredWhseActivityLine.Quantity;
                  END ELSE IF STRPOS(RegisteredWhseActivityLine."Bin Code",'D') > 0 THEN BEGIN
                    TempSL."Sell-to Customer No." := 'D';
                    TempSL.Quantity := RegisteredWhseActivityLine.Quantity;
                  END ELSE IF STRPOS(RegisteredWhseActivityLine."Bin Code",'E') > 0 THEN BEGIN
                    TempSL."Sell-to Customer No." := 'E' ;
                    TempSL.Quantity := RegisteredWhseActivityLine.Quantity;
                  END ELSE IF STRPOS(RegisteredWhseActivityLine."Bin Code",'F') > 0 THEN BEGIN
                    TempSL."Sell-to Customer No." := 'F';
                    TempSL.Quantity := RegisteredWhseActivityLine.Quantity;
                  END ELSE IF STRPOS(RegisteredWhseActivityLine."Bin Code",'G') > 0 THEN BEGIN
                    TempSL."Sell-to Customer No." := 'G';
                    TempSL.Quantity := RegisteredWhseActivityLine.Quantity;
                  END ELSE IF STRPOS(RegisteredWhseActivityLine."Bin Code",'H') > 0 THEN BEGIN
                    TempSL."Sell-to Customer No." := 'H';
                    TempSL.Quantity := RegisteredWhseActivityLine.Quantity;
                  END;
                  TempSL.Description := FORMAT(numVar);
                  numVar += 1;
                  TempSL."Shipment Date" := RegisteredWhseActivityHdr."Registering Date";
                  TempSL."No." := RegisteredWhseActivityHdr."No.";
                  TempSL."Bin Code" := RegisteredWhseActivityHdr."Whse. Activity No.";
                  TempSL."Job No." := RegisteredWhseActivityLine."Bin Code";
                  TempSL.INSERT;
                  END;
                END;
              END;
            UNTIL RegisteredWhseActivityLine.NEXT = 0;

        UNTIL RegisteredWhseActivityHdr.NEXT = 0;

        numVar := 1; Anum := 0;
        TempSL.RESET;
        IF TempSL.FINDFIRST THEN
          TNum := TempSL.COUNT;
        TempSL.RESET;
        TempSL.SETRANGE("Sell-to Customer No.",'A');
        IF TempSL.FINDFIRST THEN
          Anum := TempSL.COUNT;
        TempSL.RESET;
        TempSL.SETRANGE("Sell-to Customer No.",'B');
        IF TempSL.FINDFIRST THEN
          Bnum := TempSL.COUNT;
        TempSL.RESET;
        TempSL.SETRANGE("Sell-to Customer No.",'C');
        IF TempSL.FINDFIRST THEN
          Cnum := TempSL.COUNT;
        TempSL.RESET;
        TempSL.SETRANGE("Sell-to Customer No.",'D');
        IF TempSL.FINDFIRST THEN
          Dnum := TempSL.COUNT;
        TempSL.RESET;
        TempSL.SETRANGE("Sell-to Customer No.",'E');
        IF TempSL.FINDFIRST THEN
          Enum := TempSL.COUNT;
        TempSL.RESET;
        TempSL.SETRANGE("Sell-to Customer No.",'F');
        IF TempSL.FINDFIRST THEN
          Fnum := TempSL.COUNT;
        TempSL.RESET;
        TempSL.SETRANGE("Sell-to Customer No.",'G');
        IF TempSL.FINDFIRST THEN
          Gnum := TempSL.COUNT;
        TempSL.RESET;
        TempSL.SETRANGE("Sell-to Customer No.",'H');
        IF TempSL.FINDFIRST THEN
          Hnum := TempSL.COUNT;
      TempSL.RESET;
      IF TempSL.FINDFIRST THEN
        REPEAT
          IF numVar = 1 THEN BEGIN
            TempSL."Sell-to Customer No." := 'A';
            TempSL."Work Type Code" := FORMAT(Anum);  //Picks
            TempSL."Posting Group" := FORMAT(ROUND(((100*Anum)/TNum),0.01,'='))+'%';
            TempSL."Unit of Measure" := FORMAT(Anum+Bnum); //A&B
            numVar += 1;
          END ELSE IF numVar = 2 THEN BEGIN
            TempSL."Sell-to Customer No." := 'B';
            TempSL."Work Type Code" := FORMAT(Bnum);  //Picks
            TempSL."Posting Group" := FORMAT(ROUND(((100*Bnum)/TNum),0.01,'='))+'%';
            TempSL."Unit of Measure" := FORMAT(ROUND((((100*Anum)/TNum)+((100*Bnum)/TNum)),0.01,'='))+'%'; //A&B
            numVar += 1;
          END ELSE IF numVar = 3 THEN BEGIN
            TempSL."Sell-to Customer No." := 'C';
            TempSL."Work Type Code" := FORMAT(Cnum);  //Picks
            TempSL."Posting Group" := FORMAT(ROUND(((100*Cnum)/TNum),0.01,'='))+'%';
            numVar += 1;
          END ELSE IF numVar = 4 THEN BEGIN
            TempSL."Sell-to Customer No." := 'D';
            TempSL."Work Type Code" := FORMAT(Dnum);  //Picks
            TempSL."Posting Group" := FORMAT(ROUND(((100*Dnum)/TNum),0.01,'='))+'%';
            numVar += 1;
          END ELSE IF numVar = 5 THEN BEGIN
            TempSL."Sell-to Customer No." := 'E';
            TempSL."Work Type Code" := FORMAT(Enum);  //Picks
            TempSL."Posting Group" := FORMAT(ROUND(((100*Enum)/TNum),0.01,'='))+'%';
            numVar += 1;
          END ELSE IF numVar = 6 THEN BEGIN
            TempSL."Sell-to Customer No." := 'F';
            TempSL."Work Type Code" := FORMAT(Fnum);  //Picks
            TempSL."Posting Group" := FORMAT(ROUND(((100*Fnum)/TNum),0.01,'='))+'%';
            numVar += 1;
          END ELSE IF numVar = 7 THEN BEGIN
            TempSL."Sell-to Customer No." := 'G';
            TempSL."Work Type Code" := FORMAT(Gnum);  //Picks
            TempSL."Posting Group" := FORMAT(ROUND(((100*Gnum)/TNum),0.01,'='))+'%';
            numVar += 1;
          END ELSE IF numVar = 8 THEN BEGIN
            TempSL."Sell-to Customer No." := 'H';
            TempSL."Work Type Code" := FORMAT(Hnum);  //Picks
            TempSL."Posting Group" := FORMAT(ROUND(((100*Hnum)/TNum),0.01,'='))+'%';
            numVar += 1;
          END ELSE IF numVar = 9 THEN BEGIN
            TempSL."Sell-to Customer No." := '';
            TempSL."Work Type Code" := FORMAT(TNum);  //Picks
            TempSL."Posting Group" := '';
            numVar += 1;
          END ELSE BEGIN
            TempSL."Sell-to Customer No." := '';
            TempSL."Work Type Code" := '';  //Picks
            TempSL."Posting Group" := '';
          END;
          TempSL.MODIFY
        UNTIL TempSL.NEXT = 0;

            {
            Bnum := 1;
            TempSL1.INIT;
            TempSL1."Document No." := TempSL."Document No.";
            TempSL1."Line No." := numVar;
            numVar += 10000;
            IF (LevelVar = '') THEN BEGIN
              TempSL1."Bin Code" := TempSL."Sell-to Customer No.";
              Anum := TempSL1."Line No."
              TempSL1.Quantity := Bnum;
            END ELSE IF (LevelVar <> TempSL."Sell-to Customer No.") THEN BEGIN
              Bnum := 1;
              TempSL1.RESET;
              TempSL1.SETRANGE("Line No.",Anum+10000);
              IF TempSL1.FINDFIRST THEN
                TempSL1."Sell-to Customer No." := TempSL."Sell-to Customer No.";
              TempSL1."Bin Code" := TempSL."Sell-to Customer No.";
              Anum := TempSL1."Line No."
              TempSL1.Quantity := Bnum;
            END ELSE BEGIN
            END;
              TempSL1."Bin Code" := TempSL."Sell-to Customer No.";
              IF TempSL1."Sell-to Customer No." = 'A' THEN

              ELSE IF TempSL1."Sell-to Customer No." = 'B' THEN
                Bnum := TempSL1."Line No."
              ELSE IF TempSL1."Sell-to Customer No." = 'C' THEN
                Cnum := TempSL1."Line No."
              ELSE IF TempSL1."Sell-to Customer No." = 'D' THEN
                Dnum := TempSL1."Line No."
              ELSE IF TempSL1."Sell-to Customer No." = 'E' THEN
                Enum := TempSL1."Line No."
              ELSE IF TempSL1."Sell-to Customer No." = 'F' THEN
                Fnum := TempSL1."Line No."
              ELSE IF TempSL1."Sell-to Customer No." = 'G' THEN
                Gnum := TempSL1."Line No."
              ELSE IF TempSL1."Sell-to Customer No." = 'H' THEN
                Hnum := TempSL1."Line No.";
            END ELSE BEGIN
              IF TempSL."Bin Code" = 'H';
            END;
            TempSL1.Quantity += 1;

          UNTIL TempSL.NEXT = 0;
      }
        PAGE.RUN(51707,TempSL);
      END;
    END;

    LOCAL PROCEDURE UpdatePurchaseReceipt@1000000017();
    VAR
      PurchRcptLine@1000000000 : Record 121;
      PurchRcptHeader@1000000001 : Record 120;
      PurchaseLine@1000000002 : Record 39;
    BEGIN
      {PurchaseLine.RESET;
      PurchaseLine.SETRANGE("document No.",'PO1025620','PO1025622');
      PurchaseLine.SETRANGE("Inbound Container Number",'BEAU4936030');
      IF PurchaseLine.FINDFIRST THEN
        PurchaseLine.MODIFYALL("Inbound Container Number",'BEAU4935030');
      PurchRcptLine.RESET;
      PurchRcptLine.SETRANGE("Order No.",'PO1025620','PO1025622');
      PurchRcptLine.SETRANGE("Inbound Container Number",'BEAU4936030');
      IF PurchRcptLine.FINDFIRST THEN
        PurchRcptLine.MODIFYALL("Inbound Container Number",'BEAU4935030');

      PurchRcptHeader.SETRANGE("Order No.",'PO1025620','PO1025622');
      PurchRcptHeader.SETRANGE("Inbound asn Number",'BEAU4936030');
      if PurchRcptHeader.FINDFIRST THEN REPEAT
        PurchRcptHeader."Inbound ASN Number" := 'BEAU4935030';
        PurchRcptHeader."Inbound Container Number" := 'BEAU4935030';
        PurchRcptHeader.MODIFY;
      UNTIL PurchRcptHeader.NEXT = 0;

      T5740.SETRANGE("No.",'TO1022169','TO1022170');//'TO1021400');
         IF T5740.FINDFIRST THEN
           //T5740.MODIFYALL("Inbound Container Number",'BEAU4935030');
           T5740.MODIFYALL("Inbound ASN Number",'BEAU4935030');
       T5741.SETRANGE("Transfer Order No.",'TO1022169','TO1022170');//'TO1021400');
         IF T5741.FINDFIRST THEN
           //T5741.MODIFYALL("Inbound Container Number",'BEAU4935030');
           T5741.MODIFYALL("Inbound ASN Number",'BEAU4935030');
      }
    END;

    LOCAL PROCEDURE DeleteDuplicateClose@1000000020();
    VAR
      WMDMPDAActivityEntry@1000000000 : Record 23044532;
      WMDMPDAActivityEntry1@1000000001 : Record 23044532;
      oneminute@1000000002 : Duration;
      CounterVar@1000000003 : Integer;
      Window@1000000004 : Dialog;
      CurrRec@1000000005 : Integer;
    BEGIN
      oneminute := 080000T - 080200T;
      Window.OPEN('Total Records#1####/Current Record#2#########/Deleting...@3@@@@@@@@');
      WMDMPDAActivityEntry.RESET;
      WMDMPDAActivityEntry.SETFILTER("Entry No.", '>=%1',21120577);
      WMDMPDAActivityEntry.SETRANGE(WMDMPDAActivityEntry."Event ID",971);
      //WMDMPDAActivityEntry.SETRANGE("Document No.",'WPU1348785');
      IF WMDMPDAActivityEntry.FINDFIRST THEN BEGIN
        CounterVar := WMDMPDAActivityEntry.COUNT;
        REPEAT
          IF WMDMPDAActivityEntry."Event Time" <> 0DT THEN BEGIN
          CurrRec += 1;
          Window.UPDATE(1,FORMAT(CounterVar-CurrRec));
          WMDMPDAActivityEntry1.RESET;
          WMDMPDAActivityEntry1.SETRANGE("Event ID",WMDMPDAActivityEntry."Event ID");
          WMDMPDAActivityEntry1.SETRANGE("Document No.",WMDMPDAActivityEntry."Document No.");
          WMDMPDAActivityEntry1.SETFILTER("Entry No.",'<>%1',WMDMPDAActivityEntry."Entry No.");
          WMDMPDAActivityEntry1.SETRANGE("Event Time",WMDMPDAActivityEntry."Event Time",WMDMPDAActivityEntry."Event Time"-oneminute);
          IF WMDMPDAActivityEntry1.FINDFIRST THEN BEGIN

            Window.UPDATE(2,FORMAT(WMDMPDAActivityEntry1."Entry No."));
            WMDMPDAActivityEntry1.DELETE;
          END;
          Window.UPDATE(3,(CurrRec/CounterVar * 10000) DIV 1);
            //CounterVar += 1;
            //MESSAGE(FORMAT(WMDMPDAActivityEntry1."Entry No."));
          END;
        UNTIL WMDMPDAActivityEntry.NEXT = 0;

      END;
      Window.CLOSE;
      MESSAGE(FORMAT(CounterVar));
    END;

    LOCAL PROCEDURE ExtractSalesPriceBuy2020@1000000024();
    VAR
      SalesPrice@1000000000 : Record 7002;
      PSSLine@1000000001 : Record 111;
      RowNo@1000000002 : Integer;
      ItemLoc@1000000003 : Record 27;
      CountVar@1000000004 : Integer;
      CurrRec@1000000005 : Integer;
      Window@1000000006 : Dialog;
      CustLoc@1000000007 : Record 18;
    BEGIN
      SalesPrice.RESET;
      SalesPrice.SETRANGE("Sales Type",SalesPrice."Sales Type"::Customer);
      SalesPrice.SETFILTER("Item No.",'<>%1','');
      IF SalesPrice.FINDFIRST THEN BEGIN
        EnterCell(1,1,'Item No.',TRUE,'',1);
        EnterCell(1,2,'Customer No.',TRUE,'',1);
        EnterCell(1,3,'Customer Name',TRUE,'',1);
        EnterCell(1,4,'Unit of Measure Code',TRUE,'',1);
        EnterCell(1,5,'Average Unit Cost',TRUE,'',1);
        EnterCell(1,6,'Unit Price',TRUE,'',1);
        EnterCell(1,7,'Margin',TRUE,'',1);
        RowNo := 2;
        CountVar := SalesPrice.COUNT;
        Window.OPEN('Total Records#1####################### Extracting @2@@@@@@@@@@@@@@@@@@@');
        REPEAT
          CurrRec += 1;
          Window.UPDATE(1,CountVar);
          Window.UPDATE(2,(CurrRec/CountVar*10000) DIV 1);
          PSSLine.RESET;
          PSSLine.SETCURRENTKEY(Type,"No.","Variant Code","Location Code","Shipment Date");
          PSSLine.SETRANGE(Type,PSSLine.Type::Item);
          PSSLine.SETRANGE("No.",SalesPrice."Item No.");
          PSSLine.SETRANGE("Shipment Date",010120D,TODAY);
          PSSLine.SETRANGE("Sell-to Customer No.",SalesPrice."Sales Code");
          IF PSSLine.FINDFIRST THEN BEGIN //EXPORTDATA toexcel;
            IF ItemLoc.GET(SalesPrice."Item No.") THEN;
            IF CustLoc.GET(SalesPrice."Sales Code") THEN;
            EnterCell(RowNo,1,SalesPrice."Item No.",FALSE,'@',1);
            EnterCell(RowNo,2,SalesPrice."Sales Code",FALSE,'@',1);
            EnterCell(RowNo,3,CustLoc.Name,FALSE,'@',1);
            EnterCell(RowNo,4,SalesPrice."Unit of Measure Code",FALSE,'@',1);
            EnterCell(RowNo,5,FORMAT(ItemLoc."Average Unit Cost"),FALSE,'0.00',0);
            EnterCell(RowNo,6,FORMAT(SalesPrice."Unit Price"),FALSE,'0.00',0);

            IF SalesPrice."Unit Price" <> 0 THEN
              EnterCell(RowNo,7,FORMAT((SalesPrice."Unit Price" - ItemLoc."Average Unit Cost")/SalesPrice."Unit Price"),FALSE,'0.00',0)
            ELSE
              EnterCell(RowNo,7,'',FALSE,'0.00',0);
            RowNo += 1;
          END;
        UNTIL SalesPrice.NEXT = 0;
      END;
      Window.CLOSE;
      ExporttoExcel;
    END;

    LOCAL PROCEDURE ExtractSalesPricenotBuy2020@1000000025();
    VAR
      SalesPrice@1000000000 : Record 7002;
      PSSLine@1000000001 : Record 111;
      RowNo@1000000002 : Integer;
      ItemLoc@1000000003 : Record 27;
      CountVar@1000000004 : Integer;
      CurrRec@1000000005 : Integer;
      Window@1000000006 : Dialog;
      CustLoc@1000000007 : Record 18;
    BEGIN
      SalesPrice.RESET;
      SalesPrice.SETRANGE("Sales Type",SalesPrice."Sales Type"::Customer);
      SalesPrice.SETFILTER("Item No.",'<>%1','');
      IF SalesPrice.FINDFIRST THEN BEGIN
        EnterCell(1,1,'Item No.',TRUE,'',1);
        EnterCell(1,2,'Customer No.',TRUE,'',1);
        EnterCell(1,3,'Customer Name',TRUE,'',1);
        EnterCell(1,4,'Unit of Measure Code',TRUE,'',1);
        EnterCell(1,5,'Average Unit Cost',TRUE,'',1);
        EnterCell(1,6,'Unit Price',TRUE,'',1);
        EnterCell(1,7,'Margin',TRUE,'',1);
        RowNo := 2;
        CountVar := SalesPrice.COUNT;
        Window.OPEN('Total Records#1####################### Extracting @2@@@@@@@@@@@@@@@@@@@');
        REPEAT
          CurrRec += 1;
          Window.UPDATE(1,CountVar);
          Window.UPDATE(2,(CurrRec/CountVar*10000) DIV 1);
          PSSLine.RESET;
          PSSLine.SETCURRENTKEY(Type,"No.","Variant Code","Location Code","Shipment Date");
          PSSLine.SETRANGE(Type,PSSLine.Type::Item);
          PSSLine.SETRANGE("No.",SalesPrice."Item No.");
          PSSLine.SETRANGE("Shipment Date",010120D,TODAY);
          PSSLine.SETRANGE("Sell-to Customer No.",SalesPrice."Sales Code");
          IF NOT PSSLine.FINDFIRST THEN BEGIN //EXPORTDATA toexcel;
            IF ItemLoc.GET(SalesPrice."Item No.") THEN;
            IF CustLoc.GET(SalesPrice."Sales Code") THEN;
            EnterCell(RowNo,1,SalesPrice."Item No.",FALSE,'@',1);
            EnterCell(RowNo,2,SalesPrice."Sales Code",FALSE,'@',1);
            EnterCell(RowNo,3,CustLoc.Name,FALSE,'@',1);
            EnterCell(RowNo,4,SalesPrice."Unit of Measure Code",FALSE,'@',1);
            EnterCell(RowNo,5,FORMAT(ItemLoc."Average Unit Cost"),FALSE,'0.00',0);
            EnterCell(RowNo,6,FORMAT(SalesPrice."Unit Price"),FALSE,'0.00',0);

            IF SalesPrice."Unit Price" <> 0 THEN
              EnterCell(RowNo,7,FORMAT((SalesPrice."Unit Price" - ItemLoc."Average Unit Cost")/SalesPrice."Unit Price"),FALSE,'0.00',0)
            ELSE
              EnterCell(RowNo,7,'',FALSE,'0.00',0);
            RowNo += 1;
          END;
        UNTIL SalesPrice.NEXT = 0;
      END;
      Window.CLOSE;
      ExporttoExcel;
    END;

    LOCAL PROCEDURE ExtractSalesPriceold@1000000019();
    VAR
      SalesPrice@1000000000 : Record 7002;
      PSSLine@1000000001 : Record 111;
      RowNo@1000000002 : Integer;
      ItemLoc@1000000003 : Record 27;
      CountVar@1000000004 : Integer;
      CurrRec@1000000005 : Integer;
      Window@1000000006 : Dialog;
      CustLoc@1000000007 : Record 18;
      SalesPriceR@1000000008 : Record 7002;
      idn@1000000009 : Integer;
      ItemNoVar@1000000010 : Code[20];
      customer@1000000011 : Record 18;
      CustomerPriceGroup@1000000012 : Record 6;
      SalesCodeVar@1000000013 : Code[20];
    BEGIN
      SalesPrice.RESET;
      SalesPrice.SETCURRENTKEY("Sales Type","Sales Code","Item No.","Starting Date","Currency Code","Variant Code","Unit of Measure Code","Minimum Quantity");
      //SalesPrice.SETRANGE("Sales Type",SalesPrice."Sales Type"::"Customer Price Group" );
      SalesPrice.SETRANGE("Sales Type",SalesPrice."Sales Type"::Customer);
      //SalesPrice.SETFILTER("Sales Code",'%1|%2','A-IL-CASEY','USESI');
      //SalesPrice.SETRANGE("Item No.",'631S');
      //SalesPrice.SETRANGE("Modified Date",012421D,TODAY);
      SalesPrice.SETFILTER("Item No.",'<>%1','');
      IF SalesPrice.FINDFIRST THEN BEGIN
        EnterCell(1,1,'Item No.',TRUE,'',1);
        EnterCell(1,2,'Customer No.',TRUE,'',1);
       /// EnterCell(1,2,'Customer Price Group Code',TRUE,'',1);
        EnterCell(1,3,'Customer Name',TRUE,'',1);
        //EnterCell(1,3,'Customer Price Group Description',TRUE,'',1);
        EnterCell(1,4,'Sales Type',TRUE,'',1);
        EnterCell(1,5,'Unit of Measure Code',TRUE,'',1);
        EnterCell(1,6,'Strting Dte',TRUE,'',1);
        EnterCell(1,7,'Ending Date',TRUE,'',1);
        EnterCell(1,8,'Unit Price',TRUE,'',1);
        RowNo := 2;
        CountVar := SalesPrice.COUNT;
        Window.OPEN('Total Records#1####################### Extracting @2@@@@@@@@@@@@@@@@@@@');
         //idn := 1;
        REPEAT
          CurrRec += 1;
         // IF (ItemNoVar <> SalesPrice."Item No.") AND (SalesCodeVar <> SalesPrice."Sales Code") THEN idn := 1;
          Window.UPDATE(1,CountVar);
          Window.UPDATE(2,(CurrRec/CountVar*10000) DIV 1);
          customer.RESET;
          IF customer.GET(SalesPrice."Sales Code") THEN;
         // CustomerPriceGroup.RESET;
          //IF CustomerPriceGroup.GET(SalesPrice."Sales Code") THEN;
          SalesPriceR.RESET;
          SalesPriceR.SETRANGE("Sales Type",SalesPrice."Sales Type");
          SalesPriceR.SETRANGE("Sales Code",SalesPrice."Sales Code");
          SalesPriceR.SETRANGE("Item No.",SalesPrice."Item No.");
         // SalesPriceR.SETRANGE("Starting Date",SalesPrice."Starting Date");
        //  IF SalesPriceR.FINDFIRST THEN BEGIN //EXPORTDATA toexcel;
            IF (SalesPriceR.COUNT > 1) THEN BEGIN//AND (idn = 1) THEN //BEGIN
              //REPEAT
              //IF ItemLoc.GET(SalesPrice."Item No.") THEN;
              //IF CustLoc.GET(SalesPrice."Sales Code") THEN;
              EnterCell(RowNo,1,SalesPrice."Item No.",FALSE,'@',1);
              EnterCell(RowNo,2,SalesPrice."Sales Code",FALSE,'@',1);
             // EnterCell(RowNo,3,CustomerPriceGroup.Description,FALSE,'@',1);
              EnterCell(RowNo,3,customer.Name,FALSE,'@',1);
              EnterCell(RowNo,4,FORMAT(SalesPrice."Sales Type"),FALSE,'@',1);
              EnterCell(RowNo,5,SalesPrice."Unit of Measure Code",FALSE,'@',1);
              EnterCell(RowNo,6,FORMAT(SalesPrice."Starting Date"),FALSE,'0.00',0);
              EnterCell(RowNo,7,FORMAT(SalesPrice."Ending Date"),FALSE,'0.00',0);
              EnterCell(RowNo,8,FORMAT(SalesPrice."Unit Price"),FALSE,'0.00',0);
              RowNo += 1;
           // END;
             { EnterCell(RowNo,1,SalesPriceR."Item No.",TRUE,'@',1);
              EnterCell(RowNo,2,SalesPriceR."Sales Code",TRUE,'@',1);
              EnterCell(RowNo,3,CustomerPriceGroup.Description,TRUE,'@',1);
              EnterCell(RowNo,4,FORMAT(SalesPriceR."Sales Type"),TRUE,'@',1);
              EnterCell(RowNo,5,SalesPriceR."Unit of Measure Code",TRUE,'@',1);
              EnterCell(RowNo,6,FORMAT(SalesPriceR."Starting Date"),TRUE,'0.00',0);
              EnterCell(RowNo,7,FORMAT(SalesPriceR."Ending Date"),TRUE,'0.00',0);
              EnterCell(RowNo,8,FORMAT(SalesPriceR."Unit Price"),TRUE,'0.00',0);
              RowNo += 1;}
              //idn+=1;
            //  UNTIL SalesPriceR.NEXT = 0;
           END;
          //END;
         // ItemNoVar := SalesPrice."Item No.";
         // SalesCodeVar := SalesPrice."Sales Code";
        UNTIL SalesPrice.NEXT = 0;
      END;
      Window.CLOSE;
      ExporttoExcel;
    END;

    LOCAL PROCEDURE ExtractSalesPrice@1000000021();
    VAR
      SalesPrice@1000000000 : Record 7002;
      PSSLine@1000000001 : Record 111;
      RowNo@1000000002 : Integer;
      ItemLoc@1000000003 : Record 27;
      CountVar@1000000004 : Integer;
      CurrRec@1000000005 : Integer;
      Window@1000000006 : Dialog;
      CustLoc@1000000007 : Record 18;
      SalesPriceR@1000000008 : Record 7002;
      idn@1000000009 : Integer;
      ItemNoVar@1000000010 : Code[20];
      customer@1000000011 : Record 18;
      CustomerPriceGroup@1000000012 : Record 6;
      SalesCodeVar@1000000013 : Code[20];
    BEGIN
      SalesPrice.RESET;
      SalesPrice.SETCURRENTKEY("Sales Type","Sales Code","Item No.","Starting Date","Currency Code","Variant Code","Unit of Measure Code","Minimum Quantity");
      //SalesPrice.SETRANGE("Sales Type",SalesPrice."Sales Type"::"Customer Price Group" );
      SalesPrice.SETRANGE("Sales Type",SalesPrice."Sales Type"::Customer);
      //SalesPrice.SETFILTER("Sales Code",'%1|%2','A-IL-CASEY','USESI');
      //SalesPrice.SETRANGE("Item No.",'631S');
      //SalesPrice.SETRANGE("Modified Date",042421D,TODAY);
      SalesPrice.SETFILTER("Item No.",'<>%1','');
      IF SalesPrice.FINDFIRST THEN BEGIN
        EnterCell(1,1,'Item No.',TRUE,'',1);
        EnterCell(1,2,'Customer No.',TRUE,'',1);
       /// EnterCell(1,2,'Customer Price Group Code',TRUE,'',1);
        EnterCell(1,3,'Customer Name',TRUE,'',1);
        //EnterCell(1,3,'Customer Price Group Description',TRUE,'',1);
        EnterCell(1,4,'Sales Type',TRUE,'',1);
        EnterCell(1,5,'Unit of Measure Code',TRUE,'',1);
        EnterCell(1,6,'Strting Dte',TRUE,'',1);
        EnterCell(1,7,'Ending Date',TRUE,'',1);
        EnterCell(1,8,'Unit Price',TRUE,'',1);
        RowNo := 2;
        CountVar := SalesPrice.COUNT;
        Window.OPEN('Total Records#1####################### Extracting @2@@@@@@@@@@@@@@@@@@@');
         //idn := 1;
        REPEAT
          CurrRec += 1;
         // IF (ItemNoVar <> SalesPrice."Item No.") AND (SalesCodeVar <> SalesPrice."Sales Code") THEN idn := 1;
          Window.UPDATE(1,CountVar);
          Window.UPDATE(2,(CurrRec/CountVar*10000) DIV 1);
          customer.RESET;
          IF customer.GET(SalesPrice."Sales Code") THEN;
          SalesPriceR.RESET;
          SalesPriceR.SETRANGE("Sales Type",SalesPrice."Sales Type");
          SalesPriceR.SETRANGE("Sales Code",SalesPrice."Sales Code");
          SalesPriceR.SETRANGE("Item No.",SalesPrice."Item No.");
            IF (SalesPriceR.COUNT > 1) THEN BEGIN//AND (idn = 1) THEN //BEGIN
              EnterCell(RowNo,1,SalesPrice."Item No.",FALSE,'@',1);
              EnterCell(RowNo,2,SalesPrice."Sales Code",FALSE,'@',1);
              EnterCell(RowNo,3,customer.Name,FALSE,'@',1);
              EnterCell(RowNo,4,FORMAT(SalesPrice."Sales Type"),FALSE,'@',1);
              EnterCell(RowNo,5,SalesPrice."Unit of Measure Code",FALSE,'@',1);
              EnterCell(RowNo,6,FORMAT(SalesPrice."Starting Date"),FALSE,'0.00',0);
              EnterCell(RowNo,7,FORMAT(SalesPrice."Ending Date"),FALSE,'0.00',0);
              EnterCell(RowNo,8,FORMAT(SalesPrice."Unit Price"),FALSE,'0.00',0);
              RowNo += 1;
           END;
        UNTIL SalesPrice.NEXT = 0;
      END;
      Window.CLOSE;
      ExporttoExcel;
    END;

    LOCAL PROCEDURE OpenEmail@1000000016();
    VAR
      Mail@1000000000 : Codeunit 397;
    BEGIN
      CLEAR(Mail);
      IF Mail.TryInitializeOutlook THEN
        Mail.NewMessage('pankaj.shukla@topaz-usa.com','','','Test Email','Bosy Test','',TRUE);
    END;

    LOCAL PROCEDURE OpenwithMultipleFile@1170000001();
    VAR
      OutlookApp@1170000000 : Automation "{00062FFF-0000-0000-C000-000000000046} 9.6:{0006F03A-0000-0000-C000-000000000046}:Unknown Automation Server.Unknown Class";
      OutlookEmail@1170000001 : Automation "{00062FFF-0000-0000-C000-000000000046} 9.6:{00061033-0000-0000-C000-000000000046}:Unknown Automation Server.Unknown Class";
    BEGIN
      IF ISCLEAR(OutlookApp) THEN
      CREATE(OutlookApp,TRUE,TRUE);

      OutlookEmail:= OutlookApp.CreateItem(0);
      OutlookEmail."To" := 'pankaj.shukla@topaz-usa.com';
      OutlookEmail.Subject:='Subject';

      OutlookEmail.Body := 'Body';

      OutlookEmail.Attachments.Add('\\NYVSVNAVNSTTST4\Combine Report\Drop Ship Ship.pdf');
      OutlookEmail.Attachments.Add('\\NYVSVNAVNSTTST4\Combine Report\Sales Order Packing List.pdf');

      //IF OpenDialog THEN
      OutlookEmail.Display
      //ELSE
      //OutlookEmail.Send;
    END;

    LOCAL PROCEDURE UpdateItemAttributes@1170000002();
    VAR
      ItemAttributeValueMapping@1170000000 : Record 7505;
      ItemLoc@1170000001 : Record 27;
      InventoryStatusReport@1170000002 : Codeunit 51992;
    BEGIN
      //ItemLoc.SETRANGE("No.",'556646');
      ItemLoc.RESET;
      {ItemLoc.SETRANGE("No.",'53A19/HAL/CL-42');
      ItemLoc.SETRANGE(Blocked,FALSE);
      ItemLoc.SETRANGE("Manufacturer Code",'TOPAZ');
      ItemLoc.SETFILTER("Shortcut Dimension 5 Code",'%1|%2|%3','E','L','P');
      }
      ItemLoc.SETRANGE("ABC Code",'OB');
      IF ItemLoc.FINDFIRST THEN
        REPEAT
          //IF InventoryStatusReport.AllowtoExport(ItemLoc) THEN BEGIN
            CLEAR(ItemAttributeValueMapping);
            ItemAttributeValueMapping.SETRANGE("Table ID",DATABASE::Item);
            ItemAttributeValueMapping.SETRANGE("No.",ItemLoc."No.");
            ItemAttributeValueMapping.SETRANGE("Item Attribute ID",1059);
            //ItemAttributeValueMapping.SETRANGE("Item Attribute Value ID",1078);
            IF NOT ItemAttributeValueMapping.FINDFIRST THEN BEGIN
              ItemAttributeValueMapping.INIT;
              ItemAttributeValueMapping."Table ID" := 27;
              ItemAttributeValueMapping."No." := ItemLoc."No.";
              ItemAttributeValueMapping."Item Attribute ID" := 1059;
              ItemAttributeValueMapping."Item Attribute Value ID" := 1078;
              ItemAttributeValueMapping.INSERT;
            END ELSE BEGIN
              ItemAttributeValueMapping."Item Attribute Value ID" := 1078;
              ItemAttributeValueMapping.MODIFY;
            END;
          //END;
        UNTIL ItemLoc.NEXT = 0;
    END;

    LOCAL PROCEDURE ImportExcelFile@1000000022();
    VAR
      ExcelBuff@1000000006 : TEMPORARY Record 370;
      Window@1000000005 : Dialog;
      ServerFileName@1000000004 : Text;
      SheetName@1000000003 : Text[250];
      RecNo@1000000002 : Integer;
      TotalRecNo@1000000001 : Integer;
      RowNo@1000000000 : Integer;
      FileMgt@1000000007 : Codeunit 419;
      Text51000@1000000010 : TextConst 'ENU=Import Excel File;ESM=Importar fich. Excel;FRC=Importer fichier Excel;ENC=Import Excel File';
      Text51001@1000000009 : TextConst 'ENU=Importing Data...\\;ESM=Analizar Datos...\\;FRC=Analyse des donn‚es...\\;ENC=Analysing Data...\\';
      ExcelExtensionTok@1000000008 : TextConst '@@@={Locked};ENU=.xlsx;ESM=.xlsx;FRC=.xlsx;ENC=.xlsx';
      IntegerRec@1000000011 : Record 2000000026;
      ColText@1000000012 : ARRAY [40] OF Text[250];
      ItemRec@1000000013 : Record 27;
      SalesPrice@1000000014 : Record 7002;
      Itemno@1000000015 : Code[20];
      CPG@1000000016 : Code[20];
      CustNo@1000000017 : Code[20];
      unitprice@1000000018 : Decimal;
    BEGIN
      ServerFileName := FileMgt.UploadFile(Text51000,ExcelExtensionTok);
      IF ServerFileName = '' THEN
        EXIT;

      SheetName := ExcelBuff.SelectSheetsName(ServerFileName);
      IF SheetName = '' THEN
        EXIT;
      ExcelBuff.LOCKTABLE;
      ExcelBuff.OpenBook(ServerFileName,SheetName);
      ExcelBuff.ReadSheet;

      Window.OPEN(Text51000 + '@1@@@@@@@@@@@@@@@@@@@@@@@@@\');
      TotalRecNo := ExcelBuff.COUNT;
      IntegerRec.RESET;
      IntegerRec.SETRANGE(Number,2,TotalRecNo);
      REPEAT
        CLEAR(ColText);
        ExcelBuff.SETRANGE("Row No.",IntegerRec.Number);
        IF ExcelBuff.FIND('-') THEN
          REPEAT
            ColText[ExcelBuff."Column No."] := ExcelBuff."Cell Value as Text";
          UNTIL ExcelBuff.NEXT = 0;
          UpdateItemABC(ColText[1],ColText[12]);
      UNTIL IntegerRec.NEXT = 0;
      ExcelBuff.DELETEALL;
    END;

    LOCAL PROCEDURE UpdateItemABC@1000000023(ItemNoPara@1000000003 : Code[20];ABCCodePara@1000000000 : Code[10]);
    VAR
      ItemRec@1000000001 : Record 27;
      DateFilterCalc@1000000004 : Codeunit 358;
      Now@1000000002 : DateTime;
    BEGIN
      IF ItemNoPara = '' THEN EXIT;
      IF ItemRec.GET(ItemNoPara) THEN BEGIN
        ItemRec.VALIDATE("ABC Code" , ABCCodePara);
        //Modify Trigger
        Now := DateFilterCalc.ConvertToUtcDateTime(CURRENTDATETIME);
        ItemRec."Last Date Modified" := DT2DATE(Now);
        ItemRec."Last Time Modified" := DT2TIME(Now);
        ItemRec.MODIFY;
      END;
    END;

    LOCAL PROCEDURE UpdateCreatedDateContact@1000000026();
    VAR
      Cont@1000000000 : Record 5050;
      ChangeLog@1000000001 : Record 405;
      ContactFeederEntry@1000000002 : Record 50019;
      ChangeLog1@1000000004 : Record 405;
      ContactBuffer@1000000003 : Record 50063;
      ChangeLog2@1000000005 : Record 405;
    BEGIN
      //--Update Created date and created by
      {Cont.RESET;
      IF Cont.FINDFIRST THEN
        //MESSAGE(FORMat(Cont.COUNT));
        //EXIT;
        REPEAT
          ChangeLog.RESET;
          ChangeLog.SETRANGE("Table No.",5050);
          ChangeLog.SETRANGE("Field No.",1);
          ChangeLog.SETRANGE("Primary Key Field 1 Value",Cont."No.");
          ChangeLog.SETRANGE("Type of Change",ChangeLog."Type of Change"::Insertion);
          IF ChangeLog.FINDFIRST THEN BEGIN
            Cont."Date Created" := DT2DATE(ChangeLog."Date and Time");
            IF STRPOS(ChangeLog."User ID",'SA_NY_NST_NAVNST') = 0 then
              Cont."Created By" := ChangeLog."User ID";
            ContactFeederEntry.RESET;
            ContactFeederEntry.SETRANGE("Contact No.",Cont."No.");
            IF ContactFeederEntry.FINDFIRST THEN
              Cont."Created By" := ContactFeederEntry."User ID";
            Cont.MODIFY;
          END ELSE BEGIN
            ContactFeederEntry.RESET;
            ContactFeederEntry.SETRANGE("Contact No.",Cont."No.");
            IF ContactFeederEntry.FINDFIRST THEN BEGIN
              Cont."Date Created" := ContactFeederEntry."Date Created";
              Cont."Created By" := ContactFeederEntry."User ID";
              Cont.MODIFY;
            END;
          END;
        UNTIL Cont.NEXT = 0;

      //---Update Prospects to Customer date
      Cont.RESET;
      IF Cont.FINDFIRST THEN
        REPEAT
          ChangeLog.RESET;
          ChangeLog.SETRANGE("Table No.",5050);
          ChangeLog.SETRANGE("Field No.",5051);
          ChangeLog.SETRANGE("Primary Key Field 1 Value",Cont."No.");
          ChangeLog.SETRANGE("Type of Change",ChangeLog."Type of Change"::Modification);
          ChangeLog.SETRANGE("Old Value",'');
          ChangeLog.SETFILTER("New Value",'<>%1','');
          IF ChangeLog.FINDFIRST THEN
            IF STRPOS(ChangeLog."User ID",'SA_NY_NST_NAVNST') = 0 THEN BEGIN
              Cont."Prospect Converted By" := ChangeLog."User ID";
              Cont."Prospect to Customer" := DT2DATE(ChangeLog."Date and Time");;
              Cont.MODIFY;
            END;
        UNTIL Cont.NEXT = 0;

      //--Update Delete contact log
      ChangeLog.RESET;
      ChangeLog.SETRANGE("Table No.",5050);
      ChangeLog.SETRANGE("Field No.",1);
      ChangeLog.SETRANGE("Type of Change",ChangeLog."Type of Change"::Deletion);
      IF ChangeLog.FINDFIRST THEN
        REPEAT
          ContactBuffer.INIT;
          ContactBuffer.Option := 'DELETECONTACT';
          ContactBuffer."Option Choice" := ChangeLog."Primary Key Field 1 Value";
          ContactBuffer.DefaultDate := DT2DATE(ChangeLog."Date and Time");
          ChangeLog1.RESET;
          ChangeLog1.SETRANGE("Table No.",5050);
          ChangeLog1.SETRANGE("Field No.",5051);
          ChangeLog1.SETRANGE("Primary Key Field 1 Value",ChangeLog."Primary Key Field 1 Value");
          IF ChangeLog1.FINDFIRST THEN
            ContactBuffer."DefaultCode 20" := ChangeLog1."Old Value";
          ChangeLog2.RESET;
          ChangeLog2.SETRANGE("Table No.",5067);
          ChangeLog2.SETRANGE("Field No.",2);
          ChangeLog2.SETRANGE("Primary Key Field 1 Value",ChangeLog."Primary Key Field 1 Value");
          IF ChangeLog2.FINDFIRST THEN
            ContactBuffer."DefaultCode 20_1" := ChangeLog2."Old Value"; //Job Responsibility
          ContactBuffer."User ID" := ChangeLog."User ID";
          IF ContactBuffer.INSERT THEN;
        UNTIL ChangeLog.NEXT = 0;

      }
      Cont.RESET;
      Cont.SETRANGE("Date Created",010121D,073021D);
      Cont.SETRANGE("Created By",'');
      IF Cont.FINDFIRST THEN
        REPEAT
          ContactFeederEntry.RESET;
          ContactFeederEntry.SETRANGE("Contact No.",Cont."No.");
          IF ContactFeederEntry.FINDFIRST THEN BEGIN
            Cont."Created By" := ContactFeederEntry."User ID";
          Cont.MODIFY;
          END;
        UNTIL Cont.NEXT = 0;
      {
      //--Update Edited contact log
      ChangeLog.RESET;
      ChangeLog.SETRANGE("Table No.",5050);
      //ChangeLog.SETRANGE("Field No.",1);
      ChangeLog.SETRANGE("Type of Change",ChangeLog."Type of Change"::Modification);
      IF ChangeLog.FINDFIRST THEN
        REPEAT
          IF NOT ContactBuffer.GET('EDITCONTACTS',ChangeLog."Primary Key Field 1 Value"+FORMAT(ChangeLog."Date and Time")) THEN BEGIN
      //    ContactBuffer.RESET;
      //    ContactBuffer.SETRANGE(Option,'EDITCONTACTS');
      //    //ContactBuffer.SETRANGE("DefaultText 30",FORMAT(ChangeLog."Date and Time"));
      //    IF NOT ContactBuffer.FINDFIRST THEN BEGIN
            ContactBuffer.INIT;
            ContactBuffer.Option := 'EDITCONTACTS';
            ContactBuffer."Option Choice" := ChangeLog."Primary Key Field 1 Value"+FORMAT(ChangeLog."Date and Time");
            ContactBuffer."DefaultCode 20_1" := ChangeLog."Primary Key Field 1 Value";
            ContactBuffer.DefaultDate := DT2DATE(ChangeLog."Date and Time");
            ContactBuffer."User ID" := ChangeLog."User ID";
            IF Cont.GET(ChangeLog."Primary Key Field 1 Value") THEN
              ContactBuffer."DefaultText 30" := FORMAT(Cont.Type);
            ContactBuffer."DefaultText 30_1" := 'Run Batch ' + FORMAT(TODAY);
            ContactBuffer.INSERT;
            numvar += 1;
          END;
        UNTIL ChangeLog.NEXT = 0;


      //Update Division Code in deleted contact buffer from change log.
      ContactBuffer.RESET;
      ContactBuffer.SETRANGE(Option,'EDITCONTACTS');
      IF ContactBuffer.FINDFIRST THEN
        REPEAT
          IF Cont.GET(ContactBuffer."DefaultCode 20_1") THEN BEGIN
            ContactBuffer."Division Code" := Cont."Shortcut Dimension 5 Code";
            ContactBuffer.MODIFY;
          END;
        UNTIL ContactBuffer.NEXT = 0;
      Cont.RESET;
      Cont.SETRANGE("Date Created",052821D);
      IF Cont.FINDFIRST THEN
        REPEAT
          IF Cont."Created By" = 'TOPAZ\UCHOUHAN' THEN
            Cont."Created By" := 'TOPAZ\KTORRES';
          IF Cont."Prospect Converted By" = 'TOPAZ\UCHOUHAN' THEN BEGIN
            Cont."Prospect Converted By" := '';
            Cont."Prospect to Customer" := 0D;
          END;
          Cont.MODIFY;
        UNTIL Cont.NEXT = 0;
      }
    END;

    LOCAL PROCEDURE DeleteDuplicateSalesPrice@1000000027();
    VAR
      SalesPrice@1000000000 : Record 7002;
      PSSLine@1000000001 : Record 111;
      RowNo@1000000002 : Integer;
      ItemLoc@1000000003 : Record 27;
      CountVar@1000000004 : Integer;
      CurrRec@1000000005 : Integer;
      Window@1000000006 : Dialog;
      CustLoc@1000000007 : Record 18;
      SalesPriceR@1000000008 : Record 7002;
      idn@1000000009 : Integer;
      ItemNoVar@1000000010 : Code[20];
      customer@1000000011 : Record 18;
      CustomerPriceGroup@1000000012 : Record 6;
      SalesCodeVar@1000000013 : Code[20];
    BEGIN
      SalesPrice.RESET;
      SalesPrice.SETCURRENTKEY("Sales Type","Sales Code","Item No.","Starting Date","Currency Code","Variant Code","Unit of Measure Code","Minimum Quantity");
      SalesPrice.ASCENDING(TRUE);
      //SalesPrice.SETRANGE("Sales Type",SalesPrice."Sales Type"::"Customer Price Group" );
      SalesPrice.SETRANGE("Sales Type",SalesPrice."Sales Type"::Customer);
      //SalesPrice.SETRANGE("Modified Date",042421D,TODAY);
      SalesPrice.SETFILTER("Item No.",'<>%1','');
      IF SalesPrice.FINDFIRST THEN BEGIN
        CountVar := SalesPrice.COUNT;
        Window.OPEN('Total Records#1####################### Deleting @2@@@@@@@@@@@@@@@@@@@');
        REPEAT
          CurrRec += 1;
          Window.UPDATE(1,CountVar);
          Window.UPDATE(2,(CurrRec/CountVar*10000) DIV 1);
          SalesPriceR.RESET;
          SalesPriceR.SETCURRENTKEY("Sales Type","Sales Code","Item No.","Starting Date","Currency Code","Variant Code","Unit of Measure Code","Minimum Quantity");
          SalesPriceR.ASCENDING(FALSE);
          SalesPriceR.SETRANGE("Sales Type",SalesPrice."Sales Type");
          SalesPriceR.SETRANGE("Sales Code",SalesPrice."Sales Code");
          SalesPriceR.SETRANGE("Item No.",SalesPrice."Item No.");
          SalesPriceR.SETFILTER("Unit Price",'<>%1',SalesPrice."Unit Price");
          IF SalesPriceR.FINDFIRST THEN BEGIN
            //IF SalesPriceR.COUNT > 1 THEN
            IF SalesPrice."Unit Price" > SalesPriceR."Unit Price" THEN BEGIN
              SalesPriceR."Reason Code Comment" := 'DELETE';
              SalesPriceR.MODIFY;
              //SalesPriceR.DELETE
            END ELSE BEGIN
              SalesPrice."Reason Code Comment" := 'DELETE';
              SalesPrice.MODIFY;
              //SalesPrice.DELETE;
            END;
          END;
        UNTIL SalesPrice.NEXT = 0;
      END;
      Window.CLOSE;
      //ExporttoExcel;
    END;

    LOCAL PROCEDURE ExportPostedInvoice@1000000028();
    VAR
      PSI@1000000000 : Record 112;
      RowNo@1000000001 : Integer;
    BEGIN
      PSI.RESET;
      PSI.SETRANGE("Posting Date",012521D,123121D);
      IF PSI.FINDFIRST THEN BEGIN
        EnterCell(1,1,'Invoice No.',TRUE,'',1);
        EnterCell(1,2,'Order No.',TRUE,'',1);
        EnterCell(1,3,'Posting Date',TRUE,'',1);
        EnterCell(1,4,'Due Date',TRUE,'',1);
        EnterCell(1,5,'Customer No.',TRUE,'',1);
        RowNo := 2;
          REPEAT
          IF PSI."Due Date" < PSI."Posting Date" THEN BEGIN
            EnterCell(RowNo,1,PSI."No.",FALSE,'@',1);
            EnterCell(RowNo,2,PSI."Order No.",FALSE,'@',1);
            EnterCell(RowNo,3,FORMAT(PSI."Posting Date"),FALSE,'',2);
            EnterCell(RowNo,4,FORMAT(PSI."Due Date"),FALSE,'',2);
            EnterCell(RowNo,5,PSI."Sell-to Customer No.",TRUE,'',1);
            RowNo += 1;
            END;
        UNTIL PSI.NEXT = 0;
      END;
      ExporttoExcel;
    END;

    LOCAL PROCEDURE CheckPostedDshipOrder@1000000029();
    VAR
      SalesInvoiceHeader@1000000000 : Record 36;
      SalesInvoiceLine@1000000002 : Record 37;
      ExcelBuffer@1000000001 : TEMPORARY Record 370;
      rowno@1000000003 : Integer;
      ColumnNo@1000000004 : Integer;
    BEGIN
      ExcelBuffer.DELETEALL; ColumnNo := 1;
      SalesInvoiceHeader.RESET;
      SalesInvoiceHeader.SETCURRENTKEY("Posting Date");
      SalesInvoiceHeader.SETRANGE("Posting Date",060821D);
      SalesInvoiceHeader.SETRANGE("Location Code",'25');
      SalesInvoiceHeader.SETRANGE("Shipping Payment Type",SalesInvoiceHeader."Shipping Payment Type"::Prepaid);
      SalesInvoiceHeader.SETRANGE("Free Freight",FALSE);
      SalesInvoiceHeader.SETRANGE("Shipping Agent Code",'UPS');
      IF SalesInvoiceHeader.FINDFIRST THEN REPEAT
        SalesInvoiceLine.RESET;
        SalesInvoiceLine.SETRANGE("Document No.",SalesInvoiceHeader."No.");
        SalesInvoiceLine.SETRANGE(Type,SalesInvoiceLine.Type::"G/L Account");
        SalesInvoiceLine.SETRANGE("No.",'411000');
        SalesInvoiceLine.SETRANGE(Quantity,1);
        //IF SalesInvoiceLine.FINDFIRST THEN
        IF SalesInvoiceLine.COUNT <> 1 THEN BEGIN
          rowno += 1;
          EnterCell(rowno,ColumnNo,SalesInvoiceHeader."No.",FALSE,'',1);
        END;
          //ERROR('Invoice No %1 with condition 2',SalesInvoiceHeader."No.");
      UNTIL SalesInvoiceHeader.NEXT = 0;
      SalesInvoiceHeader.RESET;
      SalesInvoiceHeader.SETCURRENTKEY("Posting Date");
      SalesInvoiceHeader.SETRANGE("Posting Date",TODAY);
      SalesInvoiceHeader.SETRANGE("Location Code",'25');
      SalesInvoiceHeader.SETRANGE("Shipping Payment Type",SalesInvoiceHeader."Shipping Payment Type"::Prepaid);
      SalesInvoiceHeader.SETRANGE("Free Freight",TRUE);
      SalesInvoiceHeader.SETRANGE("Shipping Agent Code",'UPS');
      IF SalesInvoiceHeader.FINDFIRST THEN REPEAT
        SalesInvoiceLine.RESET;
        SalesInvoiceLine.SETRANGE("Document No.",SalesInvoiceHeader."No.");
        SalesInvoiceLine.SETRANGE(Type,SalesInvoiceLine.Type::"G/L Account");
        SalesInvoiceLine.SETRANGE("No.",'411000');
        SalesInvoiceLine.SETRANGE(Quantity,1);
        //IF SalesInvoiceLine.FINDFIRST THEN
        IF (SalesInvoiceLine.COUNT MOD 2) <> 0 THEN BEGIN
          rowno += 1;
          EnterCell(rowno,ColumnNo,SalesInvoiceHeader."No.",FALSE,'',1);
        END;
          //ERROR('Invoice No %1 with condition 2',SalesInvoiceHeader."No.");
      UNTIL SalesInvoiceHeader.NEXT = 0;
      SalesInvoiceHeader.RESET;
      SalesInvoiceHeader.SETCURRENTKEY("Posting Date");
      SalesInvoiceHeader.SETRANGE("Posting Date",TODAY);
      SalesInvoiceHeader.SETRANGE("Location Code",'25');
      SalesInvoiceHeader.SETRANGE("Shipping Payment Type",SalesInvoiceHeader."Shipping Payment Type"::"Third Party");
      //SalesInvoiceHeader.SETRANGE("Free Freight",FALSE);
      SalesInvoiceHeader.SETRANGE("Shipping Agent Code",'UPS');
      IF SalesInvoiceHeader.FINDFIRST THEN REPEAT
        SalesInvoiceLine.RESET;
        SalesInvoiceLine.SETRANGE("Document No.",SalesInvoiceHeader."No.");
        SalesInvoiceLine.SETRANGE(Type,SalesInvoiceLine.Type::"G/L Account");
        SalesInvoiceLine.SETRANGE("No.",'411000');
        SalesInvoiceLine.SETRANGE(Quantity,1);
        //IF SalesInvoiceLine.FINDFIRST THEN
        IF SalesInvoiceLine.COUNT <> 0 THEN BEGIN
          rowno += 1;
          EnterCell(rowno,ColumnNo,SalesInvoiceHeader."No.",FALSE,'',1);
          //PAGE.RUN(0,ExcelBuffer);
      END;
          //ERROR('Invoice No %1 with condition 2',SalesInvoiceHeader."No.");
      UNTIL SalesInvoiceHeader.NEXT = 0;
      ExporttoExcel;
    END;

    BEGIN
    {

      PSHUKLA Please do not delete/Replace this CU, it is important batch CU
    }
    END.
  }
}

